package org.apache.commons.math3.fraction;;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3153");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.DurationField durationField6 = chronology3.centuries();
        org.joda.time.Chronology chronology7 = chronology3.withUTC();
        org.joda.time.DurationField durationField8 = chronology7.halfdays();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField12 = new org.joda.time.field.DividedDateTimeField(dateTimeField9, dateTimeFieldType10, 10);
        long long15 = dividedDateTimeField12.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval17 = null;
        org.joda.time.ReadableInterval readableInterval18 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval17);
        org.joda.time.Chronology chronology19 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval17);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfCentury();
        org.joda.time.DurationField durationField21 = chronology19.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField22 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType16, durationField21);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField23 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField12, dateTimeFieldType16);
        long long25 = remainderDateTimeField23.roundHalfFloor(3600000L);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval27 = null;
        org.joda.time.ReadableInterval readableInterval28 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval27);
        org.joda.time.Chronology chronology29 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval27);
        org.joda.time.DateTimeField dateTimeField30 = chronology29.yearOfCentury();
        org.joda.time.DurationField durationField31 = chronology29.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField32 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType26, durationField31);
        long long35 = unsupportedDateTimeField32.add((-31L), (long) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = unsupportedDateTimeField32.getType();
        org.joda.time.DurationFieldType durationFieldType37 = dateTimeFieldType36.getRangeDurationType();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField38 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField23, dateTimeFieldType36);
        org.joda.time.DurationField durationField39 = remainderDateTimeField23.iDurationField;
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField40 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField39);
        long long43 = unsupportedDateTimeField40.add(1701289161914L, 0);
        java.lang.String str44 = unsupportedDateTimeField40.toString();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField46 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long49 = durationField46.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long51 = durationField46.getValueAsLong((long) 10);
        int int53 = durationField46.getValue((long) (byte) 10);
        boolean boolean54 = partial45.equals((java.lang.Object) durationField46);
        org.joda.time.Chronology chronology55 = partial45.getChronology();
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        boolean boolean57 = partial45.isBefore((org.joda.time.ReadablePartial) partial56);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray58 = partial45.getFieldTypes();
        boolean boolean60 = partial45.equals((java.lang.Object) 1702281558665L);
        java.util.Locale locale62 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str63 = unsupportedDateTimeField40.getAsShortText((org.joda.time.ReadablePartial) partial45, (int) (short) 10, locale62);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfMonth field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-30610224000000L) + "'", long15 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(readableInterval18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(readableInterval28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 4L + "'", long35 == 4L);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField40);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1701289161914L + "'", long43 == 1701289161914L);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "UnsupportedDateTimeField" + "'", str44, "UnsupportedDateTimeField");
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10L + "'", long51 == 10L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2291");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = zonedChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField6 = zonedChronology4.monthOfYear();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField8 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long11 = durationField8.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long13 = durationField8.getValueAsLong((long) 10);
        int int15 = durationField8.getValue((long) (byte) 10);
        boolean boolean16 = partial7.equals((java.lang.Object) durationField8);
        org.joda.time.Chronology chronology17 = partial7.getChronology();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial7.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial7.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.ReadableInterval readableInterval22 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval21);
        long long23 = readableInterval22.getStartMillis();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.ReadableInterval readableInterval26 = null;
        boolean boolean27 = readableInterval25.contains(readableInterval26);
        org.joda.time.Duration duration28 = readableInterval25.toDuration();
        org.joda.time.DateTime dateTime29 = readableInterval25.getEnd();
        boolean boolean30 = readableInterval22.contains((org.joda.time.ReadableInstant) dateTime29);
        boolean boolean31 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime29);
        int[] intArray33 = zonedChronology4.get((org.joda.time.ReadablePartial) partial7, 60035L);
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval35 = null;
        org.joda.time.ReadableInterval readableInterval36 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval35);
        org.joda.time.Chronology chronology37 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval35);
        org.joda.time.DateTimeField dateTimeField38 = chronology37.yearOfCentury();
        boolean boolean39 = durationFieldType34.isSupported(chronology37);
        org.joda.time.DurationField durationField40 = chronology37.halfdays();
        org.joda.time.DateTimeField dateTimeField41 = chronology37.weekyearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField46 = new org.joda.time.field.OffsetDateTimeField(dateTimeField41, dateTimeFieldType42, 4, (int) ' ', (int) (short) -1);
        boolean boolean47 = partial7.isSupported(dateTimeFieldType42);
        int int48 = partial7.size();
        int[] intArray49 = partial7.getValues();
        org.joda.time.DurationFieldType durationFieldType50 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval51 = null;
        org.joda.time.ReadableInterval readableInterval52 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval51);
        org.joda.time.Chronology chronology53 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval51);
        org.joda.time.DateTimeField dateTimeField54 = chronology53.yearOfCentury();
        boolean boolean55 = durationFieldType50.isSupported(chronology53);
        org.joda.time.DurationField durationField56 = chronology53.halfdays();
        org.joda.time.DateTimeField dateTimeField57 = chronology53.weekyearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField62 = new org.joda.time.field.OffsetDateTimeField(dateTimeField57, dateTimeFieldType58, 4, (int) ' ', (int) (short) -1);
        boolean boolean63 = partial7.isSupported(dateTimeFieldType58);
        java.lang.String str64 = partial7.toString();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(readableInterval22);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1701289612522L + "'", long23 == 1701289612522L);
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertNotNull(readableInterval36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertNotNull(readableInterval52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[]" + "'", str64, "[]");
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1418");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        org.joda.time.DurationField durationField7 = unsupportedDateTimeField6.getDurationField();
        boolean boolean8 = unsupportedDateTimeField6.isLenient();
        java.lang.String str9 = unsupportedDateTimeField6.toString();
        org.joda.time.DurationField durationField10 = unsupportedDateTimeField6.getLeapDurationField();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField12 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long15 = durationField12.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long17 = durationField12.getValueAsLong((long) 10);
        int int19 = durationField12.getValue((long) (byte) 10);
        boolean boolean20 = partial11.equals((java.lang.Object) durationField12);
        org.joda.time.Chronology chronology21 = partial11.getChronology();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial11.isBefore((org.joda.time.ReadablePartial) partial22);
        org.joda.time.DateTimeField[] dateTimeFieldArray24 = partial22.getFields();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial22.plus(readablePeriod25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial22.minus(readablePeriod27);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = partial28.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval31 = null;
        org.joda.time.ReadableInterval readableInterval32 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval31);
        org.joda.time.Chronology chronology33 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval31);
        org.joda.time.DateTimeField dateTimeField34 = chronology33.yearOfCentury();
        org.joda.time.DurationField durationField35 = chronology33.millis();
        org.joda.time.DurationField durationField36 = chronology33.centuries();
        org.joda.time.ReadableInterval readableInterval37 = null;
        org.joda.time.ReadableInterval readableInterval38 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval37);
        org.joda.time.Chronology chronology39 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval37);
        org.joda.time.DateTimeField dateTimeField40 = chronology39.yearOfCentury();
        org.joda.time.DurationField durationField41 = chronology39.millis();
        org.joda.time.DateTimeField dateTimeField42 = chronology39.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval43 = null;
        org.joda.time.ReadableInterval readableInterval44 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval43);
        org.joda.time.Chronology chronology45 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval43);
        org.joda.time.DateTimeField dateTimeField46 = chronology45.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField47 = chronology45.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval48 = null;
        org.joda.time.ReadableInterval readableInterval49 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval48);
        org.joda.time.ReadableInterval readableInterval50 = null;
        boolean boolean51 = readableInterval49.contains(readableInterval50);
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.Period period53 = readableInterval49.toPeriod(periodType52);
        int[] intArray55 = chronology45.get((org.joda.time.ReadablePeriod) period53, (-210866846400000L));
        int[] intArray58 = chronology39.get((org.joda.time.ReadablePeriod) period53, 2173795348453L, (long) 1439);
        int[] intArray61 = chronology33.get((org.joda.time.ReadablePeriod) period53, 291L, 2580171L);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray63 = unsupportedDateTimeField6.addWrapField((org.joda.time.ReadablePartial) partial28, (int) (byte) 10, intArray61, (-190992));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UnsupportedDateTimeField" + "'", str9, "UnsupportedDateTimeField");
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray24);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertNotNull(readableInterval32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(readableInterval38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(readableInterval44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(readableInterval49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[0, 0, 0, 0, 0, 42, 59, 880]");
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0206");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add((-31L), (long) '#');
        org.joda.time.DurationField durationField10 = unsupportedDateTimeField6.getLeapDurationField();
        org.joda.time.chrono.ISOChronology iSOChronology11 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField12 = iSOChronology11.minutes();
        org.joda.time.DurationField durationField13 = iSOChronology11.months();
        long long18 = iSOChronology11.getDateTimeMillis(1, 1, (int) (byte) 1, (int) (short) 100);
        org.joda.time.DurationField durationField19 = iSOChronology11.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology20 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField21 = iSOChronology20.minutes();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology20.millisOfDay();
        org.joda.time.ReadableInterval readableInterval23 = null;
        org.joda.time.ReadableInterval readableInterval24 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval23);
        org.joda.time.Chronology chronology25 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval23);
        org.joda.time.DateTimeField dateTimeField26 = chronology25.yearOfCentury();
        org.joda.time.DurationField durationField27 = chronology25.millis();
        org.joda.time.DurationField durationField28 = chronology25.centuries();
        org.joda.time.ReadableInterval readableInterval29 = null;
        org.joda.time.ReadableInterval readableInterval30 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval29);
        org.joda.time.Chronology chronology31 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval29);
        org.joda.time.DateTimeField dateTimeField32 = chronology31.yearOfCentury();
        org.joda.time.DurationField durationField33 = chronology31.millis();
        org.joda.time.DateTimeField dateTimeField34 = chronology31.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval35 = null;
        org.joda.time.ReadableInterval readableInterval36 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval35);
        org.joda.time.Chronology chronology37 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval35);
        org.joda.time.DateTimeField dateTimeField38 = chronology37.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval40 = null;
        org.joda.time.ReadableInterval readableInterval41 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval40);
        org.joda.time.ReadableInterval readableInterval42 = null;
        boolean boolean43 = readableInterval41.contains(readableInterval42);
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Period period45 = readableInterval41.toPeriod(periodType44);
        int[] intArray47 = chronology37.get((org.joda.time.ReadablePeriod) period45, (-210866846400000L));
        int[] intArray50 = chronology31.get((org.joda.time.ReadablePeriod) period45, 2173795348453L, (long) 1439);
        int[] intArray53 = chronology25.get((org.joda.time.ReadablePeriod) period45, 291L, 2580171L);
        int[] intArray56 = iSOChronology20.get((org.joda.time.ReadablePeriod) period45, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField57 = iSOChronology20.months();
        java.lang.String str58 = iSOChronology20.toString();
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        boolean boolean60 = iSOChronology20.equals((java.lang.Object) partial59);
        long long62 = iSOChronology11.set((org.joda.time.ReadablePartial) partial59, (long) (short) 1);
        java.util.Locale locale63 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str64 = unsupportedDateTimeField6.getAsText((org.joda.time.ReadablePartial) partial59, locale63);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertNotNull(iSOChronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-62135568421900L) + "'", long18 == (-62135568421900L));
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(iSOChronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(readableInterval24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(readableInterval30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(readableInterval36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(readableInterval41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[0, 0, 0, 0, -58574124, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[969, 11, 4, 2, 23, 52, 58, 291]");
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "ISOChronology[America/Los_Angeles]" + "'", str58, "ISOChronology[America/Los_Angeles]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1L + "'", long62 == 1L);
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0047");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.getDifferenceAsLong((long) (short) 100, (-30610224000000L));
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone14 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology15 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone16 = gregorianChronology15.getZone();
        long long21 = gregorianChronology15.getDateTimeMillis((int) '4', 8, 24, 24);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField23 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long26 = durationField23.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long28 = durationField23.getValueAsLong((long) 10);
        int int30 = durationField23.getValue((long) (byte) 10);
        boolean boolean31 = partial22.equals((java.lang.Object) durationField23);
        org.joda.time.Chronology chronology32 = partial22.getChronology();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        boolean boolean34 = partial22.isBefore((org.joda.time.ReadablePartial) partial33);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray35 = partial22.getFieldTypes();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField37 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long40 = durationField37.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long42 = durationField37.getValueAsLong((long) 10);
        int int44 = durationField37.getValue((long) (byte) 10);
        boolean boolean45 = partial36.equals((java.lang.Object) durationField37);
        boolean boolean46 = partial22.equals((java.lang.Object) durationField37);
        int[] intArray48 = gregorianChronology15.get((org.joda.time.ReadablePartial) partial22, 0L);
        org.joda.time.ReadableInterval readableInterval50 = null;
        org.joda.time.ReadableInterval readableInterval51 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval50);
        org.joda.time.Chronology chronology52 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval50);
        org.joda.time.DateTimeField dateTimeField53 = chronology52.yearOfCentury();
        org.joda.time.DurationField durationField54 = chronology52.millis();
        org.joda.time.DateTimeField dateTimeField55 = chronology52.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval56 = null;
        org.joda.time.ReadableInterval readableInterval57 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval56);
        org.joda.time.Chronology chronology58 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval56);
        org.joda.time.DateTimeField dateTimeField59 = chronology58.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField60 = chronology58.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval61 = null;
        org.joda.time.ReadableInterval readableInterval62 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval61);
        org.joda.time.ReadableInterval readableInterval63 = null;
        boolean boolean64 = readableInterval62.contains(readableInterval63);
        org.joda.time.PeriodType periodType65 = null;
        org.joda.time.Period period66 = readableInterval62.toPeriod(periodType65);
        int[] intArray68 = chronology58.get((org.joda.time.ReadablePeriod) period66, (-210866846400000L));
        int[] intArray71 = chronology52.get((org.joda.time.ReadablePeriod) period66, 2173795348453L, (long) 1439);
        java.util.Locale locale73 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray74 = unsupportedDateTimeField6.set((org.joda.time.ReadablePartial) partial22, 10, intArray71, "[]", locale73);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 30610224000100L + "'", long9 == 30610224000100L);
        org.junit.Assert.assertNotNull(gregorianChronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-60505833599976L) + "'", long21 == (-60505833599976L));
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10L + "'", long28 == 10L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray35);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 10L + "'", long42 == 10L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertNotNull(readableInterval51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(readableInterval57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(readableInterval62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 0, 0, 0, -58574124, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-68, -10, -2, -4, -16, -2, -27, -14]");
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1743");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        org.joda.time.ReadablePartial readablePartial23 = null;
        java.util.Locale locale25 = null;
        java.lang.String str26 = dividedDateTimeField11.getAsShortText(readablePartial23, (int) ' ', locale25);
        java.util.Locale locale28 = null;
        java.lang.String str29 = dividedDateTimeField11.getAsShortText(969L, locale28);
        long long32 = dividedDateTimeField11.add(306607L, 53);
        org.joda.time.ReadablePartial readablePartial33 = null;
        org.joda.time.chrono.ISOChronology iSOChronology35 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField36 = iSOChronology35.minutes();
        org.joda.time.DateTimeField dateTimeField37 = iSOChronology35.millisOfDay();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology35.halfdayOfDay();
        org.joda.time.DurationField durationField39 = iSOChronology35.seconds();
        org.joda.time.DurationField durationField40 = iSOChronology35.days();
        org.joda.time.DateTimeField dateTimeField41 = iSOChronology35.dayOfYear();
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology35.hourOfHalfday();
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField44 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long47 = durationField44.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long49 = durationField44.getValueAsLong((long) 10);
        int int51 = durationField44.getValue((long) (byte) 10);
        boolean boolean52 = partial43.equals((java.lang.Object) durationField44);
        org.joda.time.ReadableInterval readableInterval53 = null;
        org.joda.time.ReadableInterval readableInterval54 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval53);
        org.joda.time.ReadableInterval readableInterval55 = null;
        boolean boolean56 = readableInterval54.contains(readableInterval55);
        org.joda.time.ReadableInterval readableInterval57 = null;
        boolean boolean58 = readableInterval54.isBefore(readableInterval57);
        org.joda.time.Interval interval59 = readableInterval54.toInterval();
        org.joda.time.PeriodType periodType60 = null;
        org.joda.time.PeriodType periodType61 = org.joda.time.DateTimeUtils.getPeriodType(periodType60);
        org.joda.time.PeriodType periodType62 = org.joda.time.DateTimeUtils.getPeriodType(periodType60);
        org.joda.time.Period period63 = readableInterval54.toPeriod(periodType62);
        org.joda.time.Partial partial64 = partial43.plus((org.joda.time.ReadablePeriod) period63);
        java.lang.String str65 = partial64.toStringList();
        int[] intArray67 = iSOChronology35.get((org.joda.time.ReadablePartial) partial64, (long) (-7));
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray69 = dividedDateTimeField11.set(readablePartial33, 0, intArray67, (-28800000));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -28800000 for centuryOfEra must be in the range [0,29227899]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "32" + "'", str26, "32");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "197" + "'", str29, "197");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 16725225906607L + "'", long32 == 16725225906607L);
        org.junit.Assert.assertNotNull(iSOChronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 10L + "'", long49 == 10L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(readableInterval54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(partial64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "[]" + "'", str65, "[]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2434");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = null;
        boolean boolean3 = readableInterval1.contains(readableInterval2);
        org.joda.time.Duration duration4 = readableInterval1.toDuration();
        org.joda.time.MutableInterval mutableInterval5 = readableInterval1.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval6 = mutableInterval5.toMutableInterval();
        org.joda.time.Chronology chronology7 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInterval) mutableInterval5);
        org.joda.time.MutableInterval mutableInterval8 = mutableInterval5.toMutableInterval();
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField10 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long13 = durationField10.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long15 = durationField10.getValueAsLong((long) 10);
        int int17 = durationField10.getValue((long) (byte) 10);
        boolean boolean18 = partial9.equals((java.lang.Object) durationField10);
        org.joda.time.Chronology chronology19 = partial9.getChronology();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial9.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray22 = partial9.getFieldTypes();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField24 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long27 = durationField24.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long29 = durationField24.getValueAsLong((long) 10);
        int int31 = durationField24.getValue((long) (byte) 10);
        boolean boolean32 = partial23.equals((java.lang.Object) durationField24);
        boolean boolean33 = partial9.equals((java.lang.Object) durationField24);
        org.joda.time.ReadableInterval readableInterval34 = null;
        org.joda.time.ReadableInterval readableInterval35 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval34);
        org.joda.time.ReadableInterval readableInterval36 = null;
        boolean boolean37 = readableInterval35.contains(readableInterval36);
        org.joda.time.Duration duration38 = readableInterval35.toDuration();
        org.joda.time.ReadableInterval readableInterval39 = null;
        org.joda.time.ReadableInterval readableInterval40 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval39);
        org.joda.time.ReadableInterval readableInterval41 = null;
        boolean boolean42 = readableInterval40.contains(readableInterval41);
        org.joda.time.Duration duration43 = readableInterval40.toDuration();
        org.joda.time.DateTime dateTime44 = readableInterval40.getEnd();
        boolean boolean45 = readableInterval35.isBefore((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime46 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.ReadableInterval readableInterval47 = null;
        org.joda.time.ReadableInterval readableInterval48 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval47);
        long long49 = readableInterval48.getStartMillis();
        org.joda.time.ReadableInterval readableInterval50 = null;
        org.joda.time.ReadableInterval readableInterval51 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval50);
        org.joda.time.ReadableInterval readableInterval52 = null;
        boolean boolean53 = readableInterval51.contains(readableInterval52);
        org.joda.time.Duration duration54 = readableInterval51.toDuration();
        org.joda.time.DateTime dateTime55 = readableInterval51.getEnd();
        boolean boolean56 = readableInterval48.contains((org.joda.time.ReadableInstant) dateTime55);
        long long57 = org.joda.time.DateTimeUtils.getInstantMillis((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Chronology chronology58 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime55);
        boolean boolean59 = mutableInterval8.isAfter((org.joda.time.ReadableInstant) dateTime46);
        long long60 = org.joda.time.DateTimeUtils.getInstantMillis((org.joda.time.ReadableInstant) dateTime46);
        long long61 = org.joda.time.DateTimeUtils.getInstantMillis((org.joda.time.ReadableInstant) dateTime46);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(mutableInterval6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(mutableInterval8);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray22);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10L + "'", long29 == 10L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(readableInterval35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(readableInterval40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(readableInterval48);
// flaky:         org.junit.Assert.assertTrue("'" + long49 + "' != '" + 16707983010251L + "'", long49 == 16707983010251L);
        org.junit.Assert.assertNotNull(readableInterval51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long57 + "' != '" + 16707983010251L + "'", long57 == 16707983010251L);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long60 + "' != '" + 16707983010251L + "'", long60 == 16707983010251L);
// flaky:         org.junit.Assert.assertTrue("'" + long61 + "' != '" + 16707983010251L + "'", long61 == 16707983010251L);
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2560");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.Chronology chronology3 = iSOChronology0.withZone(dateTimeZone1);
        org.joda.time.chrono.ISOChronology iSOChronology4 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField5 = iSOChronology4.minutes();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology4.millisOfDay();
        org.joda.time.ReadableInterval readableInterval7 = null;
        org.joda.time.ReadableInterval readableInterval8 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval7);
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval7);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.yearOfCentury();
        org.joda.time.DurationField durationField11 = chronology9.millis();
        org.joda.time.DurationField durationField12 = chronology9.centuries();
        org.joda.time.ReadableInterval readableInterval13 = null;
        org.joda.time.ReadableInterval readableInterval14 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval13);
        org.joda.time.Chronology chronology15 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval13);
        org.joda.time.DateTimeField dateTimeField16 = chronology15.yearOfCentury();
        org.joda.time.DurationField durationField17 = chronology15.millis();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval19 = null;
        org.joda.time.ReadableInterval readableInterval20 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval19);
        org.joda.time.Chronology chronology21 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval19);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.ReadableInterval readableInterval26 = null;
        boolean boolean27 = readableInterval25.contains(readableInterval26);
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Period period29 = readableInterval25.toPeriod(periodType28);
        int[] intArray31 = chronology21.get((org.joda.time.ReadablePeriod) period29, (-210866846400000L));
        int[] intArray34 = chronology15.get((org.joda.time.ReadablePeriod) period29, 2173795348453L, (long) 1439);
        int[] intArray37 = chronology9.get((org.joda.time.ReadablePeriod) period29, 291L, 2580171L);
        int[] intArray40 = iSOChronology4.get((org.joda.time.ReadablePeriod) period29, (-30610224000000L), 291L);
        int[] intArray42 = iSOChronology0.get((org.joda.time.ReadablePeriod) period29, 35L);
        org.joda.time.DateTimeZone dateTimeZone43 = iSOChronology0.getZone();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone48 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology49 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone48);
        org.joda.time.chrono.ISOChronology iSOChronology50 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField51 = iSOChronology50.minutes();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str53 = dateTimeZone52.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology54 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology50, dateTimeZone52);
        org.joda.time.DateTimeZone dateTimeZone55 = zonedChronology54.getZone();
        boolean boolean56 = fixedDateTimeZone48.equals((java.lang.Object) zonedChronology54);
        org.joda.time.Chronology chronology57 = iSOChronology0.withZone((org.joda.time.DateTimeZone) fixedDateTimeZone48);
        org.joda.time.DurationField durationField58 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long61 = durationField58.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long62 = durationField58.getUnitMillis();
        boolean boolean63 = fixedDateTimeZone48.equals((java.lang.Object) durationField58);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTC" + "'", str2, "UTC");
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(iSOChronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(readableInterval8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(readableInterval14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(readableInterval20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(intArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 0, 0, 0, 0, 0, 0, 35]");
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(gregorianChronology49);
        org.junit.Assert.assertNotNull(iSOChronology50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "UTC" + "'", str53, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1L + "'", long61 == 1L);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1L + "'", long62 == 1L);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2725");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        java.lang.String str5 = zonedChronology4.toString();
        org.joda.time.DateTimeField dateTimeField6 = zonedChronology4.millisOfDay();
        long long11 = zonedChronology4.getDateTimeMillis((-1), (int) (short) 1, 23, 4);
        org.joda.time.DateTimeField dateTimeField12 = zonedChronology4.dayOfWeek();
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField14 = iSOChronology13.minutes();
        org.joda.time.DurationField durationField15 = iSOChronology13.months();
        long long20 = iSOChronology13.getDateTimeMillis(1, 1, (int) (byte) 1, (int) (short) 100);
        org.joda.time.DurationField durationField21 = iSOChronology13.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology22 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField23 = iSOChronology22.minutes();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology22.millisOfDay();
        org.joda.time.ReadableInterval readableInterval25 = null;
        org.joda.time.ReadableInterval readableInterval26 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval25);
        org.joda.time.Chronology chronology27 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval25);
        org.joda.time.DateTimeField dateTimeField28 = chronology27.yearOfCentury();
        org.joda.time.DurationField durationField29 = chronology27.millis();
        org.joda.time.DurationField durationField30 = chronology27.centuries();
        org.joda.time.ReadableInterval readableInterval31 = null;
        org.joda.time.ReadableInterval readableInterval32 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval31);
        org.joda.time.Chronology chronology33 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval31);
        org.joda.time.DateTimeField dateTimeField34 = chronology33.yearOfCentury();
        org.joda.time.DurationField durationField35 = chronology33.millis();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval37 = null;
        org.joda.time.ReadableInterval readableInterval38 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval37);
        org.joda.time.Chronology chronology39 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval37);
        org.joda.time.DateTimeField dateTimeField40 = chronology39.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField41 = chronology39.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval42 = null;
        org.joda.time.ReadableInterval readableInterval43 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval42);
        org.joda.time.ReadableInterval readableInterval44 = null;
        boolean boolean45 = readableInterval43.contains(readableInterval44);
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Period period47 = readableInterval43.toPeriod(periodType46);
        int[] intArray49 = chronology39.get((org.joda.time.ReadablePeriod) period47, (-210866846400000L));
        int[] intArray52 = chronology33.get((org.joda.time.ReadablePeriod) period47, 2173795348453L, (long) 1439);
        int[] intArray55 = chronology27.get((org.joda.time.ReadablePeriod) period47, 291L, 2580171L);
        int[] intArray58 = iSOChronology22.get((org.joda.time.ReadablePeriod) period47, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField59 = iSOChronology22.months();
        java.lang.String str60 = iSOChronology22.toString();
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        boolean boolean62 = iSOChronology22.equals((java.lang.Object) partial61);
        long long64 = iSOChronology13.set((org.joda.time.ReadablePartial) partial61, (long) (short) 1);
        java.lang.String str65 = partial61.toString();
        boolean boolean66 = zonedChronology4.equals((java.lang.Object) str65);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str5, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-62196854399996L) + "'", long11 == (-62196854399996L));
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-62135596799907L) + "'", long20 == (-62135596799907L));
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(iSOChronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(readableInterval26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(readableInterval32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(readableInterval38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(readableInterval43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "ISOChronology[hourOfDay]" + "'", str60, "ISOChronology[hourOfDay]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 1L + "'", long64 == 1L);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "[]" + "'", str65, "[]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2190");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = partial0.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = partial0.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.minutes();
        org.joda.time.DurationField durationField21 = chronology18.halfdays();
        org.joda.time.DurationField durationField22 = chronology18.weeks();
        org.joda.time.DateTimeField dateTimeField23 = chronology18.weekyearOfCentury();
        org.joda.time.chrono.ISOChronology iSOChronology24 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField25 = iSOChronology24.minutes();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology24.millisOfDay();
        org.joda.time.ReadableInterval readableInterval27 = null;
        org.joda.time.ReadableInterval readableInterval28 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval27);
        org.joda.time.Chronology chronology29 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval27);
        org.joda.time.DateTimeField dateTimeField30 = chronology29.yearOfCentury();
        org.joda.time.DurationField durationField31 = chronology29.millis();
        org.joda.time.DurationField durationField32 = chronology29.centuries();
        org.joda.time.ReadableInterval readableInterval33 = null;
        org.joda.time.ReadableInterval readableInterval34 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval33);
        org.joda.time.Chronology chronology35 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval33);
        org.joda.time.DateTimeField dateTimeField36 = chronology35.yearOfCentury();
        org.joda.time.DurationField durationField37 = chronology35.millis();
        org.joda.time.DateTimeField dateTimeField38 = chronology35.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval39 = null;
        org.joda.time.ReadableInterval readableInterval40 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval39);
        org.joda.time.Chronology chronology41 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval39);
        org.joda.time.DateTimeField dateTimeField42 = chronology41.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField43 = chronology41.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval44 = null;
        org.joda.time.ReadableInterval readableInterval45 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval44);
        org.joda.time.ReadableInterval readableInterval46 = null;
        boolean boolean47 = readableInterval45.contains(readableInterval46);
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.Period period49 = readableInterval45.toPeriod(periodType48);
        int[] intArray51 = chronology41.get((org.joda.time.ReadablePeriod) period49, (-210866846400000L));
        int[] intArray54 = chronology35.get((org.joda.time.ReadablePeriod) period49, 2173795348453L, (long) 1439);
        int[] intArray57 = chronology29.get((org.joda.time.ReadablePeriod) period49, 291L, 2580171L);
        int[] intArray60 = iSOChronology24.get((org.joda.time.ReadablePeriod) period49, (-30610224000000L), 291L);
        int[] intArray63 = chronology18.get((org.joda.time.ReadablePeriod) period49, 0L, (-45757612800000L));
        org.joda.time.Partial partial64 = partial0.plus((org.joda.time.ReadablePeriod) period49);
        int int65 = partial0.size();
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(iSOChronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(readableInterval28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(readableInterval34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(readableInterval40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(readableInterval45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1450, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(partial64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2385");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DurationField durationField2 = iSOChronology0.months();
        long long7 = iSOChronology0.getDateTimeMillis(1, 1, (int) (byte) 1, (int) (short) 100);
        org.joda.time.DurationField durationField8 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField10 = iSOChronology9.minutes();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology9.millisOfDay();
        org.joda.time.ReadableInterval readableInterval12 = null;
        org.joda.time.ReadableInterval readableInterval13 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval12);
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        org.joda.time.DurationField durationField16 = chronology14.millis();
        org.joda.time.DurationField durationField17 = chronology14.centuries();
        org.joda.time.ReadableInterval readableInterval18 = null;
        org.joda.time.ReadableInterval readableInterval19 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval18);
        org.joda.time.Chronology chronology20 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval18);
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfCentury();
        org.joda.time.DurationField durationField22 = chronology20.millis();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.Chronology chronology26 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval24);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval29 = null;
        org.joda.time.ReadableInterval readableInterval30 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval29);
        org.joda.time.ReadableInterval readableInterval31 = null;
        boolean boolean32 = readableInterval30.contains(readableInterval31);
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = readableInterval30.toPeriod(periodType33);
        int[] intArray36 = chronology26.get((org.joda.time.ReadablePeriod) period34, (-210866846400000L));
        int[] intArray39 = chronology20.get((org.joda.time.ReadablePeriod) period34, 2173795348453L, (long) 1439);
        int[] intArray42 = chronology14.get((org.joda.time.ReadablePeriod) period34, 291L, 2580171L);
        int[] intArray45 = iSOChronology9.get((org.joda.time.ReadablePeriod) period34, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField46 = iSOChronology9.months();
        java.lang.String str47 = iSOChronology9.toString();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = iSOChronology9.equals((java.lang.Object) partial48);
        long long51 = iSOChronology0.set((org.joda.time.ReadablePartial) partial48, (long) (short) 1);
        org.joda.time.chrono.ISOChronology iSOChronology52 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField53 = iSOChronology52.minutes();
        org.joda.time.DateTimeField dateTimeField54 = iSOChronology52.millisOfDay();
        org.joda.time.DateTimeField dateTimeField55 = iSOChronology52.halfdayOfDay();
        org.joda.time.ReadableInterval readableInterval56 = null;
        org.joda.time.ReadableInterval readableInterval57 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval56);
        org.joda.time.ReadableInterval readableInterval58 = null;
        boolean boolean59 = readableInterval57.contains(readableInterval58);
        org.joda.time.PeriodType periodType60 = null;
        org.joda.time.Period period61 = readableInterval57.toPeriod(periodType60);
        int[] intArray64 = iSOChronology52.get((org.joda.time.ReadablePeriod) period61, 4L, (long) '#');
        long long67 = iSOChronology0.add((org.joda.time.ReadablePeriod) period61, (-62135568421900L), 10);
        org.joda.time.DateTimeField dateTimeField68 = iSOChronology0.millisOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-62135596799900L) + "'", long7 == (-62135596799900L));
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(readableInterval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(readableInterval19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(readableInterval30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(durationField46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ISOChronology[100]" + "'", str47, "ISOChronology[100]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
        org.junit.Assert.assertNotNull(iSOChronology52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(readableInterval57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0, 0, 0, 0, 0, 0, 0, 31]");
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-62135568421900L) + "'", long67 == (-62135568421900L));
        org.junit.Assert.assertNotNull(dateTimeField68);
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1593");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        boolean boolean15 = partial0.equals((java.lang.Object) 1702281558665L);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType17 = dateTimeFieldType16.getDurationType();
        boolean boolean18 = partial0.isSupported(dateTimeFieldType16);
        java.util.Locale locale20 = null;
        java.lang.String str21 = partial0.toString("[]", locale20);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField23 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long26 = durationField23.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long28 = durationField23.getValueAsLong((long) 10);
        int int30 = durationField23.getValue((long) (byte) 10);
        boolean boolean31 = partial22.equals((java.lang.Object) durationField23);
        org.joda.time.Chronology chronology32 = partial22.getChronology();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        boolean boolean34 = partial22.isBefore((org.joda.time.ReadablePartial) partial33);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray35 = partial22.getFieldTypes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = partial22.getFormatter();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField38 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long41 = durationField38.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long43 = durationField38.getValueAsLong((long) 10);
        int int45 = durationField38.getValue((long) (byte) 10);
        boolean boolean46 = partial37.equals((java.lang.Object) durationField38);
        org.joda.time.Chronology chronology47 = partial37.getChronology();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = partial37.isBefore((org.joda.time.ReadablePartial) partial48);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray50 = partial37.getFieldTypes();
        boolean boolean52 = partial37.equals((java.lang.Object) 1702281558665L);
        java.lang.String str53 = partial37.toString();
        org.joda.time.Chronology chronology54 = partial37.getChronology();
        int int55 = partial22.compareTo((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField57 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long60 = durationField57.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long62 = durationField57.getValueAsLong((long) 10);
        int int64 = durationField57.getValue((long) (byte) 10);
        boolean boolean65 = partial56.equals((java.lang.Object) durationField57);
        org.joda.time.Chronology chronology66 = partial56.getChronology();
        org.joda.time.Partial partial67 = new org.joda.time.Partial();
        boolean boolean68 = partial56.isBefore((org.joda.time.ReadablePartial) partial67);
        java.lang.String str69 = partial56.toString();
        java.lang.String str70 = partial56.toString();
        boolean boolean71 = partial22.isMatch((org.joda.time.ReadablePartial) partial56);
        int int72 = partial0.compareTo((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology73 = partial22.getChronology();
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[]" + "'", str21, "[]");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10L + "'", long28 == 10L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray35);
        org.junit.Assert.assertNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 10L + "'", long43 == 10L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[]" + "'", str53, "[]");
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 10L + "'", long62 == 10L);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[]" + "'", str69, "[]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "[]" + "'", str70, "[]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(chronology73);
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1549");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField11 = iSOChronology10.minutes();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology10.halfdayOfDay();
        org.joda.time.ReadableInterval readableInterval14 = null;
        org.joda.time.ReadableInterval readableInterval15 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval14);
        org.joda.time.ReadableInterval readableInterval16 = null;
        boolean boolean17 = readableInterval15.contains(readableInterval16);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = readableInterval15.toPeriod(periodType18);
        int[] intArray22 = iSOChronology10.get((org.joda.time.ReadablePeriod) period19, 4L, (long) '#');
        org.joda.time.Partial partial23 = partial0.plus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Partial partial25 = partial23.without(dateTimeFieldType24);
        org.joda.time.chrono.ISOChronology iSOChronology26 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField27 = iSOChronology26.minutes();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str29 = dateTimeZone28.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology30 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology26, dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone31 = zonedChronology30.getZone();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology30.monthOfYear();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField34 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long37 = durationField34.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long39 = durationField34.getValueAsLong((long) 10);
        int int41 = durationField34.getValue((long) (byte) 10);
        boolean boolean42 = partial33.equals((java.lang.Object) durationField34);
        org.joda.time.Chronology chronology43 = partial33.getChronology();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        boolean boolean45 = partial33.isBefore((org.joda.time.ReadablePartial) partial44);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray46 = partial33.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval47 = null;
        org.joda.time.ReadableInterval readableInterval48 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval47);
        long long49 = readableInterval48.getStartMillis();
        org.joda.time.ReadableInterval readableInterval50 = null;
        org.joda.time.ReadableInterval readableInterval51 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval50);
        org.joda.time.ReadableInterval readableInterval52 = null;
        boolean boolean53 = readableInterval51.contains(readableInterval52);
        org.joda.time.Duration duration54 = readableInterval51.toDuration();
        org.joda.time.DateTime dateTime55 = readableInterval51.getEnd();
        boolean boolean56 = readableInterval48.contains((org.joda.time.ReadableInstant) dateTime55);
        boolean boolean57 = partial33.isMatch((org.joda.time.ReadableInstant) dateTime55);
        int[] intArray59 = zonedChronology30.get((org.joda.time.ReadablePartial) partial33, 60035L);
        org.joda.time.DateTimeField dateTimeField60 = zonedChronology30.secondOfMinute();
        org.joda.time.Partial partial61 = partial23.withChronologyRetainFields((org.joda.time.Chronology) zonedChronology30);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType63 = partial23.getFieldType(3671845);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3671845");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(iSOChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(readableInterval15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 0, 0, 0, 0, 0, 0, 31]");
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(iSOChronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "UTC" + "'", str29, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L + "'", long37 == 1L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 10L + "'", long39 == 10L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray46);
        org.junit.Assert.assertNotNull(readableInterval48);
// flaky:         org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1225226731930L + "'", long49 == 1225226731930L);
        org.junit.Assert.assertNotNull(readableInterval51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(partial61);
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0732");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.ReadableInterval readableInterval2 = null;
        org.joda.time.ReadableInterval readableInterval3 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval2);
        org.joda.time.Chronology chronology4 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval2);
        org.joda.time.DateTimeField dateTimeField5 = chronology4.minuteOfDay();
        java.lang.String str6 = dateTimeField5.toString();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField8 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long11 = durationField8.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long13 = durationField8.getValueAsLong((long) 10);
        int int15 = durationField8.getValue((long) (byte) 10);
        boolean boolean16 = partial7.equals((java.lang.Object) durationField8);
        org.joda.time.Chronology chronology17 = partial7.getChronology();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial7.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial7.getFieldTypes();
        boolean boolean22 = partial7.equals((java.lang.Object) 1702281558665L);
        java.lang.String str23 = partial7.toString();
        java.lang.String str24 = partial7.toString();
        java.util.Locale locale26 = null;
        java.lang.String str27 = dateTimeField5.getAsText((org.joda.time.ReadablePartial) partial7, 28, locale26);
        org.joda.time.chrono.ISOChronology iSOChronology28 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField29 = iSOChronology28.minutes();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str31 = dateTimeZone30.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology32 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology28, dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone33 = zonedChronology32.getZone();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology32.monthOfYear();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField36 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long39 = durationField36.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long41 = durationField36.getValueAsLong((long) 10);
        int int43 = durationField36.getValue((long) (byte) 10);
        boolean boolean44 = partial35.equals((java.lang.Object) durationField36);
        org.joda.time.Chronology chronology45 = partial35.getChronology();
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        boolean boolean47 = partial35.isBefore((org.joda.time.ReadablePartial) partial46);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray48 = partial35.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval49 = null;
        org.joda.time.ReadableInterval readableInterval50 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval49);
        long long51 = readableInterval50.getStartMillis();
        org.joda.time.ReadableInterval readableInterval52 = null;
        org.joda.time.ReadableInterval readableInterval53 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval52);
        org.joda.time.ReadableInterval readableInterval54 = null;
        boolean boolean55 = readableInterval53.contains(readableInterval54);
        org.joda.time.Duration duration56 = readableInterval53.toDuration();
        org.joda.time.DateTime dateTime57 = readableInterval53.getEnd();
        boolean boolean58 = readableInterval50.contains((org.joda.time.ReadableInstant) dateTime57);
        boolean boolean59 = partial35.isMatch((org.joda.time.ReadableInstant) dateTime57);
        int[] intArray61 = zonedChronology32.get((org.joda.time.ReadablePartial) partial35, 60035L);
        int[] intArray62 = partial35.getValues();
        iSOChronology0.validate((org.joda.time.ReadablePartial) partial7, intArray62);
        org.joda.time.DateTimeField dateTimeField64 = iSOChronology0.era();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(readableInterval3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "DateTimeField[minuteOfDay]" + "'", str6, "DateTimeField[minuteOfDay]");
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[]" + "'", str23, "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[]" + "'", str24, "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "28" + "'", str27, "28");
        org.junit.Assert.assertNotNull(iSOChronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "UTC" + "'", str31, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 10L + "'", long41 == 10L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray48);
        org.junit.Assert.assertNotNull(readableInterval50);
// flaky:         org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1701260511093L + "'", long51 == 1701260511093L);
        org.junit.Assert.assertNotNull(readableInterval53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(dateTimeField64);
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1767");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField15 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long18 = durationField15.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long20 = durationField15.getValueAsLong((long) 10);
        int int22 = durationField15.getValue((long) (byte) 10);
        boolean boolean23 = partial14.equals((java.lang.Object) durationField15);
        org.joda.time.Chronology chronology24 = partial14.getChronology();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial14.isBefore((org.joda.time.ReadablePartial) partial25);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = partial14.getFieldTypes();
        boolean boolean29 = partial14.equals((java.lang.Object) 1702281558665L);
        int int30 = partial0.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.ReadableInterval readableInterval31 = null;
        org.joda.time.ReadableInterval readableInterval32 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval31);
        org.joda.time.ReadableInterval readableInterval33 = null;
        boolean boolean34 = readableInterval32.contains(readableInterval33);
        org.joda.time.Chronology chronology35 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval33);
        org.joda.time.DateTimeField dateTimeField36 = chronology35.halfdayOfDay();
        long long39 = dateTimeField36.getDifferenceAsLong((-45757612800000L), (-2177424000000L));
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField41 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long44 = durationField41.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long46 = durationField41.getValueAsLong((long) 10);
        int int48 = durationField41.getValue((long) (byte) 10);
        boolean boolean49 = partial40.equals((java.lang.Object) durationField41);
        org.joda.time.Chronology chronology50 = partial40.getChronology();
        java.lang.String str51 = partial40.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray52 = partial40.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval53 = null;
        org.joda.time.ReadableInterval readableInterval54 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval53);
        org.joda.time.ReadableInterval readableInterval55 = null;
        boolean boolean56 = readableInterval54.contains(readableInterval55);
        org.joda.time.ReadableInterval readableInterval57 = null;
        boolean boolean58 = readableInterval54.isBefore(readableInterval57);
        org.joda.time.Interval interval59 = readableInterval54.toInterval();
        org.joda.time.PeriodType periodType60 = null;
        org.joda.time.PeriodType periodType61 = org.joda.time.DateTimeUtils.getPeriodType(periodType60);
        org.joda.time.PeriodType periodType62 = org.joda.time.DateTimeUtils.getPeriodType(periodType60);
        org.joda.time.Period period63 = readableInterval54.toPeriod(periodType62);
        org.joda.time.Partial partial64 = partial40.plus((org.joda.time.ReadablePeriod) period63);
        int[] intArray65 = null;
        int int66 = dateTimeField36.getMaximumValue((org.joda.time.ReadablePartial) partial40, intArray65);
        boolean boolean67 = partial14.equals((java.lang.Object) intArray65);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray68 = partial14.getFieldTypes();
        // The following exception was thrown during execution in test generation
        try {
            int int70 = partial14.getValue(1889);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1889");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(readableInterval32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-1008800L) + "'", long39 == (-1008800L));
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10L + "'", long46 == 10L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[]" + "'", str51, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray52);
        org.junit.Assert.assertNotNull(readableInterval54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(partial64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray68);
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0887");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.centuryOfEra();
        org.joda.time.DurationField durationField9 = iSOChronology7.months();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology7.year();
        java.lang.String str11 = iSOChronology7.toString();
        org.joda.time.Partial partial12 = new org.joda.time.Partial((org.joda.time.Chronology) iSOChronology7);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone17 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology18 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone19 = gregorianChronology18.getZone();
        org.joda.time.DateTimeZone dateTimeZone20 = gregorianChronology18.getZone();
        org.joda.time.DateTimeField dateTimeField21 = gregorianChronology18.dayOfMonth();
        org.joda.time.chrono.ISOChronology iSOChronology22 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology22.secondOfDay();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.Chronology chronology26 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval24);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfCentury();
        org.joda.time.DurationField durationField28 = chronology26.millis();
        org.joda.time.DurationField durationField29 = chronology26.centuries();
        org.joda.time.ReadableInterval readableInterval30 = null;
        org.joda.time.ReadableInterval readableInterval31 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval30);
        org.joda.time.Chronology chronology32 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval30);
        org.joda.time.DateTimeField dateTimeField33 = chronology32.yearOfCentury();
        org.joda.time.DurationField durationField34 = chronology32.millis();
        org.joda.time.DateTimeField dateTimeField35 = chronology32.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval36 = null;
        org.joda.time.ReadableInterval readableInterval37 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval36);
        org.joda.time.Chronology chronology38 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval36);
        org.joda.time.DateTimeField dateTimeField39 = chronology38.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField40 = chronology38.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval41 = null;
        org.joda.time.ReadableInterval readableInterval42 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval41);
        org.joda.time.ReadableInterval readableInterval43 = null;
        boolean boolean44 = readableInterval42.contains(readableInterval43);
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.Period period46 = readableInterval42.toPeriod(periodType45);
        int[] intArray48 = chronology38.get((org.joda.time.ReadablePeriod) period46, (-210866846400000L));
        int[] intArray51 = chronology32.get((org.joda.time.ReadablePeriod) period46, 2173795348453L, (long) 1439);
        int[] intArray54 = chronology26.get((org.joda.time.ReadablePeriod) period46, 291L, 2580171L);
        int[] intArray56 = iSOChronology22.get((org.joda.time.ReadablePeriod) period46, 29227899L);
        int[] intArray59 = gregorianChronology18.get((org.joda.time.ReadablePeriod) period46, (-476134749439L), 0L);
        // The following exception was thrown during execution in test generation
        try {
            int int60 = unsupportedDateTimeField6.getMinimumValue((org.joda.time.ReadablePartial) partial12, intArray59);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ISOChronology[UTC]" + "'", str11, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(gregorianChronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(iSOChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(readableInterval31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(readableInterval37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(readableInterval42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[0, 0, 0, 0, 8, 7, 7, 899]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[15, 1, 0, 1, 19, 39, 9, 439]");
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2328");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField15 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long18 = durationField15.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long20 = durationField15.getValueAsLong((long) 10);
        int int22 = durationField15.getValue((long) (byte) 10);
        boolean boolean23 = partial14.equals((java.lang.Object) durationField15);
        org.joda.time.Chronology chronology24 = partial14.getChronology();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial14.isBefore((org.joda.time.ReadablePartial) partial25);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = partial14.getFieldTypes();
        boolean boolean29 = partial14.equals((java.lang.Object) 1702281558665L);
        int int30 = partial0.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField32 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long35 = durationField32.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long37 = durationField32.getValueAsLong((long) 10);
        int int39 = durationField32.getValue((long) (byte) 10);
        boolean boolean40 = partial31.equals((java.lang.Object) durationField32);
        org.joda.time.Chronology chronology41 = partial31.getChronology();
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        boolean boolean43 = partial31.isBefore((org.joda.time.ReadablePartial) partial42);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray44 = partial31.getFieldTypes();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField46 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long49 = durationField46.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long51 = durationField46.getValueAsLong((long) 10);
        int int53 = durationField46.getValue((long) (byte) 10);
        boolean boolean54 = partial45.equals((java.lang.Object) durationField46);
        boolean boolean55 = partial31.equals((java.lang.Object) durationField46);
        org.joda.time.ReadableInterval readableInterval56 = null;
        org.joda.time.ReadableInterval readableInterval57 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval56);
        org.joda.time.ReadableInterval readableInterval58 = null;
        boolean boolean59 = readableInterval57.contains(readableInterval58);
        org.joda.time.Duration duration60 = readableInterval57.toDuration();
        org.joda.time.ReadableInterval readableInterval61 = null;
        org.joda.time.ReadableInterval readableInterval62 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval61);
        org.joda.time.ReadableInterval readableInterval63 = null;
        boolean boolean64 = readableInterval62.contains(readableInterval63);
        org.joda.time.Duration duration65 = readableInterval62.toDuration();
        org.joda.time.DateTime dateTime66 = readableInterval62.getEnd();
        boolean boolean67 = readableInterval57.isBefore((org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.DateTime dateTime68 = partial31.toDateTime((org.joda.time.ReadableInstant) dateTime66);
        java.lang.String str69 = partial31.toStringList();
        boolean boolean70 = partial0.isEqual((org.joda.time.ReadablePartial) partial31);
        java.util.Locale locale72 = null;
        java.lang.String str73 = partial0.toString("5", locale72);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 10L + "'", long37 == 10L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray44);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10L + "'", long51 == 10L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(readableInterval57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(readableInterval62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[]" + "'", str69, "[]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "5" + "'", str73, "5");
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0661");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = null;
        boolean boolean3 = readableInterval1.contains(readableInterval2);
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.ReadableInterval readableInterval5 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval4);
        org.joda.time.ReadableInterval readableInterval6 = null;
        boolean boolean7 = readableInterval5.contains(readableInterval6);
        org.joda.time.ReadableInterval readableInterval8 = null;
        boolean boolean9 = readableInterval5.isBefore(readableInterval8);
        org.joda.time.Interval interval10 = readableInterval5.toInterval();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.PeriodType periodType12 = org.joda.time.DateTimeUtils.getPeriodType(periodType11);
        org.joda.time.PeriodType periodType13 = org.joda.time.DateTimeUtils.getPeriodType(periodType11);
        org.joda.time.Period period14 = readableInterval5.toPeriod(periodType13);
        org.joda.time.Period period15 = readableInterval1.toPeriod(periodType13);
        org.joda.time.Period period16 = readableInterval1.toPeriod();
        org.joda.time.ReadableInterval readableInterval17 = null;
        org.joda.time.ReadableInterval readableInterval18 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval17);
        org.joda.time.ReadableInterval readableInterval19 = null;
        boolean boolean20 = readableInterval18.contains(readableInterval19);
        org.joda.time.ReadableInterval readableInterval21 = null;
        boolean boolean22 = readableInterval18.isBefore(readableInterval21);
        org.joda.time.DateTime dateTime23 = readableInterval18.getEnd();
        org.joda.time.MutableInterval mutableInterval24 = readableInterval18.toMutableInterval();
        org.joda.time.Interval interval25 = readableInterval18.toInterval();
        org.joda.time.MutableInterval mutableInterval26 = interval25.toMutableInterval();
        org.joda.time.ReadableInterval readableInterval27 = null;
        org.joda.time.ReadableInterval readableInterval28 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval27);
        org.joda.time.Chronology chronology29 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval27);
        org.joda.time.DateTimeField dateTimeField30 = chronology29.yearOfCentury();
        org.joda.time.DurationField durationField31 = chronology29.millis();
        org.joda.time.DurationField durationField32 = chronology29.centuries();
        org.joda.time.DateTimeZone dateTimeZone33 = chronology29.getZone();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str35 = dateTimeZone34.toString();
        java.lang.String str37 = dateTimeZone34.getShortName((-210866846400000L));
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeUtils.getZone(dateTimeZone34);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone39 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone38);
        long long41 = dateTimeZone33.getMillisKeepLocal((org.joda.time.DateTimeZone) cachedDateTimeZone39, 60035L);
        long long44 = dateTimeZone33.convertLocalToUTC((long) 4, false);
        org.joda.time.ReadableInterval readableInterval45 = null;
        org.joda.time.ReadableInterval readableInterval46 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval45);
        org.joda.time.ReadableInterval readableInterval47 = null;
        boolean boolean48 = readableInterval46.contains(readableInterval47);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.ReadableInterval readableInterval50 = null;
        org.joda.time.ReadableInterval readableInterval51 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval50);
        org.joda.time.ReadableInterval readableInterval52 = null;
        boolean boolean53 = readableInterval51.contains(readableInterval52);
        org.joda.time.PeriodType periodType54 = null;
        org.joda.time.Period period55 = readableInterval51.toPeriod(periodType54);
        org.joda.time.DateTime dateTime56 = readableInterval51.getEnd();
        org.joda.time.Chronology chronology57 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant49, (org.joda.time.ReadableInstant) dateTime56);
        boolean boolean58 = readableInterval46.isAfter((org.joda.time.ReadableInstant) dateTime56);
        int int59 = dateTimeZone33.getOffset((org.joda.time.ReadableInstant) dateTime56);
        boolean boolean60 = interval25.isAfter((org.joda.time.ReadableInstant) dateTime56);
        boolean boolean61 = readableInterval1.isAfter((org.joda.time.ReadableInstant) dateTime56);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(readableInterval5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(readableInterval18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(mutableInterval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(mutableInterval26);
        org.junit.Assert.assertNotNull(readableInterval28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "UTC" + "'", str35, "UTC");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(cachedDateTimeZone39);
// flaky:         org.junit.Assert.assertTrue("'" + long41 + "' != '" + 60042L + "'", long41 == 60042L);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-3L) + "'", long44 == (-3L));
        org.junit.Assert.assertNotNull(readableInterval46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(readableInterval51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 7 + "'", int59 == 7);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1088");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DurationField durationField2 = iSOChronology0.months();
        org.joda.time.DurationField durationField3 = iSOChronology0.years();
        org.joda.time.DateTimeZone dateTimeZone4 = iSOChronology0.getZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str6 = dateTimeZone5.toString();
        java.lang.String str8 = dateTimeZone5.getShortName((-210866846400000L));
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeUtils.getZone(dateTimeZone5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = iSOChronology0.withZone((org.joda.time.DateTimeZone) cachedDateTimeZone10);
        org.joda.time.DurationField durationField12 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        int int15 = dateTimeZone13.getStandardOffset((long) 1);
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField22 = chronology18.clockhourOfDay();
        boolean boolean23 = dateTimeZone13.equals((java.lang.Object) dateTimeField22);
        java.lang.String str25 = dateTimeZone13.getShortName(970L);
        org.joda.time.ReadableInterval readableInterval26 = null;
        org.joda.time.ReadableInterval readableInterval27 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval26);
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval26);
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfCentury();
        org.joda.time.DurationField durationField30 = chronology28.millis();
        org.joda.time.DurationField durationField31 = chronology28.centuries();
        org.joda.time.ReadableInterval readableInterval32 = null;
        org.joda.time.ReadableInterval readableInterval33 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval32);
        org.joda.time.Chronology chronology34 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval32);
        org.joda.time.DateTimeField dateTimeField35 = chronology34.yearOfCentury();
        org.joda.time.DurationField durationField36 = chronology34.millis();
        org.joda.time.DateTimeField dateTimeField37 = chronology34.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval38 = null;
        org.joda.time.ReadableInterval readableInterval39 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval38);
        org.joda.time.Chronology chronology40 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval38);
        org.joda.time.DateTimeField dateTimeField41 = chronology40.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField42 = chronology40.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval43 = null;
        org.joda.time.ReadableInterval readableInterval44 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval43);
        org.joda.time.ReadableInterval readableInterval45 = null;
        boolean boolean46 = readableInterval44.contains(readableInterval45);
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.Period period48 = readableInterval44.toPeriod(periodType47);
        int[] intArray50 = chronology40.get((org.joda.time.ReadablePeriod) period48, (-210866846400000L));
        int[] intArray53 = chronology34.get((org.joda.time.ReadablePeriod) period48, 2173795348453L, (long) 1439);
        int[] intArray56 = chronology28.get((org.joda.time.ReadablePeriod) period48, 291L, 2580171L);
        boolean boolean57 = dateTimeZone13.equals((java.lang.Object) period48);
        int[] intArray59 = iSOChronology0.get((org.joda.time.ReadablePeriod) period48, 255193371L);
        org.joda.time.DateTimeField dateTimeField60 = iSOChronology0.secondOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertNotNull(readableInterval27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(readableInterval33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(readableInterval39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(readableInterval44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(intArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(intArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0, 0, 0, 2, 22, 53, 13, 371]");
        org.junit.Assert.assertNotNull(dateTimeField60);
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1893");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField15 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long18 = durationField15.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long20 = durationField15.getValueAsLong((long) 10);
        int int22 = durationField15.getValue((long) (byte) 10);
        boolean boolean23 = partial14.equals((java.lang.Object) durationField15);
        org.joda.time.Chronology chronology24 = partial14.getChronology();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial14.isBefore((org.joda.time.ReadablePartial) partial25);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = partial14.getFieldTypes();
        boolean boolean29 = partial14.equals((java.lang.Object) 1702281558665L);
        int int30 = partial0.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.ReadableInterval readableInterval31 = null;
        org.joda.time.ReadableInterval readableInterval32 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval31);
        org.joda.time.ReadableInterval readableInterval33 = null;
        boolean boolean34 = readableInterval32.contains(readableInterval33);
        org.joda.time.Chronology chronology35 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval33);
        org.joda.time.DateTimeField dateTimeField36 = chronology35.halfdayOfDay();
        long long39 = dateTimeField36.getDifferenceAsLong((-45757612800000L), (-2177424000000L));
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField41 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long44 = durationField41.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long46 = durationField41.getValueAsLong((long) 10);
        int int48 = durationField41.getValue((long) (byte) 10);
        boolean boolean49 = partial40.equals((java.lang.Object) durationField41);
        org.joda.time.Chronology chronology50 = partial40.getChronology();
        java.lang.String str51 = partial40.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray52 = partial40.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval53 = null;
        org.joda.time.ReadableInterval readableInterval54 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval53);
        org.joda.time.ReadableInterval readableInterval55 = null;
        boolean boolean56 = readableInterval54.contains(readableInterval55);
        org.joda.time.ReadableInterval readableInterval57 = null;
        boolean boolean58 = readableInterval54.isBefore(readableInterval57);
        org.joda.time.Interval interval59 = readableInterval54.toInterval();
        org.joda.time.PeriodType periodType60 = null;
        org.joda.time.PeriodType periodType61 = org.joda.time.DateTimeUtils.getPeriodType(periodType60);
        org.joda.time.PeriodType periodType62 = org.joda.time.DateTimeUtils.getPeriodType(periodType60);
        org.joda.time.Period period63 = readableInterval54.toPeriod(periodType62);
        org.joda.time.Partial partial64 = partial40.plus((org.joda.time.ReadablePeriod) period63);
        int[] intArray65 = null;
        int int66 = dateTimeField36.getMaximumValue((org.joda.time.ReadablePartial) partial40, intArray65);
        boolean boolean67 = partial14.equals((java.lang.Object) intArray65);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray68 = partial14.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.monthOfYear();
        int int70 = partial14.indexOf(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(readableInterval32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-1008800L) + "'", long39 == (-1008800L));
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10L + "'", long46 == 10L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[]" + "'", str51, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray52);
        org.junit.Assert.assertNotNull(readableInterval54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(partial64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray68);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3040");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DurationField durationField2 = iSOChronology0.months();
        long long7 = iSOChronology0.getDateTimeMillis(1, 1, (int) (byte) 1, (int) (short) 100);
        org.joda.time.DurationField durationField8 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField10 = iSOChronology9.minutes();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology9.millisOfDay();
        org.joda.time.ReadableInterval readableInterval12 = null;
        org.joda.time.ReadableInterval readableInterval13 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval12);
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        org.joda.time.DurationField durationField16 = chronology14.millis();
        org.joda.time.DurationField durationField17 = chronology14.centuries();
        org.joda.time.ReadableInterval readableInterval18 = null;
        org.joda.time.ReadableInterval readableInterval19 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval18);
        org.joda.time.Chronology chronology20 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval18);
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfCentury();
        org.joda.time.DurationField durationField22 = chronology20.millis();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.Chronology chronology26 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval24);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval29 = null;
        org.joda.time.ReadableInterval readableInterval30 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval29);
        org.joda.time.ReadableInterval readableInterval31 = null;
        boolean boolean32 = readableInterval30.contains(readableInterval31);
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = readableInterval30.toPeriod(periodType33);
        int[] intArray36 = chronology26.get((org.joda.time.ReadablePeriod) period34, (-210866846400000L));
        int[] intArray39 = chronology20.get((org.joda.time.ReadablePeriod) period34, 2173795348453L, (long) 1439);
        int[] intArray42 = chronology14.get((org.joda.time.ReadablePeriod) period34, 291L, 2580171L);
        int[] intArray45 = iSOChronology9.get((org.joda.time.ReadablePeriod) period34, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField46 = iSOChronology9.months();
        java.lang.String str47 = iSOChronology9.toString();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = iSOChronology9.equals((java.lang.Object) partial48);
        long long51 = iSOChronology0.set((org.joda.time.ReadablePartial) partial48, (long) (short) 1);
        boolean boolean52 = org.joda.time.DateTimeUtils.isContiguous((org.joda.time.ReadablePartial) partial48);
        org.joda.time.DurationFieldType durationFieldType53 = org.joda.time.DurationFieldType.hours();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField54 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType53);
        java.lang.String str55 = unsupportedDurationField54.toString();
        long long56 = unsupportedDurationField54.getUnitMillis();
        java.lang.String str57 = unsupportedDurationField54.toString();
        org.joda.time.DurationFieldType durationFieldType58 = unsupportedDurationField54.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial60 = partial48.withFieldAddWrapped(durationFieldType58, 29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'hours' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(durationField2);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-62135596799909L) + "'", long7 == (-62135596799909L));
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(readableInterval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(readableInterval19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(readableInterval30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(intArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(durationField46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ISOChronology[73]" + "'", str47, "ISOChronology[73]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertNotNull(unsupportedDurationField54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "UnsupportedDurationField[hours]" + "'", str55, "UnsupportedDurationField[hours]");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "UnsupportedDurationField[hours]" + "'", str57, "UnsupportedDurationField[hours]");
        org.junit.Assert.assertNotNull(durationFieldType58);
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2023");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField15 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long18 = durationField15.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long20 = durationField15.getValueAsLong((long) 10);
        int int22 = durationField15.getValue((long) (byte) 10);
        boolean boolean23 = partial14.equals((java.lang.Object) durationField15);
        org.joda.time.Chronology chronology24 = partial14.getChronology();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial14.isBefore((org.joda.time.ReadablePartial) partial25);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = partial14.getFieldTypes();
        boolean boolean29 = partial14.equals((java.lang.Object) 1702281558665L);
        int int30 = partial0.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField32 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long35 = durationField32.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long37 = durationField32.getValueAsLong((long) 10);
        int int39 = durationField32.getValue((long) (byte) 10);
        boolean boolean40 = partial31.equals((java.lang.Object) durationField32);
        org.joda.time.Chronology chronology41 = partial31.getChronology();
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        boolean boolean43 = partial31.isBefore((org.joda.time.ReadablePartial) partial42);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray44 = partial31.getFieldTypes();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField46 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long49 = durationField46.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long51 = durationField46.getValueAsLong((long) 10);
        int int53 = durationField46.getValue((long) (byte) 10);
        boolean boolean54 = partial45.equals((java.lang.Object) durationField46);
        boolean boolean55 = partial31.equals((java.lang.Object) durationField46);
        org.joda.time.ReadableInterval readableInterval56 = null;
        org.joda.time.ReadableInterval readableInterval57 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval56);
        org.joda.time.ReadableInterval readableInterval58 = null;
        boolean boolean59 = readableInterval57.contains(readableInterval58);
        org.joda.time.Duration duration60 = readableInterval57.toDuration();
        org.joda.time.ReadableInterval readableInterval61 = null;
        org.joda.time.ReadableInterval readableInterval62 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval61);
        org.joda.time.ReadableInterval readableInterval63 = null;
        boolean boolean64 = readableInterval62.contains(readableInterval63);
        org.joda.time.Duration duration65 = readableInterval62.toDuration();
        org.joda.time.DateTime dateTime66 = readableInterval62.getEnd();
        boolean boolean67 = readableInterval57.isBefore((org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.DateTime dateTime68 = partial31.toDateTime((org.joda.time.ReadableInstant) dateTime66);
        java.lang.String str69 = partial31.toStringList();
        boolean boolean70 = partial0.isEqual((org.joda.time.ReadablePartial) partial31);
        java.lang.String str71 = partial31.toStringList();
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 10L + "'", long37 == 10L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray44);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10L + "'", long51 == 10L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(readableInterval57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(readableInterval62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[]" + "'", str69, "[]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[]" + "'", str71, "[]");
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0083");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        long long24 = remainderDateTimeField22.roundHalfEven((-28739965L));
        org.joda.time.ReadablePartial readablePartial25 = null;
        org.joda.time.chrono.ISOChronology iSOChronology27 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField28 = iSOChronology27.minutes();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str30 = dateTimeZone29.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology31 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology27, dateTimeZone29);
        org.joda.time.DateTimeZone dateTimeZone32 = zonedChronology31.getZone();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology31.monthOfYear();
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField35 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long38 = durationField35.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long40 = durationField35.getValueAsLong((long) 10);
        int int42 = durationField35.getValue((long) (byte) 10);
        boolean boolean43 = partial34.equals((java.lang.Object) durationField35);
        org.joda.time.Chronology chronology44 = partial34.getChronology();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        boolean boolean46 = partial34.isBefore((org.joda.time.ReadablePartial) partial45);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray47 = partial34.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval48 = null;
        org.joda.time.ReadableInterval readableInterval49 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval48);
        long long50 = readableInterval49.getStartMillis();
        org.joda.time.ReadableInterval readableInterval51 = null;
        org.joda.time.ReadableInterval readableInterval52 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval51);
        org.joda.time.ReadableInterval readableInterval53 = null;
        boolean boolean54 = readableInterval52.contains(readableInterval53);
        org.joda.time.Duration duration55 = readableInterval52.toDuration();
        org.joda.time.DateTime dateTime56 = readableInterval52.getEnd();
        boolean boolean57 = readableInterval49.contains((org.joda.time.ReadableInstant) dateTime56);
        boolean boolean58 = partial34.isMatch((org.joda.time.ReadableInstant) dateTime56);
        int[] intArray60 = zonedChronology31.get((org.joda.time.ReadablePartial) partial34, 60035L);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray62 = remainderDateTimeField22.addWrapPartial(readablePartial25, 53460006, intArray60, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 53460006");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(iSOChronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "UTC" + "'", str30, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10L + "'", long40 == 10L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray47);
        org.junit.Assert.assertNotNull(readableInterval49);
// flaky:         org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1701289161427L + "'", long50 == 1701289161427L);
        org.junit.Assert.assertNotNull(readableInterval52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1469");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField15 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long18 = durationField15.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long20 = durationField15.getValueAsLong((long) 10);
        int int22 = durationField15.getValue((long) (byte) 10);
        boolean boolean23 = partial14.equals((java.lang.Object) durationField15);
        org.joda.time.Chronology chronology24 = partial14.getChronology();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial14.isBefore((org.joda.time.ReadablePartial) partial25);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = partial14.getFieldTypes();
        boolean boolean29 = partial14.equals((java.lang.Object) 1702281558665L);
        int int30 = partial0.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField32 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long35 = durationField32.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long37 = durationField32.getValueAsLong((long) 10);
        int int39 = durationField32.getValue((long) (byte) 10);
        boolean boolean40 = partial31.equals((java.lang.Object) durationField32);
        org.joda.time.Chronology chronology41 = partial31.getChronology();
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        boolean boolean43 = partial31.isBefore((org.joda.time.ReadablePartial) partial42);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray44 = partial31.getFieldTypes();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField46 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long49 = durationField46.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long51 = durationField46.getValueAsLong((long) 10);
        int int53 = durationField46.getValue((long) (byte) 10);
        boolean boolean54 = partial45.equals((java.lang.Object) durationField46);
        boolean boolean55 = partial31.equals((java.lang.Object) durationField46);
        org.joda.time.ReadableInterval readableInterval56 = null;
        org.joda.time.ReadableInterval readableInterval57 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval56);
        org.joda.time.ReadableInterval readableInterval58 = null;
        boolean boolean59 = readableInterval57.contains(readableInterval58);
        org.joda.time.Duration duration60 = readableInterval57.toDuration();
        org.joda.time.ReadableInterval readableInterval61 = null;
        org.joda.time.ReadableInterval readableInterval62 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval61);
        org.joda.time.ReadableInterval readableInterval63 = null;
        boolean boolean64 = readableInterval62.contains(readableInterval63);
        org.joda.time.Duration duration65 = readableInterval62.toDuration();
        org.joda.time.DateTime dateTime66 = readableInterval62.getEnd();
        boolean boolean67 = readableInterval57.isBefore((org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.DateTime dateTime68 = partial31.toDateTime((org.joda.time.ReadableInstant) dateTime66);
        java.lang.String str69 = partial31.toStringList();
        boolean boolean70 = partial0.isEqual((org.joda.time.ReadablePartial) partial31);
        java.lang.Class<?> wildcardClass71 = partial31.getClass();
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 10L + "'", long37 == 10L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray44);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10L + "'", long51 == 10L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(readableInterval57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(readableInterval62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[]" + "'", str69, "[]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0291");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DurationField durationField2 = iSOChronology0.months();
        long long7 = iSOChronology0.getDateTimeMillis(1, 1, (int) (byte) 1, (int) (short) 100);
        org.joda.time.DurationField durationField8 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField10 = iSOChronology9.minutes();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology9.millisOfDay();
        org.joda.time.ReadableInterval readableInterval12 = null;
        org.joda.time.ReadableInterval readableInterval13 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval12);
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        org.joda.time.DurationField durationField16 = chronology14.millis();
        org.joda.time.DurationField durationField17 = chronology14.centuries();
        org.joda.time.ReadableInterval readableInterval18 = null;
        org.joda.time.ReadableInterval readableInterval19 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval18);
        org.joda.time.Chronology chronology20 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval18);
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfCentury();
        org.joda.time.DurationField durationField22 = chronology20.millis();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.Chronology chronology26 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval24);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval29 = null;
        org.joda.time.ReadableInterval readableInterval30 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval29);
        org.joda.time.ReadableInterval readableInterval31 = null;
        boolean boolean32 = readableInterval30.contains(readableInterval31);
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = readableInterval30.toPeriod(periodType33);
        int[] intArray36 = chronology26.get((org.joda.time.ReadablePeriod) period34, (-210866846400000L));
        int[] intArray39 = chronology20.get((org.joda.time.ReadablePeriod) period34, 2173795348453L, (long) 1439);
        int[] intArray42 = chronology14.get((org.joda.time.ReadablePeriod) period34, 291L, 2580171L);
        int[] intArray45 = iSOChronology9.get((org.joda.time.ReadablePeriod) period34, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField46 = iSOChronology9.months();
        java.lang.String str47 = iSOChronology9.toString();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = iSOChronology9.equals((java.lang.Object) partial48);
        long long51 = iSOChronology0.set((org.joda.time.ReadablePartial) partial48, (long) (short) 1);
        java.lang.String str52 = partial48.toString();
        org.joda.time.DurationFieldType durationFieldType53 = org.joda.time.DurationFieldType.days();
        org.joda.time.ReadableInterval readableInterval54 = null;
        org.joda.time.ReadableInterval readableInterval55 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval54);
        org.joda.time.Chronology chronology56 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval54);
        org.joda.time.DateTimeField dateTimeField57 = chronology56.yearOfCentury();
        org.joda.time.DurationField durationField58 = chronology56.minutes();
        boolean boolean59 = durationFieldType53.isSupported(chronology56);
        java.lang.String str60 = durationFieldType53.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial62 = partial48.withFieldAdded(durationFieldType53, 32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'days' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-62135568421900L) + "'", long7 == (-62135568421900L));
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(readableInterval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(readableInterval19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(readableInterval30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 0, 0, 0, -58574124, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[969, 11, 4, 2, 23, 52, 58, 291]");
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ISOChronology[America/Los_Angeles]" + "'", str47, "ISOChronology[America/Los_Angeles]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[]" + "'", str52, "[]");
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertNotNull(readableInterval55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "days" + "'", str60, "days");
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2843");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstanceUTC();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField2 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long5 = durationField2.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long7 = durationField2.getValueAsLong((long) 10);
        int int9 = durationField2.getValue((long) (byte) 10);
        boolean boolean10 = partial1.equals((java.lang.Object) durationField2);
        org.joda.time.Chronology chronology11 = partial1.getChronology();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial1.isBefore((org.joda.time.ReadablePartial) partial12);
        java.lang.String str14 = partial1.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType16 = dateTimeFieldType15.getDurationType();
        org.joda.time.Partial partial17 = partial1.without(dateTimeFieldType15);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone22 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology23 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone22);
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.Chronology chronology26 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval24);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfCentury();
        org.joda.time.DurationField durationField28 = chronology26.minutes();
        org.joda.time.DurationField durationField29 = chronology26.halfdays();
        org.joda.time.DurationField durationField30 = chronology26.weeks();
        org.joda.time.DateTimeField dateTimeField31 = chronology26.millisOfDay();
        boolean boolean32 = gregorianChronology23.equals((java.lang.Object) chronology26);
        boolean boolean33 = partial1.equals((java.lang.Object) boolean32);
        long long35 = iSOChronology0.set((org.joda.time.ReadablePartial) partial1, 164727302400000L);
        int[] intArray36 = partial1.getValues();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField38 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long41 = durationField38.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long43 = durationField38.getValueAsLong((long) 10);
        int int45 = durationField38.getValue((long) (byte) 10);
        boolean boolean46 = partial37.equals((java.lang.Object) durationField38);
        org.joda.time.Chronology chronology47 = partial37.getChronology();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = partial37.isBefore((org.joda.time.ReadablePartial) partial48);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray50 = partial37.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval51 = null;
        org.joda.time.ReadableInterval readableInterval52 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval51);
        long long53 = readableInterval52.getStartMillis();
        org.joda.time.ReadableInterval readableInterval54 = null;
        org.joda.time.ReadableInterval readableInterval55 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval54);
        org.joda.time.ReadableInterval readableInterval56 = null;
        boolean boolean57 = readableInterval55.contains(readableInterval56);
        org.joda.time.Duration duration58 = readableInterval55.toDuration();
        org.joda.time.DateTime dateTime59 = readableInterval55.getEnd();
        boolean boolean60 = readableInterval52.contains((org.joda.time.ReadableInstant) dateTime59);
        boolean boolean61 = partial37.isMatch((org.joda.time.ReadableInstant) dateTime59);
        int int62 = partial1.compareTo((org.joda.time.ReadablePartial) partial37);
        // The following exception was thrown during execution in test generation
        try {
            int int64 = partial37.getValue(9);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 9");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10L + "'", long7 == 10L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[]" + "'", str14, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertNotNull(gregorianChronology23);
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 164727302400000L + "'", long35 == 164727302400000L);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 10L + "'", long43 == 10L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray50);
        org.junit.Assert.assertNotNull(readableInterval52);
// flaky:         org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-296907L) + "'", long53 == (-296907L));
        org.junit.Assert.assertNotNull(readableInterval55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1849");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = null;
        boolean boolean3 = readableInterval1.contains(readableInterval2);
        org.joda.time.Duration duration4 = readableInterval1.toDuration();
        org.joda.time.DateTime dateTime5 = readableInterval1.getEnd();
        org.joda.time.Period period6 = readableInterval1.toPeriod();
        org.joda.time.Chronology chronology7 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str11 = dateTimeZone10.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology8, dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone13 = zonedChronology12.getZone();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.monthOfYear();
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField16 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long19 = durationField16.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long21 = durationField16.getValueAsLong((long) 10);
        int int23 = durationField16.getValue((long) (byte) 10);
        boolean boolean24 = partial15.equals((java.lang.Object) durationField16);
        org.joda.time.Chronology chronology25 = partial15.getChronology();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial15.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = partial15.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval29 = null;
        org.joda.time.ReadableInterval readableInterval30 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval29);
        long long31 = readableInterval30.getStartMillis();
        org.joda.time.ReadableInterval readableInterval32 = null;
        org.joda.time.ReadableInterval readableInterval33 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval32);
        org.joda.time.ReadableInterval readableInterval34 = null;
        boolean boolean35 = readableInterval33.contains(readableInterval34);
        org.joda.time.Duration duration36 = readableInterval33.toDuration();
        org.joda.time.DateTime dateTime37 = readableInterval33.getEnd();
        boolean boolean38 = readableInterval30.contains((org.joda.time.ReadableInstant) dateTime37);
        boolean boolean39 = partial15.isMatch((org.joda.time.ReadableInstant) dateTime37);
        int[] intArray41 = zonedChronology12.get((org.joda.time.ReadablePartial) partial15, 60035L);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval43 = null;
        org.joda.time.ReadableInterval readableInterval44 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval43);
        org.joda.time.Chronology chronology45 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval43);
        org.joda.time.DateTimeField dateTimeField46 = chronology45.yearOfCentury();
        boolean boolean47 = durationFieldType42.isSupported(chronology45);
        org.joda.time.DurationField durationField48 = chronology45.halfdays();
        org.joda.time.DateTimeField dateTimeField49 = chronology45.weekyearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField54 = new org.joda.time.field.OffsetDateTimeField(dateTimeField49, dateTimeFieldType50, 4, (int) ' ', (int) (short) -1);
        boolean boolean55 = partial15.isSupported(dateTimeFieldType50);
        int[] intArray57 = chronology7.get((org.joda.time.ReadablePartial) partial15, 1701260514765L);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property59 = partial15.property(dateTimeFieldType58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10L + "'", long21 == 10L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertNotNull(readableInterval30);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-476134762239L) + "'", long31 == (-476134762239L));
        org.junit.Assert.assertNotNull(readableInterval33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertNotNull(readableInterval44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2751");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add((-31L), (long) '#');
        org.joda.time.DurationField durationField10 = unsupportedDateTimeField6.getLeapDurationField();
        int int13 = unsupportedDateTimeField6.getDifference((long) (byte) 10, 10L);
        long long16 = unsupportedDateTimeField6.add((long) 1439, (int) (byte) -1);
        java.lang.String str17 = unsupportedDateTimeField6.toString();
        boolean boolean18 = unsupportedDateTimeField6.isLenient();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField20 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long23 = durationField20.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long25 = durationField20.getValueAsLong((long) 10);
        int int27 = durationField20.getValue((long) (byte) 10);
        boolean boolean28 = partial19.equals((java.lang.Object) durationField20);
        org.joda.time.ReadableInterval readableInterval29 = null;
        org.joda.time.ReadableInterval readableInterval30 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval29);
        org.joda.time.ReadableInterval readableInterval31 = null;
        boolean boolean32 = readableInterval30.contains(readableInterval31);
        org.joda.time.ReadableInterval readableInterval33 = null;
        boolean boolean34 = readableInterval30.isBefore(readableInterval33);
        org.joda.time.Interval interval35 = readableInterval30.toInterval();
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.PeriodType periodType37 = org.joda.time.DateTimeUtils.getPeriodType(periodType36);
        org.joda.time.PeriodType periodType38 = org.joda.time.DateTimeUtils.getPeriodType(periodType36);
        org.joda.time.Period period39 = readableInterval30.toPeriod(periodType38);
        org.joda.time.Partial partial40 = partial19.plus((org.joda.time.ReadablePeriod) period39);
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField42 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long45 = durationField42.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long47 = durationField42.getValueAsLong((long) 10);
        int int49 = durationField42.getValue((long) (byte) 10);
        boolean boolean50 = partial41.equals((java.lang.Object) durationField42);
        org.joda.time.chrono.ISOChronology iSOChronology51 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField52 = iSOChronology51.minutes();
        org.joda.time.DateTimeField dateTimeField53 = iSOChronology51.millisOfDay();
        org.joda.time.DateTimeField dateTimeField54 = iSOChronology51.halfdayOfDay();
        org.joda.time.ReadableInterval readableInterval55 = null;
        org.joda.time.ReadableInterval readableInterval56 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval55);
        org.joda.time.ReadableInterval readableInterval57 = null;
        boolean boolean58 = readableInterval56.contains(readableInterval57);
        org.joda.time.PeriodType periodType59 = null;
        org.joda.time.Period period60 = readableInterval56.toPeriod(periodType59);
        int[] intArray63 = iSOChronology51.get((org.joda.time.ReadablePeriod) period60, 4L, (long) '#');
        org.joda.time.Partial partial64 = partial41.plus((org.joda.time.ReadablePeriod) period60);
        org.joda.time.Partial partial65 = partial40.minus((org.joda.time.ReadablePeriod) period60);
        int[] intArray66 = partial65.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int int67 = unsupportedDateTimeField6.getMinimumValue((org.joda.time.ReadablePartial) partial65);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1438L + "'", long16 == 1438L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UnsupportedDateTimeField" + "'", str17, "UnsupportedDateTimeField");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10L + "'", long25 == 10L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(readableInterval30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 10L + "'", long47 == 10L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(iSOChronology51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(readableInterval56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0, 0, 0, 0, 0, 0, 0, 31]");
        org.junit.Assert.assertNotNull(partial64);
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[]");
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0520");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.ReadableInterval readableInterval11 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval10);
        org.joda.time.ReadableInterval readableInterval12 = null;
        boolean boolean13 = readableInterval11.contains(readableInterval12);
        org.joda.time.ReadableInterval readableInterval14 = null;
        boolean boolean15 = readableInterval11.isBefore(readableInterval14);
        org.joda.time.Interval interval16 = readableInterval11.toInterval();
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.PeriodType periodType18 = org.joda.time.DateTimeUtils.getPeriodType(periodType17);
        org.joda.time.PeriodType periodType19 = org.joda.time.DateTimeUtils.getPeriodType(periodType17);
        org.joda.time.Period period20 = readableInterval11.toPeriod(periodType19);
        org.joda.time.Partial partial21 = partial0.plus((org.joda.time.ReadablePeriod) period20);
        boolean boolean22 = org.joda.time.DateTimeUtils.isContiguous((org.joda.time.ReadablePartial) partial0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = partial0.getFieldTypes();
        org.joda.time.chrono.ISOChronology iSOChronology24 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField25 = iSOChronology24.minutes();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology24.millisOfDay();
        org.joda.time.ReadableInterval readableInterval27 = null;
        org.joda.time.ReadableInterval readableInterval28 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval27);
        org.joda.time.Chronology chronology29 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval27);
        org.joda.time.DateTimeField dateTimeField30 = chronology29.yearOfCentury();
        org.joda.time.DurationField durationField31 = chronology29.millis();
        org.joda.time.DurationField durationField32 = chronology29.centuries();
        org.joda.time.ReadableInterval readableInterval33 = null;
        org.joda.time.ReadableInterval readableInterval34 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval33);
        org.joda.time.Chronology chronology35 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval33);
        org.joda.time.DateTimeField dateTimeField36 = chronology35.yearOfCentury();
        org.joda.time.DurationField durationField37 = chronology35.millis();
        org.joda.time.DateTimeField dateTimeField38 = chronology35.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval39 = null;
        org.joda.time.ReadableInterval readableInterval40 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval39);
        org.joda.time.Chronology chronology41 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval39);
        org.joda.time.DateTimeField dateTimeField42 = chronology41.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField43 = chronology41.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval44 = null;
        org.joda.time.ReadableInterval readableInterval45 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval44);
        org.joda.time.ReadableInterval readableInterval46 = null;
        boolean boolean47 = readableInterval45.contains(readableInterval46);
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.Period period49 = readableInterval45.toPeriod(periodType48);
        int[] intArray51 = chronology41.get((org.joda.time.ReadablePeriod) period49, (-210866846400000L));
        int[] intArray54 = chronology35.get((org.joda.time.ReadablePeriod) period49, 2173795348453L, (long) 1439);
        int[] intArray57 = chronology29.get((org.joda.time.ReadablePeriod) period49, 291L, 2580171L);
        int[] intArray60 = iSOChronology24.get((org.joda.time.ReadablePeriod) period49, (-30610224000000L), 291L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial61 = new org.joda.time.Partial(dateTimeFieldTypeArray23, intArray60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Values array must be the same length as the types array");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(readableInterval11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
        org.junit.Assert.assertNotNull(iSOChronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(readableInterval28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(readableInterval34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(readableInterval40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(readableInterval45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[0, 0, 0, 0, -58574124, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[969, 11, 4, 2, 23, 52, 58, 291]");
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0827");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField15 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long18 = durationField15.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long20 = durationField15.getValueAsLong((long) 10);
        int int22 = durationField15.getValue((long) (byte) 10);
        boolean boolean23 = partial14.equals((java.lang.Object) durationField15);
        org.joda.time.Chronology chronology24 = partial14.getChronology();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial14.isBefore((org.joda.time.ReadablePartial) partial25);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = partial14.getFieldTypes();
        boolean boolean29 = partial14.equals((java.lang.Object) 1702281558665L);
        int int30 = partial0.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.ReadableInterval readableInterval31 = null;
        org.joda.time.ReadableInterval readableInterval32 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval31);
        org.joda.time.ReadableInterval readableInterval33 = null;
        boolean boolean34 = readableInterval32.contains(readableInterval33);
        org.joda.time.Chronology chronology35 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval33);
        org.joda.time.DateTimeField dateTimeField36 = chronology35.halfdayOfDay();
        long long39 = dateTimeField36.getDifferenceAsLong((-45757612800000L), (-2177424000000L));
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField41 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long44 = durationField41.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long46 = durationField41.getValueAsLong((long) 10);
        int int48 = durationField41.getValue((long) (byte) 10);
        boolean boolean49 = partial40.equals((java.lang.Object) durationField41);
        org.joda.time.Chronology chronology50 = partial40.getChronology();
        java.lang.String str51 = partial40.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray52 = partial40.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval53 = null;
        org.joda.time.ReadableInterval readableInterval54 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval53);
        org.joda.time.ReadableInterval readableInterval55 = null;
        boolean boolean56 = readableInterval54.contains(readableInterval55);
        org.joda.time.ReadableInterval readableInterval57 = null;
        boolean boolean58 = readableInterval54.isBefore(readableInterval57);
        org.joda.time.Interval interval59 = readableInterval54.toInterval();
        org.joda.time.PeriodType periodType60 = null;
        org.joda.time.PeriodType periodType61 = org.joda.time.DateTimeUtils.getPeriodType(periodType60);
        org.joda.time.PeriodType periodType62 = org.joda.time.DateTimeUtils.getPeriodType(periodType60);
        org.joda.time.Period period63 = readableInterval54.toPeriod(periodType62);
        org.joda.time.Partial partial64 = partial40.plus((org.joda.time.ReadablePeriod) period63);
        int[] intArray65 = null;
        int int66 = dateTimeField36.getMaximumValue((org.joda.time.ReadablePartial) partial40, intArray65);
        boolean boolean67 = partial14.equals((java.lang.Object) intArray65);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField69 = partial14.getField(13);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 13");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(readableInterval32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-1008800L) + "'", long39 == (-1008800L));
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10L + "'", long46 == 10L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[]" + "'", str51, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray52);
        org.junit.Assert.assertNotNull(readableInterval54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(partial64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2081");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        org.joda.time.ReadablePartial readablePartial23 = null;
        java.util.Locale locale25 = null;
        java.lang.String str26 = dividedDateTimeField11.getAsShortText(readablePartial23, (int) ' ', locale25);
        org.joda.time.ReadablePartial readablePartial27 = null;
        java.util.Locale locale29 = null;
        java.lang.String str30 = dividedDateTimeField11.getAsText(readablePartial27, (int) (byte) 10, locale29);
        long long33 = dividedDateTimeField11.add(9L, 100L);
        long long36 = dividedDateTimeField11.add(1701289178545L, (long) (byte) 1);
        org.joda.time.ReadableInterval readableInterval37 = null;
        org.joda.time.ReadableInterval readableInterval38 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval37);
        org.joda.time.Chronology chronology39 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval37);
        org.joda.time.DateTimeField dateTimeField40 = chronology39.yearOfCentury();
        org.joda.time.DurationField durationField41 = chronology39.millis();
        org.joda.time.DurationField durationField42 = chronology39.centuries();
        org.joda.time.Chronology chronology43 = chronology39.withUTC();
        org.joda.time.DurationField durationField44 = chronology43.halfdays();
        org.joda.time.DateTimeField dateTimeField45 = chronology43.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField48 = new org.joda.time.field.DividedDateTimeField(dateTimeField45, dateTimeFieldType46, 10);
        long long51 = dividedDateTimeField48.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval53 = null;
        org.joda.time.ReadableInterval readableInterval54 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval53);
        org.joda.time.Chronology chronology55 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval53);
        org.joda.time.DateTimeField dateTimeField56 = chronology55.yearOfCentury();
        org.joda.time.DurationField durationField57 = chronology55.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField58 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType52, durationField57);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField59 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField48, dateTimeFieldType52);
        org.joda.time.Partial partial61 = new org.joda.time.Partial(dateTimeFieldType52, 73);
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField65 = new org.joda.time.field.OffsetDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField11, dateTimeFieldType52, 13, 0, (int) (byte) 10);
        long long67 = offsetDateTimeField65.roundHalfCeiling(0L);
        int int69 = offsetDateTimeField65.get((-476134744733L));
        int int70 = offsetDateTimeField65.getMaximumValue();
        long long72 = offsetDateTimeField65.roundFloor(31080860457413L);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "32" + "'", str26, "32");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "10" + "'", str30, "10");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 31556995200009L + "'", long33 == 31556995200009L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 2016908378545L + "'", long36 == 2016908378545L);
        org.junit.Assert.assertNotNull(readableInterval38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-30610224000000L) + "'", long51 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(readableInterval54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField58);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 208 + "'", int69 == 208);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 10 + "'", int70 == 10);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 30925843200000L + "'", long72 == 30925843200000L);
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2060");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        org.joda.time.ReadablePartial readablePartial12 = null;
        int int13 = dividedDateTimeField11.getMaximumValue(readablePartial12);
        java.util.Locale locale16 = null;
        long long17 = dividedDateTimeField11.set((long) 28354759, "17", locale16);
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField19 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long22 = durationField19.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long24 = durationField19.getValueAsLong((long) 10);
        int int26 = durationField19.getValue((long) (byte) 10);
        boolean boolean27 = partial18.equals((java.lang.Object) durationField19);
        org.joda.time.Chronology chronology28 = partial18.getChronology();
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        boolean boolean30 = partial18.isBefore((org.joda.time.ReadablePartial) partial29);
        org.joda.time.DateTimeField[] dateTimeFieldArray31 = partial29.getFields();
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial33 = partial29.plus(readablePeriod32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial35 = partial29.minus(readablePeriod34);
        org.joda.time.Partial partial36 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial35);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone42 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology43 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone42);
        org.joda.time.DateTimeZone dateTimeZone44 = gregorianChronology43.getZone();
        long long49 = gregorianChronology43.getDateTimeMillis((int) '4', 8, 24, 24);
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField51 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long54 = durationField51.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long56 = durationField51.getValueAsLong((long) 10);
        int int58 = durationField51.getValue((long) (byte) 10);
        boolean boolean59 = partial50.equals((java.lang.Object) durationField51);
        org.joda.time.Chronology chronology60 = partial50.getChronology();
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        boolean boolean62 = partial50.isBefore((org.joda.time.ReadablePartial) partial61);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray63 = partial50.getFieldTypes();
        org.joda.time.Partial partial64 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField65 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long68 = durationField65.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long70 = durationField65.getValueAsLong((long) 10);
        int int72 = durationField65.getValue((long) (byte) 10);
        boolean boolean73 = partial64.equals((java.lang.Object) durationField65);
        boolean boolean74 = partial50.equals((java.lang.Object) durationField65);
        int[] intArray76 = gregorianChronology43.get((org.joda.time.ReadablePartial) partial50, 0L);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray78 = dividedDateTimeField11.addWrapPartial((org.joda.time.ReadablePartial) partial35, 22, intArray76, 292278993);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 22");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 29227899 + "'", int13 == 29227899);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-56802442045241L) + "'", long17 == (-56802442045241L));
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10L + "'", long24 == 10L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray31);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertNotNull(gregorianChronology43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-60505833599976L) + "'", long49 == (-60505833599976L));
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 10L + "'", long56 == 10L);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 10 + "'", int58 == 10);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray63);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1L + "'", long68 == 1L);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 10L + "'", long70 == 10L);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 10 + "'", int72 == 10);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[]");
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0235");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        org.joda.time.DurationFieldType durationFieldType23 = dateTimeFieldType15.getDurationType();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval25 = null;
        org.joda.time.ReadableInterval readableInterval26 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval25);
        org.joda.time.Chronology chronology27 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval25);
        org.joda.time.DateTimeField dateTimeField28 = chronology27.yearOfCentury();
        org.joda.time.DurationField durationField29 = chronology27.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField30 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType24, durationField29);
        long long33 = durationField29.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval35 = null;
        org.joda.time.ReadableInterval readableInterval36 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval35);
        org.joda.time.Chronology chronology37 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval35);
        org.joda.time.DateTimeField dateTimeField38 = chronology37.yearOfCentury();
        boolean boolean39 = durationFieldType34.isSupported(chronology37);
        org.joda.time.field.ScaledDurationField scaledDurationField41 = new org.joda.time.field.ScaledDurationField(durationField29, durationFieldType34, (int) 'a');
        org.joda.time.DurationField durationField42 = scaledDurationField41.getWrappedField();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField43 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, (org.joda.time.DurationField) scaledDurationField41);
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField45 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long48 = durationField45.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long50 = durationField45.getValueAsLong((long) 10);
        int int52 = durationField45.getValue((long) (byte) 10);
        boolean boolean53 = partial44.equals((java.lang.Object) durationField45);
        org.joda.time.Chronology chronology54 = partial44.getChronology();
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        boolean boolean56 = partial44.isBefore((org.joda.time.ReadablePartial) partial55);
        org.joda.time.DateTimeField[] dateTimeFieldArray57 = partial55.getFields();
        java.util.Locale locale59 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str60 = unsupportedDateTimeField43.getAsShortText((org.joda.time.ReadablePartial) partial55, 0, locale59);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(readableInterval26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-210866846400000L) + "'", long33 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertNotNull(readableInterval36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField43);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1L + "'", long48 == 1L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 10L + "'", long50 == 10L);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray57);
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1853");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval3);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DurationField durationField7 = chronology5.millis();
        org.joda.time.DurationField durationField8 = chronology5.centuries();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval9);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology11.millis();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.ReadableInterval readableInterval16 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval15);
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.ReadableInterval readableInterval21 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval20);
        org.joda.time.ReadableInterval readableInterval22 = null;
        boolean boolean23 = readableInterval21.contains(readableInterval22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = readableInterval21.toPeriod(periodType24);
        int[] intArray27 = chronology17.get((org.joda.time.ReadablePeriod) period25, (-210866846400000L));
        int[] intArray30 = chronology11.get((org.joda.time.ReadablePeriod) period25, 2173795348453L, (long) 1439);
        int[] intArray33 = chronology5.get((org.joda.time.ReadablePeriod) period25, 291L, 2580171L);
        int[] intArray36 = iSOChronology0.get((org.joda.time.ReadablePeriod) period25, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField37 = iSOChronology0.months();
        java.lang.String str38 = iSOChronology0.toString();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = iSOChronology0.equals((java.lang.Object) partial39);
        java.lang.String str41 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology0.dayOfYear();
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField44 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long47 = durationField44.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long49 = durationField44.getValueAsLong((long) 10);
        int int51 = durationField44.getValue((long) (byte) 10);
        boolean boolean52 = partial43.equals((java.lang.Object) durationField44);
        org.joda.time.Chronology chronology53 = partial43.getChronology();
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        boolean boolean55 = partial43.isBefore((org.joda.time.ReadablePartial) partial54);
        java.lang.String str56 = partial43.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType58 = dateTimeFieldType57.getDurationType();
        org.joda.time.Partial partial59 = partial43.without(dateTimeFieldType57);
        java.util.Locale locale60 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str61 = dateTimeField42.getAsText((org.joda.time.ReadablePartial) partial43, locale60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'dayOfYear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(readableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(readableInterval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(readableInterval21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[-1]" + "'", str38, "ISOChronology[-1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ISOChronology[-1]" + "'", str41, "ISOChronology[-1]");
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 10L + "'", long49 == 10L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[]" + "'", str56, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertNotNull(partial59);
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3037");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology5 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone6 = gregorianChronology5.getZone();
        long long10 = gregorianChronology5.add(0L, (long) (byte) 1, (int) (byte) 0);
        org.joda.time.DurationField durationField11 = gregorianChronology5.halfdays();
        org.joda.time.Partial partial12 = new org.joda.time.Partial((org.joda.time.Chronology) gregorianChronology5);
        org.joda.time.ReadableInterval readableInterval13 = null;
        org.joda.time.ReadableInterval readableInterval14 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval13);
        org.joda.time.Chronology chronology15 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval13);
        org.joda.time.DateTimeField dateTimeField16 = chronology15.yearOfCentury();
        org.joda.time.DurationField durationField17 = chronology15.millis();
        org.joda.time.DurationField durationField18 = chronology15.centuries();
        org.joda.time.DateTimeZone dateTimeZone19 = chronology15.getZone();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str21 = dateTimeZone20.toString();
        java.lang.String str23 = dateTimeZone20.getShortName((-210866846400000L));
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeUtils.getZone(dateTimeZone20);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone25 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone24);
        long long27 = dateTimeZone19.getMillisKeepLocal((org.joda.time.DateTimeZone) cachedDateTimeZone25, 60035L);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str29 = dateTimeZone28.toString();
        java.lang.String str31 = dateTimeZone28.getShortName((-210866846400000L));
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeUtils.getZone(dateTimeZone28);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone33 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone32);
        boolean boolean34 = cachedDateTimeZone25.equals((java.lang.Object) dateTimeZone32);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval36 = null;
        org.joda.time.ReadableInterval readableInterval37 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval36);
        org.joda.time.Chronology chronology38 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval36);
        org.joda.time.DateTimeField dateTimeField39 = chronology38.yearOfCentury();
        org.joda.time.DurationField durationField40 = chronology38.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField41 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType35, durationField40);
        long long44 = durationField40.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval46 = null;
        org.joda.time.ReadableInterval readableInterval47 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval46);
        org.joda.time.Chronology chronology48 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval46);
        org.joda.time.DateTimeField dateTimeField49 = chronology48.yearOfCentury();
        boolean boolean50 = durationFieldType45.isSupported(chronology48);
        org.joda.time.field.ScaledDurationField scaledDurationField52 = new org.joda.time.field.ScaledDurationField(durationField40, durationFieldType45, (int) 'a');
        int int54 = scaledDurationField52.getValue((long) (short) -1);
        long long57 = scaledDurationField52.add((long) (-1), 10);
        org.joda.time.DurationFieldType durationFieldType58 = scaledDurationField52.getType();
        long long61 = scaledDurationField52.getMillis(1701289159810L, (long) (-1));
        java.lang.String str62 = scaledDurationField52.getName();
        boolean boolean63 = cachedDateTimeZone25.equals((java.lang.Object) scaledDurationField52);
        org.joda.time.Chronology chronology64 = gregorianChronology5.withZone((org.joda.time.DateTimeZone) cachedDateTimeZone25);
        boolean boolean65 = cachedDateTimeZone25.isFixed();
        org.junit.Assert.assertNotNull(gregorianChronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(readableInterval14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(cachedDateTimeZone25);
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + 60044L + "'", long27 == 60044L);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "UTC" + "'", str29, "UTC");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(cachedDateTimeZone33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(readableInterval37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField41);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-210866846400000L) + "'", long44 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertNotNull(readableInterval47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 969L + "'", long57 == 969L);
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 165025048501570L + "'", long61 == 165025048501570L);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hours" + "'", str62, "hours");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2770");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.ReadableInterval readableInterval11 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval10);
        org.joda.time.ReadableInterval readableInterval12 = null;
        boolean boolean13 = readableInterval11.contains(readableInterval12);
        org.joda.time.ReadableInterval readableInterval14 = null;
        boolean boolean15 = readableInterval11.isBefore(readableInterval14);
        org.joda.time.Interval interval16 = readableInterval11.toInterval();
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.PeriodType periodType18 = org.joda.time.DateTimeUtils.getPeriodType(periodType17);
        org.joda.time.PeriodType periodType19 = org.joda.time.DateTimeUtils.getPeriodType(periodType17);
        org.joda.time.Period period20 = readableInterval11.toPeriod(periodType19);
        org.joda.time.Partial partial21 = partial0.plus((org.joda.time.ReadablePeriod) period20);
        boolean boolean22 = org.joda.time.DateTimeUtils.isContiguous((org.joda.time.ReadablePartial) partial0);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField24 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long27 = durationField24.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long29 = durationField24.getValueAsLong((long) 10);
        int int31 = durationField24.getValue((long) (byte) 10);
        boolean boolean32 = partial23.equals((java.lang.Object) durationField24);
        org.joda.time.Chronology chronology33 = partial23.getChronology();
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        boolean boolean35 = partial23.isBefore((org.joda.time.ReadablePartial) partial34);
        java.lang.String str36 = partial23.toString();
        boolean boolean37 = partial0.isBefore((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField39 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long42 = durationField39.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long44 = durationField39.getValueAsLong((long) 10);
        int int46 = durationField39.getValue((long) (byte) 10);
        boolean boolean47 = partial38.equals((java.lang.Object) durationField39);
        org.joda.time.Chronology chronology48 = partial38.getChronology();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial38.isBefore((org.joda.time.ReadablePartial) partial49);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray51 = partial38.getFieldTypes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = partial38.getFormatter();
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField54 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long57 = durationField54.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long59 = durationField54.getValueAsLong((long) 10);
        int int61 = durationField54.getValue((long) (byte) 10);
        boolean boolean62 = partial53.equals((java.lang.Object) durationField54);
        org.joda.time.Chronology chronology63 = partial53.getChronology();
        org.joda.time.Partial partial64 = new org.joda.time.Partial();
        boolean boolean65 = partial53.isBefore((org.joda.time.ReadablePartial) partial64);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray66 = partial53.getFieldTypes();
        boolean boolean68 = partial53.equals((java.lang.Object) 1702281558665L);
        int int69 = partial38.compareTo((org.joda.time.ReadablePartial) partial53);
        boolean boolean70 = partial23.isEqual((org.joda.time.ReadablePartial) partial38);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(readableInterval11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10L + "'", long29 == 10L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 10L + "'", long44 == 10L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray51);
        org.junit.Assert.assertNull(dateTimeFormatter52);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1L + "'", long57 == 1L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 10L + "'", long59 == 10L);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1015");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval3);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DurationField durationField7 = chronology5.millis();
        org.joda.time.DurationField durationField8 = chronology5.centuries();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval9);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology11.millis();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.ReadableInterval readableInterval16 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval15);
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.ReadableInterval readableInterval21 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval20);
        org.joda.time.ReadableInterval readableInterval22 = null;
        boolean boolean23 = readableInterval21.contains(readableInterval22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = readableInterval21.toPeriod(periodType24);
        int[] intArray27 = chronology17.get((org.joda.time.ReadablePeriod) period25, (-210866846400000L));
        int[] intArray30 = chronology11.get((org.joda.time.ReadablePeriod) period25, 2173795348453L, (long) 1439);
        int[] intArray33 = chronology5.get((org.joda.time.ReadablePeriod) period25, 291L, 2580171L);
        int[] intArray36 = iSOChronology0.get((org.joda.time.ReadablePeriod) period25, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField37 = iSOChronology0.months();
        java.lang.String str38 = iSOChronology0.toString();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = iSOChronology0.equals((java.lang.Object) partial39);
        org.joda.time.Chronology chronology41 = org.joda.time.DateTimeUtils.getChronology((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone46 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        int int48 = fixedDateTimeZone46.getStandardOffset((long) 1439);
        boolean boolean49 = fixedDateTimeZone46.isFixed();
        long long51 = fixedDateTimeZone46.nextTransition((long) 24);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        long long55 = dateTimeZone52.adjustOffset((long) 100, true);
        long long57 = fixedDateTimeZone46.getMillisKeepLocal(dateTimeZone52, 10L);
        org.joda.time.Chronology chronology58 = iSOChronology0.withZone((org.joda.time.DateTimeZone) fixedDateTimeZone46);
        org.joda.time.DateTimeField dateTimeField59 = iSOChronology0.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DurationFieldType durationFieldType61 = dateTimeFieldType60.getRangeDurationType();
        java.lang.String str62 = dateTimeFieldType60.getName();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.field.RemainderDateTimeField remainderDateTimeField64 = new org.joda.time.field.RemainderDateTimeField(dateTimeField59, dateTimeFieldType60, (-223445));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The divisor must be at least 2");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(readableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(readableInterval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(readableInterval21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(intArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(durationField37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[hourOfDay]" + "'", str38, "ISOChronology[hourOfDay]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 24L + "'", long51 == 24L);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 100L + "'", long55 == 100L);
// flaky:         org.junit.Assert.assertTrue("'" + long57 + "' != '" + 3L + "'", long57 == 3L);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "minuteOfDay" + "'", str62, "minuteOfDay");
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0653");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.weekyearOfCentury();
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField5 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long8 = durationField5.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long10 = durationField5.getValueAsLong((long) 10);
        int int12 = durationField5.getValue((long) (byte) 10);
        boolean boolean13 = partial4.equals((java.lang.Object) durationField5);
        org.joda.time.Chronology chronology14 = partial4.getChronology();
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        boolean boolean16 = partial4.isBefore((org.joda.time.ReadablePartial) partial15);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = partial4.getFieldTypes();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField19 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long22 = durationField19.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long24 = durationField19.getValueAsLong((long) 10);
        int int26 = durationField19.getValue((long) (byte) 10);
        boolean boolean27 = partial18.equals((java.lang.Object) durationField19);
        org.joda.time.Chronology chronology28 = partial18.getChronology();
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        boolean boolean30 = partial18.isBefore((org.joda.time.ReadablePartial) partial29);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray31 = partial18.getFieldTypes();
        boolean boolean33 = partial18.equals((java.lang.Object) 1702281558665L);
        int int34 = partial4.compareTo((org.joda.time.ReadablePartial) partial18);
        java.util.Locale locale36 = null;
        java.lang.String str37 = dateTimeField3.getAsText((org.joda.time.ReadablePartial) partial4, (int) (byte) 10, locale36);
        int int38 = partial4.size();
        org.joda.time.ReadableInterval readableInterval39 = null;
        org.joda.time.ReadableInterval readableInterval40 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval39);
        org.joda.time.Chronology chronology41 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval39);
        org.joda.time.DateTimeField dateTimeField42 = chronology41.yearOfCentury();
        org.joda.time.DurationField durationField43 = chronology41.millis();
        org.joda.time.DurationField durationField44 = chronology41.centuries();
        org.joda.time.Chronology chronology45 = chronology41.withUTC();
        org.joda.time.DurationField durationField46 = chronology45.halfdays();
        org.joda.time.DateTimeField dateTimeField47 = chronology45.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField50 = new org.joda.time.field.DividedDateTimeField(dateTimeField47, dateTimeFieldType48, 10);
        long long53 = dividedDateTimeField50.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval55 = null;
        org.joda.time.ReadableInterval readableInterval56 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval55);
        org.joda.time.Chronology chronology57 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval55);
        org.joda.time.DateTimeField dateTimeField58 = chronology57.yearOfCentury();
        org.joda.time.DurationField durationField59 = chronology57.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField60 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType54, durationField59);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField61 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField50, dateTimeFieldType54);
        org.joda.time.Partial partial63 = new org.joda.time.Partial(dateTimeFieldType54, 73);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean64 = partial4.isBefore((org.joda.time.ReadablePartial) partial63);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10L + "'", long24 == 10L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "10" + "'", str37, "10");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(readableInterval40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-30610224000000L) + "'", long53 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(readableInterval56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField60);
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1487");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        long long24 = remainderDateTimeField22.roundHalfFloor(3600000L);
        org.joda.time.DurationField durationField25 = remainderDateTimeField22.getRangeDurationField();
        org.joda.time.DurationField durationField26 = remainderDateTimeField22.iRangeField;
        long long29 = remainderDateTimeField22.getDifferenceAsLong(222926773380171L, 28757962108L);
        org.joda.time.ReadablePartial readablePartial30 = null;
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone36 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology37 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone38 = gregorianChronology37.getZone();
        long long42 = gregorianChronology37.add(0L, (long) (byte) 1, (int) (byte) 0);
        org.joda.time.DateTimeField dateTimeField43 = gregorianChronology37.millisOfDay();
        org.joda.time.DurationField durationField44 = gregorianChronology37.weeks();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField46 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long49 = durationField46.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long51 = durationField46.getValueAsLong((long) 10);
        int int53 = durationField46.getValue((long) (byte) 10);
        boolean boolean54 = partial45.equals((java.lang.Object) durationField46);
        org.joda.time.ReadableInterval readableInterval55 = null;
        org.joda.time.ReadableInterval readableInterval56 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval55);
        org.joda.time.ReadableInterval readableInterval57 = null;
        boolean boolean58 = readableInterval56.contains(readableInterval57);
        org.joda.time.ReadableInterval readableInterval59 = null;
        boolean boolean60 = readableInterval56.isBefore(readableInterval59);
        org.joda.time.Interval interval61 = readableInterval56.toInterval();
        org.joda.time.PeriodType periodType62 = null;
        org.joda.time.PeriodType periodType63 = org.joda.time.DateTimeUtils.getPeriodType(periodType62);
        org.joda.time.PeriodType periodType64 = org.joda.time.DateTimeUtils.getPeriodType(periodType62);
        org.joda.time.Period period65 = readableInterval56.toPeriod(periodType64);
        org.joda.time.Partial partial66 = partial45.plus((org.joda.time.ReadablePeriod) period65);
        int[] intArray69 = gregorianChronology37.get((org.joda.time.ReadablePeriod) period65, 1701289178545L, (long) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray71 = remainderDateTimeField22.addWrapField(readablePartial30, 19691, intArray69, 99);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 19691");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 7063L + "'", long29 == 7063L);
        org.junit.Assert.assertNotNull(gregorianChronology37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10L + "'", long51 == 10L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(readableInterval56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(partial66);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-53, -10, -4, 0, -20, -19, -38, -545]");
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1776");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        org.joda.time.ReadablePartial readablePartial23 = null;
        java.util.Locale locale25 = null;
        java.lang.String str26 = dividedDateTimeField11.getAsShortText(readablePartial23, (int) ' ', locale25);
        org.joda.time.ReadablePartial readablePartial27 = null;
        java.util.Locale locale29 = null;
        java.lang.String str30 = dividedDateTimeField11.getAsText(readablePartial27, (int) (byte) 10, locale29);
        long long33 = dividedDateTimeField11.add(9L, 100L);
        long long36 = dividedDateTimeField11.add(1701289178545L, (long) (byte) 1);
        org.joda.time.ReadableInterval readableInterval37 = null;
        org.joda.time.ReadableInterval readableInterval38 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval37);
        org.joda.time.Chronology chronology39 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval37);
        org.joda.time.DateTimeField dateTimeField40 = chronology39.yearOfCentury();
        org.joda.time.DurationField durationField41 = chronology39.millis();
        org.joda.time.DurationField durationField42 = chronology39.centuries();
        org.joda.time.Chronology chronology43 = chronology39.withUTC();
        org.joda.time.DurationField durationField44 = chronology43.halfdays();
        org.joda.time.DateTimeField dateTimeField45 = chronology43.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField48 = new org.joda.time.field.DividedDateTimeField(dateTimeField45, dateTimeFieldType46, 10);
        long long51 = dividedDateTimeField48.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval53 = null;
        org.joda.time.ReadableInterval readableInterval54 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval53);
        org.joda.time.Chronology chronology55 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval53);
        org.joda.time.DateTimeField dateTimeField56 = chronology55.yearOfCentury();
        org.joda.time.DurationField durationField57 = chronology55.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField58 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType52, durationField57);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField59 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField48, dateTimeFieldType52);
        org.joda.time.Partial partial61 = new org.joda.time.Partial(dateTimeFieldType52, 73);
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField65 = new org.joda.time.field.OffsetDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField11, dateTimeFieldType52, 13, 0, (int) (byte) 10);
        long long67 = offsetDateTimeField65.roundHalfCeiling(0L);
        // The following exception was thrown during execution in test generation
        try {
            long long70 = offsetDateTimeField65.addWrapField(0L, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MIN > MAX");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "32" + "'", str26, "32");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "10" + "'", str30, "10");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 31556995200009L + "'", long33 == 31556995200009L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 2016908378545L + "'", long36 == 2016908378545L);
        org.junit.Assert.assertNotNull(readableInterval38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-30610224000000L) + "'", long51 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(readableInterval54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField58);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1257");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval14 = null;
        org.joda.time.ReadableInterval readableInterval15 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval14);
        long long16 = readableInterval15.getStartMillis();
        org.joda.time.ReadableInterval readableInterval17 = null;
        org.joda.time.ReadableInterval readableInterval18 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval17);
        org.joda.time.ReadableInterval readableInterval19 = null;
        boolean boolean20 = readableInterval18.contains(readableInterval19);
        org.joda.time.Duration duration21 = readableInterval18.toDuration();
        org.joda.time.DateTime dateTime22 = readableInterval18.getEnd();
        boolean boolean23 = readableInterval15.contains((org.joda.time.ReadableInstant) dateTime22);
        boolean boolean24 = partial0.isMatch((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField26 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long29 = durationField26.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long31 = durationField26.getValueAsLong((long) 10);
        int int33 = durationField26.getValue((long) (byte) 10);
        boolean boolean34 = partial25.equals((java.lang.Object) durationField26);
        org.joda.time.Chronology chronology35 = partial25.getChronology();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        boolean boolean37 = partial25.isBefore((org.joda.time.ReadablePartial) partial36);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray38 = partial25.getFieldTypes();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField40 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long43 = durationField40.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long45 = durationField40.getValueAsLong((long) 10);
        int int47 = durationField40.getValue((long) (byte) 10);
        boolean boolean48 = partial39.equals((java.lang.Object) durationField40);
        boolean boolean49 = partial25.equals((java.lang.Object) durationField40);
        org.joda.time.ReadableInterval readableInterval50 = null;
        org.joda.time.ReadableInterval readableInterval51 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval50);
        org.joda.time.ReadableInterval readableInterval52 = null;
        boolean boolean53 = readableInterval51.contains(readableInterval52);
        org.joda.time.Duration duration54 = readableInterval51.toDuration();
        org.joda.time.ReadableInterval readableInterval55 = null;
        org.joda.time.ReadableInterval readableInterval56 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval55);
        org.joda.time.ReadableInterval readableInterval57 = null;
        boolean boolean58 = readableInterval56.contains(readableInterval57);
        org.joda.time.Duration duration59 = readableInterval56.toDuration();
        org.joda.time.DateTime dateTime60 = readableInterval56.getEnd();
        boolean boolean61 = readableInterval51.isBefore((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.DateTime dateTime62 = partial25.toDateTime((org.joda.time.ReadableInstant) dateTime60);
        boolean boolean63 = partial0.isBefore((org.joda.time.ReadablePartial) partial25);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray64 = partial25.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray65 = partial25.getFieldTypes();
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(readableInterval15);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 315639019277L + "'", long16 == 315639019277L);
        org.junit.Assert.assertNotNull(readableInterval18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 10L + "'", long31 == 10L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray38);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 10L + "'", long45 == 10L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(readableInterval51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(readableInterval56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray64);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray65);
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2788");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DurationField durationField2 = iSOChronology0.months();
        org.joda.time.DurationField durationField3 = iSOChronology0.years();
        org.joda.time.DurationField durationField4 = iSOChronology0.hours();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.hourOfDay();
        org.joda.time.DurationField durationField6 = iSOChronology0.minutes();
        org.joda.time.DurationField durationField7 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.clockhourOfHalfday();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField12 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long15 = durationField12.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long17 = durationField12.getValueAsLong((long) 10);
        int int19 = durationField12.getValue((long) (byte) 10);
        boolean boolean20 = partial11.equals((java.lang.Object) durationField12);
        org.joda.time.Chronology chronology21 = partial11.getChronology();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial11.isBefore((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Partial partial24 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField26 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long29 = durationField26.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long31 = durationField26.getValueAsLong((long) 10);
        int int33 = durationField26.getValue((long) (byte) 10);
        boolean boolean34 = partial25.equals((java.lang.Object) durationField26);
        org.joda.time.Chronology chronology35 = partial25.getChronology();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        boolean boolean37 = partial25.isBefore((org.joda.time.ReadablePartial) partial36);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray38 = partial25.getFieldTypes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = partial25.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray40 = partial25.getFieldTypes();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField42 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long45 = durationField42.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long47 = durationField42.getValueAsLong((long) 10);
        int int49 = durationField42.getValue((long) (byte) 10);
        boolean boolean50 = partial41.equals((java.lang.Object) durationField42);
        org.joda.time.Chronology chronology51 = partial41.getChronology();
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        boolean boolean53 = partial41.isBefore((org.joda.time.ReadablePartial) partial52);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray54 = partial41.getFieldTypes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = partial41.getFormatter();
        int[] intArray56 = partial41.getValues();
        org.joda.time.ReadableInterval readableInterval57 = null;
        org.joda.time.ReadableInterval readableInterval58 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval57);
        org.joda.time.ReadableInterval readableInterval59 = null;
        boolean boolean60 = readableInterval58.contains(readableInterval59);
        org.joda.time.Duration duration61 = readableInterval58.toDuration();
        org.joda.time.DateTime dateTime62 = readableInterval58.getEnd();
        org.joda.time.Period period63 = readableInterval58.toPeriod();
        org.joda.time.Chronology chronology64 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval58);
        org.joda.time.Partial partial65 = new org.joda.time.Partial(dateTimeFieldTypeArray40, intArray56, chronology64);
        iSOChronology0.validate((org.joda.time.ReadablePartial) partial24, intArray56);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 10L + "'", long31 == 10L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray38);
        org.junit.Assert.assertNull(dateTimeFormatter39);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray40);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 10L + "'", long47 == 10L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray54);
        org.junit.Assert.assertNull(dateTimeFormatter55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
        org.junit.Assert.assertNotNull(readableInterval58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(chronology64);
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0483");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField11 = new org.joda.time.field.OffsetDateTimeField(dateTimeField8, dateTimeFieldType9, (int) (short) 1);
        java.lang.String str13 = offsetDateTimeField11.getAsText((long) 1);
        long long15 = offsetDateTimeField11.roundHalfFloor((-210858120000000L));
        java.lang.String str16 = offsetDateTimeField11.getName();
        org.joda.time.ReadableInterval readableInterval17 = null;
        org.joda.time.ReadableInterval readableInterval18 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval17);
        org.joda.time.Chronology chronology19 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval17);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfCentury();
        org.joda.time.DurationField durationField21 = chronology19.minutes();
        long long22 = durationField21.getUnitMillis();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField25 = new org.joda.time.field.DividedDateTimeField((org.joda.time.DateTimeField) offsetDateTimeField11, durationField21, dateTimeFieldType23, (int) '#');
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField27 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long30 = durationField27.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long32 = durationField27.getValueAsLong((long) 10);
        int int34 = durationField27.getValue((long) (byte) 10);
        boolean boolean35 = partial26.equals((java.lang.Object) durationField27);
        org.joda.time.chrono.ISOChronology iSOChronology36 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField37 = iSOChronology36.minutes();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology36.millisOfDay();
        org.joda.time.DateTimeField dateTimeField39 = iSOChronology36.halfdayOfDay();
        org.joda.time.ReadableInterval readableInterval40 = null;
        org.joda.time.ReadableInterval readableInterval41 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval40);
        org.joda.time.ReadableInterval readableInterval42 = null;
        boolean boolean43 = readableInterval41.contains(readableInterval42);
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Period period45 = readableInterval41.toPeriod(periodType44);
        int[] intArray48 = iSOChronology36.get((org.joda.time.ReadablePeriod) period45, 4L, (long) '#');
        org.joda.time.Partial partial49 = partial26.plus((org.joda.time.ReadablePeriod) period45);
        org.joda.time.chrono.ISOChronology iSOChronology50 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField51 = iSOChronology50.minutes();
        org.joda.time.DateTimeField dateTimeField52 = iSOChronology50.millisOfDay();
        org.joda.time.DateTimeField dateTimeField53 = iSOChronology50.halfdayOfDay();
        org.joda.time.DurationField durationField54 = iSOChronology50.seconds();
        java.lang.String str55 = iSOChronology50.toString();
        org.joda.time.DateTimeField dateTimeField56 = iSOChronology50.clockhourOfHalfday();
        org.joda.time.Partial partial57 = partial49.withChronologyRetainFields((org.joda.time.Chronology) iSOChronology50);
        int[] intArray59 = null;
        java.util.Locale locale61 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray62 = offsetDateTimeField11.set((org.joda.time.ReadablePartial) partial49, 0, intArray59, "196", locale61);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 196 for millisOfDay must be in the range [1,24]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "17" + "'", str13, "17");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-210858120422000L) + "'", long15 == (-210858120422000L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "millisOfDay" + "'", str16, "millisOfDay");
        org.junit.Assert.assertNotNull(readableInterval18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 60000L + "'", long22 == 60000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10L + "'", long32 == 10L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(iSOChronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(readableInterval41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[0, 0, 0, 0, 0, 0, 0, 31]");
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertNotNull(iSOChronology50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ISOChronology[America/Los_Angeles]" + "'", str55, "ISOChronology[America/Los_Angeles]");
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(partial57);
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3022");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstanceUTC();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField2 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long5 = durationField2.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long7 = durationField2.getValueAsLong((long) 10);
        int int9 = durationField2.getValue((long) (byte) 10);
        boolean boolean10 = partial1.equals((java.lang.Object) durationField2);
        org.joda.time.Chronology chronology11 = partial1.getChronology();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial1.isBefore((org.joda.time.ReadablePartial) partial12);
        java.lang.String str14 = partial1.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType16 = dateTimeFieldType15.getDurationType();
        org.joda.time.Partial partial17 = partial1.without(dateTimeFieldType15);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone22 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology23 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone22);
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.Chronology chronology26 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval24);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfCentury();
        org.joda.time.DurationField durationField28 = chronology26.minutes();
        org.joda.time.DurationField durationField29 = chronology26.halfdays();
        org.joda.time.DurationField durationField30 = chronology26.weeks();
        org.joda.time.DateTimeField dateTimeField31 = chronology26.millisOfDay();
        boolean boolean32 = gregorianChronology23.equals((java.lang.Object) chronology26);
        boolean boolean33 = partial1.equals((java.lang.Object) boolean32);
        long long35 = iSOChronology0.set((org.joda.time.ReadablePartial) partial1, 164727302400000L);
        int[] intArray36 = partial1.getValues();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField38 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long41 = durationField38.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long43 = durationField38.getValueAsLong((long) 10);
        int int45 = durationField38.getValue((long) (byte) 10);
        boolean boolean46 = partial37.equals((java.lang.Object) durationField38);
        org.joda.time.Chronology chronology47 = partial37.getChronology();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = partial37.isBefore((org.joda.time.ReadablePartial) partial48);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray50 = partial37.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval51 = null;
        org.joda.time.ReadableInterval readableInterval52 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval51);
        long long53 = readableInterval52.getStartMillis();
        org.joda.time.ReadableInterval readableInterval54 = null;
        org.joda.time.ReadableInterval readableInterval55 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval54);
        org.joda.time.ReadableInterval readableInterval56 = null;
        boolean boolean57 = readableInterval55.contains(readableInterval56);
        org.joda.time.Duration duration58 = readableInterval55.toDuration();
        org.joda.time.DateTime dateTime59 = readableInterval55.getEnd();
        boolean boolean60 = readableInterval52.contains((org.joda.time.ReadableInstant) dateTime59);
        boolean boolean61 = partial37.isMatch((org.joda.time.ReadableInstant) dateTime59);
        int int62 = partial1.compareTo((org.joda.time.ReadablePartial) partial37);
        java.lang.Object obj63 = null;
        boolean boolean64 = partial37.equals(obj63);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10L + "'", long7 == 10L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[]" + "'", str14, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertNotNull(gregorianChronology23);
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 164727302400000L + "'", long35 == 164727302400000L);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 10L + "'", long43 == 10L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray50);
        org.junit.Assert.assertNotNull(readableInterval52);
// flaky:         org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-296907L) + "'", long53 == (-296907L));
        org.junit.Assert.assertNotNull(readableInterval55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2815");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.weekyearOfCentury();
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField5 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long8 = durationField5.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long10 = durationField5.getValueAsLong((long) 10);
        int int12 = durationField5.getValue((long) (byte) 10);
        boolean boolean13 = partial4.equals((java.lang.Object) durationField5);
        org.joda.time.Chronology chronology14 = partial4.getChronology();
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        boolean boolean16 = partial4.isBefore((org.joda.time.ReadablePartial) partial15);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = partial4.getFieldTypes();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField19 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long22 = durationField19.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long24 = durationField19.getValueAsLong((long) 10);
        int int26 = durationField19.getValue((long) (byte) 10);
        boolean boolean27 = partial18.equals((java.lang.Object) durationField19);
        org.joda.time.Chronology chronology28 = partial18.getChronology();
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        boolean boolean30 = partial18.isBefore((org.joda.time.ReadablePartial) partial29);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray31 = partial18.getFieldTypes();
        boolean boolean33 = partial18.equals((java.lang.Object) 1702281558665L);
        int int34 = partial4.compareTo((org.joda.time.ReadablePartial) partial18);
        java.util.Locale locale36 = null;
        java.lang.String str37 = dateTimeField3.getAsText((org.joda.time.ReadablePartial) partial4, (int) (byte) 10, locale36);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField39 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long42 = durationField39.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long44 = durationField39.getValueAsLong((long) 10);
        int int46 = durationField39.getValue((long) (byte) 10);
        boolean boolean47 = partial38.equals((java.lang.Object) durationField39);
        org.joda.time.Chronology chronology48 = partial38.getChronology();
        java.lang.String str49 = partial38.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray50 = partial38.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval51 = null;
        org.joda.time.ReadableInterval readableInterval52 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval51);
        org.joda.time.ReadableInterval readableInterval53 = null;
        boolean boolean54 = readableInterval52.contains(readableInterval53);
        org.joda.time.ReadableInterval readableInterval55 = null;
        boolean boolean56 = readableInterval52.isBefore(readableInterval55);
        org.joda.time.Interval interval57 = readableInterval52.toInterval();
        org.joda.time.PeriodType periodType58 = null;
        org.joda.time.PeriodType periodType59 = org.joda.time.DateTimeUtils.getPeriodType(periodType58);
        org.joda.time.PeriodType periodType60 = org.joda.time.DateTimeUtils.getPeriodType(periodType58);
        org.joda.time.Period period61 = readableInterval52.toPeriod(periodType60);
        org.joda.time.Partial partial62 = partial38.plus((org.joda.time.ReadablePeriod) period61);
        java.lang.String str63 = partial62.toStringList();
        java.lang.String str64 = partial62.toStringList();
        boolean boolean65 = partial4.isAfter((org.joda.time.ReadablePartial) partial62);
        org.joda.time.Chronology chronology66 = partial4.getChronology();
        int[] intArray67 = partial4.getValues();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10L + "'", long24 == 10L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "10" + "'", str37, "10");
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 10L + "'", long44 == 10L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[]" + "'", str49, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray50);
        org.junit.Assert.assertNotNull(readableInterval52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(partial62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "[]" + "'", str63, "[]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[]" + "'", str64, "[]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2526");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfWeek();
        java.lang.String str1 = dateTimeFieldType0.getName();
        org.joda.time.IllegalFieldValueException illegalFieldValueException3 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType0, "-08:00");
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval5 = null;
        org.joda.time.ReadableInterval readableInterval6 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval5);
        org.joda.time.Chronology chronology7 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval5);
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfCentury();
        org.joda.time.DurationField durationField9 = chronology7.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField10 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType4, durationField9);
        long long13 = durationField9.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.ReadableInterval readableInterval16 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval15);
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        boolean boolean19 = durationFieldType14.isSupported(chronology17);
        org.joda.time.field.ScaledDurationField scaledDurationField21 = new org.joda.time.field.ScaledDurationField(durationField9, durationFieldType14, (int) 'a');
        int int23 = scaledDurationField21.getValue((long) (short) -1);
        boolean boolean24 = scaledDurationField21.isSupported();
        long long27 = scaledDurationField21.getDifferenceAsLong(28800001L, (-210858120000000L));
        java.lang.String str28 = scaledDurationField21.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType30 = dateTimeFieldType29.getDurationType();
        org.joda.time.field.PreciseDurationField preciseDurationField32 = new org.joda.time.field.PreciseDurationField(durationFieldType30, 28354819L);
        long long33 = preciseDurationField32.getUnitMillis();
        boolean boolean34 = preciseDurationField32.isPrecise();
        long long37 = preciseDurationField32.getValueAsLong((long) 719, 306607L);
        org.joda.time.field.PreciseDateTimeField preciseDateTimeField38 = new org.joda.time.field.PreciseDateTimeField(dateTimeFieldType0, (org.joda.time.DurationField) scaledDurationField21, (org.joda.time.DurationField) preciseDurationField32);
        int int40 = preciseDateTimeField38.get(4L);
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField42 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long45 = durationField42.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long47 = durationField42.getValueAsLong((long) 10);
        int int49 = durationField42.getValue((long) (byte) 10);
        boolean boolean50 = partial41.equals((java.lang.Object) durationField42);
        org.joda.time.Chronology chronology51 = partial41.getChronology();
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        boolean boolean53 = partial41.isBefore((org.joda.time.ReadablePartial) partial52);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray54 = partial41.getFieldTypes();
        boolean boolean56 = partial41.equals((java.lang.Object) 1702281558665L);
        java.lang.String str57 = partial41.toString();
        java.lang.String str58 = partial41.toString();
        int int59 = partial41.size();
        boolean boolean60 = org.joda.time.DateTimeUtils.isContiguous((org.joda.time.ReadablePartial) partial41);
        java.util.Locale locale61 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str62 = preciseDateTimeField38.getAsText((org.joda.time.ReadablePartial) partial41, locale61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'dayOfWeek' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "dayOfWeek" + "'", str1, "dayOfWeek");
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(readableInterval6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-210866846400000L) + "'", long13 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(readableInterval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 2173795348453L + "'", long27 == 2173795348453L);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "DurationField[hours]" + "'", str28, "DurationField[hours]");
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 28354819L + "'", long33 == 28354819L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 10L + "'", long47 == 10L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[]" + "'", str58, "[]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1064");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology5 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField7 = iSOChronology6.minutes();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str9 = dateTimeZone8.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology10 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology6, dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone11 = zonedChronology10.getZone();
        boolean boolean12 = fixedDateTimeZone4.equals((java.lang.Object) zonedChronology10);
        org.joda.time.DurationField durationField13 = zonedChronology10.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField15 = iSOChronology14.minutes();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology14.millisOfDay();
        org.joda.time.ReadableInterval readableInterval17 = null;
        org.joda.time.ReadableInterval readableInterval18 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval17);
        org.joda.time.Chronology chronology19 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval17);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfCentury();
        org.joda.time.DurationField durationField21 = chronology19.millis();
        org.joda.time.DurationField durationField22 = chronology19.centuries();
        org.joda.time.ReadableInterval readableInterval23 = null;
        org.joda.time.ReadableInterval readableInterval24 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval23);
        org.joda.time.Chronology chronology25 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval23);
        org.joda.time.DateTimeField dateTimeField26 = chronology25.yearOfCentury();
        org.joda.time.DurationField durationField27 = chronology25.millis();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval29 = null;
        org.joda.time.ReadableInterval readableInterval30 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval29);
        org.joda.time.Chronology chronology31 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval29);
        org.joda.time.DateTimeField dateTimeField32 = chronology31.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval34 = null;
        org.joda.time.ReadableInterval readableInterval35 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval34);
        org.joda.time.ReadableInterval readableInterval36 = null;
        boolean boolean37 = readableInterval35.contains(readableInterval36);
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Period period39 = readableInterval35.toPeriod(periodType38);
        int[] intArray41 = chronology31.get((org.joda.time.ReadablePeriod) period39, (-210866846400000L));
        int[] intArray44 = chronology25.get((org.joda.time.ReadablePeriod) period39, 2173795348453L, (long) 1439);
        int[] intArray47 = chronology19.get((org.joda.time.ReadablePeriod) period39, 291L, 2580171L);
        int[] intArray50 = iSOChronology14.get((org.joda.time.ReadablePeriod) period39, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField51 = iSOChronology14.months();
        java.lang.String str52 = iSOChronology14.toString();
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        boolean boolean54 = iSOChronology14.equals((java.lang.Object) partial53);
        java.lang.String str55 = iSOChronology14.toString();
        boolean boolean56 = zonedChronology10.equals((java.lang.Object) iSOChronology14);
        org.joda.time.DurationField durationField57 = zonedChronology10.seconds();
        java.lang.String str58 = zonedChronology10.toString();
        org.junit.Assert.assertNotNull(gregorianChronology5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(readableInterval18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(readableInterval24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(readableInterval30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(readableInterval35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(intArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(durationField51);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ISOChronology[hourOfDay]" + "'", str52, "ISOChronology[hourOfDay]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ISOChronology[hourOfDay]" + "'", str55, "ISOChronology[hourOfDay]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str58, "ZonedChronology[ISOChronology[UTC], UTC]");
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2007");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField11 = iSOChronology10.minutes();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology10.halfdayOfDay();
        org.joda.time.ReadableInterval readableInterval14 = null;
        org.joda.time.ReadableInterval readableInterval15 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval14);
        org.joda.time.ReadableInterval readableInterval16 = null;
        boolean boolean17 = readableInterval15.contains(readableInterval16);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = readableInterval15.toPeriod(periodType18);
        int[] intArray22 = iSOChronology10.get((org.joda.time.ReadablePeriod) period19, 4L, (long) '#');
        org.joda.time.Partial partial23 = partial0.plus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Partial partial25 = partial23.without(dateTimeFieldType24);
        org.joda.time.chrono.ISOChronology iSOChronology26 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField27 = iSOChronology26.minutes();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str29 = dateTimeZone28.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology30 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology26, dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone31 = zonedChronology30.getZone();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology30.monthOfYear();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField34 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long37 = durationField34.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long39 = durationField34.getValueAsLong((long) 10);
        int int41 = durationField34.getValue((long) (byte) 10);
        boolean boolean42 = partial33.equals((java.lang.Object) durationField34);
        org.joda.time.Chronology chronology43 = partial33.getChronology();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        boolean boolean45 = partial33.isBefore((org.joda.time.ReadablePartial) partial44);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray46 = partial33.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval47 = null;
        org.joda.time.ReadableInterval readableInterval48 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval47);
        long long49 = readableInterval48.getStartMillis();
        org.joda.time.ReadableInterval readableInterval50 = null;
        org.joda.time.ReadableInterval readableInterval51 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval50);
        org.joda.time.ReadableInterval readableInterval52 = null;
        boolean boolean53 = readableInterval51.contains(readableInterval52);
        org.joda.time.Duration duration54 = readableInterval51.toDuration();
        org.joda.time.DateTime dateTime55 = readableInterval51.getEnd();
        boolean boolean56 = readableInterval48.contains((org.joda.time.ReadableInstant) dateTime55);
        boolean boolean57 = partial33.isMatch((org.joda.time.ReadableInstant) dateTime55);
        int[] intArray59 = zonedChronology30.get((org.joda.time.ReadablePartial) partial33, 60035L);
        org.joda.time.DateTimeField dateTimeField60 = zonedChronology30.secondOfMinute();
        org.joda.time.Partial partial61 = partial23.withChronologyRetainFields((org.joda.time.Chronology) zonedChronology30);
        org.joda.time.DateTimeZone dateTimeZone62 = zonedChronology30.getZone();
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(iSOChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(readableInterval15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 0, 0, 0, 0, 0, 0, 31]");
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(iSOChronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "UTC" + "'", str29, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L + "'", long37 == 1L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 10L + "'", long39 == 10L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray46);
        org.junit.Assert.assertNotNull(readableInterval48);
// flaky:         org.junit.Assert.assertTrue("'" + long49 + "' != '" + 114669905166806L + "'", long49 == 114669905166806L);
        org.junit.Assert.assertNotNull(readableInterval51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1352");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField11 = iSOChronology10.minutes();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology10.halfdayOfDay();
        org.joda.time.ReadableInterval readableInterval14 = null;
        org.joda.time.ReadableInterval readableInterval15 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval14);
        org.joda.time.ReadableInterval readableInterval16 = null;
        boolean boolean17 = readableInterval15.contains(readableInterval16);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = readableInterval15.toPeriod(periodType18);
        int[] intArray22 = iSOChronology10.get((org.joda.time.ReadablePeriod) period19, 4L, (long) '#');
        org.joda.time.Partial partial23 = partial0.plus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.chrono.ISOChronology iSOChronology24 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField25 = iSOChronology24.minutes();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology24.millisOfDay();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology24.halfdayOfDay();
        org.joda.time.DurationField durationField28 = iSOChronology24.seconds();
        java.lang.String str29 = iSOChronology24.toString();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology24.clockhourOfHalfday();
        org.joda.time.Partial partial31 = partial23.withChronologyRetainFields((org.joda.time.Chronology) iSOChronology24);
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology24.weekyear();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField34 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long37 = durationField34.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long39 = durationField34.getValueAsLong((long) 10);
        int int41 = durationField34.getValue((long) (byte) 10);
        boolean boolean42 = partial33.equals((java.lang.Object) durationField34);
        org.joda.time.Chronology chronology43 = partial33.getChronology();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        boolean boolean45 = partial33.isBefore((org.joda.time.ReadablePartial) partial44);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray46 = partial33.getFieldTypes();
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField48 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long51 = durationField48.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long53 = durationField48.getValueAsLong((long) 10);
        int int55 = durationField48.getValue((long) (byte) 10);
        boolean boolean56 = partial47.equals((java.lang.Object) durationField48);
        org.joda.time.Chronology chronology57 = partial47.getChronology();
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        boolean boolean59 = partial47.isBefore((org.joda.time.ReadablePartial) partial58);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray60 = partial47.getFieldTypes();
        boolean boolean62 = partial47.equals((java.lang.Object) 1702281558665L);
        int int63 = partial33.compareTo((org.joda.time.ReadablePartial) partial47);
        java.util.Locale locale64 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str65 = dateTimeField32.getAsShortText((org.joda.time.ReadablePartial) partial47, locale64);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekyear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(iSOChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(readableInterval15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 0, 0, 0, 0, 0, 0, 31]");
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(iSOChronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ISOChronology[UTC]" + "'", str29, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L + "'", long37 == 1L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 10L + "'", long39 == 10L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray46);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 10L + "'", long53 == 10L);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1970");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = null;
        boolean boolean3 = readableInterval1.contains(readableInterval2);
        org.joda.time.Chronology chronology4 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval2);
        org.joda.time.DateTimeField dateTimeField5 = chronology4.halfdayOfDay();
        long long8 = dateTimeField5.getDifferenceAsLong((-45757612800000L), (-2177424000000L));
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField10 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long13 = durationField10.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long15 = durationField10.getValueAsLong((long) 10);
        int int17 = durationField10.getValue((long) (byte) 10);
        boolean boolean18 = partial9.equals((java.lang.Object) durationField10);
        org.joda.time.Chronology chronology19 = partial9.getChronology();
        java.lang.String str20 = partial9.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray21 = partial9.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval22 = null;
        org.joda.time.ReadableInterval readableInterval23 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval22);
        org.joda.time.ReadableInterval readableInterval24 = null;
        boolean boolean25 = readableInterval23.contains(readableInterval24);
        org.joda.time.ReadableInterval readableInterval26 = null;
        boolean boolean27 = readableInterval23.isBefore(readableInterval26);
        org.joda.time.Interval interval28 = readableInterval23.toInterval();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.PeriodType periodType30 = org.joda.time.DateTimeUtils.getPeriodType(periodType29);
        org.joda.time.PeriodType periodType31 = org.joda.time.DateTimeUtils.getPeriodType(periodType29);
        org.joda.time.Period period32 = readableInterval23.toPeriod(periodType31);
        org.joda.time.Partial partial33 = partial9.plus((org.joda.time.ReadablePeriod) period32);
        int[] intArray34 = null;
        int int35 = dateTimeField5.getMaximumValue((org.joda.time.ReadablePartial) partial9, intArray34);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray36 = partial9.getFieldTypes();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField38 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long41 = durationField38.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long43 = durationField38.getValueAsLong((long) 10);
        int int45 = durationField38.getValue((long) (byte) 10);
        boolean boolean46 = partial37.equals((java.lang.Object) durationField38);
        org.joda.time.Chronology chronology47 = partial37.getChronology();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = partial37.isBefore((org.joda.time.ReadablePartial) partial48);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray50 = partial37.getFieldTypes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = partial37.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray52 = partial37.getFieldTypes();
        int[] intArray53 = partial37.getValues();
        org.joda.time.chrono.ISOChronology iSOChronology54 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField55 = iSOChronology54.minutes();
        org.joda.time.DurationField durationField56 = iSOChronology54.months();
        org.joda.time.DurationField durationField57 = iSOChronology54.years();
        org.joda.time.DateTimeField dateTimeField58 = iSOChronology54.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField59 = iSOChronology54.halfdayOfDay();
        boolean boolean60 = partial37.equals((java.lang.Object) iSOChronology54);
        boolean boolean61 = partial9.isBefore((org.joda.time.ReadablePartial) partial37);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = null;
        boolean boolean63 = partial9.isSupported(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1008800L) + "'", long8 == (-1008800L));
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray21);
        org.junit.Assert.assertNotNull(readableInterval23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray36);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 10L + "'", long43 == 10L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray50);
        org.junit.Assert.assertNull(dateTimeFormatter51);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertNotNull(iSOChronology54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2193");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = durationField5.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval11 = null;
        org.joda.time.ReadableInterval readableInterval12 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval11);
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval11);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfCentury();
        boolean boolean15 = durationFieldType10.isSupported(chronology13);
        org.joda.time.field.ScaledDurationField scaledDurationField17 = new org.joda.time.field.ScaledDurationField(durationField5, durationFieldType10, (int) 'a');
        int int19 = scaledDurationField17.getValue((long) (short) -1);
        long long22 = scaledDurationField17.add((long) (-1), 10);
        org.joda.time.DurationFieldType durationFieldType23 = scaledDurationField17.getType();
        long long26 = scaledDurationField17.getMillis(1701289159810L, (long) (-1));
        org.joda.time.IllegalFieldValueException illegalFieldValueException29 = new org.joda.time.IllegalFieldValueException("dayOfMonth", "UTC");
        boolean boolean30 = scaledDurationField17.equals((java.lang.Object) "dayOfMonth");
        long long32 = scaledDurationField17.getMillis(0);
        long long35 = scaledDurationField17.add(183661320862L, 99);
        long long38 = scaledDurationField17.getDifferenceAsLong(28757979647L, 1701289185345L);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone43 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology44 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone43);
        org.joda.time.DateTimeZone dateTimeZone45 = gregorianChronology44.getZone();
        long long50 = gregorianChronology44.getDateTimeMillis((int) '4', 8, 24, 24);
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField52 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long55 = durationField52.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long57 = durationField52.getValueAsLong((long) 10);
        int int59 = durationField52.getValue((long) (byte) 10);
        boolean boolean60 = partial51.equals((java.lang.Object) durationField52);
        org.joda.time.Chronology chronology61 = partial51.getChronology();
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        boolean boolean63 = partial51.isBefore((org.joda.time.ReadablePartial) partial62);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray64 = partial51.getFieldTypes();
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField66 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long69 = durationField66.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long71 = durationField66.getValueAsLong((long) 10);
        int int73 = durationField66.getValue((long) (byte) 10);
        boolean boolean74 = partial65.equals((java.lang.Object) durationField66);
        boolean boolean75 = partial51.equals((java.lang.Object) durationField66);
        int[] intArray77 = gregorianChronology44.get((org.joda.time.ReadablePartial) partial51, 0L);
        org.joda.time.DurationField durationField78 = gregorianChronology44.seconds();
        int int79 = scaledDurationField17.compareTo(durationField78);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-210866846400000L) + "'", long9 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(readableInterval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 969L + "'", long22 == 969L);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 165025048501570L + "'", long26 == 165025048501570L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 183661330465L + "'", long35 == 183661330465L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-17242589749L) + "'", long38 == (-17242589749L));
        org.junit.Assert.assertNotNull(gregorianChronology44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-60505833599976L) + "'", long50 == (-60505833599976L));
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 1L + "'", long55 == 1L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 10L + "'", long57 == 10L);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10 + "'", int59 == 10);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray64);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 1L + "'", long69 == 1L);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 10L + "'", long71 == 10L);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 10 + "'", int73 == 10);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[]");
        org.junit.Assert.assertNotNull(durationField78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1615");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add(2835106203L, (int) (byte) 100);
        long long12 = unsupportedDateTimeField6.getDifferenceAsLong((long) ' ', (-57530990L));
        java.lang.String str13 = unsupportedDateTimeField6.getName();
        org.joda.time.DurationField durationField14 = unsupportedDateTimeField6.getDurationField();
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField16 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long19 = durationField16.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long21 = durationField16.getValueAsLong((long) 10);
        int int23 = durationField16.getValue((long) (byte) 10);
        boolean boolean24 = partial15.equals((java.lang.Object) durationField16);
        org.joda.time.Chronology chronology25 = partial15.getChronology();
        java.lang.String str26 = partial15.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int28 = partial15.indexOf(dateTimeFieldType27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Partial partial30 = partial15.plus(readablePeriod29);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone36 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology37 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone38 = gregorianChronology37.getZone();
        long long42 = gregorianChronology37.add(0L, (long) (byte) 1, (int) (byte) 0);
        org.joda.time.DateTimeField dateTimeField43 = gregorianChronology37.millisOfDay();
        org.joda.time.DurationField durationField44 = gregorianChronology37.weeks();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField46 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long49 = durationField46.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long51 = durationField46.getValueAsLong((long) 10);
        int int53 = durationField46.getValue((long) (byte) 10);
        boolean boolean54 = partial45.equals((java.lang.Object) durationField46);
        org.joda.time.ReadableInterval readableInterval55 = null;
        org.joda.time.ReadableInterval readableInterval56 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval55);
        org.joda.time.ReadableInterval readableInterval57 = null;
        boolean boolean58 = readableInterval56.contains(readableInterval57);
        org.joda.time.ReadableInterval readableInterval59 = null;
        boolean boolean60 = readableInterval56.isBefore(readableInterval59);
        org.joda.time.Interval interval61 = readableInterval56.toInterval();
        org.joda.time.PeriodType periodType62 = null;
        org.joda.time.PeriodType periodType63 = org.joda.time.DateTimeUtils.getPeriodType(periodType62);
        org.joda.time.PeriodType periodType64 = org.joda.time.DateTimeUtils.getPeriodType(periodType62);
        org.joda.time.Period period65 = readableInterval56.toPeriod(periodType64);
        org.joda.time.Partial partial66 = partial45.plus((org.joda.time.ReadablePeriod) period65);
        int[] intArray69 = gregorianChronology37.get((org.joda.time.ReadablePeriod) period65, 1701289178545L, (long) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray71 = unsupportedDateTimeField6.addWrapPartial((org.joda.time.ReadablePartial) partial15, 96, intArray69, 300);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 2835106303L + "'", long9 == 2835106303L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 57531022L + "'", long12 == 57531022L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "dayOfYear" + "'", str13, "dayOfYear");
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10L + "'", long21 == 10L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNotNull(gregorianChronology37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10L + "'", long51 == 10L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(readableInterval56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(partial66);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-53, -10, -4, 0, -20, -19, -38, -545]");
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2904");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = null;
        boolean boolean3 = readableInterval1.contains(readableInterval2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = readableInterval1.toPeriod(periodType4);
        org.joda.time.DateTime dateTime6 = readableInterval1.getEnd();
        org.joda.time.MutableInterval mutableInterval7 = readableInterval1.toMutableInterval();
        org.joda.time.Period period8 = readableInterval1.toPeriod();
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField10 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long13 = durationField10.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long15 = durationField10.getValueAsLong((long) 10);
        int int17 = durationField10.getValue((long) (byte) 10);
        boolean boolean18 = partial9.equals((java.lang.Object) durationField10);
        org.joda.time.Chronology chronology19 = partial9.getChronology();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial9.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray22 = partial9.getFieldTypes();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField24 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long27 = durationField24.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long29 = durationField24.getValueAsLong((long) 10);
        int int31 = durationField24.getValue((long) (byte) 10);
        boolean boolean32 = partial23.equals((java.lang.Object) durationField24);
        boolean boolean33 = partial9.equals((java.lang.Object) durationField24);
        org.joda.time.ReadableInterval readableInterval34 = null;
        org.joda.time.ReadableInterval readableInterval35 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval34);
        org.joda.time.ReadableInterval readableInterval36 = null;
        boolean boolean37 = readableInterval35.contains(readableInterval36);
        org.joda.time.Duration duration38 = readableInterval35.toDuration();
        org.joda.time.ReadableInterval readableInterval39 = null;
        org.joda.time.ReadableInterval readableInterval40 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval39);
        org.joda.time.ReadableInterval readableInterval41 = null;
        boolean boolean42 = readableInterval40.contains(readableInterval41);
        org.joda.time.Duration duration43 = readableInterval40.toDuration();
        org.joda.time.DateTime dateTime44 = readableInterval40.getEnd();
        boolean boolean45 = readableInterval35.isBefore((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime46 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        long long47 = org.joda.time.DateTimeUtils.getInstantMillis((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean48 = readableInterval1.isAfter((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.ReadableInterval readableInterval49 = null;
        org.joda.time.ReadableInterval readableInterval50 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval49);
        long long51 = readableInterval50.getStartMillis();
        org.joda.time.ReadableInterval readableInterval52 = null;
        org.joda.time.ReadableInterval readableInterval53 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval52);
        long long54 = readableInterval53.getEndMillis();
        boolean boolean55 = readableInterval50.overlaps(readableInterval53);
        org.joda.time.MutableInterval mutableInterval56 = readableInterval50.toMutableInterval();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        boolean boolean58 = mutableInterval56.equals((java.lang.Object) dateTimeFieldType57);
        boolean boolean59 = readableInterval1.contains((org.joda.time.ReadableInterval) mutableInterval56);
        org.joda.time.Duration duration60 = readableInterval1.toDuration();
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray22);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10L + "'", long29 == 10L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(readableInterval35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(readableInterval40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateTime46);
// flaky:         org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-296907L) + "'", long47 == (-296907L));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(readableInterval50);
// flaky:         org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-296907L) + "'", long51 == (-296907L));
        org.junit.Assert.assertNotNull(readableInterval53);
// flaky:         org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-296907L) + "'", long54 == (-296907L));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(mutableInterval56);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(duration60);
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1447");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        org.joda.time.DurationField durationField7 = unsupportedDateTimeField6.getDurationField();
        java.lang.String str8 = unsupportedDateTimeField6.toString();
        long long11 = unsupportedDateTimeField6.add((-934364334L), 3600000);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField13 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long16 = durationField13.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long18 = durationField13.getValueAsLong((long) 10);
        int int20 = durationField13.getValue((long) (byte) 10);
        boolean boolean21 = partial12.equals((java.lang.Object) durationField13);
        org.joda.time.Chronology chronology22 = partial12.getChronology();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        boolean boolean24 = partial12.isBefore((org.joda.time.ReadablePartial) partial23);
        org.joda.time.DateTimeField[] dateTimeFieldArray25 = partial23.getFields();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial27 = partial23.plus(readablePeriod26);
        org.joda.time.chrono.ISOChronology iSOChronology28 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField29 = iSOChronology28.minutes();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology28.millisOfDay();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology28.halfdayOfDay();
        org.joda.time.DurationField durationField32 = iSOChronology28.seconds();
        org.joda.time.DurationField durationField33 = iSOChronology28.days();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology28.dayOfYear();
        org.joda.time.DateTimeField dateTimeField35 = iSOChronology28.hourOfHalfday();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField37 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long40 = durationField37.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long42 = durationField37.getValueAsLong((long) 10);
        int int44 = durationField37.getValue((long) (byte) 10);
        boolean boolean45 = partial36.equals((java.lang.Object) durationField37);
        org.joda.time.ReadableInterval readableInterval46 = null;
        org.joda.time.ReadableInterval readableInterval47 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval46);
        org.joda.time.ReadableInterval readableInterval48 = null;
        boolean boolean49 = readableInterval47.contains(readableInterval48);
        org.joda.time.ReadableInterval readableInterval50 = null;
        boolean boolean51 = readableInterval47.isBefore(readableInterval50);
        org.joda.time.Interval interval52 = readableInterval47.toInterval();
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.PeriodType periodType54 = org.joda.time.DateTimeUtils.getPeriodType(periodType53);
        org.joda.time.PeriodType periodType55 = org.joda.time.DateTimeUtils.getPeriodType(periodType53);
        org.joda.time.Period period56 = readableInterval47.toPeriod(periodType55);
        org.joda.time.Partial partial57 = partial36.plus((org.joda.time.ReadablePeriod) period56);
        java.lang.String str58 = partial57.toStringList();
        int[] intArray60 = iSOChronology28.get((org.joda.time.ReadablePartial) partial57, (long) (-7));
        // The following exception was thrown during execution in test generation
        try {
            int int61 = unsupportedDateTimeField6.getMaximumValue((org.joda.time.ReadablePartial) partial23, intArray60);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UnsupportedDateTimeField" + "'", str8, "UnsupportedDateTimeField");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-930764334L) + "'", long11 == (-930764334L));
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10L + "'", long18 == 10L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray25);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(iSOChronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 10L + "'", long42 == 10L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(readableInterval47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[]" + "'", str58, "[]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0071");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add((-31L), (long) '#');
        org.joda.time.DurationField durationField10 = unsupportedDateTimeField6.getLeapDurationField();
        int int13 = unsupportedDateTimeField6.getDifference((long) (byte) 10, 10L);
        long long16 = unsupportedDateTimeField6.add((long) 1439, (int) (byte) -1);
        java.lang.String str17 = unsupportedDateTimeField6.toString();
        boolean boolean18 = unsupportedDateTimeField6.isSupported();
        long long21 = unsupportedDateTimeField6.getDifferenceAsLong((-28739965L), (-315619200000L));
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField23 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long26 = durationField23.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long28 = durationField23.getValueAsLong((long) 10);
        int int30 = durationField23.getValue((long) (byte) 10);
        boolean boolean31 = partial22.equals((java.lang.Object) durationField23);
        org.joda.time.ReadableInterval readableInterval32 = null;
        org.joda.time.ReadableInterval readableInterval33 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval32);
        org.joda.time.ReadableInterval readableInterval34 = null;
        boolean boolean35 = readableInterval33.contains(readableInterval34);
        org.joda.time.ReadableInterval readableInterval36 = null;
        boolean boolean37 = readableInterval33.isBefore(readableInterval36);
        org.joda.time.Interval interval38 = readableInterval33.toInterval();
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.PeriodType periodType40 = org.joda.time.DateTimeUtils.getPeriodType(periodType39);
        org.joda.time.PeriodType periodType41 = org.joda.time.DateTimeUtils.getPeriodType(periodType39);
        org.joda.time.Period period42 = readableInterval33.toPeriod(periodType41);
        org.joda.time.Partial partial43 = partial22.plus((org.joda.time.ReadablePeriod) period42);
        org.joda.time.ReadableInterval readableInterval44 = null;
        org.joda.time.ReadableInterval readableInterval45 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval44);
        org.joda.time.Chronology chronology46 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval44);
        org.joda.time.DateTimeField dateTimeField47 = chronology46.yearOfCentury();
        org.joda.time.ReadablePartial readablePartial48 = null;
        int int49 = dateTimeField47.getMinimumValue(readablePartial48);
        org.joda.time.ReadablePartial readablePartial50 = null;
        org.joda.time.ReadableInterval readableInterval51 = null;
        org.joda.time.ReadableInterval readableInterval52 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval51);
        org.joda.time.Chronology chronology53 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval51);
        org.joda.time.DateTimeField dateTimeField54 = chronology53.yearOfCentury();
        org.joda.time.DurationField durationField55 = chronology53.millis();
        org.joda.time.DateTimeField dateTimeField56 = chronology53.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField57 = chronology53.clockhourOfDay();
        org.joda.time.ReadablePartial readablePartial58 = null;
        int[] intArray65 = new int[] { '#', (-1), 0, (byte) 1, (short) 1, (byte) 1 };
        int int66 = dateTimeField57.getMaximumValue(readablePartial58, intArray65);
        int int67 = dateTimeField47.getMinimumValue(readablePartial50, intArray65);
        // The following exception was thrown during execution in test generation
        try {
            int int68 = unsupportedDateTimeField6.getMaximumValue((org.joda.time.ReadablePartial) partial22, intArray65);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1438L + "'", long16 == 1438L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UnsupportedDateTimeField" + "'", str17, "UnsupportedDateTimeField");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 315590460035L + "'", long21 == 315590460035L);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10L + "'", long28 == 10L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(readableInterval33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertNotNull(readableInterval45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(readableInterval52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[35, -1, 0, 1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 24 + "'", int66 == 24);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1846");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField1 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType0);
        java.lang.String str2 = unsupportedDurationField1.toString();
        long long3 = unsupportedDurationField1.getUnitMillis();
        org.joda.time.DurationFieldType durationFieldType4 = unsupportedDurationField1.getType();
        java.lang.String str5 = unsupportedDurationField1.toString();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str8 = dateTimeZone7.toString();
        org.joda.time.Chronology chronology9 = iSOChronology6.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology6.monthOfYear();
        boolean boolean11 = unsupportedDurationField1.equals((java.lang.Object) dateTimeField10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone17 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology18 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone19 = gregorianChronology18.getZone();
        boolean boolean20 = dateTimeFieldType12.isSupported((org.joda.time.Chronology) gregorianChronology18);
        org.joda.time.DurationField durationField21 = gregorianChronology18.minutes();
        org.joda.time.DateTimeZone dateTimeZone22 = gregorianChronology18.getZone();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField24 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long27 = durationField24.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long29 = durationField24.getValueAsLong((long) 10);
        int int31 = durationField24.getValue((long) (byte) 10);
        boolean boolean32 = partial23.equals((java.lang.Object) durationField24);
        org.joda.time.Chronology chronology33 = partial23.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = null;
        java.lang.String str35 = partial23.toString(dateTimeFormatter34);
        long long37 = gregorianChronology18.set((org.joda.time.ReadablePartial) partial23, (long) 17127628);
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField40 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long43 = durationField40.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long45 = durationField40.getValueAsLong((long) 10);
        int int47 = durationField40.getValue((long) (byte) 10);
        boolean boolean48 = partial39.equals((java.lang.Object) durationField40);
        org.joda.time.Chronology chronology49 = partial39.getChronology();
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        boolean boolean51 = partial39.isBefore((org.joda.time.ReadablePartial) partial50);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray52 = partial39.getFieldTypes();
        boolean boolean54 = partial39.equals((java.lang.Object) 1702281558665L);
        java.lang.String str55 = partial39.toString();
        java.lang.String str56 = partial39.toString();
        int int57 = partial39.size();
        boolean boolean58 = org.joda.time.DateTimeUtils.isContiguous((org.joda.time.ReadablePartial) partial39);
        int[] intArray59 = partial39.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray61 = dateTimeField10.addWrapField((org.joda.time.ReadablePartial) partial23, 23, intArray59, 292317);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 23");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(unsupportedDurationField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UnsupportedDurationField[hours]" + "'", str2, "UnsupportedDurationField[hours]");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UnsupportedDurationField[hours]" + "'", str5, "UnsupportedDurationField[hours]");
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(gregorianChronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10L + "'", long29 == 10L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[]" + "'", str35, "[]");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 17127628L + "'", long37 == 17127628L);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 10L + "'", long45 == 10L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[]" + "'", str55, "[]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[]" + "'", str56, "[]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2486");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.Chronology chronology3 = iSOChronology0.withZone(dateTimeZone1);
        org.joda.time.chrono.ISOChronology iSOChronology4 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField5 = iSOChronology4.minutes();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology4.millisOfDay();
        org.joda.time.ReadableInterval readableInterval7 = null;
        org.joda.time.ReadableInterval readableInterval8 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval7);
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval7);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.yearOfCentury();
        org.joda.time.DurationField durationField11 = chronology9.millis();
        org.joda.time.DurationField durationField12 = chronology9.centuries();
        org.joda.time.ReadableInterval readableInterval13 = null;
        org.joda.time.ReadableInterval readableInterval14 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval13);
        org.joda.time.Chronology chronology15 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval13);
        org.joda.time.DateTimeField dateTimeField16 = chronology15.yearOfCentury();
        org.joda.time.DurationField durationField17 = chronology15.millis();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval19 = null;
        org.joda.time.ReadableInterval readableInterval20 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval19);
        org.joda.time.Chronology chronology21 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval19);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.ReadableInterval readableInterval26 = null;
        boolean boolean27 = readableInterval25.contains(readableInterval26);
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Period period29 = readableInterval25.toPeriod(periodType28);
        int[] intArray31 = chronology21.get((org.joda.time.ReadablePeriod) period29, (-210866846400000L));
        int[] intArray34 = chronology15.get((org.joda.time.ReadablePeriod) period29, 2173795348453L, (long) 1439);
        int[] intArray37 = chronology9.get((org.joda.time.ReadablePeriod) period29, 291L, 2580171L);
        int[] intArray40 = iSOChronology4.get((org.joda.time.ReadablePeriod) period29, (-30610224000000L), 291L);
        int[] intArray42 = iSOChronology0.get((org.joda.time.ReadablePeriod) period29, 35L);
        org.joda.time.DateTimeZone dateTimeZone43 = iSOChronology0.getZone();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone48 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology49 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone48);
        org.joda.time.chrono.ISOChronology iSOChronology50 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField51 = iSOChronology50.minutes();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str53 = dateTimeZone52.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology54 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology50, dateTimeZone52);
        org.joda.time.DateTimeZone dateTimeZone55 = zonedChronology54.getZone();
        boolean boolean56 = fixedDateTimeZone48.equals((java.lang.Object) zonedChronology54);
        org.joda.time.Chronology chronology57 = iSOChronology0.withZone((org.joda.time.DateTimeZone) fixedDateTimeZone48);
        org.joda.time.DateTimeField dateTimeField58 = iSOChronology0.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone59 = iSOChronology0.getZone();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTC" + "'", str2, "UTC");
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(iSOChronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(readableInterval8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(readableInterval14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(readableInterval20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 0, 0, 0, 0, 0, 0, 35]");
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(gregorianChronology49);
        org.junit.Assert.assertNotNull(iSOChronology50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "UTC" + "'", str53, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2240");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DurationField durationField2 = iSOChronology0.months();
        org.joda.time.DurationField durationField3 = iSOChronology0.years();
        org.joda.time.DateTimeZone dateTimeZone4 = iSOChronology0.getZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str6 = dateTimeZone5.toString();
        java.lang.String str8 = dateTimeZone5.getShortName((-210866846400000L));
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeUtils.getZone(dateTimeZone5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = iSOChronology0.withZone((org.joda.time.DateTimeZone) cachedDateTimeZone10);
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.centuryOfEra();
        org.joda.time.Partial partial13 = new org.joda.time.Partial((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType15 = dateTimeFieldType14.getRangeDurationType();
        org.joda.time.Chronology chronology16 = null;
        boolean boolean17 = dateTimeFieldType14.isSupported(chronology16);
        boolean boolean18 = partial13.isSupported(dateTimeFieldType14);
        org.joda.time.chrono.ISOChronology iSOChronology19 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField20 = iSOChronology19.minutes();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str22 = dateTimeZone21.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology23 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology19, dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone24 = zonedChronology23.getZone();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology23.monthOfYear();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField27 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long30 = durationField27.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long32 = durationField27.getValueAsLong((long) 10);
        int int34 = durationField27.getValue((long) (byte) 10);
        boolean boolean35 = partial26.equals((java.lang.Object) durationField27);
        org.joda.time.Chronology chronology36 = partial26.getChronology();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        boolean boolean38 = partial26.isBefore((org.joda.time.ReadablePartial) partial37);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray39 = partial26.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval40 = null;
        org.joda.time.ReadableInterval readableInterval41 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval40);
        long long42 = readableInterval41.getStartMillis();
        org.joda.time.ReadableInterval readableInterval43 = null;
        org.joda.time.ReadableInterval readableInterval44 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval43);
        org.joda.time.ReadableInterval readableInterval45 = null;
        boolean boolean46 = readableInterval44.contains(readableInterval45);
        org.joda.time.Duration duration47 = readableInterval44.toDuration();
        org.joda.time.DateTime dateTime48 = readableInterval44.getEnd();
        boolean boolean49 = readableInterval41.contains((org.joda.time.ReadableInstant) dateTime48);
        boolean boolean50 = partial26.isMatch((org.joda.time.ReadableInstant) dateTime48);
        int[] intArray52 = zonedChronology23.get((org.joda.time.ReadablePartial) partial26, 60035L);
        org.joda.time.DateTimeField dateTimeField53 = zonedChronology23.secondOfMinute();
        org.joda.time.Chronology chronology54 = zonedChronology23.withUTC();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField56 = dateTimeFieldType14.getField(chronology54);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(iSOChronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10L + "'", long32 == 10L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray39);
        org.junit.Assert.assertNotNull(readableInterval41);
// flaky:         org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1701289603642L + "'", long42 == 1701289603642L);
        org.junit.Assert.assertNotNull(readableInterval44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2237");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add((-31L), (long) '#');
        org.joda.time.DurationField durationField10 = unsupportedDateTimeField6.getLeapDurationField();
        int int13 = unsupportedDateTimeField6.getDifference((long) (byte) 10, 10L);
        long long16 = unsupportedDateTimeField6.add((long) 1439, (int) (byte) -1);
        java.lang.String str17 = unsupportedDateTimeField6.toString();
        boolean boolean18 = unsupportedDateTimeField6.isSupported();
        long long21 = unsupportedDateTimeField6.getDifferenceAsLong((-28739965L), (-315619200000L));
        long long24 = unsupportedDateTimeField6.add(139583L, 2440588L);
        long long27 = unsupportedDateTimeField6.getDifferenceAsLong(0L, 2580268L);
        org.joda.time.chrono.ISOChronology iSOChronology28 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology28.centuryOfEra();
        org.joda.time.DurationField durationField30 = iSOChronology28.months();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology28.weekOfWeekyear();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone36 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology37 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone38 = gregorianChronology37.getZone();
        long long43 = gregorianChronology37.getDateTimeMillis((int) '4', 8, 24, 24);
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField45 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long48 = durationField45.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long50 = durationField45.getValueAsLong((long) 10);
        int int52 = durationField45.getValue((long) (byte) 10);
        boolean boolean53 = partial44.equals((java.lang.Object) durationField45);
        org.joda.time.Chronology chronology54 = partial44.getChronology();
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        boolean boolean56 = partial44.isBefore((org.joda.time.ReadablePartial) partial55);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray57 = partial44.getFieldTypes();
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField59 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long62 = durationField59.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long64 = durationField59.getValueAsLong((long) 10);
        int int66 = durationField59.getValue((long) (byte) 10);
        boolean boolean67 = partial58.equals((java.lang.Object) durationField59);
        boolean boolean68 = partial44.equals((java.lang.Object) durationField59);
        int[] intArray70 = gregorianChronology37.get((org.joda.time.ReadablePartial) partial44, 0L);
        int int71 = partial44.size();
        int[] intArray73 = iSOChronology28.get((org.joda.time.ReadablePartial) partial44, 28757967159L);
        java.util.Locale locale74 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str75 = unsupportedDateTimeField6.getAsShortText((org.joda.time.ReadablePartial) partial44, locale74);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1438L + "'", long16 == 1438L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UnsupportedDateTimeField" + "'", str17, "UnsupportedDateTimeField");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 315590460035L + "'", long21 == 315590460035L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 2580171L + "'", long24 == 2580171L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-2580268L) + "'", long27 == (-2580268L));
        org.junit.Assert.assertNotNull(iSOChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(gregorianChronology37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-60505833599976L) + "'", long43 == (-60505833599976L));
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1L + "'", long48 == 1L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 10L + "'", long50 == 10L);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray57);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1L + "'", long62 == 1L);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 10L + "'", long64 == 10L);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10 + "'", int66 == 10);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2796");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = durationField5.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval11 = null;
        org.joda.time.ReadableInterval readableInterval12 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval11);
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval11);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfCentury();
        boolean boolean15 = durationFieldType10.isSupported(chronology13);
        org.joda.time.field.ScaledDurationField scaledDurationField17 = new org.joda.time.field.ScaledDurationField(durationField5, durationFieldType10, (int) 'a');
        org.joda.time.DurationField durationField18 = scaledDurationField17.getWrappedField();
        int int21 = scaledDurationField17.getDifference((long) (byte) -1, (long) (short) 0);
        org.joda.time.DurationFieldType durationFieldType22 = scaledDurationField17.getType();
        org.joda.time.IllegalFieldValueException illegalFieldValueException26 = new org.joda.time.IllegalFieldValueException(durationFieldType22, (java.lang.Number) (-1.0f), (java.lang.Number) 1701289167159L, (java.lang.Number) 1701289167159L);
        java.lang.String str27 = illegalFieldValueException26.getFieldName();
        java.lang.String str28 = illegalFieldValueException26.getFieldName();
        org.joda.time.ReadableInterval readableInterval29 = null;
        org.joda.time.ReadableInterval readableInterval30 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval29);
        org.joda.time.Chronology chronology31 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval29);
        org.joda.time.DateTimeField dateTimeField32 = chronology31.yearOfCentury();
        org.joda.time.DurationField durationField33 = chronology31.millis();
        org.joda.time.DurationField durationField34 = chronology31.centuries();
        org.joda.time.Chronology chronology35 = chronology31.withUTC();
        org.joda.time.DurationField durationField36 = chronology35.halfdays();
        org.joda.time.DateTimeField dateTimeField37 = chronology35.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField40 = new org.joda.time.field.DividedDateTimeField(dateTimeField37, dateTimeFieldType38, 10);
        long long43 = dividedDateTimeField40.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval45 = null;
        org.joda.time.ReadableInterval readableInterval46 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval45);
        org.joda.time.Chronology chronology47 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval45);
        org.joda.time.DateTimeField dateTimeField48 = chronology47.yearOfCentury();
        org.joda.time.DurationField durationField49 = chronology47.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField50 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType44, durationField49);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField51 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField40, dateTimeFieldType44);
        org.joda.time.ReadablePartial readablePartial52 = null;
        java.util.Locale locale54 = null;
        java.lang.String str55 = dividedDateTimeField40.getAsShortText(readablePartial52, (int) ' ', locale54);
        org.joda.time.ReadablePartial readablePartial56 = null;
        java.util.Locale locale58 = null;
        java.lang.String str59 = dividedDateTimeField40.getAsText(readablePartial56, (int) (byte) 10, locale58);
        long long61 = dividedDateTimeField40.roundHalfFloor((long) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = dividedDateTimeField40.getType();
        org.joda.time.IllegalFieldValueException illegalFieldValueException64 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType62, "");
        illegalFieldValueException26.addSuppressed((java.lang.Throwable) illegalFieldValueException64);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-210866846400000L) + "'", long9 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(readableInterval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hours" + "'", str27, "hours");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hours" + "'", str28, "hours");
        org.junit.Assert.assertNotNull(readableInterval30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-30610224000000L) + "'", long43 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(readableInterval46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField50);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "32" + "'", str55, "32");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "10" + "'", str59, "10");
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1416");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology5 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField7 = iSOChronology6.minutes();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str9 = dateTimeZone8.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology10 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology6, dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone11 = zonedChronology10.getZone();
        boolean boolean12 = fixedDateTimeZone4.equals((java.lang.Object) zonedChronology10);
        org.joda.time.DurationField durationField13 = zonedChronology10.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField15 = iSOChronology14.minutes();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology14.millisOfDay();
        org.joda.time.ReadableInterval readableInterval17 = null;
        org.joda.time.ReadableInterval readableInterval18 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval17);
        org.joda.time.Chronology chronology19 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval17);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfCentury();
        org.joda.time.DurationField durationField21 = chronology19.millis();
        org.joda.time.DurationField durationField22 = chronology19.centuries();
        org.joda.time.ReadableInterval readableInterval23 = null;
        org.joda.time.ReadableInterval readableInterval24 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval23);
        org.joda.time.Chronology chronology25 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval23);
        org.joda.time.DateTimeField dateTimeField26 = chronology25.yearOfCentury();
        org.joda.time.DurationField durationField27 = chronology25.millis();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval29 = null;
        org.joda.time.ReadableInterval readableInterval30 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval29);
        org.joda.time.Chronology chronology31 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval29);
        org.joda.time.DateTimeField dateTimeField32 = chronology31.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval34 = null;
        org.joda.time.ReadableInterval readableInterval35 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval34);
        org.joda.time.ReadableInterval readableInterval36 = null;
        boolean boolean37 = readableInterval35.contains(readableInterval36);
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Period period39 = readableInterval35.toPeriod(periodType38);
        int[] intArray41 = chronology31.get((org.joda.time.ReadablePeriod) period39, (-210866846400000L));
        int[] intArray44 = chronology25.get((org.joda.time.ReadablePeriod) period39, 2173795348453L, (long) 1439);
        int[] intArray47 = chronology19.get((org.joda.time.ReadablePeriod) period39, 291L, 2580171L);
        int[] intArray50 = iSOChronology14.get((org.joda.time.ReadablePeriod) period39, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField51 = iSOChronology14.months();
        java.lang.String str52 = iSOChronology14.toString();
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        boolean boolean54 = iSOChronology14.equals((java.lang.Object) partial53);
        java.lang.String str55 = iSOChronology14.toString();
        boolean boolean56 = zonedChronology10.equals((java.lang.Object) iSOChronology14);
        org.joda.time.DateTimeField dateTimeField57 = zonedChronology10.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField58 = zonedChronology10.halfdayOfDay();
        org.junit.Assert.assertNotNull(gregorianChronology5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(readableInterval18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(readableInterval24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(readableInterval30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(readableInterval35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(durationField51);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ISOChronology[UTC]" + "'", str52, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ISOChronology[UTC]" + "'", str55, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1871");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        org.joda.time.DurationField durationField7 = unsupportedDateTimeField6.getDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = unsupportedDateTimeField6.getType();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = unsupportedDateTimeField6.getType();
        java.lang.String str10 = unsupportedDateTimeField6.toString();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField12 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long15 = durationField12.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long17 = durationField12.getValueAsLong((long) 10);
        int int19 = durationField12.getValue((long) (byte) 10);
        boolean boolean20 = partial11.equals((java.lang.Object) durationField12);
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.ReadableInterval readableInterval22 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval21);
        org.joda.time.ReadableInterval readableInterval23 = null;
        boolean boolean24 = readableInterval22.contains(readableInterval23);
        org.joda.time.ReadableInterval readableInterval25 = null;
        boolean boolean26 = readableInterval22.isBefore(readableInterval25);
        org.joda.time.Interval interval27 = readableInterval22.toInterval();
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.PeriodType periodType29 = org.joda.time.DateTimeUtils.getPeriodType(periodType28);
        org.joda.time.PeriodType periodType30 = org.joda.time.DateTimeUtils.getPeriodType(periodType28);
        org.joda.time.Period period31 = readableInterval22.toPeriod(periodType30);
        org.joda.time.Partial partial32 = partial11.plus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField34 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long37 = durationField34.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long39 = durationField34.getValueAsLong((long) 10);
        int int41 = durationField34.getValue((long) (byte) 10);
        boolean boolean42 = partial33.equals((java.lang.Object) durationField34);
        org.joda.time.chrono.ISOChronology iSOChronology43 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField44 = iSOChronology43.minutes();
        org.joda.time.DateTimeField dateTimeField45 = iSOChronology43.millisOfDay();
        org.joda.time.DateTimeField dateTimeField46 = iSOChronology43.halfdayOfDay();
        org.joda.time.ReadableInterval readableInterval47 = null;
        org.joda.time.ReadableInterval readableInterval48 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval47);
        org.joda.time.ReadableInterval readableInterval49 = null;
        boolean boolean50 = readableInterval48.contains(readableInterval49);
        org.joda.time.PeriodType periodType51 = null;
        org.joda.time.Period period52 = readableInterval48.toPeriod(periodType51);
        int[] intArray55 = iSOChronology43.get((org.joda.time.ReadablePeriod) period52, 4L, (long) '#');
        org.joda.time.Partial partial56 = partial33.plus((org.joda.time.ReadablePeriod) period52);
        org.joda.time.Partial partial57 = partial32.minus((org.joda.time.ReadablePeriod) period52);
        int[] intArray58 = partial57.getValues();
        java.util.Locale locale60 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str61 = unsupportedDateTimeField6.getAsShortText((org.joda.time.ReadablePartial) partial57, 28, locale60);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UnsupportedDateTimeField" + "'", str10, "UnsupportedDateTimeField");
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(readableInterval22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L + "'", long37 == 1L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 10L + "'", long39 == 10L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(iSOChronology43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(readableInterval48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[0, 0, 0, 0, 0, 0, 0, 31]");
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2447");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField15 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long18 = durationField15.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long20 = durationField15.getValueAsLong((long) 10);
        int int22 = durationField15.getValue((long) (byte) 10);
        boolean boolean23 = partial14.equals((java.lang.Object) durationField15);
        boolean boolean24 = partial0.equals((java.lang.Object) durationField15);
        org.joda.time.DateTimeField[] dateTimeFieldArray25 = partial0.getFields();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone30 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology31 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone32 = gregorianChronology31.getZone();
        long long36 = gregorianChronology31.add(0L, (long) (byte) 1, (int) (byte) 0);
        org.joda.time.DateTimeField dateTimeField37 = gregorianChronology31.millisOfDay();
        org.joda.time.DurationField durationField38 = gregorianChronology31.weeks();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField40 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long43 = durationField40.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long45 = durationField40.getValueAsLong((long) 10);
        int int47 = durationField40.getValue((long) (byte) 10);
        boolean boolean48 = partial39.equals((java.lang.Object) durationField40);
        org.joda.time.ReadableInterval readableInterval49 = null;
        org.joda.time.ReadableInterval readableInterval50 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval49);
        org.joda.time.ReadableInterval readableInterval51 = null;
        boolean boolean52 = readableInterval50.contains(readableInterval51);
        org.joda.time.ReadableInterval readableInterval53 = null;
        boolean boolean54 = readableInterval50.isBefore(readableInterval53);
        org.joda.time.Interval interval55 = readableInterval50.toInterval();
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.PeriodType periodType57 = org.joda.time.DateTimeUtils.getPeriodType(periodType56);
        org.joda.time.PeriodType periodType58 = org.joda.time.DateTimeUtils.getPeriodType(periodType56);
        org.joda.time.Period period59 = readableInterval50.toPeriod(periodType58);
        org.joda.time.Partial partial60 = partial39.plus((org.joda.time.ReadablePeriod) period59);
        int[] intArray63 = gregorianChronology31.get((org.joda.time.ReadablePeriod) period59, 1701289178545L, (long) (short) 0);
        org.joda.time.Partial partial65 = partial0.withPeriodAdded((org.joda.time.ReadablePeriod) period59, (int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval66 = null;
        org.joda.time.ReadableInterval readableInterval67 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval66);
        org.joda.time.ReadableInterval readableInterval68 = null;
        boolean boolean69 = readableInterval67.contains(readableInterval68);
        org.joda.time.PeriodType periodType70 = null;
        org.joda.time.Period period71 = readableInterval67.toPeriod(periodType70);
        org.joda.time.Partial partial72 = partial65.plus((org.joda.time.ReadablePeriod) period71);
        org.joda.time.Chronology chronology73 = partial72.getChronology();
        int int74 = partial72.size();
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray25);
        org.junit.Assert.assertNotNull(gregorianChronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 10L + "'", long45 == 10L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(readableInterval50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-53, -10, -4, 0, -20, -19, -38, -545]");
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertNotNull(readableInterval67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(partial72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1154");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField15 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long18 = durationField15.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long20 = durationField15.getValueAsLong((long) 10);
        int int22 = durationField15.getValue((long) (byte) 10);
        boolean boolean23 = partial14.equals((java.lang.Object) durationField15);
        boolean boolean24 = partial0.equals((java.lang.Object) durationField15);
        org.joda.time.DateTimeField[] dateTimeFieldArray25 = partial0.getFields();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone30 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology31 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone32 = gregorianChronology31.getZone();
        long long36 = gregorianChronology31.add(0L, (long) (byte) 1, (int) (byte) 0);
        org.joda.time.DateTimeField dateTimeField37 = gregorianChronology31.millisOfDay();
        org.joda.time.DurationField durationField38 = gregorianChronology31.weeks();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField40 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long43 = durationField40.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long45 = durationField40.getValueAsLong((long) 10);
        int int47 = durationField40.getValue((long) (byte) 10);
        boolean boolean48 = partial39.equals((java.lang.Object) durationField40);
        org.joda.time.ReadableInterval readableInterval49 = null;
        org.joda.time.ReadableInterval readableInterval50 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval49);
        org.joda.time.ReadableInterval readableInterval51 = null;
        boolean boolean52 = readableInterval50.contains(readableInterval51);
        org.joda.time.ReadableInterval readableInterval53 = null;
        boolean boolean54 = readableInterval50.isBefore(readableInterval53);
        org.joda.time.Interval interval55 = readableInterval50.toInterval();
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.PeriodType periodType57 = org.joda.time.DateTimeUtils.getPeriodType(periodType56);
        org.joda.time.PeriodType periodType58 = org.joda.time.DateTimeUtils.getPeriodType(periodType56);
        org.joda.time.Period period59 = readableInterval50.toPeriod(periodType58);
        org.joda.time.Partial partial60 = partial39.plus((org.joda.time.ReadablePeriod) period59);
        int[] intArray63 = gregorianChronology31.get((org.joda.time.ReadablePeriod) period59, 1701289178545L, (long) (short) 0);
        org.joda.time.Partial partial65 = partial0.withPeriodAdded((org.joda.time.ReadablePeriod) period59, (int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval66 = null;
        org.joda.time.ReadableInterval readableInterval67 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval66);
        org.joda.time.ReadableInterval readableInterval68 = null;
        boolean boolean69 = readableInterval67.contains(readableInterval68);
        org.joda.time.PeriodType periodType70 = null;
        org.joda.time.Period period71 = readableInterval67.toPeriod(periodType70);
        org.joda.time.Partial partial72 = partial65.plus((org.joda.time.ReadablePeriod) period71);
        org.joda.time.Chronology chronology73 = partial72.getChronology();
        int int74 = partial72.size();
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray25);
        org.junit.Assert.assertNotNull(gregorianChronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 10L + "'", long45 == 10L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(readableInterval50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-53, -10, -4, 0, -20, -19, -38, -545]");
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertNotNull(readableInterval67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(partial72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2943");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.halfdayOfDay();
        org.joda.time.DurationField durationField4 = iSOChronology0.seconds();
        org.joda.time.DurationField durationField5 = iSOChronology0.days();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.yearOfCentury();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField8 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long11 = durationField8.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long13 = durationField8.getValueAsLong((long) 10);
        int int15 = durationField8.getValue((long) (byte) 10);
        boolean boolean16 = partial7.equals((java.lang.Object) durationField8);
        org.joda.time.Chronology chronology17 = partial7.getChronology();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial7.isBefore((org.joda.time.ReadablePartial) partial18);
        java.lang.String str20 = partial7.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType22 = dateTimeFieldType21.getDurationType();
        org.joda.time.Partial partial23 = partial7.without(dateTimeFieldType21);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone28 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology29 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone28);
        org.joda.time.ReadableInterval readableInterval30 = null;
        org.joda.time.ReadableInterval readableInterval31 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval30);
        org.joda.time.Chronology chronology32 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval30);
        org.joda.time.DateTimeField dateTimeField33 = chronology32.yearOfCentury();
        org.joda.time.DurationField durationField34 = chronology32.minutes();
        org.joda.time.DurationField durationField35 = chronology32.halfdays();
        org.joda.time.DurationField durationField36 = chronology32.weeks();
        org.joda.time.DateTimeField dateTimeField37 = chronology32.millisOfDay();
        boolean boolean38 = gregorianChronology29.equals((java.lang.Object) chronology32);
        boolean boolean39 = partial7.equals((java.lang.Object) boolean38);
        java.util.Locale locale41 = null;
        java.lang.String str42 = dateTimeField6.getAsShortText((org.joda.time.ReadablePartial) partial7, (int) ' ', locale41);
        org.joda.time.chrono.ISOChronology iSOChronology43 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField44 = iSOChronology43.minutes();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str46 = dateTimeZone45.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology47 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology43, dateTimeZone45);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.ReadableInterval readableInterval49 = null;
        org.joda.time.ReadableInterval readableInterval50 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval49);
        org.joda.time.ReadableInterval readableInterval51 = null;
        boolean boolean52 = readableInterval50.contains(readableInterval51);
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.Period period54 = readableInterval50.toPeriod(periodType53);
        org.joda.time.DateTime dateTime55 = readableInterval50.getEnd();
        org.joda.time.Chronology chronology56 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant48, (org.joda.time.ReadableInstant) dateTime55);
        int int57 = dateTimeZone45.getOffset((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTime dateTime58 = partial7.toDateTime((org.joda.time.ReadableInstant) dateTime55);
        java.lang.String str59 = partial7.toString();
        int[] intArray60 = partial7.getValues();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(gregorianChronology29);
        org.junit.Assert.assertNotNull(readableInterval31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "32" + "'", str42, "32");
        org.junit.Assert.assertNotNull(iSOChronology43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "UTC" + "'", str46, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology47);
        org.junit.Assert.assertNotNull(readableInterval50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "[]" + "'", str59, "[]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1652");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        org.joda.time.ReadablePartial readablePartial23 = null;
        java.util.Locale locale25 = null;
        java.lang.String str26 = dividedDateTimeField11.getAsShortText(readablePartial23, (int) ' ', locale25);
        org.joda.time.ReadablePartial readablePartial27 = null;
        java.util.Locale locale29 = null;
        java.lang.String str30 = dividedDateTimeField11.getAsText(readablePartial27, (int) (byte) 10, locale29);
        long long33 = dividedDateTimeField11.add(9L, 100L);
        long long36 = dividedDateTimeField11.add(1701289178545L, (long) (byte) 1);
        org.joda.time.ReadableInterval readableInterval37 = null;
        org.joda.time.ReadableInterval readableInterval38 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval37);
        org.joda.time.Chronology chronology39 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval37);
        org.joda.time.DateTimeField dateTimeField40 = chronology39.yearOfCentury();
        org.joda.time.DurationField durationField41 = chronology39.millis();
        org.joda.time.DurationField durationField42 = chronology39.centuries();
        org.joda.time.Chronology chronology43 = chronology39.withUTC();
        org.joda.time.DurationField durationField44 = chronology43.halfdays();
        org.joda.time.DateTimeField dateTimeField45 = chronology43.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField48 = new org.joda.time.field.DividedDateTimeField(dateTimeField45, dateTimeFieldType46, 10);
        long long51 = dividedDateTimeField48.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval53 = null;
        org.joda.time.ReadableInterval readableInterval54 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval53);
        org.joda.time.Chronology chronology55 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval53);
        org.joda.time.DateTimeField dateTimeField56 = chronology55.yearOfCentury();
        org.joda.time.DurationField durationField57 = chronology55.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField58 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType52, durationField57);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField59 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField48, dateTimeFieldType52);
        org.joda.time.Partial partial61 = new org.joda.time.Partial(dateTimeFieldType52, 73);
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField65 = new org.joda.time.field.OffsetDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField11, dateTimeFieldType52, 13, 0, (int) (byte) 10);
        java.util.Locale locale67 = null;
        java.lang.String str68 = offsetDateTimeField65.getAsShortText((-476134763891L), locale67);
        org.joda.time.DurationField durationField69 = offsetDateTimeField65.getDurationField();
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "32" + "'", str26, "32");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "10" + "'", str30, "10");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 31556995200009L + "'", long33 == 31556995200009L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 2016908378545L + "'", long36 == 2016908378545L);
        org.junit.Assert.assertNotNull(readableInterval38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-30610224000000L) + "'", long51 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(readableInterval54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField58);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "208" + "'", str68, "208");
        org.junit.Assert.assertNotNull(durationField69);
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1472");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        org.joda.time.ReadablePartial readablePartial23 = null;
        java.util.Locale locale25 = null;
        java.lang.String str26 = dividedDateTimeField11.getAsShortText(readablePartial23, (int) ' ', locale25);
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField28 = new org.joda.time.field.OffsetDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField11, 100);
        org.joda.time.ReadablePartial readablePartial29 = null;
        org.joda.time.ReadableInterval readableInterval30 = null;
        org.joda.time.ReadableInterval readableInterval31 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval30);
        org.joda.time.Chronology chronology32 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval30);
        org.joda.time.DateTimeField dateTimeField33 = chronology32.minuteOfDay();
        org.joda.time.ReadablePartial readablePartial34 = null;
        int[] intArray41 = new int[] { 53460006, ' ', (short) 100, 28354759, 53460006, 10 };
        int int42 = dateTimeField33.getMinimumValue(readablePartial34, intArray41);
        int int43 = dividedDateTimeField11.getMinimumValue(readablePartial29, intArray41);
        long long45 = dividedDateTimeField11.roundFloor((-476134772251L));
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField47 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long50 = durationField47.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long52 = durationField47.getValueAsLong((long) 10);
        int int54 = durationField47.getValue((long) (byte) 10);
        boolean boolean55 = partial46.equals((java.lang.Object) durationField47);
        org.joda.time.Chronology chronology56 = partial46.getChronology();
        org.joda.time.Partial partial57 = new org.joda.time.Partial();
        boolean boolean58 = partial46.isBefore((org.joda.time.ReadablePartial) partial57);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray59 = partial46.getFieldTypes();
        boolean boolean61 = partial46.equals((java.lang.Object) 1702281558665L);
        int[] intArray62 = partial46.getValues();
        org.joda.time.DateTimeField[] dateTimeFieldArray63 = partial46.getFields();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter64 = partial46.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = partial46.getFormatter();
        int[] intArray67 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray69 = dividedDateTimeField11.addWrapPartial((org.joda.time.ReadablePartial) partial46, (-1), intArray67, 719);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "32" + "'", str26, "32");
        org.junit.Assert.assertNotNull(readableInterval31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[53460006, 32, 100, 28354759, 53460006, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-631152000000L) + "'", long45 == (-631152000000L));
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1L + "'", long50 == 1L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 10L + "'", long52 == 10L);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray63);
        org.junit.Assert.assertNull(dateTimeFormatter64);
        org.junit.Assert.assertNull(dateTimeFormatter65);
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0701");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone5 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology6 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = gregorianChronology6.getZone();
        boolean boolean8 = dateTimeFieldType0.isSupported((org.joda.time.Chronology) gregorianChronology6);
        org.joda.time.DurationField durationField9 = gregorianChronology6.minutes();
        org.joda.time.DateTimeField dateTimeField10 = gregorianChronology6.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField11 = gregorianChronology6.secondOfMinute();
        org.joda.time.ReadablePartial readablePartial12 = null;
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField14 = iSOChronology13.minutes();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str16 = dateTimeZone15.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology17 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology13, dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone18 = zonedChronology17.getZone();
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology17.monthOfYear();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField21 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long24 = durationField21.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long26 = durationField21.getValueAsLong((long) 10);
        int int28 = durationField21.getValue((long) (byte) 10);
        boolean boolean29 = partial20.equals((java.lang.Object) durationField21);
        org.joda.time.Chronology chronology30 = partial20.getChronology();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        boolean boolean32 = partial20.isBefore((org.joda.time.ReadablePartial) partial31);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray33 = partial20.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval34 = null;
        org.joda.time.ReadableInterval readableInterval35 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval34);
        long long36 = readableInterval35.getStartMillis();
        org.joda.time.ReadableInterval readableInterval37 = null;
        org.joda.time.ReadableInterval readableInterval38 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval37);
        org.joda.time.ReadableInterval readableInterval39 = null;
        boolean boolean40 = readableInterval38.contains(readableInterval39);
        org.joda.time.Duration duration41 = readableInterval38.toDuration();
        org.joda.time.DateTime dateTime42 = readableInterval38.getEnd();
        boolean boolean43 = readableInterval35.contains((org.joda.time.ReadableInstant) dateTime42);
        boolean boolean44 = partial20.isMatch((org.joda.time.ReadableInstant) dateTime42);
        int[] intArray46 = zonedChronology17.get((org.joda.time.ReadablePartial) partial20, 60035L);
        org.joda.time.DateTimeField dateTimeField47 = zonedChronology17.centuryOfEra();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField49 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long52 = durationField49.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long54 = durationField49.getValueAsLong((long) 10);
        int int56 = durationField49.getValue((long) (byte) 10);
        boolean boolean57 = partial48.equals((java.lang.Object) durationField49);
        org.joda.time.Chronology chronology58 = partial48.getChronology();
        int[] intArray60 = zonedChronology17.get((org.joda.time.ReadablePartial) partial48, 291L);
        // The following exception was thrown during execution in test generation
        try {
            gregorianChronology6.validate(readablePartial12, intArray60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(gregorianChronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10L + "'", long26 == 10L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray33);
        org.junit.Assert.assertNotNull(readableInterval35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 155017236551L + "'", long36 == 155017236551L);
        org.junit.Assert.assertNotNull(readableInterval38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1L + "'", long52 == 1L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 10L + "'", long54 == 10L);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2883");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField15 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long18 = durationField15.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long20 = durationField15.getValueAsLong((long) 10);
        int int22 = durationField15.getValue((long) (byte) 10);
        boolean boolean23 = partial14.equals((java.lang.Object) durationField15);
        boolean boolean24 = partial0.equals((java.lang.Object) durationField15);
        org.joda.time.DateTimeField[] dateTimeFieldArray25 = partial0.getFields();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone30 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology31 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone32 = gregorianChronology31.getZone();
        long long36 = gregorianChronology31.add(0L, (long) (byte) 1, (int) (byte) 0);
        org.joda.time.DateTimeField dateTimeField37 = gregorianChronology31.millisOfDay();
        org.joda.time.DurationField durationField38 = gregorianChronology31.weeks();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField40 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long43 = durationField40.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long45 = durationField40.getValueAsLong((long) 10);
        int int47 = durationField40.getValue((long) (byte) 10);
        boolean boolean48 = partial39.equals((java.lang.Object) durationField40);
        org.joda.time.ReadableInterval readableInterval49 = null;
        org.joda.time.ReadableInterval readableInterval50 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval49);
        org.joda.time.ReadableInterval readableInterval51 = null;
        boolean boolean52 = readableInterval50.contains(readableInterval51);
        org.joda.time.ReadableInterval readableInterval53 = null;
        boolean boolean54 = readableInterval50.isBefore(readableInterval53);
        org.joda.time.Interval interval55 = readableInterval50.toInterval();
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.PeriodType periodType57 = org.joda.time.DateTimeUtils.getPeriodType(periodType56);
        org.joda.time.PeriodType periodType58 = org.joda.time.DateTimeUtils.getPeriodType(periodType56);
        org.joda.time.Period period59 = readableInterval50.toPeriod(periodType58);
        org.joda.time.Partial partial60 = partial39.plus((org.joda.time.ReadablePeriod) period59);
        int[] intArray63 = gregorianChronology31.get((org.joda.time.ReadablePeriod) period59, 1701289178545L, (long) (short) 0);
        org.joda.time.Partial partial65 = partial0.withPeriodAdded((org.joda.time.ReadablePeriod) period59, (int) (byte) 0);
        java.lang.String str66 = partial0.toStringList();
        java.lang.String str67 = partial0.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.IllegalFieldValueException illegalFieldValueException70 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType68, "2023-11-29T12:19:27.125-08:00/2023-11-29T12:19:27.125-08:00");
        org.joda.time.Chronology chronology71 = null;
        boolean boolean72 = dateTimeFieldType68.isSupported(chronology71);
        boolean boolean73 = partial0.isSupported(dateTimeFieldType68);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray25);
        org.junit.Assert.assertNotNull(gregorianChronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 10L + "'", long45 == 10L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(readableInterval50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-53, -10, -4, 0, -20, -19, -38, -545]");
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "[]" + "'", str66, "[]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[]" + "'", str67, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2532");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField15 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long18 = durationField15.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long20 = durationField15.getValueAsLong((long) 10);
        int int22 = durationField15.getValue((long) (byte) 10);
        boolean boolean23 = partial14.equals((java.lang.Object) durationField15);
        org.joda.time.Chronology chronology24 = partial14.getChronology();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial14.isBefore((org.joda.time.ReadablePartial) partial25);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = partial14.getFieldTypes();
        boolean boolean29 = partial14.equals((java.lang.Object) 1702281558665L);
        int int30 = partial0.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.ReadableInterval readableInterval31 = null;
        org.joda.time.ReadableInterval readableInterval32 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval31);
        org.joda.time.ReadableInterval readableInterval33 = null;
        boolean boolean34 = readableInterval32.contains(readableInterval33);
        org.joda.time.Chronology chronology35 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval33);
        org.joda.time.DateTimeField dateTimeField36 = chronology35.halfdayOfDay();
        long long39 = dateTimeField36.getDifferenceAsLong((-45757612800000L), (-2177424000000L));
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField41 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long44 = durationField41.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long46 = durationField41.getValueAsLong((long) 10);
        int int48 = durationField41.getValue((long) (byte) 10);
        boolean boolean49 = partial40.equals((java.lang.Object) durationField41);
        org.joda.time.Chronology chronology50 = partial40.getChronology();
        java.lang.String str51 = partial40.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray52 = partial40.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval53 = null;
        org.joda.time.ReadableInterval readableInterval54 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval53);
        org.joda.time.ReadableInterval readableInterval55 = null;
        boolean boolean56 = readableInterval54.contains(readableInterval55);
        org.joda.time.ReadableInterval readableInterval57 = null;
        boolean boolean58 = readableInterval54.isBefore(readableInterval57);
        org.joda.time.Interval interval59 = readableInterval54.toInterval();
        org.joda.time.PeriodType periodType60 = null;
        org.joda.time.PeriodType periodType61 = org.joda.time.DateTimeUtils.getPeriodType(periodType60);
        org.joda.time.PeriodType periodType62 = org.joda.time.DateTimeUtils.getPeriodType(periodType60);
        org.joda.time.Period period63 = readableInterval54.toPeriod(periodType62);
        org.joda.time.Partial partial64 = partial40.plus((org.joda.time.ReadablePeriod) period63);
        int[] intArray65 = null;
        int int66 = dateTimeField36.getMaximumValue((org.joda.time.ReadablePartial) partial40, intArray65);
        boolean boolean67 = partial14.equals((java.lang.Object) intArray65);
        int int68 = partial14.size();
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(readableInterval32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-1008800L) + "'", long39 == (-1008800L));
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10L + "'", long46 == 10L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[]" + "'", str51, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray52);
        org.junit.Assert.assertNotNull(readableInterval54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(partial64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0458");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        java.lang.String str13 = partial0.toString();
        org.joda.time.Chronology chronology14 = partial0.getChronology();
        java.lang.String str15 = partial0.toString();
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField17 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long20 = durationField17.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long22 = durationField17.getValueAsLong((long) 10);
        int int24 = durationField17.getValue((long) (byte) 10);
        boolean boolean25 = partial16.equals((java.lang.Object) durationField17);
        org.joda.time.Chronology chronology26 = partial16.getChronology();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        boolean boolean28 = partial16.isBefore((org.joda.time.ReadablePartial) partial27);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = partial16.getFieldTypes();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField31 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long34 = durationField31.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long36 = durationField31.getValueAsLong((long) 10);
        int int38 = durationField31.getValue((long) (byte) 10);
        boolean boolean39 = partial30.equals((java.lang.Object) durationField31);
        boolean boolean40 = partial16.equals((java.lang.Object) durationField31);
        org.joda.time.ReadableInterval readableInterval41 = null;
        org.joda.time.ReadableInterval readableInterval42 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval41);
        org.joda.time.ReadableInterval readableInterval43 = null;
        boolean boolean44 = readableInterval42.contains(readableInterval43);
        org.joda.time.Duration duration45 = readableInterval42.toDuration();
        org.joda.time.ReadableInterval readableInterval46 = null;
        org.joda.time.ReadableInterval readableInterval47 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval46);
        org.joda.time.ReadableInterval readableInterval48 = null;
        boolean boolean49 = readableInterval47.contains(readableInterval48);
        org.joda.time.Duration duration50 = readableInterval47.toDuration();
        org.joda.time.DateTime dateTime51 = readableInterval47.getEnd();
        boolean boolean52 = readableInterval42.isBefore((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTime dateTime53 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField55 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long58 = durationField55.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long60 = durationField55.getValueAsLong((long) 10);
        int int62 = durationField55.getValue((long) (byte) 10);
        boolean boolean63 = partial54.equals((java.lang.Object) durationField55);
        org.joda.time.Chronology chronology64 = partial54.getChronology();
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        boolean boolean66 = partial54.isBefore((org.joda.time.ReadablePartial) partial65);
        boolean boolean67 = partial16.isBefore((org.joda.time.ReadablePartial) partial65);
        int int68 = partial0.compareTo((org.joda.time.ReadablePartial) partial16);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10L + "'", long22 == 10L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 10L + "'", long36 == 10L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(readableInterval42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(readableInterval47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1L + "'", long58 == 1L);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 10L + "'", long60 == 10L);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1091");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.halfdayOfDay();
        org.joda.time.DurationField durationField4 = iSOChronology0.seconds();
        org.joda.time.Chronology chronology5 = iSOChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.weekOfWeekyear();
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.secondOfDay();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval9);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology11.millis();
        org.joda.time.DurationField durationField14 = chronology11.centuries();
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.ReadableInterval readableInterval16 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval15);
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        org.joda.time.DurationField durationField19 = chronology17.millis();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.ReadableInterval readableInterval22 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval21);
        org.joda.time.Chronology chronology23 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval21);
        org.joda.time.DateTimeField dateTimeField24 = chronology23.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval26 = null;
        org.joda.time.ReadableInterval readableInterval27 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval26);
        org.joda.time.ReadableInterval readableInterval28 = null;
        boolean boolean29 = readableInterval27.contains(readableInterval28);
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Period period31 = readableInterval27.toPeriod(periodType30);
        int[] intArray33 = chronology23.get((org.joda.time.ReadablePeriod) period31, (-210866846400000L));
        int[] intArray36 = chronology17.get((org.joda.time.ReadablePeriod) period31, 2173795348453L, (long) 1439);
        int[] intArray39 = chronology11.get((org.joda.time.ReadablePeriod) period31, 291L, 2580171L);
        int[] intArray41 = iSOChronology7.get((org.joda.time.ReadablePeriod) period31, 29227899L);
        int[] intArray43 = iSOChronology0.get((org.joda.time.ReadablePeriod) period31, 2835106203L);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str45 = dateTimeZone44.toString();
        java.lang.String str47 = dateTimeZone44.getShortName((-210866846400000L));
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeUtils.getZone(dateTimeZone44);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone49 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone48);
        boolean boolean51 = cachedDateTimeZone49.equals((java.lang.Object) 432000032L);
        int int53 = cachedDateTimeZone49.getOffset(1L);
        java.lang.String str55 = cachedDateTimeZone49.getNameKey((-31507200000L));
        org.joda.time.Chronology chronology56 = iSOChronology0.withZone((org.joda.time.DateTimeZone) cachedDateTimeZone49);
        java.lang.String str58 = cachedDateTimeZone49.getNameKey(28800001L);
        org.joda.time.DateTimeZone dateTimeZone59 = cachedDateTimeZone49.getUncachedZone();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(readableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(readableInterval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(readableInterval22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(readableInterval27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(intArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[0, 0, 0, 0, 8, 7, 7, 899]");
        org.junit.Assert.assertNotNull(intArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[0, 0, 4, 4, 19, 31, 46, 203]");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "UTC" + "'", str45, "UTC");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00" + "'", str47, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(cachedDateTimeZone49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "UTC" + "'", str55, "UTC");
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "UTC" + "'", str58, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone59);
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2546");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology5 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone6 = gregorianChronology5.getZone();
        long long11 = gregorianChronology5.getDateTimeMillis((int) '4', 8, 24, 24);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField13 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long16 = durationField13.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long18 = durationField13.getValueAsLong((long) 10);
        int int20 = durationField13.getValue((long) (byte) 10);
        boolean boolean21 = partial12.equals((java.lang.Object) durationField13);
        org.joda.time.Chronology chronology22 = partial12.getChronology();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        boolean boolean24 = partial12.isBefore((org.joda.time.ReadablePartial) partial23);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = partial12.getFieldTypes();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField27 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long30 = durationField27.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long32 = durationField27.getValueAsLong((long) 10);
        int int34 = durationField27.getValue((long) (byte) 10);
        boolean boolean35 = partial26.equals((java.lang.Object) durationField27);
        boolean boolean36 = partial12.equals((java.lang.Object) durationField27);
        int[] intArray38 = gregorianChronology5.get((org.joda.time.ReadablePartial) partial12, 0L);
        org.joda.time.DateTimeField dateTimeField39 = gregorianChronology5.weekyear();
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField41 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long44 = durationField41.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long46 = durationField41.getValueAsLong((long) 10);
        int int48 = durationField41.getValue((long) (byte) 10);
        boolean boolean49 = partial40.equals((java.lang.Object) durationField41);
        org.joda.time.Chronology chronology50 = partial40.getChronology();
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        boolean boolean52 = partial40.isBefore((org.joda.time.ReadablePartial) partial51);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray53 = partial40.getFieldTypes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = partial40.getFormatter();
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField56 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long59 = durationField56.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long61 = durationField56.getValueAsLong((long) 10);
        int int63 = durationField56.getValue((long) (byte) 10);
        boolean boolean64 = partial55.equals((java.lang.Object) durationField56);
        org.joda.time.Chronology chronology65 = partial55.getChronology();
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        boolean boolean67 = partial55.isBefore((org.joda.time.ReadablePartial) partial66);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray68 = partial55.getFieldTypes();
        boolean boolean70 = partial55.equals((java.lang.Object) 1702281558665L);
        java.lang.String str71 = partial55.toString();
        org.joda.time.Chronology chronology72 = partial55.getChronology();
        int int73 = partial40.compareTo((org.joda.time.ReadablePartial) partial55);
        long long75 = gregorianChronology5.set((org.joda.time.ReadablePartial) partial40, (-6214039961954960L));
        org.junit.Assert.assertNotNull(gregorianChronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505833599976L) + "'", long11 == (-60505833599976L));
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10L + "'", long18 == 10L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10L + "'", long32 == 10L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10L + "'", long46 == 10L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray53);
        org.junit.Assert.assertNull(dateTimeFormatter54);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 10L + "'", long61 == 10L);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[]" + "'", str71, "[]");
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + (-6214039961954960L) + "'", long75 == (-6214039961954960L));
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3058");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology5 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        org.joda.time.DurationField durationField6 = gregorianChronology5.days();
        org.joda.time.DateTimeField dateTimeField7 = gregorianChronology5.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField8 = gregorianChronology5.era();
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology5.halfdayOfDay();
        java.lang.String str10 = gregorianChronology5.toString();
        org.joda.time.DateTimeField dateTimeField11 = gregorianChronology5.secondOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField13 = iSOChronology12.minutes();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology12.halfdayOfDay();
        org.joda.time.DurationField durationField16 = iSOChronology12.seconds();
        org.joda.time.Chronology chronology17 = iSOChronology12.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology12.weekOfWeekyear();
        org.joda.time.chrono.ISOChronology iSOChronology19 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology19.secondOfDay();
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.ReadableInterval readableInterval22 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval21);
        org.joda.time.Chronology chronology23 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval21);
        org.joda.time.DateTimeField dateTimeField24 = chronology23.yearOfCentury();
        org.joda.time.DurationField durationField25 = chronology23.millis();
        org.joda.time.DurationField durationField26 = chronology23.centuries();
        org.joda.time.ReadableInterval readableInterval27 = null;
        org.joda.time.ReadableInterval readableInterval28 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval27);
        org.joda.time.Chronology chronology29 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval27);
        org.joda.time.DateTimeField dateTimeField30 = chronology29.yearOfCentury();
        org.joda.time.DurationField durationField31 = chronology29.millis();
        org.joda.time.DateTimeField dateTimeField32 = chronology29.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval33 = null;
        org.joda.time.ReadableInterval readableInterval34 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval33);
        org.joda.time.Chronology chronology35 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval33);
        org.joda.time.DateTimeField dateTimeField36 = chronology35.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField37 = chronology35.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval38 = null;
        org.joda.time.ReadableInterval readableInterval39 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval38);
        org.joda.time.ReadableInterval readableInterval40 = null;
        boolean boolean41 = readableInterval39.contains(readableInterval40);
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.Period period43 = readableInterval39.toPeriod(periodType42);
        int[] intArray45 = chronology35.get((org.joda.time.ReadablePeriod) period43, (-210866846400000L));
        int[] intArray48 = chronology29.get((org.joda.time.ReadablePeriod) period43, 2173795348453L, (long) 1439);
        int[] intArray51 = chronology23.get((org.joda.time.ReadablePeriod) period43, 291L, 2580171L);
        int[] intArray53 = iSOChronology19.get((org.joda.time.ReadablePeriod) period43, 29227899L);
        int[] intArray55 = iSOChronology12.get((org.joda.time.ReadablePeriod) period43, 2835106203L);
        int[] intArray57 = gregorianChronology5.get((org.joda.time.ReadablePeriod) period43, 1688546377172564L);
        org.joda.time.DateTimeField dateTimeField58 = gregorianChronology5.millisOfSecond();
        org.junit.Assert.assertNotNull(gregorianChronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GregorianChronology[100]" + "'", str10, "GregorianChronology[100]");
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(iSOChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(iSOChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(readableInterval22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(readableInterval28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(readableInterval34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(readableInterval39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(intArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[0, 0, 0, 0, 8, 7, 7, 899]");
        org.junit.Assert.assertNotNull(intArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[0, 0, 4, 4, 19, 31, 46, 203]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[0, 0, 2791908, 4, 20, 19, 32, 564]");
        org.junit.Assert.assertNotNull(dateTimeField58);
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3050");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.weekyearOfCentury();
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField5 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long8 = durationField5.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long10 = durationField5.getValueAsLong((long) 10);
        int int12 = durationField5.getValue((long) (byte) 10);
        boolean boolean13 = partial4.equals((java.lang.Object) durationField5);
        org.joda.time.Chronology chronology14 = partial4.getChronology();
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        boolean boolean16 = partial4.isBefore((org.joda.time.ReadablePartial) partial15);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = partial4.getFieldTypes();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField19 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long22 = durationField19.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long24 = durationField19.getValueAsLong((long) 10);
        int int26 = durationField19.getValue((long) (byte) 10);
        boolean boolean27 = partial18.equals((java.lang.Object) durationField19);
        org.joda.time.Chronology chronology28 = partial18.getChronology();
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        boolean boolean30 = partial18.isBefore((org.joda.time.ReadablePartial) partial29);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray31 = partial18.getFieldTypes();
        boolean boolean33 = partial18.equals((java.lang.Object) 1702281558665L);
        int int34 = partial4.compareTo((org.joda.time.ReadablePartial) partial18);
        java.util.Locale locale36 = null;
        java.lang.String str37 = dateTimeField3.getAsText((org.joda.time.ReadablePartial) partial4, (int) (byte) 10, locale36);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField39 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long42 = durationField39.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long44 = durationField39.getValueAsLong((long) 10);
        int int46 = durationField39.getValue((long) (byte) 10);
        boolean boolean47 = partial38.equals((java.lang.Object) durationField39);
        org.joda.time.Chronology chronology48 = partial38.getChronology();
        java.lang.String str49 = partial38.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray50 = partial38.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval51 = null;
        org.joda.time.ReadableInterval readableInterval52 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval51);
        org.joda.time.ReadableInterval readableInterval53 = null;
        boolean boolean54 = readableInterval52.contains(readableInterval53);
        org.joda.time.ReadableInterval readableInterval55 = null;
        boolean boolean56 = readableInterval52.isBefore(readableInterval55);
        org.joda.time.Interval interval57 = readableInterval52.toInterval();
        org.joda.time.PeriodType periodType58 = null;
        org.joda.time.PeriodType periodType59 = org.joda.time.DateTimeUtils.getPeriodType(periodType58);
        org.joda.time.PeriodType periodType60 = org.joda.time.DateTimeUtils.getPeriodType(periodType58);
        org.joda.time.Period period61 = readableInterval52.toPeriod(periodType60);
        org.joda.time.Partial partial62 = partial38.plus((org.joda.time.ReadablePeriod) period61);
        java.lang.String str63 = partial62.toStringList();
        java.lang.String str64 = partial62.toStringList();
        boolean boolean65 = partial4.isAfter((org.joda.time.ReadablePartial) partial62);
        int int66 = partial4.size();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10L + "'", long24 == 10L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "10" + "'", str37, "10");
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 10L + "'", long44 == 10L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[]" + "'", str49, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray50);
        org.junit.Assert.assertNotNull(readableInterval52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(partial62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "[]" + "'", str63, "[]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[]" + "'", str64, "[]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1929");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.clockhourOfDay();
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField5 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long8 = durationField5.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long10 = durationField5.getValueAsLong((long) 10);
        int int12 = durationField5.getValue((long) (byte) 10);
        boolean boolean13 = partial4.equals((java.lang.Object) durationField5);
        org.joda.time.Chronology chronology14 = partial4.getChronology();
        java.lang.String str15 = partial4.toString();
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField17 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long20 = durationField17.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long22 = durationField17.getValueAsLong((long) 10);
        int int24 = durationField17.getValue((long) (byte) 10);
        boolean boolean25 = partial16.equals((java.lang.Object) durationField17);
        org.joda.time.Chronology chronology26 = partial16.getChronology();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        boolean boolean28 = partial16.isBefore((org.joda.time.ReadablePartial) partial27);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = partial16.getFieldTypes();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField31 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long34 = durationField31.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long36 = durationField31.getValueAsLong((long) 10);
        int int38 = durationField31.getValue((long) (byte) 10);
        boolean boolean39 = partial30.equals((java.lang.Object) durationField31);
        boolean boolean40 = partial16.equals((java.lang.Object) durationField31);
        int int41 = partial4.compareTo((org.joda.time.ReadablePartial) partial16);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = null;
        java.lang.String str43 = partial16.toString(dateTimeFormatter42);
        org.joda.time.ReadableInterval readableInterval44 = null;
        org.joda.time.ReadableInterval readableInterval45 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval44);
        org.joda.time.ReadableInterval readableInterval46 = null;
        boolean boolean47 = readableInterval45.contains(readableInterval46);
        org.joda.time.ReadableInterval readableInterval48 = null;
        boolean boolean49 = readableInterval45.isBefore(readableInterval48);
        org.joda.time.DateTime dateTime50 = readableInterval45.getEnd();
        org.joda.time.ReadableInterval readableInterval51 = null;
        org.joda.time.ReadableInterval readableInterval52 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval51);
        org.joda.time.ReadableInterval readableInterval53 = null;
        boolean boolean54 = readableInterval52.contains(readableInterval53);
        org.joda.time.ReadableInterval readableInterval55 = null;
        boolean boolean56 = readableInterval52.isBefore(readableInterval55);
        org.joda.time.DateTime dateTime57 = readableInterval52.getEnd();
        boolean boolean58 = readableInterval45.isBefore((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.ReadableInterval readableInterval59 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval45);
        long long60 = readableInterval59.getEndMillis();
        org.joda.time.DateTime dateTime61 = readableInterval59.getStart();
        org.joda.time.DateTime dateTime62 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime61);
        java.util.Locale locale64 = null;
        java.lang.String str65 = dateTimeField3.getAsShortText((org.joda.time.ReadablePartial) partial16, 1225154542, locale64);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10L + "'", long22 == 10L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 10L + "'", long36 == 10L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[]" + "'", str43, "[]");
        org.junit.Assert.assertNotNull(readableInterval45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(readableInterval52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(readableInterval59);
// flaky:         org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-476134762239L) + "'", long60 == (-476134762239L));
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "1225154542" + "'", str65, "1225154542");
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0801");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DurationField durationField2 = iSOChronology0.months();
        org.joda.time.DurationField durationField3 = iSOChronology0.years();
        org.joda.time.DateTimeZone dateTimeZone4 = iSOChronology0.getZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str6 = dateTimeZone5.toString();
        java.lang.String str8 = dateTimeZone5.getShortName((-210866846400000L));
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeUtils.getZone(dateTimeZone5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = iSOChronology0.withZone((org.joda.time.DateTimeZone) cachedDateTimeZone10);
        org.joda.time.DurationField durationField12 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology0.secondOfDay();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField15 = new org.joda.time.field.OffsetDateTimeField(dateTimeField13, 1439);
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField17 = iSOChronology16.minutes();
        org.joda.time.DurationField durationField18 = iSOChronology16.months();
        org.joda.time.DurationField durationField19 = iSOChronology16.years();
        org.joda.time.DateTimeZone dateTimeZone20 = iSOChronology16.getZone();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str22 = dateTimeZone21.toString();
        java.lang.String str24 = dateTimeZone21.getShortName((-210866846400000L));
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeUtils.getZone(dateTimeZone21);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone26 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone25);
        org.joda.time.Chronology chronology27 = iSOChronology16.withZone((org.joda.time.DateTimeZone) cachedDateTimeZone26);
        org.joda.time.DurationField durationField28 = iSOChronology16.minutes();
        boolean boolean29 = durationField28.isPrecise();
        org.joda.time.ReadableInterval readableInterval30 = null;
        org.joda.time.ReadableInterval readableInterval31 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval30);
        org.joda.time.Chronology chronology32 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval30);
        org.joda.time.DateTimeField dateTimeField33 = chronology32.yearOfCentury();
        org.joda.time.DurationField durationField34 = chronology32.millis();
        org.joda.time.DurationField durationField35 = chronology32.centuries();
        org.joda.time.Chronology chronology36 = chronology32.withUTC();
        org.joda.time.DurationField durationField37 = chronology36.halfdays();
        org.joda.time.DateTimeField dateTimeField38 = chronology36.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField41 = new org.joda.time.field.DividedDateTimeField(dateTimeField38, dateTimeFieldType39, 10);
        long long44 = dividedDateTimeField41.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval46 = null;
        org.joda.time.ReadableInterval readableInterval47 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval46);
        org.joda.time.Chronology chronology48 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval46);
        org.joda.time.DateTimeField dateTimeField49 = chronology48.yearOfCentury();
        org.joda.time.DurationField durationField50 = chronology48.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField51 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType45, durationField50);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField52 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField41, dateTimeFieldType45);
        java.lang.String str53 = dateTimeFieldType45.getName();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField55 = new org.joda.time.field.DividedDateTimeField(dateTimeField13, durationField28, dateTimeFieldType45, 1439);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(iSOChronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(cachedDateTimeZone26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(readableInterval31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-30610224000000L) + "'", long44 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(readableInterval47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "dayOfYear" + "'", str53, "dayOfYear");
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1464");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = null;
        boolean boolean3 = readableInterval1.contains(readableInterval2);
        org.joda.time.Duration duration4 = readableInterval1.toDuration();
        org.joda.time.DateTime dateTime5 = readableInterval1.getEnd();
        org.joda.time.Period period6 = readableInterval1.toPeriod();
        org.joda.time.Chronology chronology7 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str11 = dateTimeZone10.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology8, dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone13 = zonedChronology12.getZone();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.monthOfYear();
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField16 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long19 = durationField16.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long21 = durationField16.getValueAsLong((long) 10);
        int int23 = durationField16.getValue((long) (byte) 10);
        boolean boolean24 = partial15.equals((java.lang.Object) durationField16);
        org.joda.time.Chronology chronology25 = partial15.getChronology();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial15.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = partial15.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval29 = null;
        org.joda.time.ReadableInterval readableInterval30 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval29);
        long long31 = readableInterval30.getStartMillis();
        org.joda.time.ReadableInterval readableInterval32 = null;
        org.joda.time.ReadableInterval readableInterval33 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval32);
        org.joda.time.ReadableInterval readableInterval34 = null;
        boolean boolean35 = readableInterval33.contains(readableInterval34);
        org.joda.time.Duration duration36 = readableInterval33.toDuration();
        org.joda.time.DateTime dateTime37 = readableInterval33.getEnd();
        boolean boolean38 = readableInterval30.contains((org.joda.time.ReadableInstant) dateTime37);
        boolean boolean39 = partial15.isMatch((org.joda.time.ReadableInstant) dateTime37);
        int[] intArray41 = zonedChronology12.get((org.joda.time.ReadablePartial) partial15, 60035L);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval43 = null;
        org.joda.time.ReadableInterval readableInterval44 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval43);
        org.joda.time.Chronology chronology45 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval43);
        org.joda.time.DateTimeField dateTimeField46 = chronology45.yearOfCentury();
        boolean boolean47 = durationFieldType42.isSupported(chronology45);
        org.joda.time.DurationField durationField48 = chronology45.halfdays();
        org.joda.time.DateTimeField dateTimeField49 = chronology45.weekyearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField54 = new org.joda.time.field.OffsetDateTimeField(dateTimeField49, dateTimeFieldType50, 4, (int) ' ', (int) (short) -1);
        boolean boolean55 = partial15.isSupported(dateTimeFieldType50);
        int[] intArray57 = chronology7.get((org.joda.time.ReadablePartial) partial15, 1701260514765L);
        org.joda.time.DateTimeField dateTimeField58 = chronology7.secondOfMinute();
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10L + "'", long21 == 10L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertNotNull(readableInterval30);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(readableInterval33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertNotNull(readableInterval44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertNotNull(dateTimeField58);
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3141");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.ReadablePartial readablePartial4 = null;
        int int5 = dateTimeField3.getMinimumValue(readablePartial4);
        org.joda.time.ReadablePartial readablePartial6 = null;
        org.joda.time.ReadableInterval readableInterval7 = null;
        org.joda.time.ReadableInterval readableInterval8 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval7);
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval7);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.yearOfCentury();
        org.joda.time.DurationField durationField11 = chronology9.millis();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.clockhourOfDay();
        org.joda.time.ReadablePartial readablePartial14 = null;
        int[] intArray21 = new int[] { '#', (-1), 0, (byte) 1, (short) 1, (byte) 1 };
        int int22 = dateTimeField13.getMaximumValue(readablePartial14, intArray21);
        int int23 = dateTimeField3.getMinimumValue(readablePartial6, intArray21);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField26 = new org.joda.time.field.RemainderDateTimeField(dateTimeField3, dateTimeFieldType24, 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval28 = null;
        org.joda.time.ReadableInterval readableInterval29 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval28);
        org.joda.time.Chronology chronology30 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval28);
        org.joda.time.DateTimeField dateTimeField31 = chronology30.yearOfCentury();
        org.joda.time.DurationField durationField32 = chronology30.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField33 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType27, durationField32);
        long long36 = durationField32.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval38 = null;
        org.joda.time.ReadableInterval readableInterval39 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval38);
        org.joda.time.Chronology chronology40 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval38);
        org.joda.time.DateTimeField dateTimeField41 = chronology40.yearOfCentury();
        boolean boolean42 = durationFieldType37.isSupported(chronology40);
        org.joda.time.field.ScaledDurationField scaledDurationField44 = new org.joda.time.field.ScaledDurationField(durationField32, durationFieldType37, (int) 'a');
        long long45 = scaledDurationField44.getUnitMillis();
        org.joda.time.DurationFieldType durationFieldType46 = scaledDurationField44.getType();
        int int48 = scaledDurationField44.getValue((long) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType50 = dateTimeFieldType49.getDurationType();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField52 = new org.joda.time.field.RemainderDateTimeField((org.joda.time.DateTimeField) remainderDateTimeField26, (org.joda.time.DurationField) scaledDurationField44, dateTimeFieldType49, 53460006);
        org.joda.time.DurationField durationField53 = remainderDateTimeField52.getRangeDurationField();
        int int54 = remainderDateTimeField52.iDivisor;
        long long56 = remainderDateTimeField52.remainder(1701289162108L);
        int int59 = remainderDateTimeField52.getDifference(165025048975415L, (-6027150136924300L));
        boolean boolean61 = remainderDateTimeField52.isLeap(0L);
        java.lang.String str62 = remainderDateTimeField52.toString();
        java.util.Locale locale63 = null;
        int int64 = remainderDateTimeField52.getMaximumShortTextLength(locale63);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(readableInterval8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[35, -1, 0, 1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 24 + "'", int22 == 24);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(readableInterval29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-210866846400000L) + "'", long36 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertNotNull(readableInterval39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 97L + "'", long45 == 97L);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 53460006 + "'", int54 == 53460006);
// flaky:         org.junit.Assert.assertTrue("'" + long56 + "' != '" + 28757962117L + "'", long56 == 28757962117L);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 196222 + "'", int59 == 196222);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "DateTimeField[centuryOfEra]" + "'", str62, "DateTimeField[centuryOfEra]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 8 + "'", int64 == 8);
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1414");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology5 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        org.joda.time.DurationField durationField6 = gregorianChronology5.days();
        org.joda.time.DurationField durationField7 = gregorianChronology5.years();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone12 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology13 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone14 = gregorianChronology13.getZone();
        long long18 = gregorianChronology13.add(0L, (long) (byte) 1, (int) (byte) 0);
        org.joda.time.DateTimeField dateTimeField19 = gregorianChronology13.millisOfDay();
        org.joda.time.DurationField durationField20 = gregorianChronology13.weeks();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField22 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long25 = durationField22.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long27 = durationField22.getValueAsLong((long) 10);
        int int29 = durationField22.getValue((long) (byte) 10);
        boolean boolean30 = partial21.equals((java.lang.Object) durationField22);
        org.joda.time.ReadableInterval readableInterval31 = null;
        org.joda.time.ReadableInterval readableInterval32 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval31);
        org.joda.time.ReadableInterval readableInterval33 = null;
        boolean boolean34 = readableInterval32.contains(readableInterval33);
        org.joda.time.ReadableInterval readableInterval35 = null;
        boolean boolean36 = readableInterval32.isBefore(readableInterval35);
        org.joda.time.Interval interval37 = readableInterval32.toInterval();
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.PeriodType periodType39 = org.joda.time.DateTimeUtils.getPeriodType(periodType38);
        org.joda.time.PeriodType periodType40 = org.joda.time.DateTimeUtils.getPeriodType(periodType38);
        org.joda.time.Period period41 = readableInterval32.toPeriod(periodType40);
        org.joda.time.Partial partial42 = partial21.plus((org.joda.time.ReadablePeriod) period41);
        int[] intArray45 = gregorianChronology13.get((org.joda.time.ReadablePeriod) period41, 1701289178545L, (long) (short) 0);
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField47 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long50 = durationField47.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long52 = durationField47.getValueAsLong((long) 10);
        int int54 = durationField47.getValue((long) (byte) 10);
        boolean boolean55 = partial46.equals((java.lang.Object) durationField47);
        org.joda.time.Chronology chronology56 = partial46.getChronology();
        org.joda.time.Partial partial57 = new org.joda.time.Partial();
        boolean boolean58 = partial46.isBefore((org.joda.time.ReadablePartial) partial57);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray59 = partial46.getFieldTypes();
        boolean boolean61 = partial46.equals((java.lang.Object) 1702281558665L);
        java.lang.String str62 = partial46.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = partial46.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.Partial partial65 = partial46.plus(readablePeriod64);
        int[] intArray67 = gregorianChronology13.get((org.joda.time.ReadablePartial) partial46, 1701289179647L);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.era();
        int int69 = partial46.indexOf(dateTimeFieldType68);
        int[] intArray71 = gregorianChronology5.get((org.joda.time.ReadablePartial) partial46, 0L);
        org.joda.time.DateTimeField dateTimeField72 = gregorianChronology5.hourOfDay();
        org.junit.Assert.assertNotNull(gregorianChronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(gregorianChronology13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(readableInterval32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-53, -10, -4, 0, -20, -19, -38, -545]");
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1L + "'", long50 == 1L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 10L + "'", long52 == 10L);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "[]" + "'", str62, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter63);
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[]");
        org.junit.Assert.assertNotNull(dateTimeField72);
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3104");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField15 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long18 = durationField15.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long20 = durationField15.getValueAsLong((long) 10);
        int int22 = durationField15.getValue((long) (byte) 10);
        boolean boolean23 = partial14.equals((java.lang.Object) durationField15);
        boolean boolean24 = partial0.equals((java.lang.Object) durationField15);
        org.joda.time.ReadableInterval readableInterval25 = null;
        org.joda.time.ReadableInterval readableInterval26 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval25);
        org.joda.time.ReadableInterval readableInterval27 = null;
        boolean boolean28 = readableInterval26.contains(readableInterval27);
        org.joda.time.Duration duration29 = readableInterval26.toDuration();
        org.joda.time.ReadableInterval readableInterval30 = null;
        org.joda.time.ReadableInterval readableInterval31 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval30);
        org.joda.time.ReadableInterval readableInterval32 = null;
        boolean boolean33 = readableInterval31.contains(readableInterval32);
        org.joda.time.Duration duration34 = readableInterval31.toDuration();
        org.joda.time.DateTime dateTime35 = readableInterval31.getEnd();
        boolean boolean36 = readableInterval26.isBefore((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime dateTime37 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField39 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long42 = durationField39.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long44 = durationField39.getValueAsLong((long) 10);
        int int46 = durationField39.getValue((long) (byte) 10);
        boolean boolean47 = partial38.equals((java.lang.Object) durationField39);
        org.joda.time.Chronology chronology48 = partial38.getChronology();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial38.isBefore((org.joda.time.ReadablePartial) partial49);
        boolean boolean51 = partial0.isBefore((org.joda.time.ReadablePartial) partial49);
        int[] intArray52 = partial49.getValues();
        org.joda.time.ReadableInterval readableInterval53 = null;
        org.joda.time.ReadableInterval readableInterval54 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval53);
        org.joda.time.Chronology chronology55 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval53);
        org.joda.time.DateTimeField dateTimeField56 = chronology55.hourOfHalfday();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField59 = new org.joda.time.field.DividedDateTimeField(dateTimeField56, dateTimeFieldType57, 53460006);
        org.joda.time.DurationFieldType durationFieldType60 = dateTimeFieldType57.getRangeDurationType();
        boolean boolean61 = partial49.isSupported(dateTimeFieldType57);
        // The following exception was thrown during execution in test generation
        try {
            int int63 = partial49.getValue((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(readableInterval26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(readableInterval31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 10L + "'", long44 == 10L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(readableInterval54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1690");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology5 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        org.joda.time.DurationField durationField6 = gregorianChronology5.days();
        org.joda.time.DurationField durationField7 = gregorianChronology5.years();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone12 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology13 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone14 = gregorianChronology13.getZone();
        long long18 = gregorianChronology13.add(0L, (long) (byte) 1, (int) (byte) 0);
        org.joda.time.DateTimeField dateTimeField19 = gregorianChronology13.millisOfDay();
        org.joda.time.DurationField durationField20 = gregorianChronology13.weeks();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField22 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long25 = durationField22.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long27 = durationField22.getValueAsLong((long) 10);
        int int29 = durationField22.getValue((long) (byte) 10);
        boolean boolean30 = partial21.equals((java.lang.Object) durationField22);
        org.joda.time.ReadableInterval readableInterval31 = null;
        org.joda.time.ReadableInterval readableInterval32 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval31);
        org.joda.time.ReadableInterval readableInterval33 = null;
        boolean boolean34 = readableInterval32.contains(readableInterval33);
        org.joda.time.ReadableInterval readableInterval35 = null;
        boolean boolean36 = readableInterval32.isBefore(readableInterval35);
        org.joda.time.Interval interval37 = readableInterval32.toInterval();
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.PeriodType periodType39 = org.joda.time.DateTimeUtils.getPeriodType(periodType38);
        org.joda.time.PeriodType periodType40 = org.joda.time.DateTimeUtils.getPeriodType(periodType38);
        org.joda.time.Period period41 = readableInterval32.toPeriod(periodType40);
        org.joda.time.Partial partial42 = partial21.plus((org.joda.time.ReadablePeriod) period41);
        int[] intArray45 = gregorianChronology13.get((org.joda.time.ReadablePeriod) period41, 1701289178545L, (long) (short) 0);
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField47 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long50 = durationField47.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long52 = durationField47.getValueAsLong((long) 10);
        int int54 = durationField47.getValue((long) (byte) 10);
        boolean boolean55 = partial46.equals((java.lang.Object) durationField47);
        org.joda.time.Chronology chronology56 = partial46.getChronology();
        org.joda.time.Partial partial57 = new org.joda.time.Partial();
        boolean boolean58 = partial46.isBefore((org.joda.time.ReadablePartial) partial57);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray59 = partial46.getFieldTypes();
        boolean boolean61 = partial46.equals((java.lang.Object) 1702281558665L);
        java.lang.String str62 = partial46.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = partial46.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.Partial partial65 = partial46.plus(readablePeriod64);
        int[] intArray67 = gregorianChronology13.get((org.joda.time.ReadablePartial) partial46, 1701289179647L);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.era();
        int int69 = partial46.indexOf(dateTimeFieldType68);
        int[] intArray71 = gregorianChronology5.get((org.joda.time.ReadablePartial) partial46, 0L);
        org.joda.time.DateTimeZone dateTimeZone72 = gregorianChronology5.getZone();
        org.junit.Assert.assertNotNull(gregorianChronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(gregorianChronology13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(readableInterval32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-53, -10, -4, 0, -20, -19, -38, -545]");
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1L + "'", long50 == 1L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 10L + "'", long52 == 10L);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "[]" + "'", str62, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter63);
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[]");
        org.junit.Assert.assertNotNull(dateTimeZone72);
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1907");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.DurationField durationField6 = chronology3.centuries();
        org.joda.time.Chronology chronology7 = chronology3.withUTC();
        org.joda.time.DurationField durationField8 = chronology7.halfdays();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField12 = new org.joda.time.field.DividedDateTimeField(dateTimeField9, dateTimeFieldType10, 10);
        long long15 = dividedDateTimeField12.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval17 = null;
        org.joda.time.ReadableInterval readableInterval18 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval17);
        org.joda.time.Chronology chronology19 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval17);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfCentury();
        org.joda.time.DurationField durationField21 = chronology19.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField22 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType16, durationField21);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField23 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField12, dateTimeFieldType16);
        long long25 = remainderDateTimeField23.roundHalfFloor(3600000L);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval27 = null;
        org.joda.time.ReadableInterval readableInterval28 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval27);
        org.joda.time.Chronology chronology29 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval27);
        org.joda.time.DateTimeField dateTimeField30 = chronology29.yearOfCentury();
        org.joda.time.DurationField durationField31 = chronology29.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField32 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType26, durationField31);
        long long35 = unsupportedDateTimeField32.add((-31L), (long) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = unsupportedDateTimeField32.getType();
        org.joda.time.DurationFieldType durationFieldType37 = dateTimeFieldType36.getRangeDurationType();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField38 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField23, dateTimeFieldType36);
        org.joda.time.DurationField durationField39 = remainderDateTimeField23.iDurationField;
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField40 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField39);
        long long43 = unsupportedDateTimeField40.add((-476134764377L), 0L);
        java.lang.String str44 = unsupportedDateTimeField40.toString();
        long long47 = unsupportedDateTimeField40.getDifferenceAsLong(3395L, 1281108L);
        org.joda.time.chrono.ISOChronology iSOChronology48 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField49 = iSOChronology48.centuryOfEra();
        org.joda.time.DurationField durationField50 = iSOChronology48.months();
        org.joda.time.DateTimeField dateTimeField51 = iSOChronology48.year();
        java.lang.String str52 = iSOChronology48.toString();
        org.joda.time.Partial partial53 = new org.joda.time.Partial((org.joda.time.Chronology) iSOChronology48);
        // The following exception was thrown during execution in test generation
        try {
            int int54 = unsupportedDateTimeField40.getMinimumValue((org.joda.time.ReadablePartial) partial53);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfMonth field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-30610224000000L) + "'", long15 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(readableInterval18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(readableInterval28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 4L + "'", long35 == 4L);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField40);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-476134764377L) + "'", long43 == (-476134764377L));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "UnsupportedDateTimeField" + "'", str44, "UnsupportedDateTimeField");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(iSOChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ISOChronology[UTC]" + "'", str52, "ISOChronology[UTC]");
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0588");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        java.lang.String str13 = partial0.toString();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField15 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long18 = durationField15.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long20 = durationField15.getValueAsLong((long) 10);
        int int22 = durationField15.getValue((long) (byte) 10);
        boolean boolean23 = partial14.equals((java.lang.Object) durationField15);
        org.joda.time.Chronology chronology24 = partial14.getChronology();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial14.isBefore((org.joda.time.ReadablePartial) partial25);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = partial14.getFieldTypes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = partial14.getFormatter();
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField30 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long33 = durationField30.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long35 = durationField30.getValueAsLong((long) 10);
        int int37 = durationField30.getValue((long) (byte) 10);
        boolean boolean38 = partial29.equals((java.lang.Object) durationField30);
        org.joda.time.Chronology chronology39 = partial29.getChronology();
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        boolean boolean41 = partial29.isBefore((org.joda.time.ReadablePartial) partial40);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray42 = partial29.getFieldTypes();
        boolean boolean44 = partial29.equals((java.lang.Object) 1702281558665L);
        java.lang.String str45 = partial29.toString();
        org.joda.time.Chronology chronology46 = partial29.getChronology();
        int int47 = partial14.compareTo((org.joda.time.ReadablePartial) partial29);
        int int48 = partial0.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField50 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long53 = durationField50.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long55 = durationField50.getValueAsLong((long) 10);
        int int57 = durationField50.getValue((long) (byte) 10);
        boolean boolean58 = partial49.equals((java.lang.Object) durationField50);
        org.joda.time.Chronology chronology59 = partial49.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.IllegalFieldValueException illegalFieldValueException63 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType60, (java.lang.Number) 60035L, "");
        org.joda.time.DurationFieldType durationFieldType64 = dateTimeFieldType60.getDurationType();
        int int65 = partial49.indexOf(dateTimeFieldType60);
        org.joda.time.DurationFieldType durationFieldType66 = dateTimeFieldType60.getRangeDurationType();
        // The following exception was thrown during execution in test generation
        try {
            int int67 = partial0.get(dateTimeFieldType60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'hourOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10L + "'", long35 == 10L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[]" + "'", str45, "[]");
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1L + "'", long53 == 1L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 10L + "'", long55 == 10L);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(durationFieldType64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(durationFieldType66);
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1813");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        java.lang.String str13 = partial0.toString();
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField15 = iSOChronology14.minutes();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str17 = dateTimeZone16.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology18 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology14, dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone19 = zonedChronology18.getZone();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology18.monthOfYear();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField22 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long25 = durationField22.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long27 = durationField22.getValueAsLong((long) 10);
        int int29 = durationField22.getValue((long) (byte) 10);
        boolean boolean30 = partial21.equals((java.lang.Object) durationField22);
        org.joda.time.Chronology chronology31 = partial21.getChronology();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        boolean boolean33 = partial21.isBefore((org.joda.time.ReadablePartial) partial32);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray34 = partial21.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval35 = null;
        org.joda.time.ReadableInterval readableInterval36 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval35);
        long long37 = readableInterval36.getStartMillis();
        org.joda.time.ReadableInterval readableInterval38 = null;
        org.joda.time.ReadableInterval readableInterval39 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval38);
        org.joda.time.ReadableInterval readableInterval40 = null;
        boolean boolean41 = readableInterval39.contains(readableInterval40);
        org.joda.time.Duration duration42 = readableInterval39.toDuration();
        org.joda.time.DateTime dateTime43 = readableInterval39.getEnd();
        boolean boolean44 = readableInterval36.contains((org.joda.time.ReadableInstant) dateTime43);
        boolean boolean45 = partial21.isMatch((org.joda.time.ReadableInstant) dateTime43);
        int[] intArray47 = zonedChronology18.get((org.joda.time.ReadablePartial) partial21, 60035L);
        boolean boolean48 = partial0.isMatch((org.joda.time.ReadablePartial) partial21);
        int int49 = partial0.size();
        org.joda.time.ReadableInterval readableInterval50 = null;
        org.joda.time.ReadableInterval readableInterval51 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval50);
        org.joda.time.Chronology chronology52 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval50);
        org.joda.time.DateTimeField dateTimeField53 = chronology52.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField54 = chronology52.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField55 = chronology52.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField56 = chronology52.halfdayOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = dateTimeField56.getType();
        org.joda.time.Partial partial58 = partial0.without(dateTimeFieldType57);
        org.joda.time.Chronology chronology59 = partial0.getChronology();
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray34);
        org.junit.Assert.assertNotNull(readableInterval36);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-476134762239L) + "'", long37 == (-476134762239L));
        org.junit.Assert.assertNotNull(readableInterval39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(readableInterval51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(partial58);
        org.junit.Assert.assertNotNull(chronology59);
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2080");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = null;
        boolean boolean3 = readableInterval1.contains(readableInterval2);
        org.joda.time.ReadableInterval readableInterval4 = null;
        boolean boolean5 = readableInterval1.isBefore(readableInterval4);
        org.joda.time.DateTime dateTime6 = readableInterval1.getEnd();
        org.joda.time.ReadableInterval readableInterval7 = null;
        org.joda.time.ReadableInterval readableInterval8 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval7);
        org.joda.time.ReadableInterval readableInterval9 = null;
        boolean boolean10 = readableInterval8.contains(readableInterval9);
        org.joda.time.ReadableInterval readableInterval11 = null;
        boolean boolean12 = readableInterval8.isBefore(readableInterval11);
        org.joda.time.DateTime dateTime13 = readableInterval8.getEnd();
        boolean boolean14 = readableInterval1.isBefore((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadableInterval readableInterval15 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        long long16 = readableInterval15.getStartMillis();
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.ReadableInterval readableInterval18 = null;
        org.joda.time.ReadableInterval readableInterval19 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval18);
        org.joda.time.ReadableInterval readableInterval20 = null;
        boolean boolean21 = readableInterval19.contains(readableInterval20);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = readableInterval19.toPeriod(periodType22);
        org.joda.time.DateTime dateTime24 = readableInterval19.getEnd();
        org.joda.time.MutableInterval mutableInterval25 = readableInterval19.toMutableInterval();
        org.joda.time.Period period26 = readableInterval19.toPeriod();
        long long27 = readableInterval19.getEndMillis();
        org.joda.time.ReadableInterval readableInterval28 = null;
        org.joda.time.ReadableInterval readableInterval29 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval28);
        org.joda.time.ReadableInterval readableInterval30 = null;
        boolean boolean31 = readableInterval29.contains(readableInterval30);
        org.joda.time.Duration duration32 = readableInterval29.toDuration();
        java.lang.String str33 = readableInterval29.toString();
        boolean boolean34 = readableInterval19.isAfter(readableInterval29);
        boolean boolean35 = readableInterval15.contains(readableInterval19);
        org.joda.time.ReadableInterval readableInterval36 = null;
        org.joda.time.ReadableInterval readableInterval37 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval36);
        long long38 = readableInterval37.getEndMillis();
        org.joda.time.ReadableInterval readableInterval39 = null;
        org.joda.time.ReadableInterval readableInterval40 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval39);
        long long41 = readableInterval40.getStartMillis();
        org.joda.time.ReadableInterval readableInterval42 = null;
        org.joda.time.ReadableInterval readableInterval43 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval42);
        org.joda.time.ReadableInterval readableInterval44 = null;
        boolean boolean45 = readableInterval43.contains(readableInterval44);
        org.joda.time.Duration duration46 = readableInterval43.toDuration();
        org.joda.time.DateTime dateTime47 = readableInterval43.getEnd();
        boolean boolean48 = readableInterval40.contains((org.joda.time.ReadableInstant) dateTime47);
        long long49 = org.joda.time.DateTimeUtils.getInstantMillis((org.joda.time.ReadableInstant) dateTime47);
        boolean boolean50 = readableInterval37.isAfter((org.joda.time.ReadableInstant) dateTime47);
        boolean boolean51 = readableInterval19.isAfter((org.joda.time.ReadableInstant) dateTime47);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(readableInterval8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(readableInterval15);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1703967979079L + "'", long16 == 1703967979079L);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(readableInterval19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(mutableInterval25);
        org.junit.Assert.assertNotNull(period26);
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1703967979079L + "'", long27 == 1703967979079L);
        org.junit.Assert.assertNotNull(readableInterval29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(duration32);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2023-12-30T20:26:19.087+00:00:00.007/2023-12-30T20:26:19.087+00:00:00.007" + "'", str33, "2023-12-30T20:26:19.087+00:00:00.007/2023-12-30T20:26:19.087+00:00:00.007");
// flaky:         org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(readableInterval37);
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1703967979080L + "'", long38 == 1703967979080L);
        org.junit.Assert.assertNotNull(readableInterval40);
// flaky:         org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1703967979080L + "'", long41 == 1703967979080L);
        org.junit.Assert.assertNotNull(readableInterval43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1703967979080L + "'", long49 == 1703967979080L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1332");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        org.joda.time.DurationField durationField7 = unsupportedDateTimeField6.getDurationField();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField9 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long12 = durationField9.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long14 = durationField9.getValueAsLong((long) 10);
        int int16 = durationField9.getValue((long) (byte) 10);
        boolean boolean17 = partial8.equals((java.lang.Object) durationField9);
        org.joda.time.Chronology chronology18 = partial8.getChronology();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        boolean boolean20 = partial8.isBefore((org.joda.time.ReadablePartial) partial19);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray21 = partial8.getFieldTypes();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField23 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long26 = durationField23.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long28 = durationField23.getValueAsLong((long) 10);
        int int30 = durationField23.getValue((long) (byte) 10);
        boolean boolean31 = partial22.equals((java.lang.Object) durationField23);
        boolean boolean32 = partial8.equals((java.lang.Object) durationField23);
        org.joda.time.ReadableInterval readableInterval33 = null;
        org.joda.time.ReadableInterval readableInterval34 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval33);
        org.joda.time.ReadableInterval readableInterval35 = null;
        boolean boolean36 = readableInterval34.contains(readableInterval35);
        org.joda.time.Duration duration37 = readableInterval34.toDuration();
        org.joda.time.ReadableInterval readableInterval38 = null;
        org.joda.time.ReadableInterval readableInterval39 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval38);
        org.joda.time.ReadableInterval readableInterval40 = null;
        boolean boolean41 = readableInterval39.contains(readableInterval40);
        org.joda.time.Duration duration42 = readableInterval39.toDuration();
        org.joda.time.DateTime dateTime43 = readableInterval39.getEnd();
        boolean boolean44 = readableInterval34.isBefore((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTime dateTime45 = partial8.toDateTime((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField47 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long50 = durationField47.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long52 = durationField47.getValueAsLong((long) 10);
        int int54 = durationField47.getValue((long) (byte) 10);
        boolean boolean55 = partial46.equals((java.lang.Object) durationField47);
        org.joda.time.Chronology chronology56 = partial46.getChronology();
        org.joda.time.Partial partial57 = new org.joda.time.Partial();
        boolean boolean58 = partial46.isBefore((org.joda.time.ReadablePartial) partial57);
        boolean boolean59 = partial8.isBefore((org.joda.time.ReadablePartial) partial57);
        java.util.Locale locale60 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str61 = unsupportedDateTimeField6.getAsShortText((org.joda.time.ReadablePartial) partial57, locale60);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray21);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10L + "'", long28 == 10L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(readableInterval34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(readableInterval39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1L + "'", long50 == 1L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 10L + "'", long52 == 10L);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2397");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.ReadablePartial readablePartial4 = null;
        int int5 = dateTimeField3.getMinimumValue(readablePartial4);
        org.joda.time.ReadablePartial readablePartial6 = null;
        org.joda.time.ReadableInterval readableInterval7 = null;
        org.joda.time.ReadableInterval readableInterval8 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval7);
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval7);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.yearOfCentury();
        org.joda.time.DurationField durationField11 = chronology9.millis();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.clockhourOfDay();
        org.joda.time.ReadablePartial readablePartial14 = null;
        int[] intArray21 = new int[] { '#', (-1), 0, (byte) 1, (short) 1, (byte) 1 };
        int int22 = dateTimeField13.getMaximumValue(readablePartial14, intArray21);
        int int23 = dateTimeField3.getMinimumValue(readablePartial6, intArray21);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField26 = new org.joda.time.field.RemainderDateTimeField(dateTimeField3, dateTimeFieldType24, 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval28 = null;
        org.joda.time.ReadableInterval readableInterval29 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval28);
        org.joda.time.Chronology chronology30 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval28);
        org.joda.time.DateTimeField dateTimeField31 = chronology30.yearOfCentury();
        org.joda.time.DurationField durationField32 = chronology30.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField33 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType27, durationField32);
        long long36 = durationField32.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval38 = null;
        org.joda.time.ReadableInterval readableInterval39 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval38);
        org.joda.time.Chronology chronology40 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval38);
        org.joda.time.DateTimeField dateTimeField41 = chronology40.yearOfCentury();
        boolean boolean42 = durationFieldType37.isSupported(chronology40);
        org.joda.time.field.ScaledDurationField scaledDurationField44 = new org.joda.time.field.ScaledDurationField(durationField32, durationFieldType37, (int) 'a');
        long long45 = scaledDurationField44.getUnitMillis();
        org.joda.time.DurationFieldType durationFieldType46 = scaledDurationField44.getType();
        int int48 = scaledDurationField44.getValue((long) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType50 = dateTimeFieldType49.getDurationType();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField52 = new org.joda.time.field.RemainderDateTimeField((org.joda.time.DateTimeField) remainderDateTimeField26, (org.joda.time.DurationField) scaledDurationField44, dateTimeFieldType49, 53460006);
        java.lang.String str54 = remainderDateTimeField52.getAsShortText((long) (short) -1);
        long long56 = remainderDateTimeField52.roundHalfCeiling(1701289164695L);
        boolean boolean58 = remainderDateTimeField52.isLeap(2908670719L);
        java.util.Locale locale60 = null;
        java.lang.String str61 = remainderDateTimeField52.getAsText((-494L), locale60);
        // The following exception was thrown during execution in test generation
        try {
            long long64 = remainderDateTimeField52.addWrapField(2177452800000L, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 109 for hourOfHalfday must be in the range [0,9]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(readableInterval8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[35, -1, 0, 1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 24 + "'", int22 == 24);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(readableInterval29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-210866846400000L) + "'", long36 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertNotNull(readableInterval39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 97L + "'", long45 == 97L);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "9" + "'", str54, "9");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1704067200000L + "'", long56 == 1704067200000L);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "9" + "'", str61, "9");
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0593");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add((-31L), (long) '#');
        org.joda.time.DurationField durationField10 = unsupportedDateTimeField6.getLeapDurationField();
        int int13 = unsupportedDateTimeField6.getDifference((long) (byte) 10, 10L);
        long long16 = unsupportedDateTimeField6.add((long) 1439, (int) (byte) -1);
        java.lang.String str17 = unsupportedDateTimeField6.getName();
        org.joda.time.chrono.ISOChronology iSOChronology18 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField19 = iSOChronology18.minutes();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology18.millisOfDay();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology18.halfdayOfDay();
        org.joda.time.DurationField durationField22 = iSOChronology18.seconds();
        org.joda.time.DurationField durationField23 = iSOChronology18.days();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology18.yearOfCentury();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField26 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long29 = durationField26.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long31 = durationField26.getValueAsLong((long) 10);
        int int33 = durationField26.getValue((long) (byte) 10);
        boolean boolean34 = partial25.equals((java.lang.Object) durationField26);
        org.joda.time.Chronology chronology35 = partial25.getChronology();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        boolean boolean37 = partial25.isBefore((org.joda.time.ReadablePartial) partial36);
        java.lang.String str38 = partial25.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType40 = dateTimeFieldType39.getDurationType();
        org.joda.time.Partial partial41 = partial25.without(dateTimeFieldType39);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone46 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology47 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone46);
        org.joda.time.ReadableInterval readableInterval48 = null;
        org.joda.time.ReadableInterval readableInterval49 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval48);
        org.joda.time.Chronology chronology50 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval48);
        org.joda.time.DateTimeField dateTimeField51 = chronology50.yearOfCentury();
        org.joda.time.DurationField durationField52 = chronology50.minutes();
        org.joda.time.DurationField durationField53 = chronology50.halfdays();
        org.joda.time.DurationField durationField54 = chronology50.weeks();
        org.joda.time.DateTimeField dateTimeField55 = chronology50.millisOfDay();
        boolean boolean56 = gregorianChronology47.equals((java.lang.Object) chronology50);
        boolean boolean57 = partial25.equals((java.lang.Object) boolean56);
        java.util.Locale locale59 = null;
        java.lang.String str60 = dateTimeField24.getAsShortText((org.joda.time.ReadablePartial) partial25, (int) ' ', locale59);
        java.util.Locale locale62 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str63 = unsupportedDateTimeField6.getAsText((org.joda.time.ReadablePartial) partial25, (-1492), locale62);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1438L + "'", long16 == 1438L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "dayOfYear" + "'", str17, "dayOfYear");
        org.junit.Assert.assertNotNull(iSOChronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 10L + "'", long31 == 10L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[]" + "'", str38, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertNotNull(gregorianChronology47);
        org.junit.Assert.assertNotNull(readableInterval49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "32" + "'", str60, "32");
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2820");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone2.getShortName(1L, locale6);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone8 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime9 = null;
        boolean boolean10 = cachedDateTimeZone8.isLocalDateTimeGap(localDateTime9);
        int int12 = cachedDateTimeZone8.getOffset(255193371L);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType14 = dateTimeFieldType13.getDurationType();
        org.joda.time.field.PreciseDurationField preciseDurationField16 = new org.joda.time.field.PreciseDurationField(durationFieldType14, 0L);
        boolean boolean17 = cachedDateTimeZone8.equals((java.lang.Object) 0L);
        boolean boolean19 = cachedDateTimeZone8.equals((java.lang.Object) 18110895568550L);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone20 = org.joda.time.tz.CachedDateTimeZone.forZone((org.joda.time.DateTimeZone) cachedDateTimeZone8);
        long long22 = cachedDateTimeZone20.nextTransition((-59028998263764L));
        int int24 = cachedDateTimeZone20.getOffset(0L);
        java.lang.String str26 = cachedDateTimeZone20.getShortName(1225154537837L);
        org.joda.time.chrono.ISOChronology iSOChronology27 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField28 = iSOChronology27.minutes();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology27.millisOfDay();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology27.halfdayOfDay();
        org.joda.time.DurationField durationField31 = iSOChronology27.seconds();
        org.joda.time.DurationField durationField32 = iSOChronology27.days();
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology27.dayOfYear();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology27.hourOfHalfday();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField36 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long39 = durationField36.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long41 = durationField36.getValueAsLong((long) 10);
        int int43 = durationField36.getValue((long) (byte) 10);
        boolean boolean44 = partial35.equals((java.lang.Object) durationField36);
        org.joda.time.ReadableInterval readableInterval45 = null;
        org.joda.time.ReadableInterval readableInterval46 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval45);
        org.joda.time.ReadableInterval readableInterval47 = null;
        boolean boolean48 = readableInterval46.contains(readableInterval47);
        org.joda.time.ReadableInterval readableInterval49 = null;
        boolean boolean50 = readableInterval46.isBefore(readableInterval49);
        org.joda.time.Interval interval51 = readableInterval46.toInterval();
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.PeriodType periodType53 = org.joda.time.DateTimeUtils.getPeriodType(periodType52);
        org.joda.time.PeriodType periodType54 = org.joda.time.DateTimeUtils.getPeriodType(periodType52);
        org.joda.time.Period period55 = readableInterval46.toPeriod(periodType54);
        org.joda.time.Partial partial56 = partial35.plus((org.joda.time.ReadablePeriod) period55);
        java.lang.String str57 = partial56.toStringList();
        int[] intArray59 = iSOChronology27.get((org.joda.time.ReadablePartial) partial56, (long) (-7));
        boolean boolean60 = cachedDateTimeZone20.equals((java.lang.Object) partial56);
        java.lang.String str61 = partial56.toString();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertNotNull(cachedDateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(cachedDateTimeZone20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-59028998263764L) + "'", long22 == (-59028998263764L));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertNotNull(iSOChronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 10L + "'", long41 == 10L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(readableInterval46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[]" + "'", str61, "[]");
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3156");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DurationField durationField2 = iSOChronology0.months();
        org.joda.time.DurationField durationField3 = iSOChronology0.years();
        org.joda.time.DateTimeZone dateTimeZone4 = iSOChronology0.getZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str6 = dateTimeZone5.toString();
        java.lang.String str8 = dateTimeZone5.getShortName((-210866846400000L));
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeUtils.getZone(dateTimeZone5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = iSOChronology0.withZone((org.joda.time.DateTimeZone) cachedDateTimeZone10);
        org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField13 = iSOChronology12.minutes();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str15 = dateTimeZone14.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology16 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology12, dateTimeZone14);
        java.util.Locale locale18 = null;
        java.lang.String str19 = dateTimeZone14.getShortName(1L, locale18);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone20 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime21 = null;
        boolean boolean22 = cachedDateTimeZone20.isLocalDateTimeGap(localDateTime21);
        org.joda.time.ReadableInterval readableInterval23 = null;
        org.joda.time.ReadableInterval readableInterval24 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval23);
        org.joda.time.Chronology chronology25 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval23);
        org.joda.time.DateTimeField dateTimeField26 = chronology25.yearOfCentury();
        org.joda.time.ReadablePartial readablePartial27 = null;
        int int28 = dateTimeField26.getMinimumValue(readablePartial27);
        org.joda.time.ReadablePartial readablePartial29 = null;
        org.joda.time.ReadableInterval readableInterval30 = null;
        org.joda.time.ReadableInterval readableInterval31 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval30);
        org.joda.time.Chronology chronology32 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval30);
        org.joda.time.DateTimeField dateTimeField33 = chronology32.yearOfCentury();
        org.joda.time.DurationField durationField34 = chronology32.millis();
        org.joda.time.DateTimeField dateTimeField35 = chronology32.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField36 = chronology32.clockhourOfDay();
        org.joda.time.ReadablePartial readablePartial37 = null;
        int[] intArray44 = new int[] { '#', (-1), 0, (byte) 1, (short) 1, (byte) 1 };
        int int45 = dateTimeField36.getMaximumValue(readablePartial37, intArray44);
        int int46 = dateTimeField26.getMinimumValue(readablePartial29, intArray44);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField49 = new org.joda.time.field.RemainderDateTimeField(dateTimeField26, dateTimeFieldType47, 10);
        org.joda.time.DurationField durationField50 = remainderDateTimeField49.getRangeDurationField();
        long long53 = remainderDateTimeField49.addWrapField(1701289169458L, 1969);
        long long56 = remainderDateTimeField49.addWrapField(1438L, (int) '4');
        boolean boolean57 = cachedDateTimeZone20.equals((java.lang.Object) remainderDateTimeField49);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        long long60 = cachedDateTimeZone20.getMillisKeepLocal(dateTimeZone58, (-31536000007L));
        org.joda.time.Chronology chronology61 = iSOChronology0.withZone((org.joda.time.DateTimeZone) cachedDateTimeZone20);
        org.joda.time.ReadableInstant readableInstant62 = null;
        int int63 = cachedDateTimeZone20.getOffset(readableInstant62);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(iSOChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertNotNull(cachedDateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(readableInterval24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(readableInterval31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[35, -1, 0, 1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 24 + "'", int45 == 24);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1669753169458L + "'", long53 == 1669753169458L);
// flaky:         org.junit.Assert.assertTrue("'" + long56 + "' != '" + 63072001438L + "'", long56 == 63072001438L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-31536000007L) + "'", long60 == (-31536000007L));
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1070");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology5 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone6 = gregorianChronology5.getZone();
        long long10 = gregorianChronology5.add(0L, (long) (byte) 1, (int) (byte) 0);
        org.joda.time.DateTimeField dateTimeField11 = gregorianChronology5.millisOfDay();
        org.joda.time.DurationField durationField12 = gregorianChronology5.weeks();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField14 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long17 = durationField14.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long19 = durationField14.getValueAsLong((long) 10);
        int int21 = durationField14.getValue((long) (byte) 10);
        boolean boolean22 = partial13.equals((java.lang.Object) durationField14);
        org.joda.time.ReadableInterval readableInterval23 = null;
        org.joda.time.ReadableInterval readableInterval24 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval23);
        org.joda.time.ReadableInterval readableInterval25 = null;
        boolean boolean26 = readableInterval24.contains(readableInterval25);
        org.joda.time.ReadableInterval readableInterval27 = null;
        boolean boolean28 = readableInterval24.isBefore(readableInterval27);
        org.joda.time.Interval interval29 = readableInterval24.toInterval();
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.PeriodType periodType31 = org.joda.time.DateTimeUtils.getPeriodType(periodType30);
        org.joda.time.PeriodType periodType32 = org.joda.time.DateTimeUtils.getPeriodType(periodType30);
        org.joda.time.Period period33 = readableInterval24.toPeriod(periodType32);
        org.joda.time.Partial partial34 = partial13.plus((org.joda.time.ReadablePeriod) period33);
        int[] intArray37 = gregorianChronology5.get((org.joda.time.ReadablePeriod) period33, 1701289178545L, (long) (short) 0);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField39 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long42 = durationField39.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long44 = durationField39.getValueAsLong((long) 10);
        int int46 = durationField39.getValue((long) (byte) 10);
        boolean boolean47 = partial38.equals((java.lang.Object) durationField39);
        org.joda.time.Chronology chronology48 = partial38.getChronology();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial38.isBefore((org.joda.time.ReadablePartial) partial49);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray51 = partial38.getFieldTypes();
        boolean boolean53 = partial38.equals((java.lang.Object) 1702281558665L);
        java.lang.String str54 = partial38.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = partial38.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.Partial partial57 = partial38.plus(readablePeriod56);
        int[] intArray59 = gregorianChronology5.get((org.joda.time.ReadablePartial) partial38, 1701289179647L);
        org.joda.time.DateTimeField dateTimeField60 = gregorianChronology5.centuryOfEra();
        org.joda.time.Chronology chronology61 = gregorianChronology5.withUTC();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone66 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        int int68 = fixedDateTimeZone66.getStandardOffset((long) 1439);
        boolean boolean69 = fixedDateTimeZone66.isFixed();
        long long71 = fixedDateTimeZone66.nextTransition((long) 24);
        org.joda.time.Chronology chronology72 = chronology61.withZone((org.joda.time.DateTimeZone) fixedDateTimeZone66);
        java.lang.String str74 = fixedDateTimeZone66.getNameKey((-476134743462L));
        org.junit.Assert.assertNotNull(gregorianChronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(readableInterval24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-53, -10, -4, 0, -20, -19, -38, -545]");
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 10L + "'", long44 == 10L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[]" + "'", str54, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter55);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 24L + "'", long71 == 24L);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "ISOChronology[America/Los_Angeles]" + "'", str74, "ISOChronology[America/Los_Angeles]");
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0251");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add((-31L), (long) '#');
        org.joda.time.DurationField durationField10 = unsupportedDateTimeField6.getLeapDurationField();
        int int13 = unsupportedDateTimeField6.getDifference((long) (byte) 10, 10L);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField15 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long18 = durationField15.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long20 = durationField15.getValueAsLong((long) 10);
        int int22 = durationField15.getValue((long) (byte) 10);
        boolean boolean23 = partial14.equals((java.lang.Object) durationField15);
        org.joda.time.Chronology chronology24 = partial14.getChronology();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial14.isBefore((org.joda.time.ReadablePartial) partial25);
        java.lang.String str27 = partial14.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType29 = dateTimeFieldType28.getDurationType();
        org.joda.time.Partial partial30 = partial14.without(dateTimeFieldType28);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone36 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology37 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone38 = gregorianChronology37.getZone();
        long long43 = gregorianChronology37.getDateTimeMillis((int) '4', 8, 24, 24);
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField45 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long48 = durationField45.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long50 = durationField45.getValueAsLong((long) 10);
        int int52 = durationField45.getValue((long) (byte) 10);
        boolean boolean53 = partial44.equals((java.lang.Object) durationField45);
        org.joda.time.Chronology chronology54 = partial44.getChronology();
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        boolean boolean56 = partial44.isBefore((org.joda.time.ReadablePartial) partial55);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray57 = partial44.getFieldTypes();
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField59 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long62 = durationField59.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long64 = durationField59.getValueAsLong((long) 10);
        int int66 = durationField59.getValue((long) (byte) 10);
        boolean boolean67 = partial58.equals((java.lang.Object) durationField59);
        boolean boolean68 = partial44.equals((java.lang.Object) durationField59);
        int[] intArray70 = gregorianChronology37.get((org.joda.time.ReadablePartial) partial44, 0L);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray72 = unsupportedDateTimeField6.set((org.joda.time.ReadablePartial) partial14, 199, intArray70, 53);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[]" + "'", str27, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNotNull(gregorianChronology37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-60505833599976L) + "'", long43 == (-60505833599976L));
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1L + "'", long48 == 1L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 10L + "'", long50 == 10L);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray57);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1L + "'", long62 == 1L);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 10L + "'", long64 == 10L);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10 + "'", int66 == 10);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[]");
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2987");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology5 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone6 = gregorianChronology5.getZone();
        org.joda.time.DateTimeZone dateTimeZone7 = gregorianChronology5.getZone();
        org.joda.time.DateTimeField dateTimeField8 = gregorianChronology5.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology5.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField10 = gregorianChronology5.secondOfMinute();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField12 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long15 = durationField12.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long17 = durationField12.getValueAsLong((long) 10);
        int int19 = durationField12.getValue((long) (byte) 10);
        boolean boolean20 = partial11.equals((java.lang.Object) durationField12);
        org.joda.time.Chronology chronology21 = partial11.getChronology();
        java.lang.String str22 = partial11.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = partial11.getFieldTypes();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField25 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long28 = durationField25.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long30 = durationField25.getValueAsLong((long) 10);
        int int32 = durationField25.getValue((long) (byte) 10);
        boolean boolean33 = partial24.equals((java.lang.Object) durationField25);
        org.joda.time.Chronology chronology34 = partial24.getChronology();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        boolean boolean36 = partial24.isBefore((org.joda.time.ReadablePartial) partial35);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = partial24.getFieldTypes();
        boolean boolean39 = partial24.equals((java.lang.Object) 1702281558665L);
        java.lang.String str40 = partial24.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = partial24.getFormatter();
        boolean boolean42 = partial11.isEqual((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField44 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long47 = durationField44.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long49 = durationField44.getValueAsLong((long) 10);
        int int51 = durationField44.getValue((long) (byte) 10);
        boolean boolean52 = partial43.equals((java.lang.Object) durationField44);
        org.joda.time.Chronology chronology53 = partial43.getChronology();
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        boolean boolean55 = partial43.isBefore((org.joda.time.ReadablePartial) partial54);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray56 = partial43.getFieldTypes();
        org.joda.time.Partial partial57 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField58 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long61 = durationField58.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long63 = durationField58.getValueAsLong((long) 10);
        int int65 = durationField58.getValue((long) (byte) 10);
        boolean boolean66 = partial57.equals((java.lang.Object) durationField58);
        boolean boolean67 = partial43.equals((java.lang.Object) durationField58);
        int[] intArray68 = partial43.getValues();
        gregorianChronology5.validate((org.joda.time.ReadablePartial) partial24, intArray68);
        org.junit.Assert.assertNotNull(gregorianChronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10L + "'", long30 == 10L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 10L + "'", long49 == 10L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray56);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1L + "'", long61 == 1L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 10L + "'", long63 == 10L);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10 + "'", int65 == 10);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0258");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.halfdayOfDay();
        org.joda.time.DurationField durationField4 = iSOChronology0.seconds();
        org.joda.time.Chronology chronology5 = iSOChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.weekOfWeekyear();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField8 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long11 = durationField8.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long13 = durationField8.getValueAsLong((long) 10);
        int int15 = durationField8.getValue((long) (byte) 10);
        boolean boolean16 = partial7.equals((java.lang.Object) durationField8);
        org.joda.time.Chronology chronology17 = partial7.getChronology();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial7.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial7.getFieldTypes();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField22 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long25 = durationField22.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long27 = durationField22.getValueAsLong((long) 10);
        int int29 = durationField22.getValue((long) (byte) 10);
        boolean boolean30 = partial21.equals((java.lang.Object) durationField22);
        boolean boolean31 = partial7.equals((java.lang.Object) durationField22);
        org.joda.time.ReadableInterval readableInterval32 = null;
        org.joda.time.ReadableInterval readableInterval33 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval32);
        org.joda.time.ReadableInterval readableInterval34 = null;
        boolean boolean35 = readableInterval33.contains(readableInterval34);
        org.joda.time.Duration duration36 = readableInterval33.toDuration();
        org.joda.time.ReadableInterval readableInterval37 = null;
        org.joda.time.ReadableInterval readableInterval38 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval37);
        org.joda.time.ReadableInterval readableInterval39 = null;
        boolean boolean40 = readableInterval38.contains(readableInterval39);
        org.joda.time.Duration duration41 = readableInterval38.toDuration();
        org.joda.time.DateTime dateTime42 = readableInterval38.getEnd();
        boolean boolean43 = readableInterval33.isBefore((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime44 = partial7.toDateTime((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField46 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long49 = durationField46.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long51 = durationField46.getValueAsLong((long) 10);
        int int53 = durationField46.getValue((long) (byte) 10);
        boolean boolean54 = partial45.equals((java.lang.Object) durationField46);
        org.joda.time.Chronology chronology55 = partial45.getChronology();
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        boolean boolean57 = partial45.isBefore((org.joda.time.ReadablePartial) partial56);
        boolean boolean58 = partial7.isBefore((org.joda.time.ReadablePartial) partial56);
        int[] intArray60 = iSOChronology0.get((org.joda.time.ReadablePartial) partial56, 31507200003L);
        java.util.Locale locale62 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str63 = partial56.toString("hi!", locale62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(readableInterval33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(readableInterval38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10L + "'", long51 == 10L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3038");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = zonedChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField6 = zonedChronology4.monthOfYear();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField8 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long11 = durationField8.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long13 = durationField8.getValueAsLong((long) 10);
        int int15 = durationField8.getValue((long) (byte) 10);
        boolean boolean16 = partial7.equals((java.lang.Object) durationField8);
        org.joda.time.Chronology chronology17 = partial7.getChronology();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial7.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial7.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.ReadableInterval readableInterval22 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval21);
        long long23 = readableInterval22.getStartMillis();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.ReadableInterval readableInterval26 = null;
        boolean boolean27 = readableInterval25.contains(readableInterval26);
        org.joda.time.Duration duration28 = readableInterval25.toDuration();
        org.joda.time.DateTime dateTime29 = readableInterval25.getEnd();
        boolean boolean30 = readableInterval22.contains((org.joda.time.ReadableInstant) dateTime29);
        boolean boolean31 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime29);
        int[] intArray33 = zonedChronology4.get((org.joda.time.ReadablePartial) partial7, 60035L);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField35 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long38 = durationField35.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long40 = durationField35.getValueAsLong((long) 10);
        int int42 = durationField35.getValue((long) (byte) 10);
        boolean boolean43 = partial34.equals((java.lang.Object) durationField35);
        org.joda.time.ReadableInterval readableInterval44 = null;
        org.joda.time.ReadableInterval readableInterval45 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval44);
        org.joda.time.ReadableInterval readableInterval46 = null;
        boolean boolean47 = readableInterval45.contains(readableInterval46);
        org.joda.time.ReadableInterval readableInterval48 = null;
        boolean boolean49 = readableInterval45.isBefore(readableInterval48);
        org.joda.time.Interval interval50 = readableInterval45.toInterval();
        org.joda.time.PeriodType periodType51 = null;
        org.joda.time.PeriodType periodType52 = org.joda.time.DateTimeUtils.getPeriodType(periodType51);
        org.joda.time.PeriodType periodType53 = org.joda.time.DateTimeUtils.getPeriodType(periodType51);
        org.joda.time.Period period54 = readableInterval45.toPeriod(periodType53);
        org.joda.time.Partial partial55 = partial34.plus((org.joda.time.ReadablePeriod) period54);
        boolean boolean56 = org.joda.time.DateTimeUtils.isContiguous((org.joda.time.ReadablePartial) partial34);
        int[] intArray57 = partial34.getValues();
        int int58 = partial7.compareTo((org.joda.time.ReadablePartial) partial34);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.Partial partial60 = partial7.minus(readablePeriod59);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(readableInterval22);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-296907L) + "'", long23 == (-296907L));
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10L + "'", long40 == 10L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(readableInterval45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(partial55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(partial60);
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1984");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.joda.time.field.PreciseDurationField preciseDurationField3 = new org.joda.time.field.PreciseDurationField(durationFieldType1, 28354819L);
        long long6 = preciseDurationField3.getMillis((int) '#', 551169L);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone11 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology12 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone13 = gregorianChronology12.getZone();
        long long17 = gregorianChronology12.add(0L, (long) (byte) 1, (int) (byte) 0);
        org.joda.time.DateTimeField dateTimeField18 = gregorianChronology12.millisOfDay();
        org.joda.time.DurationField durationField19 = gregorianChronology12.weeks();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField21 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long24 = durationField21.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long26 = durationField21.getValueAsLong((long) 10);
        int int28 = durationField21.getValue((long) (byte) 10);
        boolean boolean29 = partial20.equals((java.lang.Object) durationField21);
        org.joda.time.ReadableInterval readableInterval30 = null;
        org.joda.time.ReadableInterval readableInterval31 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval30);
        org.joda.time.ReadableInterval readableInterval32 = null;
        boolean boolean33 = readableInterval31.contains(readableInterval32);
        org.joda.time.ReadableInterval readableInterval34 = null;
        boolean boolean35 = readableInterval31.isBefore(readableInterval34);
        org.joda.time.Interval interval36 = readableInterval31.toInterval();
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.PeriodType periodType38 = org.joda.time.DateTimeUtils.getPeriodType(periodType37);
        org.joda.time.PeriodType periodType39 = org.joda.time.DateTimeUtils.getPeriodType(periodType37);
        org.joda.time.Period period40 = readableInterval31.toPeriod(periodType39);
        org.joda.time.Partial partial41 = partial20.plus((org.joda.time.ReadablePeriod) period40);
        int[] intArray44 = gregorianChronology12.get((org.joda.time.ReadablePeriod) period40, 1701289178545L, (long) (short) 0);
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField46 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long49 = durationField46.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long51 = durationField46.getValueAsLong((long) 10);
        int int53 = durationField46.getValue((long) (byte) 10);
        boolean boolean54 = partial45.equals((java.lang.Object) durationField46);
        org.joda.time.Chronology chronology55 = partial45.getChronology();
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        boolean boolean57 = partial45.isBefore((org.joda.time.ReadablePartial) partial56);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray58 = partial45.getFieldTypes();
        boolean boolean60 = partial45.equals((java.lang.Object) 1702281558665L);
        java.lang.String str61 = partial45.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = partial45.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.Partial partial64 = partial45.plus(readablePeriod63);
        int[] intArray66 = gregorianChronology12.get((org.joda.time.ReadablePartial) partial45, 1701289179647L);
        org.joda.time.DateTimeField dateTimeField67 = gregorianChronology12.centuryOfEra();
        org.joda.time.Chronology chronology68 = gregorianChronology12.withUTC();
        org.joda.time.DurationField durationField69 = gregorianChronology12.months();
        int int70 = preciseDurationField3.compareTo(durationField69);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 992418665L + "'", long6 == 992418665L);
        org.junit.Assert.assertNotNull(gregorianChronology12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10L + "'", long26 == 10L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(readableInterval31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-53, -10, -4, 0, -20, -19, -38, -545]");
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10L + "'", long51 == 10L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[]" + "'", str61, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter62);
        org.junit.Assert.assertNotNull(partial64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[]");
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1147");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.halfdayOfDay();
        org.joda.time.DurationField durationField4 = iSOChronology0.seconds();
        org.joda.time.Chronology chronology5 = iSOChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.weekOfWeekyear();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField8 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long11 = durationField8.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long13 = durationField8.getValueAsLong((long) 10);
        int int15 = durationField8.getValue((long) (byte) 10);
        boolean boolean16 = partial7.equals((java.lang.Object) durationField8);
        org.joda.time.Chronology chronology17 = partial7.getChronology();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial7.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial7.getFieldTypes();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField22 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long25 = durationField22.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long27 = durationField22.getValueAsLong((long) 10);
        int int29 = durationField22.getValue((long) (byte) 10);
        boolean boolean30 = partial21.equals((java.lang.Object) durationField22);
        boolean boolean31 = partial7.equals((java.lang.Object) durationField22);
        org.joda.time.ReadableInterval readableInterval32 = null;
        org.joda.time.ReadableInterval readableInterval33 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval32);
        org.joda.time.ReadableInterval readableInterval34 = null;
        boolean boolean35 = readableInterval33.contains(readableInterval34);
        org.joda.time.Duration duration36 = readableInterval33.toDuration();
        org.joda.time.ReadableInterval readableInterval37 = null;
        org.joda.time.ReadableInterval readableInterval38 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval37);
        org.joda.time.ReadableInterval readableInterval39 = null;
        boolean boolean40 = readableInterval38.contains(readableInterval39);
        org.joda.time.Duration duration41 = readableInterval38.toDuration();
        org.joda.time.DateTime dateTime42 = readableInterval38.getEnd();
        boolean boolean43 = readableInterval33.isBefore((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime44 = partial7.toDateTime((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField46 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long49 = durationField46.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long51 = durationField46.getValueAsLong((long) 10);
        int int53 = durationField46.getValue((long) (byte) 10);
        boolean boolean54 = partial45.equals((java.lang.Object) durationField46);
        org.joda.time.Chronology chronology55 = partial45.getChronology();
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        boolean boolean57 = partial45.isBefore((org.joda.time.ReadablePartial) partial56);
        boolean boolean58 = partial7.isBefore((org.joda.time.ReadablePartial) partial56);
        int[] intArray60 = iSOChronology0.get((org.joda.time.ReadablePartial) partial56, 31507200003L);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Partial partial62 = partial56.withChronologyRetainFields(chronology61);
        org.joda.time.ReadableInstant readableInstant63 = null;
        boolean boolean64 = partial62.isMatch(readableInstant63);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(readableInterval33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(readableInterval38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10L + "'", long51 == 10L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(partial62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0370");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.DurationField durationField6 = chronology3.centuries();
        org.joda.time.Chronology chronology7 = chronology3.withUTC();
        org.joda.time.DurationField durationField8 = chronology7.halfdays();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField12 = new org.joda.time.field.DividedDateTimeField(dateTimeField9, dateTimeFieldType10, 10);
        long long15 = dividedDateTimeField12.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval17 = null;
        org.joda.time.ReadableInterval readableInterval18 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval17);
        org.joda.time.Chronology chronology19 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval17);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfCentury();
        org.joda.time.DurationField durationField21 = chronology19.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField22 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType16, durationField21);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField23 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField12, dateTimeFieldType16);
        long long25 = remainderDateTimeField23.roundHalfFloor(3600000L);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval27 = null;
        org.joda.time.ReadableInterval readableInterval28 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval27);
        org.joda.time.Chronology chronology29 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval27);
        org.joda.time.DateTimeField dateTimeField30 = chronology29.yearOfCentury();
        org.joda.time.DurationField durationField31 = chronology29.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField32 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType26, durationField31);
        long long35 = unsupportedDateTimeField32.add((-31L), (long) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = unsupportedDateTimeField32.getType();
        org.joda.time.DurationFieldType durationFieldType37 = dateTimeFieldType36.getRangeDurationType();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField38 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField23, dateTimeFieldType36);
        org.joda.time.DurationField durationField39 = remainderDateTimeField23.iDurationField;
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField40 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField39);
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField42 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long45 = durationField42.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long47 = durationField42.getValueAsLong((long) 10);
        int int49 = durationField42.getValue((long) (byte) 10);
        boolean boolean50 = partial41.equals((java.lang.Object) durationField42);
        org.joda.time.Chronology chronology51 = partial41.getChronology();
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        boolean boolean53 = partial41.isBefore((org.joda.time.ReadablePartial) partial52);
        java.util.Locale locale55 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str56 = unsupportedDateTimeField40.getAsShortText((org.joda.time.ReadablePartial) partial52, 53, locale55);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfMonth field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-30610224000000L) + "'", long15 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(readableInterval18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(readableInterval28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 4L + "'", long35 == 4L);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField40);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 10L + "'", long47 == 10L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1707");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        org.joda.time.ReadablePartial readablePartial23 = null;
        java.util.Locale locale25 = null;
        java.lang.String str26 = dividedDateTimeField11.getAsShortText(readablePartial23, (int) ' ', locale25);
        org.joda.time.ReadablePartial readablePartial27 = null;
        java.util.Locale locale29 = null;
        java.lang.String str30 = dividedDateTimeField11.getAsText(readablePartial27, (int) (byte) 10, locale29);
        long long33 = dividedDateTimeField11.add(9L, 100L);
        long long36 = dividedDateTimeField11.add(1701289178545L, (long) (byte) 1);
        org.joda.time.ReadableInterval readableInterval37 = null;
        org.joda.time.ReadableInterval readableInterval38 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval37);
        org.joda.time.Chronology chronology39 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval37);
        org.joda.time.DateTimeField dateTimeField40 = chronology39.yearOfCentury();
        org.joda.time.DurationField durationField41 = chronology39.millis();
        org.joda.time.DurationField durationField42 = chronology39.centuries();
        org.joda.time.Chronology chronology43 = chronology39.withUTC();
        org.joda.time.DurationField durationField44 = chronology43.halfdays();
        org.joda.time.DateTimeField dateTimeField45 = chronology43.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField48 = new org.joda.time.field.DividedDateTimeField(dateTimeField45, dateTimeFieldType46, 10);
        long long51 = dividedDateTimeField48.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval53 = null;
        org.joda.time.ReadableInterval readableInterval54 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval53);
        org.joda.time.Chronology chronology55 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval53);
        org.joda.time.DateTimeField dateTimeField56 = chronology55.yearOfCentury();
        org.joda.time.DurationField durationField57 = chronology55.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField58 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType52, durationField57);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField59 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField48, dateTimeFieldType52);
        org.joda.time.Partial partial61 = new org.joda.time.Partial(dateTimeFieldType52, 73);
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField65 = new org.joda.time.field.OffsetDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField11, dateTimeFieldType52, 13, 0, (int) (byte) 10);
        java.lang.String str66 = dateTimeFieldType52.getName();
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "32" + "'", str26, "32");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "10" + "'", str30, "10");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 31556995200009L + "'", long33 == 31556995200009L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 2016908378545L + "'", long36 == 2016908378545L);
        org.junit.Assert.assertNotNull(readableInterval38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-30610224000000L) + "'", long51 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(readableInterval54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField58);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "dayOfYear" + "'", str66, "dayOfYear");
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3075");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval3);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DurationField durationField7 = chronology5.millis();
        org.joda.time.DurationField durationField8 = chronology5.centuries();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval9);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology11.millis();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.ReadableInterval readableInterval16 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval15);
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.ReadableInterval readableInterval21 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval20);
        org.joda.time.ReadableInterval readableInterval22 = null;
        boolean boolean23 = readableInterval21.contains(readableInterval22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = readableInterval21.toPeriod(periodType24);
        int[] intArray27 = chronology17.get((org.joda.time.ReadablePeriod) period25, (-210866846400000L));
        int[] intArray30 = chronology11.get((org.joda.time.ReadablePeriod) period25, 2173795348453L, (long) 1439);
        int[] intArray33 = chronology5.get((org.joda.time.ReadablePeriod) period25, 291L, 2580171L);
        int[] intArray36 = iSOChronology0.get((org.joda.time.ReadablePeriod) period25, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField37 = iSOChronology0.months();
        java.lang.String str38 = iSOChronology0.toString();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = iSOChronology0.equals((java.lang.Object) partial39);
        org.joda.time.Chronology chronology41 = org.joda.time.DateTimeUtils.getChronology((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone46 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        int int48 = fixedDateTimeZone46.getStandardOffset((long) 1439);
        boolean boolean49 = fixedDateTimeZone46.isFixed();
        long long51 = fixedDateTimeZone46.nextTransition((long) 24);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        long long55 = dateTimeZone52.adjustOffset((long) 100, true);
        long long57 = fixedDateTimeZone46.getMillisKeepLocal(dateTimeZone52, 10L);
        org.joda.time.Chronology chronology58 = iSOChronology0.withZone((org.joda.time.DateTimeZone) fixedDateTimeZone46);
        int int60 = fixedDateTimeZone46.getStandardOffset((long) (short) 10);
        long long62 = fixedDateTimeZone46.nextTransition((long) (short) 0);
        java.util.Locale locale64 = null;
        java.lang.String str65 = fixedDateTimeZone46.getName(0L, locale64);
        java.util.TimeZone timeZone66 = fixedDateTimeZone46.toTimeZone();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(readableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(readableInterval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(readableInterval21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(intArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(durationField37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[73]" + "'", str38, "ISOChronology[73]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 24L + "'", long51 == 24L);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 100L + "'", long55 == 100L);
// flaky:         org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1L + "'", long57 == 1L);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+00:00" + "'", str65, "+00:00");
        org.junit.Assert.assertNotNull(timeZone66);
        org.junit.Assert.assertEquals(timeZone66.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0616");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology5 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone6 = gregorianChronology5.getZone();
        long long10 = gregorianChronology5.add(0L, (long) (byte) 1, (int) (byte) 0);
        org.joda.time.DateTimeField dateTimeField11 = gregorianChronology5.millisOfDay();
        org.joda.time.DurationField durationField12 = gregorianChronology5.weeks();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField14 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long17 = durationField14.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long19 = durationField14.getValueAsLong((long) 10);
        int int21 = durationField14.getValue((long) (byte) 10);
        boolean boolean22 = partial13.equals((java.lang.Object) durationField14);
        org.joda.time.ReadableInterval readableInterval23 = null;
        org.joda.time.ReadableInterval readableInterval24 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval23);
        org.joda.time.ReadableInterval readableInterval25 = null;
        boolean boolean26 = readableInterval24.contains(readableInterval25);
        org.joda.time.ReadableInterval readableInterval27 = null;
        boolean boolean28 = readableInterval24.isBefore(readableInterval27);
        org.joda.time.Interval interval29 = readableInterval24.toInterval();
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.PeriodType periodType31 = org.joda.time.DateTimeUtils.getPeriodType(periodType30);
        org.joda.time.PeriodType periodType32 = org.joda.time.DateTimeUtils.getPeriodType(periodType30);
        org.joda.time.Period period33 = readableInterval24.toPeriod(periodType32);
        org.joda.time.Partial partial34 = partial13.plus((org.joda.time.ReadablePeriod) period33);
        int[] intArray37 = gregorianChronology5.get((org.joda.time.ReadablePeriod) period33, 1701289178545L, (long) (short) 0);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField39 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long42 = durationField39.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long44 = durationField39.getValueAsLong((long) 10);
        int int46 = durationField39.getValue((long) (byte) 10);
        boolean boolean47 = partial38.equals((java.lang.Object) durationField39);
        org.joda.time.Chronology chronology48 = partial38.getChronology();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial38.isBefore((org.joda.time.ReadablePartial) partial49);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray51 = partial38.getFieldTypes();
        boolean boolean53 = partial38.equals((java.lang.Object) 1702281558665L);
        java.lang.String str54 = partial38.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = partial38.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.Partial partial57 = partial38.plus(readablePeriod56);
        int[] intArray59 = gregorianChronology5.get((org.joda.time.ReadablePartial) partial38, 1701289179647L);
        org.joda.time.DateTimeField dateTimeField60 = gregorianChronology5.centuryOfEra();
        org.joda.time.Chronology chronology61 = gregorianChronology5.withUTC();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone66 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        int int68 = fixedDateTimeZone66.getStandardOffset((long) 1439);
        boolean boolean69 = fixedDateTimeZone66.isFixed();
        long long71 = fixedDateTimeZone66.nextTransition((long) 24);
        org.joda.time.Chronology chronology72 = chronology61.withZone((org.joda.time.DateTimeZone) fixedDateTimeZone66);
        long long74 = fixedDateTimeZone66.previousTransition(1672531200000L);
        org.junit.Assert.assertNotNull(gregorianChronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(readableInterval24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-53, -10, -4, 0, -20, -19, -38, -545]");
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 10L + "'", long44 == 10L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[]" + "'", str54, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter55);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 24L + "'", long71 == 24L);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 1672531200000L + "'", long74 == 1672531200000L);
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2723");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval3);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DurationField durationField7 = chronology5.millis();
        org.joda.time.DurationField durationField8 = chronology5.centuries();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval9);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology11.millis();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.ReadableInterval readableInterval16 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval15);
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.ReadableInterval readableInterval21 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval20);
        org.joda.time.ReadableInterval readableInterval22 = null;
        boolean boolean23 = readableInterval21.contains(readableInterval22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = readableInterval21.toPeriod(periodType24);
        int[] intArray27 = chronology17.get((org.joda.time.ReadablePeriod) period25, (-210866846400000L));
        int[] intArray30 = chronology11.get((org.joda.time.ReadablePeriod) period25, 2173795348453L, (long) 1439);
        int[] intArray33 = chronology5.get((org.joda.time.ReadablePeriod) period25, 291L, 2580171L);
        int[] intArray36 = iSOChronology0.get((org.joda.time.ReadablePeriod) period25, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField37 = iSOChronology0.months();
        java.lang.String str38 = iSOChronology0.toString();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = iSOChronology0.equals((java.lang.Object) partial39);
        org.joda.time.DateTimeField dateTimeField41 = iSOChronology0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology0.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone43 = iSOChronology0.getZone();
        org.joda.time.DurationField durationField44 = iSOChronology0.weekyears();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str46 = dateTimeZone45.toString();
        java.lang.String str48 = dateTimeZone45.getShortName((-210866846400000L));
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeUtils.getZone(dateTimeZone45);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone50 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone49);
        java.lang.String str51 = cachedDateTimeZone50.toString();
        org.joda.time.DurationFieldType durationFieldType52 = org.joda.time.DurationFieldType.hours();
        java.lang.String str53 = durationFieldType52.toString();
        boolean boolean54 = cachedDateTimeZone50.equals((java.lang.Object) durationFieldType52);
        org.joda.time.Chronology chronology55 = iSOChronology0.withZone((org.joda.time.DateTimeZone) cachedDateTimeZone50);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(readableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(readableInterval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(readableInterval21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[hourOfDay]" + "'", str38, "ISOChronology[hourOfDay]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "UTC" + "'", str46, "UTC");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00" + "'", str48, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(cachedDateTimeZone50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "UTC" + "'", str51, "UTC");
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hours" + "'", str53, "hours");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(chronology55);
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0678");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        boolean boolean5 = durationFieldType0.isSupported(chronology3);
        org.joda.time.DurationField durationField6 = chronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.weekyearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField12 = new org.joda.time.field.OffsetDateTimeField(dateTimeField7, dateTimeFieldType8, 4, (int) ' ', (int) (short) -1);
        long long14 = offsetDateTimeField12.roundCeiling(2102400001L);
        int int15 = offsetDateTimeField12.getMinimumValue();
        boolean boolean17 = offsetDateTimeField12.isLeap(28800000L);
        long long19 = offsetDateTimeField12.roundFloor(2750411623L);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField21 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long24 = durationField21.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long26 = durationField21.getValueAsLong((long) 10);
        int int28 = durationField21.getValue((long) (byte) 10);
        boolean boolean29 = partial20.equals((java.lang.Object) durationField21);
        org.joda.time.ReadableInterval readableInterval30 = null;
        org.joda.time.ReadableInterval readableInterval31 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval30);
        org.joda.time.ReadableInterval readableInterval32 = null;
        boolean boolean33 = readableInterval31.contains(readableInterval32);
        org.joda.time.ReadableInterval readableInterval34 = null;
        boolean boolean35 = readableInterval31.isBefore(readableInterval34);
        org.joda.time.Interval interval36 = readableInterval31.toInterval();
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.PeriodType periodType38 = org.joda.time.DateTimeUtils.getPeriodType(periodType37);
        org.joda.time.PeriodType periodType39 = org.joda.time.DateTimeUtils.getPeriodType(periodType37);
        org.joda.time.Period period40 = readableInterval31.toPeriod(periodType39);
        org.joda.time.Partial partial41 = partial20.plus((org.joda.time.ReadablePeriod) period40);
        boolean boolean42 = org.joda.time.DateTimeUtils.isContiguous((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField44 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long47 = durationField44.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long49 = durationField44.getValueAsLong((long) 10);
        int int51 = durationField44.getValue((long) (byte) 10);
        boolean boolean52 = partial43.equals((java.lang.Object) durationField44);
        org.joda.time.Chronology chronology53 = partial43.getChronology();
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        boolean boolean55 = partial43.isBefore((org.joda.time.ReadablePartial) partial54);
        java.lang.String str56 = partial43.toString();
        boolean boolean57 = partial20.isBefore((org.joda.time.ReadablePartial) partial43);
        java.util.Locale locale59 = null;
        java.lang.String str60 = offsetDateTimeField12.getAsShortText((org.joda.time.ReadablePartial) partial20, 28354819, locale59);
        int int61 = offsetDateTimeField12.getMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            long long64 = offsetDateTimeField12.set(1701289169458L, "DateTimeField[yearOfCentury]");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"DateTimeField[yearOfCentury]\" for weekOfWeekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 31536000000L + "'", long14 == 31536000000L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 32 + "'", int15 == 32);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10L + "'", long26 == 10L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(readableInterval31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 10L + "'", long49 == 10L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[]" + "'", str56, "[]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "28354819" + "'", str60, "28354819");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 32 + "'", int61 == 32);
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2687");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = null;
        boolean boolean3 = readableInterval1.contains(readableInterval2);
        org.joda.time.ReadableInterval readableInterval4 = null;
        boolean boolean5 = readableInterval1.isBefore(readableInterval4);
        org.joda.time.DateTime dateTime6 = readableInterval1.getEnd();
        org.joda.time.ReadableInterval readableInterval7 = null;
        org.joda.time.ReadableInterval readableInterval8 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval7);
        org.joda.time.ReadableInterval readableInterval9 = null;
        boolean boolean10 = readableInterval8.contains(readableInterval9);
        org.joda.time.ReadableInterval readableInterval11 = null;
        boolean boolean12 = readableInterval8.isBefore(readableInterval11);
        org.joda.time.DateTime dateTime13 = readableInterval8.getEnd();
        boolean boolean14 = readableInterval1.isBefore((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadableInterval readableInterval15 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        long long16 = readableInterval15.getEndMillis();
        org.joda.time.DateTime dateTime17 = readableInterval15.getStart();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField19 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long22 = durationField19.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long24 = durationField19.getValueAsLong((long) 10);
        int int26 = durationField19.getValue((long) (byte) 10);
        boolean boolean27 = partial18.equals((java.lang.Object) durationField19);
        org.joda.time.Chronology chronology28 = partial18.getChronology();
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        boolean boolean30 = partial18.isBefore((org.joda.time.ReadablePartial) partial29);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray31 = partial18.getFieldTypes();
        boolean boolean33 = partial18.equals((java.lang.Object) 1702281558665L);
        java.lang.String str34 = partial18.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = partial18.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial37 = partial18.plus(readablePeriod36);
        org.joda.time.ReadableInterval readableInterval38 = null;
        org.joda.time.ReadableInterval readableInterval39 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval38);
        org.joda.time.ReadableInterval readableInterval40 = null;
        boolean boolean41 = readableInterval39.contains(readableInterval40);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.ReadableInterval readableInterval43 = null;
        org.joda.time.ReadableInterval readableInterval44 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval43);
        org.joda.time.ReadableInterval readableInterval45 = null;
        boolean boolean46 = readableInterval44.contains(readableInterval45);
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.Period period48 = readableInterval44.toPeriod(periodType47);
        org.joda.time.DateTime dateTime49 = readableInterval44.getEnd();
        org.joda.time.Chronology chronology50 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant42, (org.joda.time.ReadableInstant) dateTime49);
        boolean boolean51 = readableInterval39.isAfter((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.MutableInterval mutableInterval52 = readableInterval39.toMutableInterval();
        org.joda.time.DateTime dateTime53 = readableInterval39.getStart();
        org.joda.time.ReadableInterval readableInterval54 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval39);
        org.joda.time.DateTime dateTime55 = readableInterval54.getStart();
        boolean boolean56 = partial37.isMatch((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Chronology chronology57 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime55);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(readableInterval8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(readableInterval15);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 114669905157955L + "'", long16 == 114669905157955L);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10L + "'", long24 == 10L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[]" + "'", str34, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(readableInterval39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(readableInterval44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(mutableInterval52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(readableInterval54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(chronology57);
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0967");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = durationField5.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval11 = null;
        org.joda.time.ReadableInterval readableInterval12 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval11);
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval11);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfCentury();
        boolean boolean15 = durationFieldType10.isSupported(chronology13);
        org.joda.time.field.ScaledDurationField scaledDurationField17 = new org.joda.time.field.ScaledDurationField(durationField5, durationFieldType10, (int) 'a');
        int int19 = scaledDurationField17.getValue((long) (short) -1);
        java.lang.String str20 = scaledDurationField17.getName();
        long long22 = scaledDurationField17.getMillis((long) (byte) 10);
        long long24 = scaledDurationField17.getValueAsLong((-30610224000000L));
        long long27 = scaledDurationField17.add((long) 0, (int) (byte) 10);
        int int28 = scaledDurationField17.getScalar();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval30 = null;
        org.joda.time.ReadableInterval readableInterval31 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval30);
        org.joda.time.Chronology chronology32 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval30);
        org.joda.time.DateTimeField dateTimeField33 = chronology32.yearOfCentury();
        org.joda.time.DurationField durationField34 = chronology32.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField35 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType29, durationField34);
        long long38 = durationField34.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType39 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval40 = null;
        org.joda.time.ReadableInterval readableInterval41 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval40);
        org.joda.time.Chronology chronology42 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval40);
        org.joda.time.DateTimeField dateTimeField43 = chronology42.yearOfCentury();
        boolean boolean44 = durationFieldType39.isSupported(chronology42);
        org.joda.time.field.ScaledDurationField scaledDurationField46 = new org.joda.time.field.ScaledDurationField(durationField34, durationFieldType39, (int) 'a');
        org.joda.time.DurationField durationField47 = scaledDurationField46.getWrappedField();
        long long50 = scaledDurationField46.add((-210866846400000L), (long) 53460006);
        int int53 = scaledDurationField46.getValue((long) 1, 1L);
        boolean boolean54 = scaledDurationField46.isPrecise();
        long long56 = scaledDurationField46.getMillis(0);
        long long58 = scaledDurationField46.getValueAsLong(0L);
        int int59 = scaledDurationField46.getScalar();
        java.lang.String str60 = scaledDurationField46.getName();
        int int61 = scaledDurationField17.compareTo((org.joda.time.DurationField) scaledDurationField46);
        long long64 = scaledDurationField17.getDifferenceAsLong(313861710L, (long) 59);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-210866846400000L) + "'", long9 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(readableInterval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hours" + "'", str20, "hours");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 970L + "'", long22 == 970L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-315569319587L) + "'", long24 == (-315569319587L));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 970L + "'", long27 == 970L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 97 + "'", int28 == 97);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(readableInterval31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-210866846400000L) + "'", long38 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertNotNull(readableInterval41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-210861660779418L) + "'", long50 == (-210861660779418L));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 97 + "'", int59 == 97);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hours" + "'", str60, "hours");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 3235687L + "'", long64 == 3235687L);
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0909");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        org.joda.time.DurationField durationField7 = unsupportedDateTimeField6.getDurationField();
        boolean boolean8 = unsupportedDateTimeField6.isLenient();
        long long11 = unsupportedDateTimeField6.getDifferenceAsLong(1701289170393L, 946684800000L);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField13 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long16 = durationField13.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long18 = durationField13.getValueAsLong((long) 10);
        int int20 = durationField13.getValue((long) (byte) 10);
        boolean boolean21 = partial12.equals((java.lang.Object) durationField13);
        org.joda.time.Chronology chronology22 = partial12.getChronology();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        boolean boolean24 = partial12.isBefore((org.joda.time.ReadablePartial) partial23);
        java.lang.String str25 = partial12.toString();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField27 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long30 = durationField27.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long32 = durationField27.getValueAsLong((long) 10);
        int int34 = durationField27.getValue((long) (byte) 10);
        boolean boolean35 = partial26.equals((java.lang.Object) durationField27);
        org.joda.time.Chronology chronology36 = partial26.getChronology();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        boolean boolean38 = partial26.isBefore((org.joda.time.ReadablePartial) partial37);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray39 = partial26.getFieldTypes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = partial26.getFormatter();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField42 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long45 = durationField42.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long47 = durationField42.getValueAsLong((long) 10);
        int int49 = durationField42.getValue((long) (byte) 10);
        boolean boolean50 = partial41.equals((java.lang.Object) durationField42);
        org.joda.time.Chronology chronology51 = partial41.getChronology();
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        boolean boolean53 = partial41.isBefore((org.joda.time.ReadablePartial) partial52);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray54 = partial41.getFieldTypes();
        boolean boolean56 = partial41.equals((java.lang.Object) 1702281558665L);
        java.lang.String str57 = partial41.toString();
        org.joda.time.Chronology chronology58 = partial41.getChronology();
        int int59 = partial26.compareTo((org.joda.time.ReadablePartial) partial41);
        int int60 = partial12.compareTo((org.joda.time.ReadablePartial) partial26);
        // The following exception was thrown during execution in test generation
        try {
            int int61 = unsupportedDateTimeField6.getMinimumValue((org.joda.time.ReadablePartial) partial12);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 754604370393L + "'", long11 == 754604370393L);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10L + "'", long18 == 10L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[]" + "'", str25, "[]");
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10L + "'", long32 == 10L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray39);
        org.junit.Assert.assertNull(dateTimeFormatter40);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 10L + "'", long47 == 10L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1167");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        boolean boolean15 = partial0.equals((java.lang.Object) 1702281558665L);
        java.lang.String str16 = partial0.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = partial0.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType19 = dateTimeFieldType18.getRangeDurationType();
        int int20 = partial0.indexOf(dateTimeFieldType18);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.IllegalFieldValueException illegalFieldValueException23 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType21, "2023-11-29T12:19:27.125-08:00/2023-11-29T12:19:27.125-08:00");
        boolean boolean24 = partial0.isSupported(dateTimeFieldType21);
        org.joda.time.ReadableInterval readableInterval25 = null;
        org.joda.time.ReadableInterval readableInterval26 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval25);
        org.joda.time.Chronology chronology27 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval25);
        org.joda.time.DateTimeField dateTimeField28 = chronology27.yearOfCentury();
        org.joda.time.ReadablePartial readablePartial29 = null;
        int int30 = dateTimeField28.getMinimumValue(readablePartial29);
        org.joda.time.ReadablePartial readablePartial31 = null;
        org.joda.time.ReadableInterval readableInterval32 = null;
        org.joda.time.ReadableInterval readableInterval33 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval32);
        org.joda.time.Chronology chronology34 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval32);
        org.joda.time.DateTimeField dateTimeField35 = chronology34.yearOfCentury();
        org.joda.time.DurationField durationField36 = chronology34.millis();
        org.joda.time.DateTimeField dateTimeField37 = chronology34.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField38 = chronology34.clockhourOfDay();
        org.joda.time.ReadablePartial readablePartial39 = null;
        int[] intArray46 = new int[] { '#', (-1), 0, (byte) 1, (short) 1, (byte) 1 };
        int int47 = dateTimeField38.getMaximumValue(readablePartial39, intArray46);
        int int48 = dateTimeField28.getMinimumValue(readablePartial31, intArray46);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField51 = new org.joda.time.field.RemainderDateTimeField(dateTimeField28, dateTimeFieldType49, 10);
        org.joda.time.DurationField durationField52 = remainderDateTimeField51.getRangeDurationField();
        int int53 = remainderDateTimeField51.getDivisor();
        long long55 = remainderDateTimeField51.roundCeiling(946684800000L);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = remainderDateTimeField51.getType();
        org.joda.time.IllegalFieldValueException illegalFieldValueException60 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType56, (java.lang.Number) 12, (java.lang.Number) 754604370393L, (java.lang.Number) 1701289169593L);
        org.joda.time.IllegalFieldValueException illegalFieldValueException64 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType56, (java.lang.Number) 9972000000L, (java.lang.Number) 33258197981048L, (java.lang.Number) (-1893409200000L));
        // The following exception was thrown during execution in test generation
        try {
            int int65 = partial0.get(dateTimeFieldType56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'hourOfHalfday' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[]" + "'", str16, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(readableInterval26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(readableInterval33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[35, -1, 0, 1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 24 + "'", int47 == 24);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 946684800000L + "'", long55 == 946684800000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1645");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.halfdayOfDay();
        org.joda.time.DurationField durationField4 = iSOChronology0.seconds();
        org.joda.time.DurationField durationField5 = iSOChronology0.days();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.yearOfCentury();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField8 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long11 = durationField8.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long13 = durationField8.getValueAsLong((long) 10);
        int int15 = durationField8.getValue((long) (byte) 10);
        boolean boolean16 = partial7.equals((java.lang.Object) durationField8);
        org.joda.time.Chronology chronology17 = partial7.getChronology();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial7.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial7.getFieldTypes();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField22 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long25 = durationField22.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long27 = durationField22.getValueAsLong((long) 10);
        int int29 = durationField22.getValue((long) (byte) 10);
        boolean boolean30 = partial21.equals((java.lang.Object) durationField22);
        boolean boolean31 = partial7.equals((java.lang.Object) durationField22);
        org.joda.time.ReadableInterval readableInterval32 = null;
        org.joda.time.ReadableInterval readableInterval33 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval32);
        org.joda.time.ReadableInterval readableInterval34 = null;
        boolean boolean35 = readableInterval33.contains(readableInterval34);
        org.joda.time.Duration duration36 = readableInterval33.toDuration();
        org.joda.time.ReadableInterval readableInterval37 = null;
        org.joda.time.ReadableInterval readableInterval38 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval37);
        org.joda.time.ReadableInterval readableInterval39 = null;
        boolean boolean40 = readableInterval38.contains(readableInterval39);
        org.joda.time.Duration duration41 = readableInterval38.toDuration();
        org.joda.time.DateTime dateTime42 = readableInterval38.getEnd();
        boolean boolean43 = readableInterval33.isBefore((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime44 = partial7.toDateTime((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField46 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long49 = durationField46.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long51 = durationField46.getValueAsLong((long) 10);
        int int53 = durationField46.getValue((long) (byte) 10);
        boolean boolean54 = partial45.equals((java.lang.Object) durationField46);
        org.joda.time.Chronology chronology55 = partial45.getChronology();
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        boolean boolean57 = partial45.isBefore((org.joda.time.ReadablePartial) partial56);
        boolean boolean58 = partial7.isBefore((org.joda.time.ReadablePartial) partial56);
        int[] intArray59 = null;
        iSOChronology0.validate((org.joda.time.ReadablePartial) partial7, intArray59);
        org.joda.time.DateTimeField dateTimeField61 = iSOChronology0.dayOfMonth();
        org.joda.time.DurationField durationField62 = iSOChronology0.hours();
        long long65 = durationField62.subtract((-6L), 864000100L);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(readableInterval33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(readableInterval38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10L + "'", long51 == 10L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-3110400360000006L) + "'", long65 == (-3110400360000006L));
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2709");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        boolean boolean15 = partial0.equals((java.lang.Object) 1702281558665L);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType17 = dateTimeFieldType16.getDurationType();
        boolean boolean18 = partial0.isSupported(dateTimeFieldType16);
        java.util.Locale locale20 = null;
        java.lang.String str21 = partial0.toString("[]", locale20);
        org.joda.time.chrono.ISOChronology iSOChronology22 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField23 = iSOChronology22.minutes();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology22.millisOfDay();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology22.halfdayOfDay();
        org.joda.time.DurationField durationField26 = iSOChronology22.seconds();
        java.lang.String str27 = iSOChronology22.toString();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology22.clockhourOfHalfday();
        org.joda.time.DurationField durationField29 = iSOChronology22.hours();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology22.dayOfWeek();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone35 = new org.joda.time.tz.FixedDateTimeZone("-1", "", 0, (int) '4');
        java.lang.String str37 = fixedDateTimeZone35.getName(31556995200009L);
        org.joda.time.Chronology chronology38 = iSOChronology22.withZone((org.joda.time.DateTimeZone) fixedDateTimeZone35);
        org.joda.time.DateTimeField dateTimeField39 = iSOChronology22.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval41 = null;
        org.joda.time.ReadableInterval readableInterval42 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval41);
        org.joda.time.Chronology chronology43 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval41);
        org.joda.time.DateTimeField dateTimeField44 = chronology43.yearOfCentury();
        org.joda.time.DurationField durationField45 = chronology43.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField46 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType40, durationField45);
        long long49 = unsupportedDateTimeField46.add((-31L), (long) '#');
        org.joda.time.DurationField durationField50 = unsupportedDateTimeField46.getLeapDurationField();
        int int53 = unsupportedDateTimeField46.getDifference((long) (byte) 10, 10L);
        long long56 = unsupportedDateTimeField46.add((long) 1439, (int) (byte) -1);
        org.joda.time.DurationField durationField57 = unsupportedDateTimeField46.getLeapDurationField();
        org.joda.time.DurationField durationField58 = unsupportedDateTimeField46.getDurationField();
        org.joda.time.DurationField durationField59 = unsupportedDateTimeField46.getRangeDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = unsupportedDateTimeField46.getType();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField62 = new org.joda.time.field.DividedDateTimeField(dateTimeField39, dateTimeFieldType60, 3671845);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property63 = partial0.property(dateTimeFieldType60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'dayOfYear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[]" + "'", str21, "[]");
        org.junit.Assert.assertNotNull(iSOChronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ISOChronology[hourOfDay]" + "'", str27, "ISOChronology[hourOfDay]");
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(readableInterval42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField46);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 4L + "'", long49 == 4L);
        org.junit.Assert.assertNull(durationField50);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1438L + "'", long56 == 1438L);
        org.junit.Assert.assertNull(durationField57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2985");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add((-31L), (long) '#');
        org.joda.time.DurationField durationField10 = unsupportedDateTimeField6.getLeapDurationField();
        int int13 = unsupportedDateTimeField6.getDifference((long) (byte) 10, 10L);
        long long16 = unsupportedDateTimeField6.add((long) 1439, (int) (byte) -1);
        org.joda.time.DurationField durationField17 = unsupportedDateTimeField6.getLeapDurationField();
        org.joda.time.DurationField durationField18 = unsupportedDateTimeField6.getDurationField();
        org.joda.time.DurationField durationField19 = unsupportedDateTimeField6.getLeapDurationField();
        org.joda.time.DurationField durationField20 = unsupportedDateTimeField6.getLeapDurationField();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField22 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long25 = durationField22.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long27 = durationField22.getValueAsLong((long) 10);
        int int29 = durationField22.getValue((long) (byte) 10);
        boolean boolean30 = partial21.equals((java.lang.Object) durationField22);
        org.joda.time.Chronology chronology31 = partial21.getChronology();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        boolean boolean33 = partial21.isBefore((org.joda.time.ReadablePartial) partial32);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray34 = partial21.getFieldTypes();
        boolean boolean36 = partial21.equals((java.lang.Object) 1702281558665L);
        java.lang.String str37 = partial21.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = partial21.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial40 = partial21.plus(readablePeriod39);
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField42 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long45 = durationField42.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long47 = durationField42.getValueAsLong((long) 10);
        int int49 = durationField42.getValue((long) (byte) 10);
        boolean boolean50 = partial41.equals((java.lang.Object) durationField42);
        org.joda.time.Chronology chronology51 = partial41.getChronology();
        java.lang.String str52 = partial41.toString();
        boolean boolean53 = partial40.isAfter((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Partial partial54 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial41);
        boolean boolean56 = partial54.equals((java.lang.Object) (short) -1);
        java.lang.String str57 = partial54.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.IllegalFieldValueException illegalFieldValueException61 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType58, (java.lang.Number) 28354819L, "dayOfMonth");
        int int62 = partial54.indexOf(dateTimeFieldType58);
        java.util.Locale locale64 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str65 = unsupportedDateTimeField6.getAsShortText((org.joda.time.ReadablePartial) partial54, 4044106, locale64);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1438L + "'", long16 == 1438L);
        org.junit.Assert.assertNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNull(durationField19);
        org.junit.Assert.assertNull(durationField20);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[]" + "'", str37, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 10L + "'", long47 == 10L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[]" + "'", str52, "[]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2781");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval3);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DurationField durationField7 = chronology5.millis();
        org.joda.time.DurationField durationField8 = chronology5.centuries();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval9);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology11.millis();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.ReadableInterval readableInterval16 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval15);
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.ReadableInterval readableInterval21 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval20);
        org.joda.time.ReadableInterval readableInterval22 = null;
        boolean boolean23 = readableInterval21.contains(readableInterval22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = readableInterval21.toPeriod(periodType24);
        int[] intArray27 = chronology17.get((org.joda.time.ReadablePeriod) period25, (-210866846400000L));
        int[] intArray30 = chronology11.get((org.joda.time.ReadablePeriod) period25, 2173795348453L, (long) 1439);
        int[] intArray33 = chronology5.get((org.joda.time.ReadablePeriod) period25, 291L, 2580171L);
        int[] intArray36 = iSOChronology0.get((org.joda.time.ReadablePeriod) period25, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField37 = iSOChronology0.months();
        java.lang.String str38 = iSOChronology0.toString();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = iSOChronology0.equals((java.lang.Object) partial39);
        org.joda.time.Chronology chronology41 = org.joda.time.DateTimeUtils.getChronology((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone46 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        int int48 = fixedDateTimeZone46.getStandardOffset((long) 1439);
        boolean boolean49 = fixedDateTimeZone46.isFixed();
        long long51 = fixedDateTimeZone46.nextTransition((long) 24);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        long long55 = dateTimeZone52.adjustOffset((long) 100, true);
        long long57 = fixedDateTimeZone46.getMillisKeepLocal(dateTimeZone52, 10L);
        org.joda.time.Chronology chronology58 = iSOChronology0.withZone((org.joda.time.DateTimeZone) fixedDateTimeZone46);
        int int60 = fixedDateTimeZone46.getStandardOffset((long) (short) 10);
        org.joda.time.DateTimeZone.setDefault((org.joda.time.DateTimeZone) fixedDateTimeZone46);
        long long65 = fixedDateTimeZone46.convertLocalToUTC(3L, false, (-3909759585313L));
        java.lang.String str67 = fixedDateTimeZone46.getNameKey(166726337681570L);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(readableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(readableInterval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(readableInterval21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(durationField37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[UTC]" + "'", str38, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 24L + "'", long51 == 24L);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 100L + "'", long55 == 100L);
// flaky:         org.junit.Assert.assertTrue("'" + long57 + "' != '" + 10L + "'", long57 == 10L);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 3L + "'", long65 == 3L);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "ISOChronology[America/Los_Angeles]" + "'", str67, "ISOChronology[America/Los_Angeles]");
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1906");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval3);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DurationField durationField7 = chronology5.millis();
        org.joda.time.DurationField durationField8 = chronology5.centuries();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval9);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology11.millis();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.ReadableInterval readableInterval16 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval15);
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.ReadableInterval readableInterval21 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval20);
        org.joda.time.ReadableInterval readableInterval22 = null;
        boolean boolean23 = readableInterval21.contains(readableInterval22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = readableInterval21.toPeriod(periodType24);
        int[] intArray27 = chronology17.get((org.joda.time.ReadablePeriod) period25, (-210866846400000L));
        int[] intArray30 = chronology11.get((org.joda.time.ReadablePeriod) period25, 2173795348453L, (long) 1439);
        int[] intArray33 = chronology5.get((org.joda.time.ReadablePeriod) period25, 291L, 2580171L);
        int[] intArray36 = iSOChronology0.get((org.joda.time.ReadablePeriod) period25, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField37 = iSOChronology0.months();
        java.lang.String str38 = iSOChronology0.toString();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = iSOChronology0.equals((java.lang.Object) partial39);
        org.joda.time.Chronology chronology41 = org.joda.time.DateTimeUtils.getChronology((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone46 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        int int48 = fixedDateTimeZone46.getStandardOffset((long) 1439);
        boolean boolean49 = fixedDateTimeZone46.isFixed();
        long long51 = fixedDateTimeZone46.nextTransition((long) 24);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        long long55 = dateTimeZone52.adjustOffset((long) 100, true);
        long long57 = fixedDateTimeZone46.getMillisKeepLocal(dateTimeZone52, 10L);
        org.joda.time.Chronology chronology58 = iSOChronology0.withZone((org.joda.time.DateTimeZone) fixedDateTimeZone46);
        int int60 = fixedDateTimeZone46.getStandardOffset((long) (short) 10);
        long long62 = fixedDateTimeZone46.nextTransition((long) (short) 0);
        org.joda.time.chrono.ISOChronology iSOChronology63 = org.joda.time.chrono.ISOChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone46);
        org.joda.time.DateTimeField dateTimeField64 = iSOChronology63.hourOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(readableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(readableInterval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(readableInterval21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(durationField37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[UTC]" + "'", str38, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 24L + "'", long51 == 24L);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 100L + "'", long55 == 100L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 10L + "'", long57 == 10L);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertNotNull(iSOChronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0498");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField2 = iSOChronology1.minutes();
        org.joda.time.DurationField durationField3 = iSOChronology1.months();
        org.joda.time.DurationField durationField4 = iSOChronology1.years();
        org.joda.time.DurationField durationField5 = iSOChronology1.weeks();
        boolean boolean6 = dateTimeFieldType0.isSupported((org.joda.time.Chronology) iSOChronology1);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField8 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long11 = durationField8.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long13 = durationField8.getValueAsLong((long) 10);
        int int15 = durationField8.getValue((long) (byte) 10);
        boolean boolean16 = partial7.equals((java.lang.Object) durationField8);
        org.joda.time.Chronology chronology17 = partial7.getChronology();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial7.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial7.getFieldTypes();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField22 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long25 = durationField22.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long27 = durationField22.getValueAsLong((long) 10);
        int int29 = durationField22.getValue((long) (byte) 10);
        boolean boolean30 = partial21.equals((java.lang.Object) durationField22);
        boolean boolean31 = partial7.equals((java.lang.Object) durationField22);
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField32 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField22);
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField34 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long37 = durationField34.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long39 = durationField34.getValueAsLong((long) 10);
        int int41 = durationField34.getValue((long) (byte) 10);
        boolean boolean42 = partial33.equals((java.lang.Object) durationField34);
        org.joda.time.Chronology chronology43 = partial33.getChronology();
        java.lang.String str44 = partial33.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray45 = partial33.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval46 = null;
        org.joda.time.ReadableInterval readableInterval47 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval46);
        org.joda.time.ReadableInterval readableInterval48 = null;
        boolean boolean49 = readableInterval47.contains(readableInterval48);
        org.joda.time.ReadableInterval readableInterval50 = null;
        boolean boolean51 = readableInterval47.isBefore(readableInterval50);
        org.joda.time.Interval interval52 = readableInterval47.toInterval();
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.PeriodType periodType54 = org.joda.time.DateTimeUtils.getPeriodType(periodType53);
        org.joda.time.PeriodType periodType55 = org.joda.time.DateTimeUtils.getPeriodType(periodType53);
        org.joda.time.Period period56 = readableInterval47.toPeriod(periodType55);
        org.joda.time.Partial partial57 = partial33.plus((org.joda.time.ReadablePeriod) period56);
        java.util.Locale locale59 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str60 = unsupportedDateTimeField32.getAsShortText((org.joda.time.ReadablePartial) partial33, 1969, locale59);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: secondOfDay field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField32);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L + "'", long37 == 1L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 10L + "'", long39 == 10L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[]" + "'", str44, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray45);
        org.junit.Assert.assertNotNull(readableInterval47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(partial57);
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2324");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.halfdayOfDay();
        org.joda.time.DurationField durationField4 = iSOChronology0.seconds();
        org.joda.time.DurationField durationField5 = iSOChronology0.days();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.yearOfCentury();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField8 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long11 = durationField8.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long13 = durationField8.getValueAsLong((long) 10);
        int int15 = durationField8.getValue((long) (byte) 10);
        boolean boolean16 = partial7.equals((java.lang.Object) durationField8);
        org.joda.time.Chronology chronology17 = partial7.getChronology();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial7.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial7.getFieldTypes();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField22 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long25 = durationField22.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long27 = durationField22.getValueAsLong((long) 10);
        int int29 = durationField22.getValue((long) (byte) 10);
        boolean boolean30 = partial21.equals((java.lang.Object) durationField22);
        boolean boolean31 = partial7.equals((java.lang.Object) durationField22);
        org.joda.time.ReadableInterval readableInterval32 = null;
        org.joda.time.ReadableInterval readableInterval33 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval32);
        org.joda.time.ReadableInterval readableInterval34 = null;
        boolean boolean35 = readableInterval33.contains(readableInterval34);
        org.joda.time.Duration duration36 = readableInterval33.toDuration();
        org.joda.time.ReadableInterval readableInterval37 = null;
        org.joda.time.ReadableInterval readableInterval38 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval37);
        org.joda.time.ReadableInterval readableInterval39 = null;
        boolean boolean40 = readableInterval38.contains(readableInterval39);
        org.joda.time.Duration duration41 = readableInterval38.toDuration();
        org.joda.time.DateTime dateTime42 = readableInterval38.getEnd();
        boolean boolean43 = readableInterval33.isBefore((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime44 = partial7.toDateTime((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField46 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long49 = durationField46.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long51 = durationField46.getValueAsLong((long) 10);
        int int53 = durationField46.getValue((long) (byte) 10);
        boolean boolean54 = partial45.equals((java.lang.Object) durationField46);
        org.joda.time.Chronology chronology55 = partial45.getChronology();
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        boolean boolean57 = partial45.isBefore((org.joda.time.ReadablePartial) partial56);
        boolean boolean58 = partial7.isBefore((org.joda.time.ReadablePartial) partial56);
        int[] intArray59 = null;
        iSOChronology0.validate((org.joda.time.ReadablePartial) partial7, intArray59);
        org.joda.time.DateTimeField dateTimeField61 = iSOChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField62 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField63 = iSOChronology0.secondOfMinute();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(readableInterval33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(readableInterval38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10L + "'", long51 == 10L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2393");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.halfdayOfDay();
        org.joda.time.DurationField durationField4 = iSOChronology0.seconds();
        org.joda.time.DurationField durationField5 = iSOChronology0.days();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.yearOfCentury();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField8 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long11 = durationField8.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long13 = durationField8.getValueAsLong((long) 10);
        int int15 = durationField8.getValue((long) (byte) 10);
        boolean boolean16 = partial7.equals((java.lang.Object) durationField8);
        org.joda.time.Chronology chronology17 = partial7.getChronology();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial7.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial7.getFieldTypes();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField22 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long25 = durationField22.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long27 = durationField22.getValueAsLong((long) 10);
        int int29 = durationField22.getValue((long) (byte) 10);
        boolean boolean30 = partial21.equals((java.lang.Object) durationField22);
        boolean boolean31 = partial7.equals((java.lang.Object) durationField22);
        org.joda.time.ReadableInterval readableInterval32 = null;
        org.joda.time.ReadableInterval readableInterval33 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval32);
        org.joda.time.ReadableInterval readableInterval34 = null;
        boolean boolean35 = readableInterval33.contains(readableInterval34);
        org.joda.time.Duration duration36 = readableInterval33.toDuration();
        org.joda.time.ReadableInterval readableInterval37 = null;
        org.joda.time.ReadableInterval readableInterval38 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval37);
        org.joda.time.ReadableInterval readableInterval39 = null;
        boolean boolean40 = readableInterval38.contains(readableInterval39);
        org.joda.time.Duration duration41 = readableInterval38.toDuration();
        org.joda.time.DateTime dateTime42 = readableInterval38.getEnd();
        boolean boolean43 = readableInterval33.isBefore((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime44 = partial7.toDateTime((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField46 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long49 = durationField46.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long51 = durationField46.getValueAsLong((long) 10);
        int int53 = durationField46.getValue((long) (byte) 10);
        boolean boolean54 = partial45.equals((java.lang.Object) durationField46);
        org.joda.time.Chronology chronology55 = partial45.getChronology();
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        boolean boolean57 = partial45.isBefore((org.joda.time.ReadablePartial) partial56);
        boolean boolean58 = partial7.isBefore((org.joda.time.ReadablePartial) partial56);
        int[] intArray59 = null;
        iSOChronology0.validate((org.joda.time.ReadablePartial) partial7, intArray59);
        org.joda.time.DurationField durationField61 = iSOChronology0.months();
        org.joda.time.DateTimeField dateTimeField62 = iSOChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField63 = iSOChronology0.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(readableInterval33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(readableInterval38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10L + "'", long51 == 10L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3065");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        org.joda.time.ReadablePartial readablePartial23 = null;
        java.util.Locale locale25 = null;
        java.lang.String str26 = dividedDateTimeField11.getAsShortText(readablePartial23, (int) ' ', locale25);
        org.joda.time.ReadablePartial readablePartial27 = null;
        java.util.Locale locale29 = null;
        java.lang.String str30 = dividedDateTimeField11.getAsText(readablePartial27, (int) (byte) 10, locale29);
        long long32 = dividedDateTimeField11.roundHalfFloor((long) 100);
        long long35 = dividedDateTimeField11.getDifferenceAsLong((-30610224000000L), (long) 24);
        long long37 = dividedDateTimeField11.roundHalfFloor(31380171L);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField38 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11);
        int int40 = remainderDateTimeField38.getMaximumValue((long) 21);
        long long42 = remainderDateTimeField38.roundHalfFloor(252997084800291L);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField44 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long47 = durationField44.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long49 = durationField44.getValueAsLong((long) 10);
        int int51 = durationField44.getValue((long) (byte) 10);
        boolean boolean52 = partial43.equals((java.lang.Object) durationField44);
        org.joda.time.Chronology chronology53 = partial43.getChronology();
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        boolean boolean55 = partial43.isBefore((org.joda.time.ReadablePartial) partial54);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray56 = partial43.getFieldTypes();
        boolean boolean58 = partial43.equals((java.lang.Object) 1702281558665L);
        java.lang.String str59 = partial43.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = partial43.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.Partial partial62 = partial43.plus(readablePeriod61);
        org.joda.time.Chronology chronology63 = partial62.getChronology();
        java.util.Locale locale64 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str65 = remainderDateTimeField38.getAsText((org.joda.time.ReadablePartial) partial62, locale64);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'centuryOfEra' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "32" + "'", str26, "32");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "10" + "'", str30, "10");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-97L) + "'", long35 == (-97L));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 9 + "'", int40 == 9);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 252992073600000L + "'", long42 == 252992073600000L);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 10L + "'", long49 == 10L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "[]" + "'", str59, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter60);
        org.junit.Assert.assertNotNull(partial62);
        org.junit.Assert.assertNotNull(chronology63);
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2801");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.halfdayOfDay();
        org.joda.time.DurationField durationField4 = iSOChronology0.seconds();
        org.joda.time.DurationField durationField5 = iSOChronology0.days();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.yearOfCentury();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField8 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long11 = durationField8.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long13 = durationField8.getValueAsLong((long) 10);
        int int15 = durationField8.getValue((long) (byte) 10);
        boolean boolean16 = partial7.equals((java.lang.Object) durationField8);
        org.joda.time.Chronology chronology17 = partial7.getChronology();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial7.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial7.getFieldTypes();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField22 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long25 = durationField22.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long27 = durationField22.getValueAsLong((long) 10);
        int int29 = durationField22.getValue((long) (byte) 10);
        boolean boolean30 = partial21.equals((java.lang.Object) durationField22);
        boolean boolean31 = partial7.equals((java.lang.Object) durationField22);
        org.joda.time.ReadableInterval readableInterval32 = null;
        org.joda.time.ReadableInterval readableInterval33 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval32);
        org.joda.time.ReadableInterval readableInterval34 = null;
        boolean boolean35 = readableInterval33.contains(readableInterval34);
        org.joda.time.Duration duration36 = readableInterval33.toDuration();
        org.joda.time.ReadableInterval readableInterval37 = null;
        org.joda.time.ReadableInterval readableInterval38 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval37);
        org.joda.time.ReadableInterval readableInterval39 = null;
        boolean boolean40 = readableInterval38.contains(readableInterval39);
        org.joda.time.Duration duration41 = readableInterval38.toDuration();
        org.joda.time.DateTime dateTime42 = readableInterval38.getEnd();
        boolean boolean43 = readableInterval33.isBefore((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime44 = partial7.toDateTime((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField46 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long49 = durationField46.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long51 = durationField46.getValueAsLong((long) 10);
        int int53 = durationField46.getValue((long) (byte) 10);
        boolean boolean54 = partial45.equals((java.lang.Object) durationField46);
        org.joda.time.Chronology chronology55 = partial45.getChronology();
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        boolean boolean57 = partial45.isBefore((org.joda.time.ReadablePartial) partial56);
        boolean boolean58 = partial7.isBefore((org.joda.time.ReadablePartial) partial56);
        int[] intArray59 = null;
        iSOChronology0.validate((org.joda.time.ReadablePartial) partial7, intArray59);
        org.joda.time.DateTimeField dateTimeField61 = iSOChronology0.dayOfMonth();
        org.joda.time.DurationField durationField62 = iSOChronology0.hours();
        org.joda.time.DateTimeField dateTimeField63 = iSOChronology0.secondOfMinute();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(readableInterval33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(readableInterval38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10L + "'", long51 == 10L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3080");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.halfdayOfDay();
        org.joda.time.DurationField durationField4 = iSOChronology0.seconds();
        org.joda.time.DurationField durationField5 = iSOChronology0.days();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.yearOfCentury();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField8 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long11 = durationField8.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long13 = durationField8.getValueAsLong((long) 10);
        int int15 = durationField8.getValue((long) (byte) 10);
        boolean boolean16 = partial7.equals((java.lang.Object) durationField8);
        org.joda.time.Chronology chronology17 = partial7.getChronology();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial7.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial7.getFieldTypes();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField22 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long25 = durationField22.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long27 = durationField22.getValueAsLong((long) 10);
        int int29 = durationField22.getValue((long) (byte) 10);
        boolean boolean30 = partial21.equals((java.lang.Object) durationField22);
        boolean boolean31 = partial7.equals((java.lang.Object) durationField22);
        org.joda.time.ReadableInterval readableInterval32 = null;
        org.joda.time.ReadableInterval readableInterval33 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval32);
        org.joda.time.ReadableInterval readableInterval34 = null;
        boolean boolean35 = readableInterval33.contains(readableInterval34);
        org.joda.time.Duration duration36 = readableInterval33.toDuration();
        org.joda.time.ReadableInterval readableInterval37 = null;
        org.joda.time.ReadableInterval readableInterval38 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval37);
        org.joda.time.ReadableInterval readableInterval39 = null;
        boolean boolean40 = readableInterval38.contains(readableInterval39);
        org.joda.time.Duration duration41 = readableInterval38.toDuration();
        org.joda.time.DateTime dateTime42 = readableInterval38.getEnd();
        boolean boolean43 = readableInterval33.isBefore((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime44 = partial7.toDateTime((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField46 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long49 = durationField46.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long51 = durationField46.getValueAsLong((long) 10);
        int int53 = durationField46.getValue((long) (byte) 10);
        boolean boolean54 = partial45.equals((java.lang.Object) durationField46);
        org.joda.time.Chronology chronology55 = partial45.getChronology();
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        boolean boolean57 = partial45.isBefore((org.joda.time.ReadablePartial) partial56);
        boolean boolean58 = partial7.isBefore((org.joda.time.ReadablePartial) partial56);
        int[] intArray59 = null;
        iSOChronology0.validate((org.joda.time.ReadablePartial) partial7, intArray59);
        org.joda.time.DateTimeField dateTimeField61 = iSOChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField62 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField63 = iSOChronology0.weeks();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(readableInterval33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(readableInterval38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10L + "'", long51 == 10L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(durationField63);
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1382");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.halfdayOfDay();
        org.joda.time.DurationField durationField4 = iSOChronology0.seconds();
        org.joda.time.DurationField durationField5 = iSOChronology0.days();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.yearOfCentury();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField8 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long11 = durationField8.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long13 = durationField8.getValueAsLong((long) 10);
        int int15 = durationField8.getValue((long) (byte) 10);
        boolean boolean16 = partial7.equals((java.lang.Object) durationField8);
        org.joda.time.Chronology chronology17 = partial7.getChronology();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial7.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial7.getFieldTypes();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField22 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long25 = durationField22.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long27 = durationField22.getValueAsLong((long) 10);
        int int29 = durationField22.getValue((long) (byte) 10);
        boolean boolean30 = partial21.equals((java.lang.Object) durationField22);
        boolean boolean31 = partial7.equals((java.lang.Object) durationField22);
        org.joda.time.ReadableInterval readableInterval32 = null;
        org.joda.time.ReadableInterval readableInterval33 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval32);
        org.joda.time.ReadableInterval readableInterval34 = null;
        boolean boolean35 = readableInterval33.contains(readableInterval34);
        org.joda.time.Duration duration36 = readableInterval33.toDuration();
        org.joda.time.ReadableInterval readableInterval37 = null;
        org.joda.time.ReadableInterval readableInterval38 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval37);
        org.joda.time.ReadableInterval readableInterval39 = null;
        boolean boolean40 = readableInterval38.contains(readableInterval39);
        org.joda.time.Duration duration41 = readableInterval38.toDuration();
        org.joda.time.DateTime dateTime42 = readableInterval38.getEnd();
        boolean boolean43 = readableInterval33.isBefore((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime44 = partial7.toDateTime((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField46 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long49 = durationField46.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long51 = durationField46.getValueAsLong((long) 10);
        int int53 = durationField46.getValue((long) (byte) 10);
        boolean boolean54 = partial45.equals((java.lang.Object) durationField46);
        org.joda.time.Chronology chronology55 = partial45.getChronology();
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        boolean boolean57 = partial45.isBefore((org.joda.time.ReadablePartial) partial56);
        boolean boolean58 = partial7.isBefore((org.joda.time.ReadablePartial) partial56);
        int[] intArray59 = null;
        iSOChronology0.validate((org.joda.time.ReadablePartial) partial7, intArray59);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField62 = partial7.getField(7);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 7");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(readableInterval33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(readableInterval38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10L + "'", long51 == 10L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1397");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology5 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone6 = gregorianChronology5.getZone();
        long long10 = gregorianChronology5.add(0L, (long) (byte) 1, (int) (byte) 0);
        org.joda.time.DateTimeField dateTimeField11 = gregorianChronology5.millisOfDay();
        org.joda.time.DurationField durationField12 = gregorianChronology5.weeks();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField14 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long17 = durationField14.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long19 = durationField14.getValueAsLong((long) 10);
        int int21 = durationField14.getValue((long) (byte) 10);
        boolean boolean22 = partial13.equals((java.lang.Object) durationField14);
        org.joda.time.ReadableInterval readableInterval23 = null;
        org.joda.time.ReadableInterval readableInterval24 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval23);
        org.joda.time.ReadableInterval readableInterval25 = null;
        boolean boolean26 = readableInterval24.contains(readableInterval25);
        org.joda.time.ReadableInterval readableInterval27 = null;
        boolean boolean28 = readableInterval24.isBefore(readableInterval27);
        org.joda.time.Interval interval29 = readableInterval24.toInterval();
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.PeriodType periodType31 = org.joda.time.DateTimeUtils.getPeriodType(periodType30);
        org.joda.time.PeriodType periodType32 = org.joda.time.DateTimeUtils.getPeriodType(periodType30);
        org.joda.time.Period period33 = readableInterval24.toPeriod(periodType32);
        org.joda.time.Partial partial34 = partial13.plus((org.joda.time.ReadablePeriod) period33);
        int[] intArray37 = gregorianChronology5.get((org.joda.time.ReadablePeriod) period33, 1701289178545L, (long) (short) 0);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField39 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long42 = durationField39.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long44 = durationField39.getValueAsLong((long) 10);
        int int46 = durationField39.getValue((long) (byte) 10);
        boolean boolean47 = partial38.equals((java.lang.Object) durationField39);
        org.joda.time.Chronology chronology48 = partial38.getChronology();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial38.isBefore((org.joda.time.ReadablePartial) partial49);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray51 = partial38.getFieldTypes();
        boolean boolean53 = partial38.equals((java.lang.Object) 1702281558665L);
        java.lang.String str54 = partial38.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = partial38.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.Partial partial57 = partial38.plus(readablePeriod56);
        int[] intArray59 = gregorianChronology5.get((org.joda.time.ReadablePartial) partial38, 1701289179647L);
        org.joda.time.DateTimeField dateTimeField60 = gregorianChronology5.centuryOfEra();
        org.joda.time.DurationField durationField61 = gregorianChronology5.years();
        java.lang.String str62 = gregorianChronology5.toString();
        org.joda.time.DurationField durationField63 = gregorianChronology5.minutes();
        // The following exception was thrown during execution in test generation
        try {
            long long71 = gregorianChronology5.getDateTimeMillis(0, 199, 719, (-28799996), 4, 59, (-751463));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -28799996 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(readableInterval24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-53, -10, -4, 0, -20, -19, -38, -545]");
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 10L + "'", long44 == 10L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[]" + "'", str54, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter55);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "GregorianChronology[100]" + "'", str62, "GregorianChronology[100]");
        org.junit.Assert.assertNotNull(durationField63);
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2487");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval3);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DurationField durationField7 = chronology5.millis();
        org.joda.time.DurationField durationField8 = chronology5.centuries();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval9);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology11.millis();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.ReadableInterval readableInterval16 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval15);
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.ReadableInterval readableInterval21 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval20);
        org.joda.time.ReadableInterval readableInterval22 = null;
        boolean boolean23 = readableInterval21.contains(readableInterval22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = readableInterval21.toPeriod(periodType24);
        int[] intArray27 = chronology17.get((org.joda.time.ReadablePeriod) period25, (-210866846400000L));
        int[] intArray30 = chronology11.get((org.joda.time.ReadablePeriod) period25, 2173795348453L, (long) 1439);
        int[] intArray33 = chronology5.get((org.joda.time.ReadablePeriod) period25, 291L, 2580171L);
        int[] intArray36 = iSOChronology0.get((org.joda.time.ReadablePeriod) period25, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField37 = iSOChronology0.months();
        java.lang.String str38 = iSOChronology0.toString();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = iSOChronology0.equals((java.lang.Object) partial39);
        org.joda.time.Chronology chronology41 = org.joda.time.DateTimeUtils.getChronology((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone46 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        int int48 = fixedDateTimeZone46.getStandardOffset((long) 1439);
        boolean boolean49 = fixedDateTimeZone46.isFixed();
        long long51 = fixedDateTimeZone46.nextTransition((long) 24);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        long long55 = dateTimeZone52.adjustOffset((long) 100, true);
        long long57 = fixedDateTimeZone46.getMillisKeepLocal(dateTimeZone52, 10L);
        org.joda.time.Chronology chronology58 = iSOChronology0.withZone((org.joda.time.DateTimeZone) fixedDateTimeZone46);
        int int60 = fixedDateTimeZone46.getStandardOffset((long) (short) 10);
        org.joda.time.DateTimeZone.setDefault((org.joda.time.DateTimeZone) fixedDateTimeZone46);
        java.lang.String str62 = fixedDateTimeZone46.toString();
        long long64 = fixedDateTimeZone46.previousTransition(18915L);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(readableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(readableInterval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(readableInterval21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[UTC]" + "'", str38, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 24L + "'", long51 == 24L);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 100L + "'", long55 == 100L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 10L + "'", long57 == 10L);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "100" + "'", str62, "100");
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 18915L + "'", long64 == 18915L);
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3045");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = null;
        boolean boolean3 = readableInterval1.contains(readableInterval2);
        org.joda.time.Duration duration4 = readableInterval1.toDuration();
        org.joda.time.ReadableInterval readableInterval5 = null;
        org.joda.time.ReadableInterval readableInterval6 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval5);
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = readableInterval6.contains(readableInterval7);
        org.joda.time.Duration duration9 = readableInterval6.toDuration();
        org.joda.time.DateTime dateTime10 = readableInterval6.getEnd();
        boolean boolean11 = readableInterval1.isBefore((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField13 = iSOChronology12.minutes();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str15 = dateTimeZone14.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology16 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology12, dateTimeZone14);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.ReadableInterval readableInterval18 = null;
        org.joda.time.ReadableInterval readableInterval19 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval18);
        org.joda.time.ReadableInterval readableInterval20 = null;
        boolean boolean21 = readableInterval19.contains(readableInterval20);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = readableInterval19.toPeriod(periodType22);
        org.joda.time.DateTime dateTime24 = readableInterval19.getEnd();
        org.joda.time.Chronology chronology25 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant17, (org.joda.time.ReadableInstant) dateTime24);
        int int26 = dateTimeZone14.getOffset((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Chronology chronology27 = org.joda.time.DateTimeUtils.getInstantChronology((org.joda.time.ReadableInstant) dateTime24);
        boolean boolean28 = readableInterval1.contains((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Interval interval29 = readableInterval1.toInterval();
        org.joda.time.ReadableInterval readableInterval30 = null;
        org.joda.time.ReadableInterval readableInterval31 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval30);
        org.joda.time.Chronology chronology32 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval30);
        org.joda.time.DateTimeField dateTimeField33 = chronology32.yearOfCentury();
        org.joda.time.DurationField durationField34 = chronology32.millis();
        org.joda.time.DurationField durationField35 = chronology32.centuries();
        org.joda.time.Chronology chronology36 = chronology32.withUTC();
        org.joda.time.DateTimeField dateTimeField37 = chronology32.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField38 = chronology32.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField41 = new org.joda.time.field.OffsetDateTimeField(dateTimeField38, dateTimeFieldType39, (int) (short) 1);
        long long43 = offsetDateTimeField41.roundHalfCeiling(29227899L);
        long long45 = offsetDateTimeField41.roundCeiling((long) 1);
        int int46 = offsetDateTimeField41.getMaximumValue();
        int int47 = offsetDateTimeField41.getMinimumValue();
        int int49 = offsetDateTimeField41.getLeapAmount((-1454470839259L));
        boolean boolean51 = offsetDateTimeField41.isLeap(1701289160730L);
        long long53 = offsetDateTimeField41.roundHalfFloor((-476134718900L));
        boolean boolean54 = interval29.equals((java.lang.Object) (-476134718900L));
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(readableInterval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(iSOChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology16);
        org.junit.Assert.assertNotNull(readableInterval19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(readableInterval31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
// flaky:         org.junit.Assert.assertTrue("'" + long43 + "' != '" + 28799991L + "'", long43 == 28799991L);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 3599991L + "'", long45 == 3599991L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 24 + "'", int46 == 24);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-476136000009L) + "'", long53 == (-476136000009L));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2370");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = zonedChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField6 = zonedChronology4.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = zonedChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField8 = zonedChronology4.dayOfWeek();
        org.joda.time.DurationField durationField9 = dateTimeField8.getRangeDurationField();
        org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField11 = iSOChronology10.minutes();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str13 = dateTimeZone12.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology14 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology10, dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone15 = zonedChronology14.getZone();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology14.monthOfYear();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField18 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long21 = durationField18.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long23 = durationField18.getValueAsLong((long) 10);
        int int25 = durationField18.getValue((long) (byte) 10);
        boolean boolean26 = partial17.equals((java.lang.Object) durationField18);
        org.joda.time.Chronology chronology27 = partial17.getChronology();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        boolean boolean29 = partial17.isBefore((org.joda.time.ReadablePartial) partial28);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray30 = partial17.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval31 = null;
        org.joda.time.ReadableInterval readableInterval32 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval31);
        long long33 = readableInterval32.getStartMillis();
        org.joda.time.ReadableInterval readableInterval34 = null;
        org.joda.time.ReadableInterval readableInterval35 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval34);
        org.joda.time.ReadableInterval readableInterval36 = null;
        boolean boolean37 = readableInterval35.contains(readableInterval36);
        org.joda.time.Duration duration38 = readableInterval35.toDuration();
        org.joda.time.DateTime dateTime39 = readableInterval35.getEnd();
        boolean boolean40 = readableInterval32.contains((org.joda.time.ReadableInstant) dateTime39);
        boolean boolean41 = partial17.isMatch((org.joda.time.ReadableInstant) dateTime39);
        int[] intArray43 = zonedChronology14.get((org.joda.time.ReadablePartial) partial17, 60035L);
        int[] intArray44 = partial17.getValues();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.IllegalFieldValueException illegalFieldValueException49 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType45, (java.lang.Number) (-476134747163L), (java.lang.Number) 166726225165018L, (java.lang.Number) (-46185073064226L));
        boolean boolean50 = partial17.isSupported(dateTimeFieldType45);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField51 = new org.joda.time.field.ZeroIsMaxDateTimeField(dateTimeField8, dateTimeFieldType45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrapped field's minumum value must be zero");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(iSOChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 10L + "'", long23 == 10L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray30);
        org.junit.Assert.assertNotNull(readableInterval32);
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1701289624630L + "'", long33 == 1701289624630L);
        org.junit.Assert.assertNotNull(readableInterval35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2668");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = zonedChronology4.getZone();
        boolean boolean7 = zonedChronology4.equals((java.lang.Object) 4L);
        org.joda.time.DateTimeField dateTimeField8 = zonedChronology4.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField9 = zonedChronology4.yearOfEra();
        org.joda.time.DateTimeField dateTimeField10 = zonedChronology4.weekyear();
        org.joda.time.DurationField durationField11 = zonedChronology4.weeks();
        org.joda.time.DateTimeField dateTimeField12 = zonedChronology4.dayOfWeek();
        long long16 = zonedChronology4.add(60000L, 31380171L, (int) (short) 10);
        java.lang.Object obj17 = null;
        boolean boolean18 = zonedChronology4.equals(obj17);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology4.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology4.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone21 = zonedChronology4.getZone();
        org.joda.time.chrono.ISOChronology iSOChronology22 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField23 = iSOChronology22.minutes();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology22.millisOfDay();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology22.halfdayOfDay();
        org.joda.time.DurationField durationField26 = iSOChronology22.seconds();
        org.joda.time.DurationField durationField27 = iSOChronology22.days();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology22.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval29 = null;
        org.joda.time.ReadableInterval readableInterval30 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval29);
        org.joda.time.ReadableInterval readableInterval31 = null;
        boolean boolean32 = readableInterval30.contains(readableInterval31);
        org.joda.time.ReadableInterval readableInterval33 = null;
        boolean boolean34 = readableInterval30.isBefore(readableInterval33);
        org.joda.time.DateTime dateTime35 = readableInterval30.getEnd();
        org.joda.time.MutableInterval mutableInterval36 = readableInterval30.toMutableInterval();
        org.joda.time.ReadableInterval readableInterval37 = null;
        org.joda.time.ReadableInterval readableInterval38 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval37);
        org.joda.time.ReadableInterval readableInterval39 = null;
        boolean boolean40 = readableInterval38.contains(readableInterval39);
        org.joda.time.ReadableInterval readableInterval41 = null;
        org.joda.time.ReadableInterval readableInterval42 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval41);
        org.joda.time.ReadableInterval readableInterval43 = null;
        boolean boolean44 = readableInterval42.contains(readableInterval43);
        org.joda.time.ReadableInterval readableInterval45 = null;
        boolean boolean46 = readableInterval42.isBefore(readableInterval45);
        org.joda.time.Interval interval47 = readableInterval42.toInterval();
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.PeriodType periodType49 = org.joda.time.DateTimeUtils.getPeriodType(periodType48);
        org.joda.time.PeriodType periodType50 = org.joda.time.DateTimeUtils.getPeriodType(periodType48);
        org.joda.time.Period period51 = readableInterval42.toPeriod(periodType50);
        org.joda.time.Period period52 = readableInterval38.toPeriod(periodType50);
        org.joda.time.Period period53 = mutableInterval36.toPeriod(periodType50);
        long long56 = iSOChronology22.add((org.joda.time.ReadablePeriod) period53, 0L, 278753760);
        long long59 = zonedChronology4.add((org.joda.time.ReadablePeriod) period53, 114669905168435L, 0);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 313861710L + "'", long16 == 313861710L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(iSOChronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(readableInterval30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(mutableInterval36);
        org.junit.Assert.assertNotNull(readableInterval38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(readableInterval42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 114669905168435L + "'", long59 == 114669905168435L);
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1843");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DurationField durationField2 = iSOChronology0.months();
        long long7 = iSOChronology0.getDateTimeMillis(1, 1, (int) (byte) 1, (int) (short) 100);
        org.joda.time.DurationField durationField8 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField10 = iSOChronology9.minutes();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology9.millisOfDay();
        org.joda.time.ReadableInterval readableInterval12 = null;
        org.joda.time.ReadableInterval readableInterval13 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval12);
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        org.joda.time.DurationField durationField16 = chronology14.millis();
        org.joda.time.DurationField durationField17 = chronology14.centuries();
        org.joda.time.ReadableInterval readableInterval18 = null;
        org.joda.time.ReadableInterval readableInterval19 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval18);
        org.joda.time.Chronology chronology20 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval18);
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfCentury();
        org.joda.time.DurationField durationField22 = chronology20.millis();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.Chronology chronology26 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval24);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval29 = null;
        org.joda.time.ReadableInterval readableInterval30 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval29);
        org.joda.time.ReadableInterval readableInterval31 = null;
        boolean boolean32 = readableInterval30.contains(readableInterval31);
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = readableInterval30.toPeriod(periodType33);
        int[] intArray36 = chronology26.get((org.joda.time.ReadablePeriod) period34, (-210866846400000L));
        int[] intArray39 = chronology20.get((org.joda.time.ReadablePeriod) period34, 2173795348453L, (long) 1439);
        int[] intArray42 = chronology14.get((org.joda.time.ReadablePeriod) period34, 291L, 2580171L);
        int[] intArray45 = iSOChronology9.get((org.joda.time.ReadablePeriod) period34, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField46 = iSOChronology9.months();
        java.lang.String str47 = iSOChronology9.toString();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = iSOChronology9.equals((java.lang.Object) partial48);
        long long51 = iSOChronology0.set((org.joda.time.ReadablePartial) partial48, (long) (short) 1);
        org.joda.time.DurationField durationField52 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField53 = iSOChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField54 = iSOChronology0.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField55 = iSOChronology0.weekyearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            long long61 = iSOChronology0.getDateTimeMillis(0L, 1969, 97, 29227999, (-1864065));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1969 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-62135596799900L) + "'", long7 == (-62135596799900L));
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(readableInterval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(readableInterval19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(readableInterval30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ISOChronology[-1]" + "'", str47, "ISOChronology[-1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0908");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField11 = new org.joda.time.field.OffsetDateTimeField(dateTimeField8, dateTimeFieldType9, (int) (short) 1);
        java.lang.String str13 = offsetDateTimeField11.getAsText((long) 1);
        long long15 = offsetDateTimeField11.roundHalfFloor((-210858120000000L));
        java.lang.String str17 = offsetDateTimeField11.getAsShortText((-211210128000000L));
        org.joda.time.chrono.ISOChronology iSOChronology18 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField19 = iSOChronology18.minutes();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str21 = dateTimeZone20.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology22 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology18, dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone23 = zonedChronology22.getZone();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology22.monthOfYear();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField26 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long29 = durationField26.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long31 = durationField26.getValueAsLong((long) 10);
        int int33 = durationField26.getValue((long) (byte) 10);
        boolean boolean34 = partial25.equals((java.lang.Object) durationField26);
        org.joda.time.Chronology chronology35 = partial25.getChronology();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        boolean boolean37 = partial25.isBefore((org.joda.time.ReadablePartial) partial36);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray38 = partial25.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval39 = null;
        org.joda.time.ReadableInterval readableInterval40 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval39);
        long long41 = readableInterval40.getStartMillis();
        org.joda.time.ReadableInterval readableInterval42 = null;
        org.joda.time.ReadableInterval readableInterval43 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval42);
        org.joda.time.ReadableInterval readableInterval44 = null;
        boolean boolean45 = readableInterval43.contains(readableInterval44);
        org.joda.time.Duration duration46 = readableInterval43.toDuration();
        org.joda.time.DateTime dateTime47 = readableInterval43.getEnd();
        boolean boolean48 = readableInterval40.contains((org.joda.time.ReadableInstant) dateTime47);
        boolean boolean49 = partial25.isMatch((org.joda.time.ReadableInstant) dateTime47);
        int[] intArray51 = zonedChronology22.get((org.joda.time.ReadablePartial) partial25, 60035L);
        int[] intArray52 = partial25.getValues();
        java.util.Locale locale53 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str54 = offsetDateTimeField11.getAsText((org.joda.time.ReadablePartial) partial25, locale53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'millisOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-210858120000000L) + "'", long15 == (-210858120000000L));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "9" + "'", str17, "9");
        org.junit.Assert.assertNotNull(iSOChronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 10L + "'", long31 == 10L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray38);
        org.junit.Assert.assertNotNull(readableInterval40);
// flaky:         org.junit.Assert.assertTrue("'" + long41 + "' != '" + 31536000000L + "'", long41 == 31536000000L);
        org.junit.Assert.assertNotNull(readableInterval43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0818");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add((-31L), (long) '#');
        org.joda.time.DurationField durationField10 = unsupportedDateTimeField6.getLeapDurationField();
        int int13 = unsupportedDateTimeField6.getDifference((long) (byte) 10, 10L);
        long long16 = unsupportedDateTimeField6.add(3600000L, 9);
        long long19 = unsupportedDateTimeField6.add(24L, 29227899);
        long long22 = unsupportedDateTimeField6.add(1701289172400L, 53);
        org.joda.time.DurationField durationField23 = unsupportedDateTimeField6.getRangeDurationField();
        org.joda.time.ReadablePartial readablePartial24 = null;
        org.joda.time.chrono.ISOChronology iSOChronology26 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField27 = iSOChronology26.minutes();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str29 = dateTimeZone28.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology30 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology26, dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone31 = zonedChronology30.getZone();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology30.monthOfYear();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField34 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long37 = durationField34.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long39 = durationField34.getValueAsLong((long) 10);
        int int41 = durationField34.getValue((long) (byte) 10);
        boolean boolean42 = partial33.equals((java.lang.Object) durationField34);
        org.joda.time.Chronology chronology43 = partial33.getChronology();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        boolean boolean45 = partial33.isBefore((org.joda.time.ReadablePartial) partial44);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray46 = partial33.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval47 = null;
        org.joda.time.ReadableInterval readableInterval48 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval47);
        long long49 = readableInterval48.getStartMillis();
        org.joda.time.ReadableInterval readableInterval50 = null;
        org.joda.time.ReadableInterval readableInterval51 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval50);
        org.joda.time.ReadableInterval readableInterval52 = null;
        boolean boolean53 = readableInterval51.contains(readableInterval52);
        org.joda.time.Duration duration54 = readableInterval51.toDuration();
        org.joda.time.DateTime dateTime55 = readableInterval51.getEnd();
        boolean boolean56 = readableInterval48.contains((org.joda.time.ReadableInstant) dateTime55);
        boolean boolean57 = partial33.isMatch((org.joda.time.ReadableInstant) dateTime55);
        int[] intArray59 = zonedChronology30.get((org.joda.time.ReadablePartial) partial33, 60035L);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray61 = unsupportedDateTimeField6.addWrapPartial(readablePartial24, (int) (short) -1, intArray59, 6691);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 3600009L + "'", long16 == 3600009L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 29227923L + "'", long19 == 29227923L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1701289172453L + "'", long22 == 1701289172453L);
        org.junit.Assert.assertNull(durationField23);
        org.junit.Assert.assertNotNull(iSOChronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "UTC" + "'", str29, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L + "'", long37 == 1L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 10L + "'", long39 == 10L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray46);
        org.junit.Assert.assertNotNull(readableInterval48);
// flaky:         org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1701260530706L + "'", long49 == 1701260530706L);
        org.junit.Assert.assertNotNull(readableInterval51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2552");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = zonedChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField6 = zonedChronology4.monthOfYear();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField8 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long11 = durationField8.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long13 = durationField8.getValueAsLong((long) 10);
        int int15 = durationField8.getValue((long) (byte) 10);
        boolean boolean16 = partial7.equals((java.lang.Object) durationField8);
        org.joda.time.Chronology chronology17 = partial7.getChronology();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial7.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial7.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.ReadableInterval readableInterval22 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval21);
        long long23 = readableInterval22.getStartMillis();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.ReadableInterval readableInterval26 = null;
        boolean boolean27 = readableInterval25.contains(readableInterval26);
        org.joda.time.Duration duration28 = readableInterval25.toDuration();
        org.joda.time.DateTime dateTime29 = readableInterval25.getEnd();
        boolean boolean30 = readableInterval22.contains((org.joda.time.ReadableInstant) dateTime29);
        boolean boolean31 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime29);
        int[] intArray33 = zonedChronology4.get((org.joda.time.ReadablePartial) partial7, 60035L);
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology4.secondOfMinute();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone39 = new org.joda.time.tz.FixedDateTimeZone("UTC", "", 0, 4);
        java.util.TimeZone timeZone40 = fixedDateTimeZone39.toTimeZone();
        java.lang.String str42 = fixedDateTimeZone39.getName(97L);
        int int44 = fixedDateTimeZone39.getOffsetFromLocal((-210858120000000L));
        long long46 = fixedDateTimeZone39.nextTransition(0L);
        int int48 = fixedDateTimeZone39.getOffset(2580171L);
        org.joda.time.chrono.ZonedChronology zonedChronology49 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) zonedChronology4, (org.joda.time.DateTimeZone) fixedDateTimeZone39);
        long long51 = fixedDateTimeZone39.convertUTCToLocal(0L);
        org.joda.time.chrono.ISOChronology iSOChronology52 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField53 = iSOChronology52.minutes();
        org.joda.time.DateTimeField dateTimeField54 = iSOChronology52.millisOfDay();
        org.joda.time.DateTimeField dateTimeField55 = iSOChronology52.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField56 = iSOChronology52.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone57 = iSOChronology52.getZone();
        boolean boolean58 = fixedDateTimeZone39.equals((java.lang.Object) iSOChronology52);
        org.joda.time.DateTimeField dateTimeField59 = iSOChronology52.weekyearOfCentury();
        org.joda.time.DurationField durationField60 = iSOChronology52.weeks();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(readableInterval22);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-210861660779418L) + "'", long23 == (-210861660779418L));
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00" + "'", str42, "+00:00");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(zonedChronology49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(iSOChronology52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(durationField60);
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2137");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        java.lang.String str11 = partial0.toString();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField13 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long16 = durationField13.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long18 = durationField13.getValueAsLong((long) 10);
        int int20 = durationField13.getValue((long) (byte) 10);
        boolean boolean21 = partial12.equals((java.lang.Object) durationField13);
        org.joda.time.Chronology chronology22 = partial12.getChronology();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        boolean boolean24 = partial12.isBefore((org.joda.time.ReadablePartial) partial23);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = partial12.getFieldTypes();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField27 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long30 = durationField27.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long32 = durationField27.getValueAsLong((long) 10);
        int int34 = durationField27.getValue((long) (byte) 10);
        boolean boolean35 = partial26.equals((java.lang.Object) durationField27);
        boolean boolean36 = partial12.equals((java.lang.Object) durationField27);
        int int37 = partial0.compareTo((org.joda.time.ReadablePartial) partial12);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray38 = partial12.getFieldTypes();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField40 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long43 = durationField40.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long45 = durationField40.getValueAsLong((long) 10);
        int int47 = durationField40.getValue((long) (byte) 10);
        boolean boolean48 = partial39.equals((java.lang.Object) durationField40);
        org.joda.time.Chronology chronology49 = partial39.getChronology();
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        boolean boolean51 = partial39.isBefore((org.joda.time.ReadablePartial) partial50);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray52 = partial39.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval53 = null;
        org.joda.time.ReadableInterval readableInterval54 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval53);
        org.joda.time.ReadableInterval readableInterval55 = null;
        boolean boolean56 = readableInterval54.contains(readableInterval55);
        org.joda.time.ReadableInterval readableInterval57 = null;
        boolean boolean58 = readableInterval54.isBefore(readableInterval57);
        org.joda.time.DateTime dateTime59 = readableInterval54.getEnd();
        boolean boolean60 = partial39.isMatch((org.joda.time.ReadableInstant) dateTime59);
        int[] intArray61 = partial39.getValues();
        org.joda.time.Partial partial62 = new org.joda.time.Partial(dateTimeFieldTypeArray38, intArray61);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray63 = partial62.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray64 = partial62.getFieldTypes();
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10L + "'", long18 == 10L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10L + "'", long32 == 10L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray38);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 10L + "'", long45 == 10L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray52);
        org.junit.Assert.assertNotNull(readableInterval54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray63);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray64);
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0183");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        boolean boolean5 = durationFieldType0.isSupported(chronology3);
        org.joda.time.DurationField durationField6 = chronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.weekyearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField12 = new org.joda.time.field.OffsetDateTimeField(dateTimeField7, dateTimeFieldType8, 4, (int) ' ', (int) (short) -1);
        long long14 = offsetDateTimeField12.roundCeiling(2102400001L);
        int int15 = offsetDateTimeField12.getMinimumValue();
        boolean boolean17 = offsetDateTimeField12.isLeap(28800000L);
        long long19 = offsetDateTimeField12.roundFloor(2750411623L);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField21 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long24 = durationField21.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long26 = durationField21.getValueAsLong((long) 10);
        int int28 = durationField21.getValue((long) (byte) 10);
        boolean boolean29 = partial20.equals((java.lang.Object) durationField21);
        org.joda.time.ReadableInterval readableInterval30 = null;
        org.joda.time.ReadableInterval readableInterval31 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval30);
        org.joda.time.ReadableInterval readableInterval32 = null;
        boolean boolean33 = readableInterval31.contains(readableInterval32);
        org.joda.time.ReadableInterval readableInterval34 = null;
        boolean boolean35 = readableInterval31.isBefore(readableInterval34);
        org.joda.time.Interval interval36 = readableInterval31.toInterval();
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.PeriodType periodType38 = org.joda.time.DateTimeUtils.getPeriodType(periodType37);
        org.joda.time.PeriodType periodType39 = org.joda.time.DateTimeUtils.getPeriodType(periodType37);
        org.joda.time.Period period40 = readableInterval31.toPeriod(periodType39);
        org.joda.time.Partial partial41 = partial20.plus((org.joda.time.ReadablePeriod) period40);
        boolean boolean42 = org.joda.time.DateTimeUtils.isContiguous((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField44 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long47 = durationField44.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long49 = durationField44.getValueAsLong((long) 10);
        int int51 = durationField44.getValue((long) (byte) 10);
        boolean boolean52 = partial43.equals((java.lang.Object) durationField44);
        org.joda.time.Chronology chronology53 = partial43.getChronology();
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        boolean boolean55 = partial43.isBefore((org.joda.time.ReadablePartial) partial54);
        java.lang.String str56 = partial43.toString();
        boolean boolean57 = partial20.isBefore((org.joda.time.ReadablePartial) partial43);
        java.util.Locale locale59 = null;
        java.lang.String str60 = offsetDateTimeField12.getAsShortText((org.joda.time.ReadablePartial) partial20, 28354819, locale59);
        // The following exception was thrown during execution in test generation
        try {
            long long63 = offsetDateTimeField12.addWrapField(0L, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MIN > MAX");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 31564800000L + "'", long14 == 31564800000L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 32 + "'", int15 == 32);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 28800000L + "'", long19 == 28800000L);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10L + "'", long26 == 10L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(readableInterval31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 10L + "'", long49 == 10L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[]" + "'", str56, "[]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "28354819" + "'", str60, "28354819");
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0983");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.halfdayOfDay();
        org.joda.time.DurationField durationField4 = iSOChronology0.seconds();
        org.joda.time.DurationField durationField5 = iSOChronology0.days();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.yearOfCentury();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField8 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long11 = durationField8.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long13 = durationField8.getValueAsLong((long) 10);
        int int15 = durationField8.getValue((long) (byte) 10);
        boolean boolean16 = partial7.equals((java.lang.Object) durationField8);
        org.joda.time.Chronology chronology17 = partial7.getChronology();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial7.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial7.getFieldTypes();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField22 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long25 = durationField22.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long27 = durationField22.getValueAsLong((long) 10);
        int int29 = durationField22.getValue((long) (byte) 10);
        boolean boolean30 = partial21.equals((java.lang.Object) durationField22);
        boolean boolean31 = partial7.equals((java.lang.Object) durationField22);
        org.joda.time.ReadableInterval readableInterval32 = null;
        org.joda.time.ReadableInterval readableInterval33 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval32);
        org.joda.time.ReadableInterval readableInterval34 = null;
        boolean boolean35 = readableInterval33.contains(readableInterval34);
        org.joda.time.Duration duration36 = readableInterval33.toDuration();
        org.joda.time.ReadableInterval readableInterval37 = null;
        org.joda.time.ReadableInterval readableInterval38 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval37);
        org.joda.time.ReadableInterval readableInterval39 = null;
        boolean boolean40 = readableInterval38.contains(readableInterval39);
        org.joda.time.Duration duration41 = readableInterval38.toDuration();
        org.joda.time.DateTime dateTime42 = readableInterval38.getEnd();
        boolean boolean43 = readableInterval33.isBefore((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime44 = partial7.toDateTime((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField46 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long49 = durationField46.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long51 = durationField46.getValueAsLong((long) 10);
        int int53 = durationField46.getValue((long) (byte) 10);
        boolean boolean54 = partial45.equals((java.lang.Object) durationField46);
        org.joda.time.Chronology chronology55 = partial45.getChronology();
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        boolean boolean57 = partial45.isBefore((org.joda.time.ReadablePartial) partial56);
        boolean boolean58 = partial7.isBefore((org.joda.time.ReadablePartial) partial56);
        int[] intArray59 = null;
        iSOChronology0.validate((org.joda.time.ReadablePartial) partial7, intArray59);
        org.joda.time.DateTimeField dateTimeField61 = iSOChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField62 = iSOChronology0.halfdayOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(readableInterval33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(readableInterval38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10L + "'", long51 == 10L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2227");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.halfdayOfDay();
        org.joda.time.DurationField durationField4 = iSOChronology0.seconds();
        org.joda.time.DurationField durationField5 = iSOChronology0.days();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.yearOfCentury();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField8 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long11 = durationField8.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long13 = durationField8.getValueAsLong((long) 10);
        int int15 = durationField8.getValue((long) (byte) 10);
        boolean boolean16 = partial7.equals((java.lang.Object) durationField8);
        org.joda.time.Chronology chronology17 = partial7.getChronology();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial7.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial7.getFieldTypes();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField22 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long25 = durationField22.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long27 = durationField22.getValueAsLong((long) 10);
        int int29 = durationField22.getValue((long) (byte) 10);
        boolean boolean30 = partial21.equals((java.lang.Object) durationField22);
        boolean boolean31 = partial7.equals((java.lang.Object) durationField22);
        org.joda.time.ReadableInterval readableInterval32 = null;
        org.joda.time.ReadableInterval readableInterval33 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval32);
        org.joda.time.ReadableInterval readableInterval34 = null;
        boolean boolean35 = readableInterval33.contains(readableInterval34);
        org.joda.time.Duration duration36 = readableInterval33.toDuration();
        org.joda.time.ReadableInterval readableInterval37 = null;
        org.joda.time.ReadableInterval readableInterval38 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval37);
        org.joda.time.ReadableInterval readableInterval39 = null;
        boolean boolean40 = readableInterval38.contains(readableInterval39);
        org.joda.time.Duration duration41 = readableInterval38.toDuration();
        org.joda.time.DateTime dateTime42 = readableInterval38.getEnd();
        boolean boolean43 = readableInterval33.isBefore((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime44 = partial7.toDateTime((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField46 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long49 = durationField46.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long51 = durationField46.getValueAsLong((long) 10);
        int int53 = durationField46.getValue((long) (byte) 10);
        boolean boolean54 = partial45.equals((java.lang.Object) durationField46);
        org.joda.time.Chronology chronology55 = partial45.getChronology();
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        boolean boolean57 = partial45.isBefore((org.joda.time.ReadablePartial) partial56);
        boolean boolean58 = partial7.isBefore((org.joda.time.ReadablePartial) partial56);
        int[] intArray59 = null;
        iSOChronology0.validate((org.joda.time.ReadablePartial) partial7, intArray59);
        org.joda.time.DurationField durationField61 = iSOChronology0.days();
        org.joda.time.DurationField durationField62 = iSOChronology0.centuries();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(readableInterval33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(readableInterval38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10L + "'", long51 == 10L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(durationField62);
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0240");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval2 = null;
        org.joda.time.ReadableInterval readableInterval3 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval2);
        org.joda.time.Chronology chronology4 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval2);
        org.joda.time.DateTimeField dateTimeField5 = chronology4.yearOfCentury();
        org.joda.time.DurationField durationField6 = chronology4.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField7 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType1, durationField6);
        long long10 = durationField6.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval12 = null;
        org.joda.time.ReadableInterval readableInterval13 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval12);
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        boolean boolean16 = durationFieldType11.isSupported(chronology14);
        org.joda.time.field.ScaledDurationField scaledDurationField18 = new org.joda.time.field.ScaledDurationField(durationField6, durationFieldType11, (int) 'a');
        org.joda.time.DurationField durationField19 = scaledDurationField18.getWrappedField();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.ReadableInterval readableInterval22 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval21);
        org.joda.time.Chronology chronology23 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval21);
        org.joda.time.DateTimeField dateTimeField24 = chronology23.yearOfCentury();
        org.joda.time.DurationField durationField25 = chronology23.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField26 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType20, durationField25);
        long long29 = durationField25.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval31 = null;
        org.joda.time.ReadableInterval readableInterval32 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval31);
        org.joda.time.Chronology chronology33 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval31);
        org.joda.time.DateTimeField dateTimeField34 = chronology33.yearOfCentury();
        boolean boolean35 = durationFieldType30.isSupported(chronology33);
        org.joda.time.field.ScaledDurationField scaledDurationField37 = new org.joda.time.field.ScaledDurationField(durationField25, durationFieldType30, (int) 'a');
        int int39 = scaledDurationField37.getValue((long) (short) -1);
        java.lang.String str40 = scaledDurationField37.getName();
        long long42 = scaledDurationField37.getMillis((long) (byte) 10);
        long long44 = scaledDurationField37.getValueAsLong((-30610224000000L));
        long long47 = scaledDurationField37.add((long) 0, (int) (byte) 10);
        long long50 = scaledDurationField37.getMillis(551134L, (-210861660779418L));
        java.lang.String str51 = scaledDurationField37.getName();
        long long52 = scaledDurationField37.getUnitMillis();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.field.PreciseDateTimeField preciseDateTimeField53 = new org.joda.time.field.PreciseDateTimeField(dateTimeFieldType0, (org.joda.time.DurationField) scaledDurationField18, (org.joda.time.DurationField) scaledDurationField37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The effective range must be at least 2");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(readableInterval3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-210866846400000L) + "'", long10 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(readableInterval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(readableInterval22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-210866846400000L) + "'", long29 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertNotNull(readableInterval32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hours" + "'", str40, "hours");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 970L + "'", long42 == 970L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-315569319587L) + "'", long44 == (-315569319587L));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 970L + "'", long47 == 970L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 53459998L + "'", long50 == 53459998L);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hours" + "'", str51, "hours");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 97L + "'", long52 == 97L);
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0104");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        java.lang.String str13 = partial0.toString();
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField15 = iSOChronology14.minutes();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str17 = dateTimeZone16.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology18 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology14, dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone19 = zonedChronology18.getZone();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology18.monthOfYear();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField22 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long25 = durationField22.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long27 = durationField22.getValueAsLong((long) 10);
        int int29 = durationField22.getValue((long) (byte) 10);
        boolean boolean30 = partial21.equals((java.lang.Object) durationField22);
        org.joda.time.Chronology chronology31 = partial21.getChronology();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        boolean boolean33 = partial21.isBefore((org.joda.time.ReadablePartial) partial32);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray34 = partial21.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval35 = null;
        org.joda.time.ReadableInterval readableInterval36 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval35);
        long long37 = readableInterval36.getStartMillis();
        org.joda.time.ReadableInterval readableInterval38 = null;
        org.joda.time.ReadableInterval readableInterval39 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval38);
        org.joda.time.ReadableInterval readableInterval40 = null;
        boolean boolean41 = readableInterval39.contains(readableInterval40);
        org.joda.time.Duration duration42 = readableInterval39.toDuration();
        org.joda.time.DateTime dateTime43 = readableInterval39.getEnd();
        boolean boolean44 = readableInterval36.contains((org.joda.time.ReadableInstant) dateTime43);
        boolean boolean45 = partial21.isMatch((org.joda.time.ReadableInstant) dateTime43);
        int[] intArray47 = zonedChronology18.get((org.joda.time.ReadablePartial) partial21, 60035L);
        boolean boolean48 = partial0.isMatch((org.joda.time.ReadablePartial) partial21);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType50 = dateTimeFieldType49.getDurationType();
        boolean boolean51 = partial0.isSupported(dateTimeFieldType49);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial54 = partial0.with(dateTimeFieldType52, 28354759);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 28354759 for halfdayOfDay must not be larger than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray34);
        org.junit.Assert.assertNotNull(readableInterval36);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1701289178232L + "'", long37 == 1701289178232L);
        org.junit.Assert.assertNotNull(readableInterval39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1407");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.ReadableInterval readableInterval11 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval10);
        org.joda.time.ReadableInterval readableInterval12 = null;
        boolean boolean13 = readableInterval11.contains(readableInterval12);
        org.joda.time.ReadableInterval readableInterval14 = null;
        boolean boolean15 = readableInterval11.isBefore(readableInterval14);
        org.joda.time.Interval interval16 = readableInterval11.toInterval();
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.PeriodType periodType18 = org.joda.time.DateTimeUtils.getPeriodType(periodType17);
        org.joda.time.PeriodType periodType19 = org.joda.time.DateTimeUtils.getPeriodType(periodType17);
        org.joda.time.Period period20 = readableInterval11.toPeriod(periodType19);
        org.joda.time.Partial partial21 = partial0.plus((org.joda.time.ReadablePeriod) period20);
        java.lang.String str22 = partial21.toStringList();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField24 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long27 = durationField24.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long29 = durationField24.getValueAsLong((long) 10);
        int int31 = durationField24.getValue((long) (byte) 10);
        boolean boolean32 = partial23.equals((java.lang.Object) durationField24);
        org.joda.time.Chronology chronology33 = partial23.getChronology();
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        boolean boolean35 = partial23.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray36 = partial23.getFieldTypes();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField38 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long41 = durationField38.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long43 = durationField38.getValueAsLong((long) 10);
        int int45 = durationField38.getValue((long) (byte) 10);
        boolean boolean46 = partial37.equals((java.lang.Object) durationField38);
        org.joda.time.Chronology chronology47 = partial37.getChronology();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = partial37.isBefore((org.joda.time.ReadablePartial) partial48);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray50 = partial37.getFieldTypes();
        boolean boolean52 = partial37.equals((java.lang.Object) 1702281558665L);
        int int53 = partial23.compareTo((org.joda.time.ReadablePartial) partial37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = partial23.getFormatter();
        boolean boolean55 = partial21.isMatch((org.joda.time.ReadablePartial) partial23);
        org.joda.time.DurationFieldType durationFieldType56 = org.joda.time.DurationFieldType.hours();
        java.lang.String str57 = durationFieldType56.toString();
        org.joda.time.IllegalFieldValueException illegalFieldValueException59 = new org.joda.time.IllegalFieldValueException(durationFieldType56, "1954-11-29T20:21:02.747-08:00/1954-11-29T20:21:02.747-08:00");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial61 = partial23.withFieldAdded(durationFieldType56, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'hours' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(readableInterval11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10L + "'", long29 == 10L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray36);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 10L + "'", long43 == 10L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNull(dateTimeFormatter54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hours" + "'", str57, "hours");
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0538");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.halfdayOfDay();
        org.joda.time.DurationField durationField4 = iSOChronology0.seconds();
        org.joda.time.Chronology chronology5 = iSOChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.weekOfWeekyear();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField8 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long11 = durationField8.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long13 = durationField8.getValueAsLong((long) 10);
        int int15 = durationField8.getValue((long) (byte) 10);
        boolean boolean16 = partial7.equals((java.lang.Object) durationField8);
        org.joda.time.Chronology chronology17 = partial7.getChronology();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial7.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial7.getFieldTypes();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField22 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long25 = durationField22.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long27 = durationField22.getValueAsLong((long) 10);
        int int29 = durationField22.getValue((long) (byte) 10);
        boolean boolean30 = partial21.equals((java.lang.Object) durationField22);
        boolean boolean31 = partial7.equals((java.lang.Object) durationField22);
        org.joda.time.ReadableInterval readableInterval32 = null;
        org.joda.time.ReadableInterval readableInterval33 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval32);
        org.joda.time.ReadableInterval readableInterval34 = null;
        boolean boolean35 = readableInterval33.contains(readableInterval34);
        org.joda.time.Duration duration36 = readableInterval33.toDuration();
        org.joda.time.ReadableInterval readableInterval37 = null;
        org.joda.time.ReadableInterval readableInterval38 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval37);
        org.joda.time.ReadableInterval readableInterval39 = null;
        boolean boolean40 = readableInterval38.contains(readableInterval39);
        org.joda.time.Duration duration41 = readableInterval38.toDuration();
        org.joda.time.DateTime dateTime42 = readableInterval38.getEnd();
        boolean boolean43 = readableInterval33.isBefore((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime44 = partial7.toDateTime((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField46 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long49 = durationField46.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long51 = durationField46.getValueAsLong((long) 10);
        int int53 = durationField46.getValue((long) (byte) 10);
        boolean boolean54 = partial45.equals((java.lang.Object) durationField46);
        org.joda.time.Chronology chronology55 = partial45.getChronology();
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        boolean boolean57 = partial45.isBefore((org.joda.time.ReadablePartial) partial56);
        boolean boolean58 = partial7.isBefore((org.joda.time.ReadablePartial) partial56);
        int[] intArray60 = iSOChronology0.get((org.joda.time.ReadablePartial) partial56, 31507200003L);
        org.joda.time.DateTimeField dateTimeField61 = iSOChronology0.era();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(readableInterval33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(readableInterval38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10L + "'", long51 == 10L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(dateTimeField61);
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2891");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.minutes();
        org.joda.time.DurationField durationField5 = chronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.year();
        long long8 = dateTimeField6.roundHalfCeiling(2750411L);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField10 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long13 = durationField10.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long15 = durationField10.getValueAsLong((long) 10);
        int int17 = durationField10.getValue((long) (byte) 10);
        boolean boolean18 = partial9.equals((java.lang.Object) durationField10);
        org.joda.time.Chronology chronology19 = partial9.getChronology();
        java.lang.String str20 = partial9.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray21 = partial9.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        boolean boolean23 = partial9.isSupported(dateTimeFieldType22);
        org.joda.time.chrono.ISOChronology iSOChronology24 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField25 = iSOChronology24.minutes();
        org.joda.time.DurationField durationField26 = iSOChronology24.months();
        org.joda.time.DurationField durationField27 = iSOChronology24.years();
        org.joda.time.DateTimeZone dateTimeZone28 = iSOChronology24.getZone();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str30 = dateTimeZone29.toString();
        java.lang.String str32 = dateTimeZone29.getShortName((-210866846400000L));
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeUtils.getZone(dateTimeZone29);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone34 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone33);
        org.joda.time.Chronology chronology35 = iSOChronology24.withZone((org.joda.time.DateTimeZone) cachedDateTimeZone34);
        org.joda.time.DateTimeField dateTimeField36 = iSOChronology24.centuryOfEra();
        org.joda.time.Partial partial37 = new org.joda.time.Partial((org.joda.time.Chronology) iSOChronology24);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType39 = dateTimeFieldType38.getRangeDurationType();
        org.joda.time.Chronology chronology40 = null;
        boolean boolean41 = dateTimeFieldType38.isSupported(chronology40);
        boolean boolean42 = partial37.isSupported(dateTimeFieldType38);
        int int43 = partial9.indexOf(dateTimeFieldType38);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField45 = new org.joda.time.field.DividedDateTimeField(dateTimeField6, dateTimeFieldType38, 11);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone50 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology51 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone50);
        org.joda.time.DateTimeZone dateTimeZone52 = gregorianChronology51.getZone();
        org.joda.time.DateTimeField dateTimeField53 = gregorianChronology51.minuteOfHour();
        boolean boolean55 = gregorianChronology51.equals((java.lang.Object) (-2173831554426L));
        org.joda.time.DurationField durationField56 = gregorianChronology51.hours();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField57 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType38, durationField56);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-9L) + "'", long8 == (-9L));
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(iSOChronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "UTC" + "'", str30, "UTC");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(cachedDateTimeZone34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(gregorianChronology51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField57);
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2807");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        org.joda.time.ReadablePartial readablePartial23 = null;
        java.util.Locale locale25 = null;
        java.lang.String str26 = dividedDateTimeField11.getAsShortText(readablePartial23, (int) ' ', locale25);
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField28 = new org.joda.time.field.OffsetDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField11, 100);
        org.joda.time.ReadableInterval readableInterval29 = null;
        org.joda.time.ReadableInterval readableInterval30 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval29);
        org.joda.time.Chronology chronology31 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval29);
        org.joda.time.DateTimeField dateTimeField32 = chronology31.yearOfCentury();
        org.joda.time.DurationField durationField33 = chronology31.millis();
        org.joda.time.DurationField durationField34 = chronology31.centuries();
        org.joda.time.Chronology chronology35 = chronology31.withUTC();
        org.joda.time.DurationField durationField36 = chronology35.halfdays();
        org.joda.time.DateTimeField dateTimeField37 = chronology35.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField40 = new org.joda.time.field.DividedDateTimeField(dateTimeField37, dateTimeFieldType38, 10);
        long long43 = dividedDateTimeField40.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval45 = null;
        org.joda.time.ReadableInterval readableInterval46 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval45);
        org.joda.time.Chronology chronology47 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval45);
        org.joda.time.DateTimeField dateTimeField48 = chronology47.yearOfCentury();
        org.joda.time.DurationField durationField49 = chronology47.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField50 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType44, durationField49);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField51 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField40, dateTimeFieldType44);
        org.joda.time.DurationFieldType durationFieldType52 = dateTimeFieldType44.getDurationType();
        org.joda.time.DurationFieldType durationFieldType53 = dateTimeFieldType44.getRangeDurationType();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField54 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType44);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(dateTimeFieldType44, (int) (byte) 1, chronology56);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "32" + "'", str26, "32");
        org.junit.Assert.assertNotNull(readableInterval30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-30610224000000L) + "'", long43 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(readableInterval46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField50);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertNotNull(durationFieldType53);
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0239");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        org.joda.time.Partial partial24 = new org.joda.time.Partial(dateTimeFieldType15, 73);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField26 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long29 = durationField26.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long31 = durationField26.getValueAsLong((long) 10);
        int int33 = durationField26.getValue((long) (byte) 10);
        boolean boolean34 = partial25.equals((java.lang.Object) durationField26);
        org.joda.time.Chronology chronology35 = partial25.getChronology();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        boolean boolean37 = partial25.isBefore((org.joda.time.ReadablePartial) partial36);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray38 = partial25.getFieldTypes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = partial25.getFormatter();
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField41 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long44 = durationField41.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long46 = durationField41.getValueAsLong((long) 10);
        int int48 = durationField41.getValue((long) (byte) 10);
        boolean boolean49 = partial40.equals((java.lang.Object) durationField41);
        org.joda.time.Chronology chronology50 = partial40.getChronology();
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        boolean boolean52 = partial40.isBefore((org.joda.time.ReadablePartial) partial51);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray53 = partial40.getFieldTypes();
        boolean boolean55 = partial40.equals((java.lang.Object) 1702281558665L);
        java.lang.String str56 = partial40.toString();
        org.joda.time.Chronology chronology57 = partial40.getChronology();
        int int58 = partial25.compareTo((org.joda.time.ReadablePartial) partial40);
        // The following exception was thrown during execution in test generation
        try {
            int int59 = partial24.compareTo((org.joda.time.ReadablePartial) partial25);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 10L + "'", long31 == 10L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray38);
        org.junit.Assert.assertNull(dateTimeFormatter39);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10L + "'", long46 == 10L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[]" + "'", str56, "[]");
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1488");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.ReadablePartial readablePartial4 = null;
        int int5 = dateTimeField3.getMinimumValue(readablePartial4);
        org.joda.time.ReadablePartial readablePartial6 = null;
        org.joda.time.ReadableInterval readableInterval7 = null;
        org.joda.time.ReadableInterval readableInterval8 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval7);
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval7);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.yearOfCentury();
        org.joda.time.DurationField durationField11 = chronology9.millis();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.clockhourOfDay();
        org.joda.time.ReadablePartial readablePartial14 = null;
        int[] intArray21 = new int[] { '#', (-1), 0, (byte) 1, (short) 1, (byte) 1 };
        int int22 = dateTimeField13.getMaximumValue(readablePartial14, intArray21);
        int int23 = dateTimeField3.getMinimumValue(readablePartial6, intArray21);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField26 = new org.joda.time.field.RemainderDateTimeField(dateTimeField3, dateTimeFieldType24, 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval28 = null;
        org.joda.time.ReadableInterval readableInterval29 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval28);
        org.joda.time.Chronology chronology30 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval28);
        org.joda.time.DateTimeField dateTimeField31 = chronology30.yearOfCentury();
        org.joda.time.DurationField durationField32 = chronology30.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField33 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType27, durationField32);
        long long36 = durationField32.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval38 = null;
        org.joda.time.ReadableInterval readableInterval39 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval38);
        org.joda.time.Chronology chronology40 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval38);
        org.joda.time.DateTimeField dateTimeField41 = chronology40.yearOfCentury();
        boolean boolean42 = durationFieldType37.isSupported(chronology40);
        org.joda.time.field.ScaledDurationField scaledDurationField44 = new org.joda.time.field.ScaledDurationField(durationField32, durationFieldType37, (int) 'a');
        long long45 = scaledDurationField44.getUnitMillis();
        org.joda.time.DurationFieldType durationFieldType46 = scaledDurationField44.getType();
        int int48 = scaledDurationField44.getValue((long) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType50 = dateTimeFieldType49.getDurationType();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField52 = new org.joda.time.field.RemainderDateTimeField((org.joda.time.DateTimeField) remainderDateTimeField26, (org.joda.time.DurationField) scaledDurationField44, dateTimeFieldType49, 53460006);
        org.joda.time.DurationField durationField53 = remainderDateTimeField52.getRangeDurationField();
        int int54 = remainderDateTimeField52.iDivisor;
        long long56 = remainderDateTimeField52.remainder(1701289162108L);
        int int57 = remainderDateTimeField52.getMaximumValue();
        long long59 = remainderDateTimeField52.roundHalfEven(1701260518791L);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(readableInterval8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[35, -1, 0, 1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 24 + "'", int22 == 24);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(readableInterval29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-210866846400000L) + "'", long36 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertNotNull(readableInterval39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 97L + "'", long45 == 97L);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 53460006 + "'", int54 == 53460006);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 28757962108L + "'", long56 == 28757962108L);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 53460005 + "'", int57 == 53460005);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1704067200000L + "'", long59 == 1704067200000L);
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1745");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        boolean boolean5 = durationFieldType0.isSupported(chronology3);
        org.joda.time.DurationField durationField6 = chronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.weekyearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField12 = new org.joda.time.field.OffsetDateTimeField(dateTimeField7, dateTimeFieldType8, 4, (int) ' ', (int) (short) -1);
        long long14 = offsetDateTimeField12.roundCeiling(2102400001L);
        int int15 = offsetDateTimeField12.getMinimumValue();
        boolean boolean17 = offsetDateTimeField12.isLeap(28800000L);
        long long19 = offsetDateTimeField12.roundFloor(2750411623L);
        long long21 = offsetDateTimeField12.roundCeiling(0L);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField23 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long26 = durationField23.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long28 = durationField23.getValueAsLong((long) 10);
        int int30 = durationField23.getValue((long) (byte) 10);
        boolean boolean31 = partial22.equals((java.lang.Object) durationField23);
        org.joda.time.Chronology chronology32 = partial22.getChronology();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        boolean boolean34 = partial22.isBefore((org.joda.time.ReadablePartial) partial33);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray35 = partial22.getFieldTypes();
        boolean boolean37 = partial22.equals((java.lang.Object) 1702281558665L);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType39 = dateTimeFieldType38.getDurationType();
        boolean boolean40 = partial22.isSupported(dateTimeFieldType38);
        org.joda.time.ReadableInterval readableInterval41 = null;
        org.joda.time.ReadableInterval readableInterval42 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval41);
        long long43 = readableInterval42.getStartMillis();
        org.joda.time.ReadableInterval readableInterval44 = null;
        org.joda.time.ReadableInterval readableInterval45 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval44);
        long long46 = readableInterval45.getEndMillis();
        boolean boolean47 = readableInterval42.overlaps(readableInterval45);
        org.joda.time.MutableInterval mutableInterval48 = readableInterval42.toMutableInterval();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        boolean boolean50 = mutableInterval48.equals((java.lang.Object) dateTimeFieldType49);
        long long51 = mutableInterval48.toDurationMillis();
        org.joda.time.Period period52 = mutableInterval48.toPeriod();
        boolean boolean53 = partial22.equals((java.lang.Object) period52);
        java.util.Locale locale54 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str55 = offsetDateTimeField12.getAsText((org.joda.time.ReadablePartial) partial22, locale54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekOfWeekyear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 31536000000L + "'", long14 == 31536000000L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 32 + "'", int15 == 32);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10L + "'", long28 == 10L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(readableInterval42);
// flaky:         org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-476134762239L) + "'", long43 == (-476134762239L));
        org.junit.Assert.assertNotNull(readableInterval45);
// flaky:         org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-476134762239L) + "'", long46 == (-476134762239L));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(mutableInterval48);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2966");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.secondOfDay();
        org.joda.time.ReadableInterval readableInterval2 = null;
        org.joda.time.ReadableInterval readableInterval3 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval2);
        org.joda.time.Chronology chronology4 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval2);
        org.joda.time.DateTimeField dateTimeField5 = chronology4.yearOfCentury();
        org.joda.time.DurationField durationField6 = chronology4.millis();
        org.joda.time.DurationField durationField7 = chronology4.centuries();
        org.joda.time.ReadableInterval readableInterval8 = null;
        org.joda.time.ReadableInterval readableInterval9 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval8);
        org.joda.time.Chronology chronology10 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval8);
        org.joda.time.DateTimeField dateTimeField11 = chronology10.yearOfCentury();
        org.joda.time.DurationField durationField12 = chronology10.millis();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval14 = null;
        org.joda.time.ReadableInterval readableInterval15 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval14);
        org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval14);
        org.joda.time.DateTimeField dateTimeField17 = chronology16.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval19 = null;
        org.joda.time.ReadableInterval readableInterval20 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval19);
        org.joda.time.ReadableInterval readableInterval21 = null;
        boolean boolean22 = readableInterval20.contains(readableInterval21);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = readableInterval20.toPeriod(periodType23);
        int[] intArray26 = chronology16.get((org.joda.time.ReadablePeriod) period24, (-210866846400000L));
        int[] intArray29 = chronology10.get((org.joda.time.ReadablePeriod) period24, 2173795348453L, (long) 1439);
        int[] intArray32 = chronology4.get((org.joda.time.ReadablePeriod) period24, 291L, 2580171L);
        int[] intArray34 = iSOChronology0.get((org.joda.time.ReadablePeriod) period24, 29227899L);
        org.joda.time.DateTimeField dateTimeField35 = iSOChronology0.monthOfYear();
        org.joda.time.DurationField durationField36 = iSOChronology0.hours();
        org.joda.time.DurationField durationField37 = iSOChronology0.years();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField39 = iSOChronology0.era();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str41 = dateTimeZone40.toString();
        java.lang.String str43 = dateTimeZone40.getShortName((-210866846400000L));
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeUtils.getZone(dateTimeZone40);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone45 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone44);
        java.lang.Object obj46 = null;
        boolean boolean47 = cachedDateTimeZone45.equals(obj46);
        long long49 = cachedDateTimeZone45.previousTransition(0L);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeUtils.getZone((org.joda.time.DateTimeZone) cachedDateTimeZone45);
        java.lang.String str52 = cachedDateTimeZone45.getName(53460006L);
        boolean boolean53 = cachedDateTimeZone45.isFixed();
        org.joda.time.Chronology chronology54 = iSOChronology0.withZone((org.joda.time.DateTimeZone) cachedDateTimeZone45);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(readableInterval3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(readableInterval9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(readableInterval15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(readableInterval20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 0, 0, 0, 8, 7, 7, 899]");
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "UTC" + "'", str41, "UTC");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00" + "'", str43, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(cachedDateTimeZone45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+00:00" + "'", str52, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(chronology54);
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3128");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = null;
        boolean boolean3 = readableInterval1.contains(readableInterval2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = readableInterval1.toPeriod(periodType4);
        org.joda.time.DateTime dateTime6 = readableInterval1.getEnd();
        org.joda.time.ReadableInterval readableInterval7 = null;
        org.joda.time.ReadableInterval readableInterval8 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval7);
        org.joda.time.ReadableInterval readableInterval9 = null;
        boolean boolean10 = readableInterval8.contains(readableInterval9);
        org.joda.time.Duration duration11 = readableInterval8.toDuration();
        org.joda.time.DateTime dateTime12 = readableInterval8.getEnd();
        org.joda.time.Period period13 = readableInterval8.toPeriod();
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval8);
        boolean boolean15 = readableInterval1.isAfter(readableInterval8);
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.ReadableInterval readableInterval18 = null;
        boolean boolean19 = readableInterval17.contains(readableInterval18);
        org.joda.time.Duration duration20 = readableInterval17.toDuration();
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.ReadableInterval readableInterval22 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval21);
        org.joda.time.ReadableInterval readableInterval23 = null;
        boolean boolean24 = readableInterval22.contains(readableInterval23);
        org.joda.time.Duration duration25 = readableInterval22.toDuration();
        org.joda.time.DateTime dateTime26 = readableInterval22.getEnd();
        boolean boolean27 = readableInterval17.isBefore((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.chrono.ISOChronology iSOChronology28 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField29 = iSOChronology28.minutes();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str31 = dateTimeZone30.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology32 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology28, dateTimeZone30);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.ReadableInterval readableInterval34 = null;
        org.joda.time.ReadableInterval readableInterval35 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval34);
        org.joda.time.ReadableInterval readableInterval36 = null;
        boolean boolean37 = readableInterval35.contains(readableInterval36);
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Period period39 = readableInterval35.toPeriod(periodType38);
        org.joda.time.DateTime dateTime40 = readableInterval35.getEnd();
        org.joda.time.Chronology chronology41 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant33, (org.joda.time.ReadableInstant) dateTime40);
        int int42 = dateTimeZone30.getOffset((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Chronology chronology43 = org.joda.time.DateTimeUtils.getInstantChronology((org.joda.time.ReadableInstant) dateTime40);
        boolean boolean44 = readableInterval17.contains((org.joda.time.ReadableInstant) dateTime40);
        boolean boolean45 = readableInterval1.contains(readableInterval17);
        long long46 = readableInterval17.getEndMillis();
        org.joda.time.Chronology chronology47 = readableInterval17.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.minuteOfDay();
        org.joda.time.ReadablePartial readablePartial49 = null;
        java.util.Locale locale51 = null;
        java.lang.String str52 = dateTimeField48.getAsShortText(readablePartial49, 58571700, locale51);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(readableInterval8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(readableInterval22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(iSOChronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "UTC" + "'", str31, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology32);
        org.junit.Assert.assertNotNull(readableInterval35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-296907L) + "'", long46 == (-296907L));
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "58571700" + "'", str52, "58571700");
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3112");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology5 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone6 = gregorianChronology5.getZone();
        long long10 = gregorianChronology5.add(0L, (long) (byte) 1, (int) (byte) 0);
        org.joda.time.DateTimeField dateTimeField11 = gregorianChronology5.millisOfDay();
        org.joda.time.DurationField durationField12 = gregorianChronology5.weeks();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField14 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long17 = durationField14.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long19 = durationField14.getValueAsLong((long) 10);
        int int21 = durationField14.getValue((long) (byte) 10);
        boolean boolean22 = partial13.equals((java.lang.Object) durationField14);
        org.joda.time.ReadableInterval readableInterval23 = null;
        org.joda.time.ReadableInterval readableInterval24 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval23);
        org.joda.time.ReadableInterval readableInterval25 = null;
        boolean boolean26 = readableInterval24.contains(readableInterval25);
        org.joda.time.ReadableInterval readableInterval27 = null;
        boolean boolean28 = readableInterval24.isBefore(readableInterval27);
        org.joda.time.Interval interval29 = readableInterval24.toInterval();
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.PeriodType periodType31 = org.joda.time.DateTimeUtils.getPeriodType(periodType30);
        org.joda.time.PeriodType periodType32 = org.joda.time.DateTimeUtils.getPeriodType(periodType30);
        org.joda.time.Period period33 = readableInterval24.toPeriod(periodType32);
        org.joda.time.Partial partial34 = partial13.plus((org.joda.time.ReadablePeriod) period33);
        int[] intArray37 = gregorianChronology5.get((org.joda.time.ReadablePeriod) period33, 1701289178545L, (long) (short) 0);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField39 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long42 = durationField39.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long44 = durationField39.getValueAsLong((long) 10);
        int int46 = durationField39.getValue((long) (byte) 10);
        boolean boolean47 = partial38.equals((java.lang.Object) durationField39);
        org.joda.time.Chronology chronology48 = partial38.getChronology();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial38.isBefore((org.joda.time.ReadablePartial) partial49);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray51 = partial38.getFieldTypes();
        boolean boolean53 = partial38.equals((java.lang.Object) 1702281558665L);
        java.lang.String str54 = partial38.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = partial38.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.Partial partial57 = partial38.plus(readablePeriod56);
        int[] intArray59 = gregorianChronology5.get((org.joda.time.ReadablePartial) partial38, 1701289179647L);
        org.joda.time.DateTimeField dateTimeField60 = gregorianChronology5.centuryOfEra();
        org.joda.time.DurationField durationField61 = gregorianChronology5.years();
        java.lang.String str62 = gregorianChronology5.toString();
        org.joda.time.DurationField durationField63 = gregorianChronology5.minutes();
        org.joda.time.DateTimeField dateTimeField64 = gregorianChronology5.era();
        org.joda.time.DateTimeField dateTimeField65 = gregorianChronology5.halfdayOfDay();
        org.junit.Assert.assertNotNull(gregorianChronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(readableInterval24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-53, -10, -4, 0, -20, -19, -38, -545]");
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 10L + "'", long44 == 10L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[]" + "'", str54, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter55);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "GregorianChronology[100]" + "'", str62, "GregorianChronology[100]");
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2624");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        long long24 = remainderDateTimeField22.roundHalfFloor(3600000L);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval26 = null;
        org.joda.time.ReadableInterval readableInterval27 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval26);
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval26);
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfCentury();
        org.joda.time.DurationField durationField30 = chronology28.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField31 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType25, durationField30);
        long long34 = unsupportedDateTimeField31.add((-31L), (long) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = unsupportedDateTimeField31.getType();
        org.joda.time.DurationFieldType durationFieldType36 = dateTimeFieldType35.getRangeDurationType();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField37 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField22, dateTimeFieldType35);
        long long39 = dividedDateTimeField37.roundFloor((-1L));
        long long42 = dividedDateTimeField37.set(1701289161914L, (int) (byte) 0);
        int int45 = dividedDateTimeField37.getDifference((-97L), 35L);
        org.joda.time.DurationField durationField46 = dividedDateTimeField37.getLeapDurationField();
        org.joda.time.DurationField durationField47 = dividedDateTimeField37.getLeapDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.dayOfWeek();
        java.lang.String str49 = dateTimeFieldType48.getName();
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField50 = new org.joda.time.field.ZeroIsMaxDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField37, dateTimeFieldType48);
        int int51 = zeroIsMaxDateTimeField50.getMaximumValue();
        long long53 = zeroIsMaxDateTimeField50.roundHalfEven(164730137506203L);
        org.joda.time.DurationField durationField54 = zeroIsMaxDateTimeField50.getLeapDurationField();
        long long56 = zeroIsMaxDateTimeField50.remainder(313861710L);
        int int57 = zeroIsMaxDateTimeField50.getMinimumValue();
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(readableInterval27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 4L + "'", long34 == 4L);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-315619200000L) + "'", long39 == (-315619200000L));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-62043766838086L) + "'", long42 == (-62043766838086L));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNull(durationField46);
        org.junit.Assert.assertNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "dayOfWeek" + "'", str49, "dayOfWeek");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 29227900 + "'", int51 == 29227900);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 164727302400000L + "'", long53 == 164727302400000L);
        org.junit.Assert.assertNull(durationField54);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 313861710L + "'", long56 == 313861710L);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2574");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology5 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone10 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology11 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = gregorianChronology11.getZone();
        long long16 = gregorianChronology11.add(0L, (long) (byte) 1, (int) (byte) 0);
        org.joda.time.DateTimeField dateTimeField17 = gregorianChronology11.millisOfDay();
        org.joda.time.DurationField durationField18 = gregorianChronology11.weeks();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField20 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long23 = durationField20.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long25 = durationField20.getValueAsLong((long) 10);
        int int27 = durationField20.getValue((long) (byte) 10);
        boolean boolean28 = partial19.equals((java.lang.Object) durationField20);
        org.joda.time.ReadableInterval readableInterval29 = null;
        org.joda.time.ReadableInterval readableInterval30 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval29);
        org.joda.time.ReadableInterval readableInterval31 = null;
        boolean boolean32 = readableInterval30.contains(readableInterval31);
        org.joda.time.ReadableInterval readableInterval33 = null;
        boolean boolean34 = readableInterval30.isBefore(readableInterval33);
        org.joda.time.Interval interval35 = readableInterval30.toInterval();
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.PeriodType periodType37 = org.joda.time.DateTimeUtils.getPeriodType(periodType36);
        org.joda.time.PeriodType periodType38 = org.joda.time.DateTimeUtils.getPeriodType(periodType36);
        org.joda.time.Period period39 = readableInterval30.toPeriod(periodType38);
        org.joda.time.Partial partial40 = partial19.plus((org.joda.time.ReadablePeriod) period39);
        int[] intArray43 = gregorianChronology11.get((org.joda.time.ReadablePeriod) period39, 1701289178545L, (long) (short) 0);
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField45 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long48 = durationField45.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long50 = durationField45.getValueAsLong((long) 10);
        int int52 = durationField45.getValue((long) (byte) 10);
        boolean boolean53 = partial44.equals((java.lang.Object) durationField45);
        org.joda.time.Chronology chronology54 = partial44.getChronology();
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        boolean boolean56 = partial44.isBefore((org.joda.time.ReadablePartial) partial55);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray57 = partial44.getFieldTypes();
        boolean boolean59 = partial44.equals((java.lang.Object) 1702281558665L);
        java.lang.String str60 = partial44.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = partial44.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.Partial partial63 = partial44.plus(readablePeriod62);
        int[] intArray65 = gregorianChronology11.get((org.joda.time.ReadablePartial) partial44, 1701289179647L);
        org.joda.time.DateTimeField dateTimeField66 = gregorianChronology11.centuryOfEra();
        boolean boolean67 = gregorianChronology5.equals((java.lang.Object) dateTimeField66);
        org.joda.time.DurationField durationField68 = gregorianChronology5.weekyears();
        org.junit.Assert.assertNotNull(gregorianChronology5);
        org.junit.Assert.assertNotNull(gregorianChronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10L + "'", long25 == 10L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(readableInterval30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-53, -10, -4, 0, -20, -19, -38, -545]");
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1L + "'", long48 == 1L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 10L + "'", long50 == 10L);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[]" + "'", str60, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter61);
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(durationField68);
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2381");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology5 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone10 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology11 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = gregorianChronology11.getZone();
        long long16 = gregorianChronology11.add(0L, (long) (byte) 1, (int) (byte) 0);
        org.joda.time.DateTimeField dateTimeField17 = gregorianChronology11.millisOfDay();
        org.joda.time.DurationField durationField18 = gregorianChronology11.weeks();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField20 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long23 = durationField20.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long25 = durationField20.getValueAsLong((long) 10);
        int int27 = durationField20.getValue((long) (byte) 10);
        boolean boolean28 = partial19.equals((java.lang.Object) durationField20);
        org.joda.time.ReadableInterval readableInterval29 = null;
        org.joda.time.ReadableInterval readableInterval30 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval29);
        org.joda.time.ReadableInterval readableInterval31 = null;
        boolean boolean32 = readableInterval30.contains(readableInterval31);
        org.joda.time.ReadableInterval readableInterval33 = null;
        boolean boolean34 = readableInterval30.isBefore(readableInterval33);
        org.joda.time.Interval interval35 = readableInterval30.toInterval();
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.PeriodType periodType37 = org.joda.time.DateTimeUtils.getPeriodType(periodType36);
        org.joda.time.PeriodType periodType38 = org.joda.time.DateTimeUtils.getPeriodType(periodType36);
        org.joda.time.Period period39 = readableInterval30.toPeriod(periodType38);
        org.joda.time.Partial partial40 = partial19.plus((org.joda.time.ReadablePeriod) period39);
        int[] intArray43 = gregorianChronology11.get((org.joda.time.ReadablePeriod) period39, 1701289178545L, (long) (short) 0);
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField45 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long48 = durationField45.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long50 = durationField45.getValueAsLong((long) 10);
        int int52 = durationField45.getValue((long) (byte) 10);
        boolean boolean53 = partial44.equals((java.lang.Object) durationField45);
        org.joda.time.Chronology chronology54 = partial44.getChronology();
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        boolean boolean56 = partial44.isBefore((org.joda.time.ReadablePartial) partial55);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray57 = partial44.getFieldTypes();
        boolean boolean59 = partial44.equals((java.lang.Object) 1702281558665L);
        java.lang.String str60 = partial44.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = partial44.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.Partial partial63 = partial44.plus(readablePeriod62);
        int[] intArray65 = gregorianChronology11.get((org.joda.time.ReadablePartial) partial44, 1701289179647L);
        org.joda.time.DateTimeField dateTimeField66 = gregorianChronology11.centuryOfEra();
        boolean boolean67 = gregorianChronology5.equals((java.lang.Object) dateTimeField66);
        org.joda.time.DurationField durationField68 = gregorianChronology5.weekyears();
        org.junit.Assert.assertNotNull(gregorianChronology5);
        org.junit.Assert.assertNotNull(gregorianChronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10L + "'", long25 == 10L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(readableInterval30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-53, -10, -4, 0, -20, -19, -38, -545]");
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1L + "'", long48 == 1L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 10L + "'", long50 == 10L);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[]" + "'", str60, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter61);
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(durationField68);
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1137");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        org.joda.time.DurationField durationField7 = unsupportedDateTimeField6.getDurationField();
        boolean boolean8 = unsupportedDateTimeField6.isLenient();
        org.joda.time.DurationField durationField9 = unsupportedDateTimeField6.getRangeDurationField();
        boolean boolean10 = unsupportedDateTimeField6.isSupported();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField12 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long15 = durationField12.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long17 = durationField12.getValueAsLong((long) 10);
        int int19 = durationField12.getValue((long) (byte) 10);
        boolean boolean20 = partial11.equals((java.lang.Object) durationField12);
        org.joda.time.Chronology chronology21 = partial11.getChronology();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial11.isBefore((org.joda.time.ReadablePartial) partial22);
        java.lang.String str24 = partial11.toString();
        org.joda.time.Chronology chronology25 = partial11.getChronology();
        java.lang.String str26 = partial11.toString();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField29 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long32 = durationField29.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long34 = durationField29.getValueAsLong((long) 10);
        int int36 = durationField29.getValue((long) (byte) 10);
        boolean boolean37 = partial28.equals((java.lang.Object) durationField29);
        org.joda.time.chrono.ISOChronology iSOChronology38 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField39 = iSOChronology38.minutes();
        org.joda.time.DateTimeField dateTimeField40 = iSOChronology38.millisOfDay();
        org.joda.time.DateTimeField dateTimeField41 = iSOChronology38.halfdayOfDay();
        org.joda.time.ReadableInterval readableInterval42 = null;
        org.joda.time.ReadableInterval readableInterval43 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval42);
        org.joda.time.ReadableInterval readableInterval44 = null;
        boolean boolean45 = readableInterval43.contains(readableInterval44);
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Period period47 = readableInterval43.toPeriod(periodType46);
        int[] intArray50 = iSOChronology38.get((org.joda.time.ReadablePeriod) period47, 4L, (long) '#');
        org.joda.time.Partial partial51 = partial28.plus((org.joda.time.ReadablePeriod) period47);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Partial partial53 = partial51.without(dateTimeFieldType52);
        int[] intArray54 = partial53.getValues();
        java.util.Locale locale56 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray57 = unsupportedDateTimeField6.set((org.joda.time.ReadablePartial) partial11, 74, intArray54, "70", locale56);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(durationField9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[]" + "'", str24, "[]");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10L + "'", long34 == 10L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(iSOChronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(readableInterval43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[0, 0, 0, 0, 0, 0, 0, 31]");
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2351");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        long long24 = remainderDateTimeField22.roundCeiling((-376935L));
        long long27 = remainderDateTimeField22.addWrapField(970L, (-1));
        org.joda.time.chrono.ISOChronology iSOChronology28 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology28.centuryOfEra();
        org.joda.time.DurationField durationField30 = iSOChronology28.months();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology28.year();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology28.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology28.yearOfEra();
        long long36 = dateTimeField33.set((-476134729858L), 28354759);
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField38 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long41 = durationField38.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long43 = durationField38.getValueAsLong((long) 10);
        int int45 = durationField38.getValue((long) (byte) 10);
        boolean boolean46 = partial37.equals((java.lang.Object) durationField38);
        org.joda.time.Chronology chronology47 = partial37.getChronology();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = partial37.isBefore((org.joda.time.ReadablePartial) partial48);
        org.joda.time.DateTimeField[] dateTimeFieldArray50 = partial48.getFields();
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.Partial partial52 = partial48.plus(readablePeriod51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Chronology chronology54 = org.joda.time.DateTimeUtils.getChronology(chronology53);
        org.joda.time.Partial partial55 = partial48.withChronologyRetainFields(chronology53);
        int[] intArray56 = null;
        int int57 = dateTimeField33.getMaximumValue((org.joda.time.ReadablePartial) partial55, intArray56);
        java.util.Locale locale58 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str59 = remainderDateTimeField22.getAsText((org.joda.time.ReadablePartial) partial55, locale58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'dayOfYear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 283996800970L + "'", long27 == 283996800970L);
        org.junit.Assert.assertNotNull(iSOChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 894727630297270142L + "'", long36 == 894727630297270142L);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 10L + "'", long43 == 10L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray50);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(partial55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 292278993 + "'", int57 == 292278993);
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2413");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval3);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DurationField durationField7 = chronology5.millis();
        org.joda.time.DurationField durationField8 = chronology5.centuries();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval9);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology11.millis();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.ReadableInterval readableInterval16 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval15);
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.ReadableInterval readableInterval21 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval20);
        org.joda.time.ReadableInterval readableInterval22 = null;
        boolean boolean23 = readableInterval21.contains(readableInterval22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = readableInterval21.toPeriod(periodType24);
        int[] intArray27 = chronology17.get((org.joda.time.ReadablePeriod) period25, (-210866846400000L));
        int[] intArray30 = chronology11.get((org.joda.time.ReadablePeriod) period25, 2173795348453L, (long) 1439);
        int[] intArray33 = chronology5.get((org.joda.time.ReadablePeriod) period25, 291L, 2580171L);
        int[] intArray36 = iSOChronology0.get((org.joda.time.ReadablePeriod) period25, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField37 = iSOChronology0.months();
        java.lang.String str38 = iSOChronology0.toString();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = iSOChronology0.equals((java.lang.Object) partial39);
        org.joda.time.Chronology chronology41 = org.joda.time.DateTimeUtils.getChronology((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone46 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        int int48 = fixedDateTimeZone46.getStandardOffset((long) 1439);
        boolean boolean49 = fixedDateTimeZone46.isFixed();
        long long51 = fixedDateTimeZone46.nextTransition((long) 24);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        long long55 = dateTimeZone52.adjustOffset((long) 100, true);
        long long57 = fixedDateTimeZone46.getMillisKeepLocal(dateTimeZone52, 10L);
        org.joda.time.Chronology chronology58 = iSOChronology0.withZone((org.joda.time.DateTimeZone) fixedDateTimeZone46);
        int int60 = fixedDateTimeZone46.getStandardOffset((long) (short) 10);
        org.joda.time.DateTimeZone.setDefault((org.joda.time.DateTimeZone) fixedDateTimeZone46);
        long long63 = fixedDateTimeZone46.previousTransition(0L);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(readableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(readableInterval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(readableInterval21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[UTC]" + "'", str38, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 24L + "'", long51 == 24L);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 100L + "'", long55 == 100L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 10L + "'", long57 == 10L);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1732");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        org.joda.time.DurationField durationField7 = unsupportedDateTimeField6.getDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = unsupportedDateTimeField6.getType();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField10 = iSOChronology9.minutes();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology9.millisOfDay();
        org.joda.time.ReadableInterval readableInterval12 = null;
        org.joda.time.ReadableInterval readableInterval13 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval12);
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        org.joda.time.DurationField durationField16 = chronology14.millis();
        org.joda.time.DurationField durationField17 = chronology14.centuries();
        org.joda.time.ReadableInterval readableInterval18 = null;
        org.joda.time.ReadableInterval readableInterval19 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval18);
        org.joda.time.Chronology chronology20 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval18);
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfCentury();
        org.joda.time.DurationField durationField22 = chronology20.millis();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.Chronology chronology26 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval24);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval29 = null;
        org.joda.time.ReadableInterval readableInterval30 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval29);
        org.joda.time.ReadableInterval readableInterval31 = null;
        boolean boolean32 = readableInterval30.contains(readableInterval31);
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = readableInterval30.toPeriod(periodType33);
        int[] intArray36 = chronology26.get((org.joda.time.ReadablePeriod) period34, (-210866846400000L));
        int[] intArray39 = chronology20.get((org.joda.time.ReadablePeriod) period34, 2173795348453L, (long) 1439);
        int[] intArray42 = chronology14.get((org.joda.time.ReadablePeriod) period34, 291L, 2580171L);
        int[] intArray45 = iSOChronology9.get((org.joda.time.ReadablePeriod) period34, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField46 = iSOChronology9.months();
        java.lang.String str47 = iSOChronology9.toString();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = iSOChronology9.equals((java.lang.Object) partial48);
        org.joda.time.Chronology chronology50 = org.joda.time.DateTimeUtils.getChronology((org.joda.time.Chronology) iSOChronology9);
        boolean boolean51 = dateTimeFieldType8.isSupported((org.joda.time.Chronology) iSOChronology9);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(readableInterval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(readableInterval19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(readableInterval30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(intArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(durationField46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ISOChronology[100]" + "'", str47, "ISOChronology[100]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3143");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.halfdayOfDay();
        org.joda.time.DurationField durationField4 = iSOChronology0.seconds();
        java.lang.String str5 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.dayOfMonth();
        org.joda.time.DurationField durationField7 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.minuteOfDay();
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField10 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long13 = durationField10.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long15 = durationField10.getValueAsLong((long) 10);
        int int17 = durationField10.getValue((long) (byte) 10);
        boolean boolean18 = partial9.equals((java.lang.Object) durationField10);
        org.joda.time.Chronology chronology19 = partial9.getChronology();
        java.lang.String str20 = partial9.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray21 = partial9.getFieldTypes();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField23 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long26 = durationField23.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long28 = durationField23.getValueAsLong((long) 10);
        int int30 = durationField23.getValue((long) (byte) 10);
        boolean boolean31 = partial22.equals((java.lang.Object) durationField23);
        org.joda.time.Chronology chronology32 = partial22.getChronology();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        boolean boolean34 = partial22.isBefore((org.joda.time.ReadablePartial) partial33);
        java.lang.String str35 = partial22.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType37 = dateTimeFieldType36.getDurationType();
        org.joda.time.Partial partial38 = partial22.without(dateTimeFieldType36);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone43 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology44 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone43);
        org.joda.time.ReadableInterval readableInterval45 = null;
        org.joda.time.ReadableInterval readableInterval46 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval45);
        org.joda.time.Chronology chronology47 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval45);
        org.joda.time.DateTimeField dateTimeField48 = chronology47.yearOfCentury();
        org.joda.time.DurationField durationField49 = chronology47.minutes();
        org.joda.time.DurationField durationField50 = chronology47.halfdays();
        org.joda.time.DurationField durationField51 = chronology47.weeks();
        org.joda.time.DateTimeField dateTimeField52 = chronology47.millisOfDay();
        boolean boolean53 = gregorianChronology44.equals((java.lang.Object) chronology47);
        boolean boolean54 = partial22.equals((java.lang.Object) boolean53);
        boolean boolean55 = partial9.isMatch((org.joda.time.ReadablePartial) partial22);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.Partial partial57 = partial9.plus(readablePeriod56);
        long long59 = iSOChronology0.set((org.joda.time.ReadablePartial) partial9, (-15L));
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ISOChronology[100]" + "'", str5, "ISOChronology[100]");
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray21);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10L + "'", long28 == 10L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[]" + "'", str35, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertNotNull(gregorianChronology44);
        org.junit.Assert.assertNotNull(readableInterval46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-15L) + "'", long59 == (-15L));
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0376");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.ReadablePartial readablePartial4 = null;
        int int5 = dateTimeField3.getMinimumValue(readablePartial4);
        org.joda.time.ReadablePartial readablePartial6 = null;
        org.joda.time.ReadableInterval readableInterval7 = null;
        org.joda.time.ReadableInterval readableInterval8 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval7);
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval7);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.yearOfCentury();
        org.joda.time.DurationField durationField11 = chronology9.millis();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.clockhourOfDay();
        org.joda.time.ReadablePartial readablePartial14 = null;
        int[] intArray21 = new int[] { '#', (-1), 0, (byte) 1, (short) 1, (byte) 1 };
        int int22 = dateTimeField13.getMaximumValue(readablePartial14, intArray21);
        int int23 = dateTimeField3.getMinimumValue(readablePartial6, intArray21);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField26 = new org.joda.time.field.RemainderDateTimeField(dateTimeField3, dateTimeFieldType24, 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval28 = null;
        org.joda.time.ReadableInterval readableInterval29 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval28);
        org.joda.time.Chronology chronology30 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval28);
        org.joda.time.DateTimeField dateTimeField31 = chronology30.yearOfCentury();
        org.joda.time.DurationField durationField32 = chronology30.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField33 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType27, durationField32);
        long long36 = durationField32.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval38 = null;
        org.joda.time.ReadableInterval readableInterval39 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval38);
        org.joda.time.Chronology chronology40 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval38);
        org.joda.time.DateTimeField dateTimeField41 = chronology40.yearOfCentury();
        boolean boolean42 = durationFieldType37.isSupported(chronology40);
        org.joda.time.field.ScaledDurationField scaledDurationField44 = new org.joda.time.field.ScaledDurationField(durationField32, durationFieldType37, (int) 'a');
        long long45 = scaledDurationField44.getUnitMillis();
        org.joda.time.DurationFieldType durationFieldType46 = scaledDurationField44.getType();
        int int48 = scaledDurationField44.getValue((long) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType50 = dateTimeFieldType49.getDurationType();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField52 = new org.joda.time.field.RemainderDateTimeField((org.joda.time.DateTimeField) remainderDateTimeField26, (org.joda.time.DurationField) scaledDurationField44, dateTimeFieldType49, 53460006);
        int int54 = remainderDateTimeField52.get(1577836800000L);
        long long57 = remainderDateTimeField52.getDifferenceAsLong(3600009L, (long) 28);
        // The following exception was thrown during execution in test generation
        try {
            long long60 = remainderDateTimeField52.set(33258197981048L, 29);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 29 for hourOfHalfday must be in the range [0,9]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(readableInterval8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[35, -1, 0, 1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 24 + "'", int22 == 24);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(readableInterval29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-210866846400000L) + "'", long36 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertNotNull(readableInterval39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 97L + "'", long45 == 97L);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 9 + "'", int54 == 9);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0508");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DurationField durationField2 = iSOChronology0.months();
        long long7 = iSOChronology0.getDateTimeMillis(1, 1, (int) (byte) 1, (int) (short) 100);
        org.joda.time.DurationField durationField8 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField10 = iSOChronology9.minutes();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology9.millisOfDay();
        org.joda.time.ReadableInterval readableInterval12 = null;
        org.joda.time.ReadableInterval readableInterval13 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval12);
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        org.joda.time.DurationField durationField16 = chronology14.millis();
        org.joda.time.DurationField durationField17 = chronology14.centuries();
        org.joda.time.ReadableInterval readableInterval18 = null;
        org.joda.time.ReadableInterval readableInterval19 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval18);
        org.joda.time.Chronology chronology20 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval18);
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfCentury();
        org.joda.time.DurationField durationField22 = chronology20.millis();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.Chronology chronology26 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval24);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval29 = null;
        org.joda.time.ReadableInterval readableInterval30 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval29);
        org.joda.time.ReadableInterval readableInterval31 = null;
        boolean boolean32 = readableInterval30.contains(readableInterval31);
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = readableInterval30.toPeriod(periodType33);
        int[] intArray36 = chronology26.get((org.joda.time.ReadablePeriod) period34, (-210866846400000L));
        int[] intArray39 = chronology20.get((org.joda.time.ReadablePeriod) period34, 2173795348453L, (long) 1439);
        int[] intArray42 = chronology14.get((org.joda.time.ReadablePeriod) period34, 291L, 2580171L);
        int[] intArray45 = iSOChronology9.get((org.joda.time.ReadablePeriod) period34, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField46 = iSOChronology9.months();
        java.lang.String str47 = iSOChronology9.toString();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = iSOChronology9.equals((java.lang.Object) partial48);
        long long51 = iSOChronology0.set((org.joda.time.ReadablePartial) partial48, (long) (short) 1);
        org.joda.time.DurationField durationField52 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField53 = iSOChronology0.hourOfHalfday();
        org.joda.time.DurationField durationField54 = iSOChronology0.months();
        // The following exception was thrown during execution in test generation
        try {
            long long56 = durationField54.getMillis(455808672000000L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 455808672000000 * 2629746000");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-62135568421900L) + "'", long7 == (-62135568421900L));
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(readableInterval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(readableInterval19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(readableInterval30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 0, 0, 0, -58574124, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[969, 11, 4, 2, 23, 52, 58, 291]");
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ISOChronology[America/Los_Angeles]" + "'", str47, "ISOChronology[America/Los_Angeles]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2806");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        long long24 = remainderDateTimeField22.roundHalfFloor(3600000L);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval26 = null;
        org.joda.time.ReadableInterval readableInterval27 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval26);
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval26);
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfCentury();
        org.joda.time.DurationField durationField30 = chronology28.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField31 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType25, durationField30);
        long long34 = unsupportedDateTimeField31.add((-31L), (long) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = unsupportedDateTimeField31.getType();
        org.joda.time.DurationFieldType durationFieldType36 = dateTimeFieldType35.getRangeDurationType();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField37 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField22, dateTimeFieldType35);
        int int39 = remainderDateTimeField22.get(2667904919710L);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField41 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long44 = durationField41.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long46 = durationField41.getValueAsLong((long) 10);
        int int48 = durationField41.getValue((long) (byte) 10);
        boolean boolean49 = partial40.equals((java.lang.Object) durationField41);
        org.joda.time.Chronology chronology50 = partial40.getChronology();
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        boolean boolean52 = partial40.isBefore((org.joda.time.ReadablePartial) partial51);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = null;
        java.lang.String str54 = partial40.toString(dateTimeFormatter53);
        java.util.Locale locale55 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str56 = remainderDateTimeField22.getAsShortText((org.joda.time.ReadablePartial) partial40, locale55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'dayOfYear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(readableInterval27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 4L + "'", long34 == 4L);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 4 + "'", int39 == 4);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10L + "'", long46 == 10L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[]" + "'", str54, "[]");
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2952");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = zonedChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField6 = zonedChronology4.monthOfYear();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField8 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long11 = durationField8.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long13 = durationField8.getValueAsLong((long) 10);
        int int15 = durationField8.getValue((long) (byte) 10);
        boolean boolean16 = partial7.equals((java.lang.Object) durationField8);
        org.joda.time.Chronology chronology17 = partial7.getChronology();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial7.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial7.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.ReadableInterval readableInterval22 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval21);
        long long23 = readableInterval22.getStartMillis();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.ReadableInterval readableInterval26 = null;
        boolean boolean27 = readableInterval25.contains(readableInterval26);
        org.joda.time.Duration duration28 = readableInterval25.toDuration();
        org.joda.time.DateTime dateTime29 = readableInterval25.getEnd();
        boolean boolean30 = readableInterval22.contains((org.joda.time.ReadableInstant) dateTime29);
        boolean boolean31 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime29);
        int[] intArray33 = zonedChronology4.get((org.joda.time.ReadablePartial) partial7, 60035L);
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology4.secondOfMinute();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone39 = new org.joda.time.tz.FixedDateTimeZone("UTC", "", 0, 4);
        java.util.TimeZone timeZone40 = fixedDateTimeZone39.toTimeZone();
        java.lang.String str42 = fixedDateTimeZone39.getName(97L);
        int int44 = fixedDateTimeZone39.getOffsetFromLocal((-210858120000000L));
        long long46 = fixedDateTimeZone39.nextTransition(0L);
        int int48 = fixedDateTimeZone39.getOffset(2580171L);
        org.joda.time.chrono.ZonedChronology zonedChronology49 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) zonedChronology4, (org.joda.time.DateTimeZone) fixedDateTimeZone39);
        long long51 = fixedDateTimeZone39.convertUTCToLocal(0L);
        org.joda.time.chrono.ISOChronology iSOChronology52 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField53 = iSOChronology52.minutes();
        org.joda.time.DateTimeField dateTimeField54 = iSOChronology52.millisOfDay();
        org.joda.time.DateTimeField dateTimeField55 = iSOChronology52.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField56 = iSOChronology52.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone57 = iSOChronology52.getZone();
        boolean boolean58 = fixedDateTimeZone39.equals((java.lang.Object) iSOChronology52);
        int int60 = fixedDateTimeZone39.getStandardOffset(1225154538857L);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(readableInterval22);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-296907L) + "'", long23 == (-296907L));
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00" + "'", str42, "+00:00");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(zonedChronology49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(iSOChronology52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 4 + "'", int60 == 4);
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2700");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = zonedChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField6 = zonedChronology4.monthOfYear();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField8 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long11 = durationField8.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long13 = durationField8.getValueAsLong((long) 10);
        int int15 = durationField8.getValue((long) (byte) 10);
        boolean boolean16 = partial7.equals((java.lang.Object) durationField8);
        org.joda.time.Chronology chronology17 = partial7.getChronology();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial7.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial7.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.ReadableInterval readableInterval22 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval21);
        long long23 = readableInterval22.getStartMillis();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.ReadableInterval readableInterval26 = null;
        boolean boolean27 = readableInterval25.contains(readableInterval26);
        org.joda.time.Duration duration28 = readableInterval25.toDuration();
        org.joda.time.DateTime dateTime29 = readableInterval25.getEnd();
        boolean boolean30 = readableInterval22.contains((org.joda.time.ReadableInstant) dateTime29);
        boolean boolean31 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime29);
        int[] intArray33 = zonedChronology4.get((org.joda.time.ReadablePartial) partial7, 60035L);
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology4.secondOfMinute();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone39 = new org.joda.time.tz.FixedDateTimeZone("UTC", "", 0, 4);
        java.util.TimeZone timeZone40 = fixedDateTimeZone39.toTimeZone();
        java.util.TimeZone timeZone41 = fixedDateTimeZone39.toTimeZone();
        org.joda.time.chrono.ISOChronology iSOChronology42 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField43 = iSOChronology42.minutes();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str45 = dateTimeZone44.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology46 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology42, dateTimeZone44);
        org.joda.time.DateTimeZone dateTimeZone47 = zonedChronology46.getZone();
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone48 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone47);
        long long50 = fixedDateTimeZone39.getMillisKeepLocal(dateTimeZone47, (-1700857185313L));
        org.joda.time.Chronology chronology51 = zonedChronology4.withZone((org.joda.time.DateTimeZone) fixedDateTimeZone39);
        int int53 = fixedDateTimeZone39.getOffset((long) 970);
        boolean boolean54 = fixedDateTimeZone39.isFixed();
        java.lang.String str56 = fixedDateTimeZone39.getNameKey(118839990170189L);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(readableInterval22);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 114669905157955L + "'", long23 == 114669905157955L);
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(iSOChronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "UTC" + "'", str45, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(cachedDateTimeZone48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-1700857185313L) + "'", long50 == (-1700857185313L));
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1880");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str1 = dateTimeZone0.toString();
        java.lang.String str3 = dateTimeZone0.getShortName((-210866846400000L));
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeUtils.getZone(dateTimeZone0);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone5 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone4);
        java.lang.Object obj6 = null;
        boolean boolean7 = cachedDateTimeZone5.equals(obj6);
        long long9 = cachedDateTimeZone5.nextTransition((long) 97);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.ReadableInterval readableInterval11 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval10);
        org.joda.time.Chronology chronology12 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval10);
        org.joda.time.DateTimeField dateTimeField13 = chronology12.yearOfCentury();
        org.joda.time.ReadablePartial readablePartial14 = null;
        int int15 = dateTimeField13.getMinimumValue(readablePartial14);
        org.joda.time.ReadablePartial readablePartial16 = null;
        org.joda.time.ReadableInterval readableInterval17 = null;
        org.joda.time.ReadableInterval readableInterval18 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval17);
        org.joda.time.Chronology chronology19 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval17);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfCentury();
        org.joda.time.DurationField durationField21 = chronology19.millis();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.clockhourOfDay();
        org.joda.time.ReadablePartial readablePartial24 = null;
        int[] intArray31 = new int[] { '#', (-1), 0, (byte) 1, (short) 1, (byte) 1 };
        int int32 = dateTimeField23.getMaximumValue(readablePartial24, intArray31);
        int int33 = dateTimeField13.getMinimumValue(readablePartial16, intArray31);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField36 = new org.joda.time.field.RemainderDateTimeField(dateTimeField13, dateTimeFieldType34, 10);
        long long38 = remainderDateTimeField36.roundHalfFloor(0L);
        java.util.Locale locale39 = null;
        int int40 = remainderDateTimeField36.getMaximumTextLength(locale39);
        long long42 = remainderDateTimeField36.roundHalfEven(1701289183453L);
        boolean boolean43 = cachedDateTimeZone5.equals((java.lang.Object) remainderDateTimeField36);
        java.lang.String str44 = remainderDateTimeField36.toString();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone49 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology50 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone51 = gregorianChronology50.getZone();
        long long55 = gregorianChronology50.add(0L, (long) (byte) 1, (int) (byte) 0);
        org.joda.time.DurationField durationField56 = gregorianChronology50.halfdays();
        org.joda.time.Partial partial57 = new org.joda.time.Partial((org.joda.time.Chronology) gregorianChronology50);
        int int58 = gregorianChronology50.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField59 = gregorianChronology50.minutes();
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DurationFieldType durationFieldType61 = dateTimeFieldType60.getRangeDurationType();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField62 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField36, durationField59, dateTimeFieldType60);
        long long64 = remainderDateTimeField36.roundFloor(19700L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "UTC" + "'", str1, "UTC");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(cachedDateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 97L + "'", long9 == 97L);
        org.junit.Assert.assertNotNull(readableInterval11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(readableInterval18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[35, -1, 0, 1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 24 + "'", int32 == 24);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1704067200000L + "'", long42 == 1704067200000L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "DateTimeField[hourOfHalfday]" + "'", str44, "DateTimeField[hourOfHalfday]");
        org.junit.Assert.assertNotNull(gregorianChronology50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 4 + "'", int58 == 4);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0284");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField4 = iSOChronology3.minutes();
        org.joda.time.DurationField durationField5 = iSOChronology3.months();
        long long10 = iSOChronology3.getDateTimeMillis(1, 1, (int) (byte) 1, (int) (short) 100);
        org.joda.time.DurationField durationField11 = iSOChronology3.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField13 = iSOChronology12.minutes();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology12.millisOfDay();
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.ReadableInterval readableInterval16 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval15);
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        org.joda.time.DurationField durationField19 = chronology17.millis();
        org.joda.time.DurationField durationField20 = chronology17.centuries();
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.ReadableInterval readableInterval22 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval21);
        org.joda.time.Chronology chronology23 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval21);
        org.joda.time.DateTimeField dateTimeField24 = chronology23.yearOfCentury();
        org.joda.time.DurationField durationField25 = chronology23.millis();
        org.joda.time.DateTimeField dateTimeField26 = chronology23.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval27 = null;
        org.joda.time.ReadableInterval readableInterval28 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval27);
        org.joda.time.Chronology chronology29 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval27);
        org.joda.time.DateTimeField dateTimeField30 = chronology29.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval32 = null;
        org.joda.time.ReadableInterval readableInterval33 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval32);
        org.joda.time.ReadableInterval readableInterval34 = null;
        boolean boolean35 = readableInterval33.contains(readableInterval34);
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Period period37 = readableInterval33.toPeriod(periodType36);
        int[] intArray39 = chronology29.get((org.joda.time.ReadablePeriod) period37, (-210866846400000L));
        int[] intArray42 = chronology23.get((org.joda.time.ReadablePeriod) period37, 2173795348453L, (long) 1439);
        int[] intArray45 = chronology17.get((org.joda.time.ReadablePeriod) period37, 291L, 2580171L);
        int[] intArray48 = iSOChronology12.get((org.joda.time.ReadablePeriod) period37, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField49 = iSOChronology12.months();
        java.lang.String str50 = iSOChronology12.toString();
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        boolean boolean52 = iSOChronology12.equals((java.lang.Object) partial51);
        long long54 = iSOChronology3.set((org.joda.time.ReadablePartial) partial51, (long) (short) 1);
        java.lang.String str55 = partial51.toString();
        boolean boolean56 = dateTimeZone0.equals((java.lang.Object) str55);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-62135568421900L) + "'", long10 == (-62135568421900L));
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(iSOChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(readableInterval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(readableInterval22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(readableInterval28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(readableInterval33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[0, 0, 0, 0, -58574124, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[969, 11, 4, 2, 23, 52, 58, 291]");
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ISOChronology[America/Los_Angeles]" + "'", str50, "ISOChronology[America/Los_Angeles]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[]" + "'", str55, "[]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1505");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField11 = new org.joda.time.field.OffsetDateTimeField(dateTimeField8, dateTimeFieldType9, (int) (short) 1);
        java.lang.String str13 = offsetDateTimeField11.getAsText((long) 1);
        long long15 = offsetDateTimeField11.roundHalfFloor((-210858120000000L));
        java.lang.String str16 = offsetDateTimeField11.getName();
        org.joda.time.ReadableInterval readableInterval17 = null;
        org.joda.time.ReadableInterval readableInterval18 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval17);
        org.joda.time.Chronology chronology19 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval17);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfCentury();
        org.joda.time.DurationField durationField21 = chronology19.minutes();
        long long22 = durationField21.getUnitMillis();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField25 = new org.joda.time.field.DividedDateTimeField((org.joda.time.DateTimeField) offsetDateTimeField11, durationField21, dateTimeFieldType23, (int) '#');
        org.joda.time.DurationField durationField26 = dividedDateTimeField25.getRangeDurationField();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField27 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField25);
        org.joda.time.chrono.ISOChronology iSOChronology28 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeZone dateTimeZone29 = iSOChronology28.getZone();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = iSOChronology28.millis();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval33 = null;
        org.joda.time.ReadableInterval readableInterval34 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval33);
        org.joda.time.Chronology chronology35 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval33);
        org.joda.time.DateTimeField dateTimeField36 = chronology35.yearOfCentury();
        org.joda.time.DurationField durationField37 = chronology35.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField38 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType32, durationField37);
        long long41 = unsupportedDateTimeField38.add((-31L), (long) '#');
        org.joda.time.DurationField durationField42 = unsupportedDateTimeField38.getLeapDurationField();
        int int45 = unsupportedDateTimeField38.getDifference((long) (byte) 10, 10L);
        long long48 = unsupportedDateTimeField38.add((long) 1439, (int) (byte) -1);
        org.joda.time.DurationField durationField49 = unsupportedDateTimeField38.getDurationField();
        long long52 = unsupportedDateTimeField38.add((-476134744301L), (-476134723881L));
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = unsupportedDateTimeField38.getType();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField54 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField27, durationField31, dateTimeFieldType53);
        org.joda.time.IllegalFieldValueException illegalFieldValueException56 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType53, "org.joda.time.IllegalFieldValueException: Value \"weeks\" for hourOfDay is not supported");
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-210858120000000L) + "'", long15 == (-210858120000000L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "millisOfDay" + "'", str16, "millisOfDay");
        org.junit.Assert.assertNotNull(readableInterval18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 60000L + "'", long22 == 60000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(iSOChronology28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(readableInterval34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 4L + "'", long41 == 4L);
        org.junit.Assert.assertNull(durationField42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1438L + "'", long48 == 1438L);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-952269468182L) + "'", long52 == (-952269468182L));
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0978");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add((-31L), (long) '#');
        org.joda.time.DurationField durationField10 = unsupportedDateTimeField6.getLeapDurationField();
        org.joda.time.DurationField durationField11 = unsupportedDateTimeField6.getRangeDurationField();
        long long14 = unsupportedDateTimeField6.getDifferenceAsLong(10L, 0L);
        long long17 = unsupportedDateTimeField6.add((long) 15, 0);
        long long20 = unsupportedDateTimeField6.add(164730137506203L, 10);
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.ReadableInterval readableInterval22 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval21);
        org.joda.time.ReadableInterval readableInterval23 = null;
        boolean boolean24 = readableInterval22.contains(readableInterval23);
        org.joda.time.Chronology chronology25 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval23);
        org.joda.time.DateTimeField dateTimeField26 = chronology25.halfdayOfDay();
        long long29 = dateTimeField26.getDifferenceAsLong((-45757612800000L), (-2177424000000L));
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField31 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long34 = durationField31.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long36 = durationField31.getValueAsLong((long) 10);
        int int38 = durationField31.getValue((long) (byte) 10);
        boolean boolean39 = partial30.equals((java.lang.Object) durationField31);
        org.joda.time.Chronology chronology40 = partial30.getChronology();
        java.lang.String str41 = partial30.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray42 = partial30.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval43 = null;
        org.joda.time.ReadableInterval readableInterval44 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval43);
        org.joda.time.ReadableInterval readableInterval45 = null;
        boolean boolean46 = readableInterval44.contains(readableInterval45);
        org.joda.time.ReadableInterval readableInterval47 = null;
        boolean boolean48 = readableInterval44.isBefore(readableInterval47);
        org.joda.time.Interval interval49 = readableInterval44.toInterval();
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.PeriodType periodType51 = org.joda.time.DateTimeUtils.getPeriodType(periodType50);
        org.joda.time.PeriodType periodType52 = org.joda.time.DateTimeUtils.getPeriodType(periodType50);
        org.joda.time.Period period53 = readableInterval44.toPeriod(periodType52);
        org.joda.time.Partial partial54 = partial30.plus((org.joda.time.ReadablePeriod) period53);
        int[] intArray55 = null;
        int int56 = dateTimeField26.getMaximumValue((org.joda.time.ReadablePartial) partial30, intArray55);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray57 = partial30.getFieldTypes();
        java.lang.String str58 = partial30.toString();
        java.util.Locale locale59 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str60 = unsupportedDateTimeField6.getAsText((org.joda.time.ReadablePartial) partial30, locale59);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertNull(durationField11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 15L + "'", long17 == 15L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 164730137506213L + "'", long20 == 164730137506213L);
        org.junit.Assert.assertNotNull(readableInterval22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1008800L) + "'", long29 == (-1008800L));
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 10L + "'", long36 == 10L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[]" + "'", str41, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray42);
        org.junit.Assert.assertNotNull(readableInterval44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(partial54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[]" + "'", str58, "[]");
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1138");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval3);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DurationField durationField7 = chronology5.millis();
        org.joda.time.DurationField durationField8 = chronology5.centuries();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval9);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology11.millis();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.ReadableInterval readableInterval16 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval15);
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.ReadableInterval readableInterval21 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval20);
        org.joda.time.ReadableInterval readableInterval22 = null;
        boolean boolean23 = readableInterval21.contains(readableInterval22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = readableInterval21.toPeriod(periodType24);
        int[] intArray27 = chronology17.get((org.joda.time.ReadablePeriod) period25, (-210866846400000L));
        int[] intArray30 = chronology11.get((org.joda.time.ReadablePeriod) period25, 2173795348453L, (long) 1439);
        int[] intArray33 = chronology5.get((org.joda.time.ReadablePeriod) period25, 291L, 2580171L);
        int[] intArray36 = iSOChronology0.get((org.joda.time.ReadablePeriod) period25, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField37 = iSOChronology0.months();
        java.lang.String str38 = iSOChronology0.toString();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = iSOChronology0.equals((java.lang.Object) partial39);
        org.joda.time.Chronology chronology41 = org.joda.time.DateTimeUtils.getChronology((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone46 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        int int48 = fixedDateTimeZone46.getStandardOffset((long) 1439);
        boolean boolean49 = fixedDateTimeZone46.isFixed();
        long long51 = fixedDateTimeZone46.nextTransition((long) 24);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        long long55 = dateTimeZone52.adjustOffset((long) 100, true);
        long long57 = fixedDateTimeZone46.getMillisKeepLocal(dateTimeZone52, 10L);
        org.joda.time.Chronology chronology58 = iSOChronology0.withZone((org.joda.time.DateTimeZone) fixedDateTimeZone46);
        int int60 = fixedDateTimeZone46.getStandardOffset((long) (short) 10);
        long long63 = fixedDateTimeZone46.convertLocalToUTC(1701289161427L, true);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(readableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(readableInterval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(readableInterval21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[UTC]" + "'", str38, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 24L + "'", long51 == 24L);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 100L + "'", long55 == 100L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 10L + "'", long57 == 10L);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1701289161427L + "'", long63 == 1701289161427L);
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2419");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DurationField durationField2 = iSOChronology0.months();
        long long7 = iSOChronology0.getDateTimeMillis(1, 1, (int) (byte) 1, (int) (short) 100);
        org.joda.time.DurationField durationField8 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField10 = iSOChronology9.minutes();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology9.millisOfDay();
        org.joda.time.ReadableInterval readableInterval12 = null;
        org.joda.time.ReadableInterval readableInterval13 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval12);
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        org.joda.time.DurationField durationField16 = chronology14.millis();
        org.joda.time.DurationField durationField17 = chronology14.centuries();
        org.joda.time.ReadableInterval readableInterval18 = null;
        org.joda.time.ReadableInterval readableInterval19 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval18);
        org.joda.time.Chronology chronology20 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval18);
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfCentury();
        org.joda.time.DurationField durationField22 = chronology20.millis();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.Chronology chronology26 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval24);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval29 = null;
        org.joda.time.ReadableInterval readableInterval30 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval29);
        org.joda.time.ReadableInterval readableInterval31 = null;
        boolean boolean32 = readableInterval30.contains(readableInterval31);
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = readableInterval30.toPeriod(periodType33);
        int[] intArray36 = chronology26.get((org.joda.time.ReadablePeriod) period34, (-210866846400000L));
        int[] intArray39 = chronology20.get((org.joda.time.ReadablePeriod) period34, 2173795348453L, (long) 1439);
        int[] intArray42 = chronology14.get((org.joda.time.ReadablePeriod) period34, 291L, 2580171L);
        int[] intArray45 = iSOChronology9.get((org.joda.time.ReadablePeriod) period34, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField46 = iSOChronology9.months();
        java.lang.String str47 = iSOChronology9.toString();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = iSOChronology9.equals((java.lang.Object) partial48);
        long long51 = iSOChronology0.set((org.joda.time.ReadablePartial) partial48, (long) (short) 1);
        org.joda.time.DurationField durationField52 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField53 = iSOChronology0.hourOfHalfday();
        org.joda.time.DurationField durationField54 = iSOChronology0.months();
        org.joda.time.DurationField durationField55 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField56 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField57 = iSOChronology0.millisOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-62135596799900L) + "'", long7 == (-62135596799900L));
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(readableInterval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(readableInterval19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(readableInterval30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ISOChronology[100]" + "'", str47, "ISOChronology[100]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3119");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.ReadablePartial readablePartial4 = null;
        int int5 = dateTimeField3.getMinimumValue(readablePartial4);
        org.joda.time.ReadablePartial readablePartial6 = null;
        org.joda.time.ReadableInterval readableInterval7 = null;
        org.joda.time.ReadableInterval readableInterval8 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval7);
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval7);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.yearOfCentury();
        org.joda.time.DurationField durationField11 = chronology9.millis();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.clockhourOfDay();
        org.joda.time.ReadablePartial readablePartial14 = null;
        int[] intArray21 = new int[] { '#', (-1), 0, (byte) 1, (short) 1, (byte) 1 };
        int int22 = dateTimeField13.getMaximumValue(readablePartial14, intArray21);
        int int23 = dateTimeField3.getMinimumValue(readablePartial6, intArray21);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField26 = new org.joda.time.field.RemainderDateTimeField(dateTimeField3, dateTimeFieldType24, 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval28 = null;
        org.joda.time.ReadableInterval readableInterval29 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval28);
        org.joda.time.Chronology chronology30 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval28);
        org.joda.time.DateTimeField dateTimeField31 = chronology30.yearOfCentury();
        org.joda.time.DurationField durationField32 = chronology30.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField33 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType27, durationField32);
        long long36 = durationField32.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval38 = null;
        org.joda.time.ReadableInterval readableInterval39 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval38);
        org.joda.time.Chronology chronology40 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval38);
        org.joda.time.DateTimeField dateTimeField41 = chronology40.yearOfCentury();
        boolean boolean42 = durationFieldType37.isSupported(chronology40);
        org.joda.time.field.ScaledDurationField scaledDurationField44 = new org.joda.time.field.ScaledDurationField(durationField32, durationFieldType37, (int) 'a');
        long long45 = scaledDurationField44.getUnitMillis();
        org.joda.time.DurationFieldType durationFieldType46 = scaledDurationField44.getType();
        int int48 = scaledDurationField44.getValue((long) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType50 = dateTimeFieldType49.getDurationType();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField52 = new org.joda.time.field.RemainderDateTimeField((org.joda.time.DateTimeField) remainderDateTimeField26, (org.joda.time.DurationField) scaledDurationField44, dateTimeFieldType49, 53460006);
        java.lang.String str54 = remainderDateTimeField52.getAsShortText((long) (short) -1);
        long long56 = remainderDateTimeField52.roundHalfCeiling(1701289164695L);
        long long58 = remainderDateTimeField52.roundHalfCeiling(180000000L);
        org.joda.time.DurationField durationField59 = remainderDateTimeField52.iRangeField;
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(readableInterval8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[35, -1, 0, 1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 24 + "'", int22 == 24);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(readableInterval29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-210866846400000L) + "'", long36 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertNotNull(readableInterval39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 97L + "'", long45 == 97L);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(durationFieldType50);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0" + "'", str54, "0");
// flaky:         org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1704067199991L + "'", long56 == 1704067199991L);
// flaky:         org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-9L) + "'", long58 == (-9L));
        org.junit.Assert.assertNotNull(durationField59);
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0173");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add((-31L), (long) '#');
        org.joda.time.DurationField durationField10 = unsupportedDateTimeField6.getLeapDurationField();
        org.joda.time.DurationField durationField11 = unsupportedDateTimeField6.getRangeDurationField();
        long long14 = unsupportedDateTimeField6.getDifferenceAsLong(10L, 0L);
        long long17 = unsupportedDateTimeField6.getDifferenceAsLong(0L, (long) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = unsupportedDateTimeField6.getType();
        org.joda.time.chrono.ISOChronology iSOChronology19 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField20 = iSOChronology19.minutes();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str22 = dateTimeZone21.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology23 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology19, dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone24 = zonedChronology23.getZone();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology23.monthOfYear();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField27 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long30 = durationField27.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long32 = durationField27.getValueAsLong((long) 10);
        int int34 = durationField27.getValue((long) (byte) 10);
        boolean boolean35 = partial26.equals((java.lang.Object) durationField27);
        org.joda.time.Chronology chronology36 = partial26.getChronology();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        boolean boolean38 = partial26.isBefore((org.joda.time.ReadablePartial) partial37);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray39 = partial26.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval40 = null;
        org.joda.time.ReadableInterval readableInterval41 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval40);
        long long42 = readableInterval41.getStartMillis();
        org.joda.time.ReadableInterval readableInterval43 = null;
        org.joda.time.ReadableInterval readableInterval44 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval43);
        org.joda.time.ReadableInterval readableInterval45 = null;
        boolean boolean46 = readableInterval44.contains(readableInterval45);
        org.joda.time.Duration duration47 = readableInterval44.toDuration();
        org.joda.time.DateTime dateTime48 = readableInterval44.getEnd();
        boolean boolean49 = readableInterval41.contains((org.joda.time.ReadableInstant) dateTime48);
        boolean boolean50 = partial26.isMatch((org.joda.time.ReadableInstant) dateTime48);
        int[] intArray52 = zonedChronology23.get((org.joda.time.ReadablePartial) partial26, 60035L);
        java.util.Locale locale54 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str55 = unsupportedDateTimeField6.getAsText((org.joda.time.ReadablePartial) partial26, 97, locale54);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertNull(durationField11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(iSOChronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10L + "'", long32 == 10L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray39);
        org.junit.Assert.assertNotNull(readableInterval41);
// flaky:         org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1701289191223L + "'", long42 == 1701289191223L);
        org.junit.Assert.assertNotNull(readableInterval44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2166");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField15 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long18 = durationField15.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long20 = durationField15.getValueAsLong((long) 10);
        int int22 = durationField15.getValue((long) (byte) 10);
        boolean boolean23 = partial14.equals((java.lang.Object) durationField15);
        boolean boolean24 = partial0.equals((java.lang.Object) durationField15);
        org.joda.time.DateTimeField[] dateTimeFieldArray25 = partial0.getFields();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone30 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology31 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone32 = gregorianChronology31.getZone();
        long long36 = gregorianChronology31.add(0L, (long) (byte) 1, (int) (byte) 0);
        org.joda.time.DateTimeField dateTimeField37 = gregorianChronology31.millisOfDay();
        org.joda.time.DurationField durationField38 = gregorianChronology31.weeks();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField40 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long43 = durationField40.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long45 = durationField40.getValueAsLong((long) 10);
        int int47 = durationField40.getValue((long) (byte) 10);
        boolean boolean48 = partial39.equals((java.lang.Object) durationField40);
        org.joda.time.ReadableInterval readableInterval49 = null;
        org.joda.time.ReadableInterval readableInterval50 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval49);
        org.joda.time.ReadableInterval readableInterval51 = null;
        boolean boolean52 = readableInterval50.contains(readableInterval51);
        org.joda.time.ReadableInterval readableInterval53 = null;
        boolean boolean54 = readableInterval50.isBefore(readableInterval53);
        org.joda.time.Interval interval55 = readableInterval50.toInterval();
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.PeriodType periodType57 = org.joda.time.DateTimeUtils.getPeriodType(periodType56);
        org.joda.time.PeriodType periodType58 = org.joda.time.DateTimeUtils.getPeriodType(periodType56);
        org.joda.time.Period period59 = readableInterval50.toPeriod(periodType58);
        org.joda.time.Partial partial60 = partial39.plus((org.joda.time.ReadablePeriod) period59);
        int[] intArray63 = gregorianChronology31.get((org.joda.time.ReadablePeriod) period59, 1701289178545L, (long) (short) 0);
        org.joda.time.Partial partial65 = partial0.withPeriodAdded((org.joda.time.ReadablePeriod) period59, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType67 = partial0.getFieldType(0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray25);
        org.junit.Assert.assertNotNull(gregorianChronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 10L + "'", long45 == 10L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(readableInterval50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-53, -10, -4, 0, -20, -19, -38, -545]");
        org.junit.Assert.assertNotNull(partial65);
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2323");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology5 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone6 = gregorianChronology5.getZone();
        int int7 = gregorianChronology5.getMinimumDaysInFirstWeek();
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.halfdayOfDay();
        org.joda.time.DurationField durationField12 = iSOChronology8.seconds();
        org.joda.time.Chronology chronology13 = iSOChronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.weekOfWeekyear();
        org.joda.time.chrono.ISOChronology iSOChronology15 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology15.secondOfDay();
        org.joda.time.ReadableInterval readableInterval17 = null;
        org.joda.time.ReadableInterval readableInterval18 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval17);
        org.joda.time.Chronology chronology19 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval17);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfCentury();
        org.joda.time.DurationField durationField21 = chronology19.millis();
        org.joda.time.DurationField durationField22 = chronology19.centuries();
        org.joda.time.ReadableInterval readableInterval23 = null;
        org.joda.time.ReadableInterval readableInterval24 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval23);
        org.joda.time.Chronology chronology25 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval23);
        org.joda.time.DateTimeField dateTimeField26 = chronology25.yearOfCentury();
        org.joda.time.DurationField durationField27 = chronology25.millis();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval29 = null;
        org.joda.time.ReadableInterval readableInterval30 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval29);
        org.joda.time.Chronology chronology31 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval29);
        org.joda.time.DateTimeField dateTimeField32 = chronology31.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval34 = null;
        org.joda.time.ReadableInterval readableInterval35 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval34);
        org.joda.time.ReadableInterval readableInterval36 = null;
        boolean boolean37 = readableInterval35.contains(readableInterval36);
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Period period39 = readableInterval35.toPeriod(periodType38);
        int[] intArray41 = chronology31.get((org.joda.time.ReadablePeriod) period39, (-210866846400000L));
        int[] intArray44 = chronology25.get((org.joda.time.ReadablePeriod) period39, 2173795348453L, (long) 1439);
        int[] intArray47 = chronology19.get((org.joda.time.ReadablePeriod) period39, 291L, 2580171L);
        int[] intArray49 = iSOChronology15.get((org.joda.time.ReadablePeriod) period39, 29227899L);
        int[] intArray51 = iSOChronology8.get((org.joda.time.ReadablePeriod) period39, 2835106203L);
        int[] intArray54 = gregorianChronology5.get((org.joda.time.ReadablePeriod) period39, (-476134762239L), (-210858120000000L));
        org.joda.time.DateTimeField dateTimeField55 = gregorianChronology5.dayOfYear();
        org.junit.Assert.assertNotNull(gregorianChronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(iSOChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(readableInterval18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(readableInterval24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(readableInterval30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(readableInterval35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[0, 0, 0, 0, 8, 7, 7, 899]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[0, 0, 4, 4, 19, 31, 46, 203]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-6666, -8, -3, -5, -16, -20, -37, -761]");
        org.junit.Assert.assertNotNull(dateTimeField55);
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3150");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.ReadablePartial readablePartial4 = null;
        int int5 = dateTimeField3.getMinimumValue(readablePartial4);
        org.joda.time.ReadablePartial readablePartial6 = null;
        org.joda.time.ReadableInterval readableInterval7 = null;
        org.joda.time.ReadableInterval readableInterval8 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval7);
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval7);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.yearOfCentury();
        org.joda.time.DurationField durationField11 = chronology9.millis();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.clockhourOfDay();
        org.joda.time.ReadablePartial readablePartial14 = null;
        int[] intArray21 = new int[] { '#', (-1), 0, (byte) 1, (short) 1, (byte) 1 };
        int int22 = dateTimeField13.getMaximumValue(readablePartial14, intArray21);
        int int23 = dateTimeField3.getMinimumValue(readablePartial6, intArray21);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField26 = new org.joda.time.field.RemainderDateTimeField(dateTimeField3, dateTimeFieldType24, 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval28 = null;
        org.joda.time.ReadableInterval readableInterval29 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval28);
        org.joda.time.Chronology chronology30 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval28);
        org.joda.time.DateTimeField dateTimeField31 = chronology30.yearOfCentury();
        org.joda.time.DurationField durationField32 = chronology30.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField33 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType27, durationField32);
        long long36 = durationField32.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval38 = null;
        org.joda.time.ReadableInterval readableInterval39 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval38);
        org.joda.time.Chronology chronology40 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval38);
        org.joda.time.DateTimeField dateTimeField41 = chronology40.yearOfCentury();
        boolean boolean42 = durationFieldType37.isSupported(chronology40);
        org.joda.time.field.ScaledDurationField scaledDurationField44 = new org.joda.time.field.ScaledDurationField(durationField32, durationFieldType37, (int) 'a');
        long long45 = scaledDurationField44.getUnitMillis();
        org.joda.time.DurationFieldType durationFieldType46 = scaledDurationField44.getType();
        int int48 = scaledDurationField44.getValue((long) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType50 = dateTimeFieldType49.getDurationType();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField52 = new org.joda.time.field.RemainderDateTimeField((org.joda.time.DateTimeField) remainderDateTimeField26, (org.joda.time.DurationField) scaledDurationField44, dateTimeFieldType49, 53460006);
        org.joda.time.DurationField durationField53 = remainderDateTimeField52.getRangeDurationField();
        int int55 = remainderDateTimeField52.get((-1454470839259L));
        java.util.Locale locale57 = null;
        java.lang.String str58 = remainderDateTimeField52.getAsText(180815090L, locale57);
        long long60 = remainderDateTimeField52.roundCeiling((-934364334L));
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(readableInterval8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[35, -1, 0, 1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 24 + "'", int22 == 24);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(readableInterval29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-210866846400000L) + "'", long36 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertNotNull(readableInterval39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 97L + "'", long45 == 97L);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 3 + "'", int55 == 3);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "0" + "'", str58, "0");
// flaky:         org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1820");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        boolean boolean5 = durationFieldType0.isSupported(chronology3);
        org.joda.time.DurationField durationField6 = chronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.weekyearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField12 = new org.joda.time.field.OffsetDateTimeField(dateTimeField7, dateTimeFieldType8, 4, (int) ' ', (int) (short) -1);
        long long14 = offsetDateTimeField12.roundCeiling(2102400001L);
        int int15 = offsetDateTimeField12.getMinimumValue();
        boolean boolean17 = offsetDateTimeField12.isLeap(28800000L);
        long long19 = offsetDateTimeField12.roundFloor(2750411623L);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField21 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long24 = durationField21.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long26 = durationField21.getValueAsLong((long) 10);
        int int28 = durationField21.getValue((long) (byte) 10);
        boolean boolean29 = partial20.equals((java.lang.Object) durationField21);
        org.joda.time.ReadableInterval readableInterval30 = null;
        org.joda.time.ReadableInterval readableInterval31 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval30);
        org.joda.time.ReadableInterval readableInterval32 = null;
        boolean boolean33 = readableInterval31.contains(readableInterval32);
        org.joda.time.ReadableInterval readableInterval34 = null;
        boolean boolean35 = readableInterval31.isBefore(readableInterval34);
        org.joda.time.Interval interval36 = readableInterval31.toInterval();
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.PeriodType periodType38 = org.joda.time.DateTimeUtils.getPeriodType(periodType37);
        org.joda.time.PeriodType periodType39 = org.joda.time.DateTimeUtils.getPeriodType(periodType37);
        org.joda.time.Period period40 = readableInterval31.toPeriod(periodType39);
        org.joda.time.Partial partial41 = partial20.plus((org.joda.time.ReadablePeriod) period40);
        boolean boolean42 = org.joda.time.DateTimeUtils.isContiguous((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField44 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long47 = durationField44.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long49 = durationField44.getValueAsLong((long) 10);
        int int51 = durationField44.getValue((long) (byte) 10);
        boolean boolean52 = partial43.equals((java.lang.Object) durationField44);
        org.joda.time.Chronology chronology53 = partial43.getChronology();
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        boolean boolean55 = partial43.isBefore((org.joda.time.ReadablePartial) partial54);
        java.lang.String str56 = partial43.toString();
        boolean boolean57 = partial20.isBefore((org.joda.time.ReadablePartial) partial43);
        java.util.Locale locale59 = null;
        java.lang.String str60 = offsetDateTimeField12.getAsShortText((org.joda.time.ReadablePartial) partial20, 28354819, locale59);
        java.util.Locale locale61 = null;
        int int62 = offsetDateTimeField12.getMaximumTextLength(locale61);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 31536000000L + "'", long14 == 31536000000L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 32 + "'", int15 == 32);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10L + "'", long26 == 10L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(readableInterval31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 10L + "'", long49 == 10L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[]" + "'", str56, "[]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "28354819" + "'", str60, "28354819");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0964");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology5 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone6 = gregorianChronology5.getZone();
        long long10 = gregorianChronology5.add(0L, (long) (byte) 1, (int) (byte) 0);
        org.joda.time.DateTimeField dateTimeField11 = gregorianChronology5.millisOfDay();
        org.joda.time.DurationField durationField12 = gregorianChronology5.weeks();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField14 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long17 = durationField14.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long19 = durationField14.getValueAsLong((long) 10);
        int int21 = durationField14.getValue((long) (byte) 10);
        boolean boolean22 = partial13.equals((java.lang.Object) durationField14);
        org.joda.time.ReadableInterval readableInterval23 = null;
        org.joda.time.ReadableInterval readableInterval24 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval23);
        org.joda.time.ReadableInterval readableInterval25 = null;
        boolean boolean26 = readableInterval24.contains(readableInterval25);
        org.joda.time.ReadableInterval readableInterval27 = null;
        boolean boolean28 = readableInterval24.isBefore(readableInterval27);
        org.joda.time.Interval interval29 = readableInterval24.toInterval();
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.PeriodType periodType31 = org.joda.time.DateTimeUtils.getPeriodType(periodType30);
        org.joda.time.PeriodType periodType32 = org.joda.time.DateTimeUtils.getPeriodType(periodType30);
        org.joda.time.Period period33 = readableInterval24.toPeriod(periodType32);
        org.joda.time.Partial partial34 = partial13.plus((org.joda.time.ReadablePeriod) period33);
        int[] intArray37 = gregorianChronology5.get((org.joda.time.ReadablePeriod) period33, 1701289178545L, (long) (short) 0);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField39 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long42 = durationField39.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long44 = durationField39.getValueAsLong((long) 10);
        int int46 = durationField39.getValue((long) (byte) 10);
        boolean boolean47 = partial38.equals((java.lang.Object) durationField39);
        org.joda.time.Chronology chronology48 = partial38.getChronology();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial38.isBefore((org.joda.time.ReadablePartial) partial49);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray51 = partial38.getFieldTypes();
        boolean boolean53 = partial38.equals((java.lang.Object) 1702281558665L);
        java.lang.String str54 = partial38.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = partial38.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.Partial partial57 = partial38.plus(readablePeriod56);
        int[] intArray59 = gregorianChronology5.get((org.joda.time.ReadablePartial) partial38, 1701289179647L);
        org.joda.time.DateTimeField dateTimeField60 = gregorianChronology5.centuryOfEra();
        org.joda.time.DurationField durationField61 = gregorianChronology5.years();
        java.lang.String str62 = gregorianChronology5.toString();
        org.joda.time.DateTimeZone dateTimeZone63 = gregorianChronology5.getZone();
        java.lang.String str64 = gregorianChronology5.toString();
        org.junit.Assert.assertNotNull(gregorianChronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(readableInterval24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-53, -10, -4, 0, -20, -19, -38, -545]");
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 10L + "'", long44 == 10L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[]" + "'", str54, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter55);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "GregorianChronology[100]" + "'", str62, "GregorianChronology[100]");
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "GregorianChronology[100]" + "'", str64, "GregorianChronology[100]");
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2628");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        boolean boolean5 = durationFieldType0.isSupported(chronology3);
        org.joda.time.DurationField durationField6 = chronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.weekyearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField12 = new org.joda.time.field.OffsetDateTimeField(dateTimeField7, dateTimeFieldType8, 4, (int) ' ', (int) (short) -1);
        long long14 = offsetDateTimeField12.roundCeiling(2102400001L);
        int int15 = offsetDateTimeField12.getMinimumValue();
        boolean boolean17 = offsetDateTimeField12.isLeap(28800000L);
        long long19 = offsetDateTimeField12.roundFloor(2750411623L);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField21 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long24 = durationField21.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long26 = durationField21.getValueAsLong((long) 10);
        int int28 = durationField21.getValue((long) (byte) 10);
        boolean boolean29 = partial20.equals((java.lang.Object) durationField21);
        org.joda.time.ReadableInterval readableInterval30 = null;
        org.joda.time.ReadableInterval readableInterval31 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval30);
        org.joda.time.ReadableInterval readableInterval32 = null;
        boolean boolean33 = readableInterval31.contains(readableInterval32);
        org.joda.time.ReadableInterval readableInterval34 = null;
        boolean boolean35 = readableInterval31.isBefore(readableInterval34);
        org.joda.time.Interval interval36 = readableInterval31.toInterval();
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.PeriodType periodType38 = org.joda.time.DateTimeUtils.getPeriodType(periodType37);
        org.joda.time.PeriodType periodType39 = org.joda.time.DateTimeUtils.getPeriodType(periodType37);
        org.joda.time.Period period40 = readableInterval31.toPeriod(periodType39);
        org.joda.time.Partial partial41 = partial20.plus((org.joda.time.ReadablePeriod) period40);
        boolean boolean42 = org.joda.time.DateTimeUtils.isContiguous((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField44 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long47 = durationField44.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long49 = durationField44.getValueAsLong((long) 10);
        int int51 = durationField44.getValue((long) (byte) 10);
        boolean boolean52 = partial43.equals((java.lang.Object) durationField44);
        org.joda.time.Chronology chronology53 = partial43.getChronology();
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        boolean boolean55 = partial43.isBefore((org.joda.time.ReadablePartial) partial54);
        java.lang.String str56 = partial43.toString();
        boolean boolean57 = partial20.isBefore((org.joda.time.ReadablePartial) partial43);
        java.util.Locale locale59 = null;
        java.lang.String str60 = offsetDateTimeField12.getAsShortText((org.joda.time.ReadablePartial) partial20, 28354819, locale59);
        int[] intArray61 = partial20.getValues();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 31535999991L + "'", long14 == 31535999991L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 32 + "'", int15 == 32);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-9L) + "'", long19 == (-9L));
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10L + "'", long26 == 10L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(readableInterval31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 10L + "'", long49 == 10L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[]" + "'", str56, "[]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "28354819" + "'", str60, "28354819");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1479");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.ReadablePartial readablePartial4 = null;
        int int5 = dateTimeField3.getMinimumValue(readablePartial4);
        org.joda.time.ReadablePartial readablePartial6 = null;
        org.joda.time.ReadableInterval readableInterval7 = null;
        org.joda.time.ReadableInterval readableInterval8 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval7);
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval7);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.yearOfCentury();
        org.joda.time.DurationField durationField11 = chronology9.millis();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.clockhourOfDay();
        org.joda.time.ReadablePartial readablePartial14 = null;
        int[] intArray21 = new int[] { '#', (-1), 0, (byte) 1, (short) 1, (byte) 1 };
        int int22 = dateTimeField13.getMaximumValue(readablePartial14, intArray21);
        int int23 = dateTimeField3.getMinimumValue(readablePartial6, intArray21);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField26 = new org.joda.time.field.RemainderDateTimeField(dateTimeField3, dateTimeFieldType24, 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval28 = null;
        org.joda.time.ReadableInterval readableInterval29 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval28);
        org.joda.time.Chronology chronology30 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval28);
        org.joda.time.DateTimeField dateTimeField31 = chronology30.yearOfCentury();
        org.joda.time.DurationField durationField32 = chronology30.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField33 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType27, durationField32);
        long long36 = durationField32.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval38 = null;
        org.joda.time.ReadableInterval readableInterval39 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval38);
        org.joda.time.Chronology chronology40 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval38);
        org.joda.time.DateTimeField dateTimeField41 = chronology40.yearOfCentury();
        boolean boolean42 = durationFieldType37.isSupported(chronology40);
        org.joda.time.field.ScaledDurationField scaledDurationField44 = new org.joda.time.field.ScaledDurationField(durationField32, durationFieldType37, (int) 'a');
        long long45 = scaledDurationField44.getUnitMillis();
        org.joda.time.DurationFieldType durationFieldType46 = scaledDurationField44.getType();
        int int48 = scaledDurationField44.getValue((long) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType50 = dateTimeFieldType49.getDurationType();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField52 = new org.joda.time.field.RemainderDateTimeField((org.joda.time.DateTimeField) remainderDateTimeField26, (org.joda.time.DurationField) scaledDurationField44, dateTimeFieldType49, 53460006);
        java.lang.String str54 = remainderDateTimeField52.getAsShortText((long) (short) -1);
        long long56 = remainderDateTimeField52.roundHalfCeiling(1701289164695L);
        boolean boolean58 = remainderDateTimeField52.isLeap(2908670719L);
        int int59 = remainderDateTimeField52.iDivisor;
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(readableInterval8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[35, -1, 0, 1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 24 + "'", int22 == 24);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(readableInterval29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-210866846400000L) + "'", long36 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertNotNull(readableInterval39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 97L + "'", long45 == 97L);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "9" + "'", str54, "9");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1704067200000L + "'", long56 == 1704067200000L);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 53460006 + "'", int59 == 53460006);
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2814");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.DateTimeZone dateTimeZone6 = chronology2.getZone();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str8 = dateTimeZone7.toString();
        java.lang.String str10 = dateTimeZone7.getShortName((-210866846400000L));
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeUtils.getZone(dateTimeZone7);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone12 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone11);
        long long14 = dateTimeZone6.getMillisKeepLocal((org.joda.time.DateTimeZone) cachedDateTimeZone12, 60035L);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str16 = dateTimeZone15.toString();
        java.lang.String str18 = dateTimeZone15.getShortName((-210866846400000L));
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeUtils.getZone(dateTimeZone15);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone20 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone19);
        boolean boolean21 = cachedDateTimeZone12.equals((java.lang.Object) dateTimeZone19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval23 = null;
        org.joda.time.ReadableInterval readableInterval24 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval23);
        org.joda.time.Chronology chronology25 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval23);
        org.joda.time.DateTimeField dateTimeField26 = chronology25.yearOfCentury();
        org.joda.time.DurationField durationField27 = chronology25.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField28 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType22, durationField27);
        long long31 = durationField27.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval33 = null;
        org.joda.time.ReadableInterval readableInterval34 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval33);
        org.joda.time.Chronology chronology35 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval33);
        org.joda.time.DateTimeField dateTimeField36 = chronology35.yearOfCentury();
        boolean boolean37 = durationFieldType32.isSupported(chronology35);
        org.joda.time.field.ScaledDurationField scaledDurationField39 = new org.joda.time.field.ScaledDurationField(durationField27, durationFieldType32, (int) 'a');
        int int41 = scaledDurationField39.getValue((long) (short) -1);
        long long44 = scaledDurationField39.add((long) (-1), 10);
        org.joda.time.DurationFieldType durationFieldType45 = scaledDurationField39.getType();
        long long48 = scaledDurationField39.getMillis(1701289159810L, (long) (-1));
        java.lang.String str49 = scaledDurationField39.getName();
        boolean boolean50 = cachedDateTimeZone12.equals((java.lang.Object) scaledDurationField39);
        int int52 = cachedDateTimeZone12.getOffset((long) (short) 100);
        long long54 = cachedDateTimeZone12.nextTransition(455805865188819L);
        java.lang.String str55 = cachedDateTimeZone12.toString();
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(cachedDateTimeZone12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 60035L + "'", long14 == 60035L);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(cachedDateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(readableInterval24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-210866846400000L) + "'", long31 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertNotNull(readableInterval34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 969L + "'", long44 == 969L);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 165025048501570L + "'", long48 == 165025048501570L);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hours" + "'", str49, "hours");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 455805865188819L + "'", long54 == 455805865188819L);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "UTC" + "'", str55, "UTC");
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2893");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DurationField durationField2 = iSOChronology0.months();
        long long7 = iSOChronology0.getDateTimeMillis(1, 1, (int) (byte) 1, (int) (short) 100);
        org.joda.time.DurationField durationField8 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField10 = iSOChronology9.minutes();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology9.millisOfDay();
        org.joda.time.ReadableInterval readableInterval12 = null;
        org.joda.time.ReadableInterval readableInterval13 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval12);
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        org.joda.time.DurationField durationField16 = chronology14.millis();
        org.joda.time.DurationField durationField17 = chronology14.centuries();
        org.joda.time.ReadableInterval readableInterval18 = null;
        org.joda.time.ReadableInterval readableInterval19 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval18);
        org.joda.time.Chronology chronology20 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval18);
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfCentury();
        org.joda.time.DurationField durationField22 = chronology20.millis();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.Chronology chronology26 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval24);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval29 = null;
        org.joda.time.ReadableInterval readableInterval30 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval29);
        org.joda.time.ReadableInterval readableInterval31 = null;
        boolean boolean32 = readableInterval30.contains(readableInterval31);
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = readableInterval30.toPeriod(periodType33);
        int[] intArray36 = chronology26.get((org.joda.time.ReadablePeriod) period34, (-210866846400000L));
        int[] intArray39 = chronology20.get((org.joda.time.ReadablePeriod) period34, 2173795348453L, (long) 1439);
        int[] intArray42 = chronology14.get((org.joda.time.ReadablePeriod) period34, 291L, 2580171L);
        int[] intArray45 = iSOChronology9.get((org.joda.time.ReadablePeriod) period34, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField46 = iSOChronology9.months();
        java.lang.String str47 = iSOChronology9.toString();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = iSOChronology9.equals((java.lang.Object) partial48);
        long long51 = iSOChronology0.set((org.joda.time.ReadablePartial) partial48, (long) (short) 1);
        org.joda.time.DurationField durationField52 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField53 = iSOChronology0.hourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            long long59 = iSOChronology0.getDateTimeMillis(996723547200000L, (int) (short) 1, (int) (short) -1, (int) (byte) 100, 5);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(durationField2);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-62135596799909L) + "'", long7 == (-62135596799909L));
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(readableInterval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(readableInterval19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(readableInterval30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(durationField46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ISOChronology[73]" + "'", str47, "ISOChronology[73]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1973");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval3);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DurationField durationField7 = chronology5.millis();
        org.joda.time.DurationField durationField8 = chronology5.centuries();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval9);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology11.millis();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.ReadableInterval readableInterval16 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval15);
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.ReadableInterval readableInterval21 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval20);
        org.joda.time.ReadableInterval readableInterval22 = null;
        boolean boolean23 = readableInterval21.contains(readableInterval22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = readableInterval21.toPeriod(periodType24);
        int[] intArray27 = chronology17.get((org.joda.time.ReadablePeriod) period25, (-210866846400000L));
        int[] intArray30 = chronology11.get((org.joda.time.ReadablePeriod) period25, 2173795348453L, (long) 1439);
        int[] intArray33 = chronology5.get((org.joda.time.ReadablePeriod) period25, 291L, 2580171L);
        int[] intArray36 = iSOChronology0.get((org.joda.time.ReadablePeriod) period25, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField37 = iSOChronology0.months();
        java.lang.String str38 = iSOChronology0.toString();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = iSOChronology0.equals((java.lang.Object) partial39);
        org.joda.time.Chronology chronology41 = org.joda.time.DateTimeUtils.getChronology((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone46 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        int int48 = fixedDateTimeZone46.getStandardOffset((long) 1439);
        boolean boolean49 = fixedDateTimeZone46.isFixed();
        long long51 = fixedDateTimeZone46.nextTransition((long) 24);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        long long55 = dateTimeZone52.adjustOffset((long) 100, true);
        long long57 = fixedDateTimeZone46.getMillisKeepLocal(dateTimeZone52, 10L);
        org.joda.time.Chronology chronology58 = iSOChronology0.withZone((org.joda.time.DateTimeZone) fixedDateTimeZone46);
        org.joda.time.DateTimeField dateTimeField59 = iSOChronology0.secondOfDay();
        java.lang.String str60 = dateTimeField59.getName();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(readableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(readableInterval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(readableInterval21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(durationField37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[UTC]" + "'", str38, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 24L + "'", long51 == 24L);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 100L + "'", long55 == 100L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 10L + "'", long57 == 10L);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "secondOfDay" + "'", str60, "secondOfDay");
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2074");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        long long24 = remainderDateTimeField22.roundHalfFloor(3600000L);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval26 = null;
        org.joda.time.ReadableInterval readableInterval27 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval26);
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval26);
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfCentury();
        org.joda.time.DurationField durationField30 = chronology28.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField31 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType25, durationField30);
        long long34 = unsupportedDateTimeField31.add((-31L), (long) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = unsupportedDateTimeField31.getType();
        org.joda.time.DurationFieldType durationFieldType36 = dateTimeFieldType35.getRangeDurationType();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField37 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField22, dateTimeFieldType35);
        long long39 = dividedDateTimeField37.roundFloor((-1L));
        long long42 = dividedDateTimeField37.set(1701289161914L, (int) (byte) 0);
        int int45 = dividedDateTimeField37.getDifference((-97L), 35L);
        org.joda.time.DurationField durationField46 = dividedDateTimeField37.getLeapDurationField();
        org.joda.time.DurationField durationField47 = dividedDateTimeField37.getLeapDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.dayOfWeek();
        java.lang.String str49 = dateTimeFieldType48.getName();
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField50 = new org.joda.time.field.ZeroIsMaxDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField37, dateTimeFieldType48);
        java.lang.String str51 = zeroIsMaxDateTimeField50.toString();
        int int53 = zeroIsMaxDateTimeField50.getLeapAmount((-46185073064226L));
        long long56 = zeroIsMaxDateTimeField50.set(22689676800000L, 297109);
        long long58 = zeroIsMaxDateTimeField50.roundFloor(17460000L);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(readableInterval27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 4L + "'", long34 == 4L);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-315619200000L) + "'", long39 == (-315619200000L));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-62043766838086L) + "'", long42 == (-62043766838086L));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNull(durationField46);
        org.junit.Assert.assertNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "dayOfWeek" + "'", str49, "dayOfWeek");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "DateTimeField[dayOfWeek]" + "'", str51, "DateTimeField[dayOfWeek]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 93696661526400000L + "'", long56 == 93696661526400000L);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1938");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add((-31L), (long) '#');
        org.joda.time.DurationField durationField10 = unsupportedDateTimeField6.getLeapDurationField();
        int int13 = unsupportedDateTimeField6.getDifference((long) (byte) 10, 10L);
        long long16 = unsupportedDateTimeField6.add((long) 1439, (int) (byte) -1);
        org.joda.time.DurationField durationField17 = unsupportedDateTimeField6.getLeapDurationField();
        org.joda.time.DurationField durationField18 = unsupportedDateTimeField6.getDurationField();
        org.joda.time.DurationField durationField19 = unsupportedDateTimeField6.getRangeDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = unsupportedDateTimeField6.getType();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField22 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long25 = durationField22.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long27 = durationField22.getValueAsLong((long) 10);
        int int29 = durationField22.getValue((long) (byte) 10);
        boolean boolean30 = partial21.equals((java.lang.Object) durationField22);
        org.joda.time.Chronology chronology31 = partial21.getChronology();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        boolean boolean33 = partial21.isBefore((org.joda.time.ReadablePartial) partial32);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray34 = partial21.getFieldTypes();
        boolean boolean36 = partial21.equals((java.lang.Object) 1702281558665L);
        java.lang.String str37 = partial21.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = partial21.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial40 = partial21.plus(readablePeriod39);
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField42 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long45 = durationField42.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long47 = durationField42.getValueAsLong((long) 10);
        int int49 = durationField42.getValue((long) (byte) 10);
        boolean boolean50 = partial41.equals((java.lang.Object) durationField42);
        org.joda.time.Chronology chronology51 = partial41.getChronology();
        java.lang.String str52 = partial41.toString();
        boolean boolean53 = partial40.isAfter((org.joda.time.ReadablePartial) partial41);
        java.lang.String str54 = partial40.toString();
        int[] intArray55 = partial40.getValues();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = null;
        java.lang.String str57 = partial40.toString(dateTimeFormatter56);
        int[] intArray59 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray61 = unsupportedDateTimeField6.addWrapPartial((org.joda.time.ReadablePartial) partial40, (-5), intArray59, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1438L + "'", long16 == 1438L);
        org.junit.Assert.assertNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[]" + "'", str37, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 10L + "'", long47 == 10L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[]" + "'", str52, "[]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[]" + "'", str54, "[]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2250");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        int int23 = remainderDateTimeField22.getMaximumValue();
        boolean boolean25 = remainderDateTimeField22.isLeap((-62135568421900L));
        long long27 = remainderDateTimeField22.roundHalfFloor(0L);
        org.joda.time.chrono.ISOChronology iSOChronology28 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology28.secondOfDay();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology28.dayOfYear();
        org.joda.time.DurationField durationField31 = iSOChronology28.minutes();
        org.joda.time.DurationField durationField32 = iSOChronology28.seconds();
        org.joda.time.DurationField durationField33 = iSOChronology28.weeks();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology28.millisOfSecond();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField36 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long39 = durationField36.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long41 = durationField36.getValueAsLong((long) 10);
        int int43 = durationField36.getValue((long) (byte) 10);
        boolean boolean44 = partial35.equals((java.lang.Object) durationField36);
        org.joda.time.Chronology chronology45 = partial35.getChronology();
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        boolean boolean47 = partial35.isBefore((org.joda.time.ReadablePartial) partial46);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray48 = partial35.getFieldTypes();
        boolean boolean50 = partial35.equals((java.lang.Object) 1702281558665L);
        java.lang.String str51 = partial35.toString();
        int[] intArray53 = iSOChronology28.get((org.joda.time.ReadablePartial) partial35, 9700L);
        java.util.Locale locale54 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str55 = remainderDateTimeField22.getAsText((org.joda.time.ReadablePartial) partial35, locale54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'dayOfYear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(iSOChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 10L + "'", long41 == 10L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[]" + "'", str51, "[]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2044");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = zonedChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField6 = zonedChronology4.monthOfYear();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField8 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long11 = durationField8.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long13 = durationField8.getValueAsLong((long) 10);
        int int15 = durationField8.getValue((long) (byte) 10);
        boolean boolean16 = partial7.equals((java.lang.Object) durationField8);
        org.joda.time.Chronology chronology17 = partial7.getChronology();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial7.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial7.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.ReadableInterval readableInterval22 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval21);
        long long23 = readableInterval22.getStartMillis();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.ReadableInterval readableInterval26 = null;
        boolean boolean27 = readableInterval25.contains(readableInterval26);
        org.joda.time.Duration duration28 = readableInterval25.toDuration();
        org.joda.time.DateTime dateTime29 = readableInterval25.getEnd();
        boolean boolean30 = readableInterval22.contains((org.joda.time.ReadableInstant) dateTime29);
        boolean boolean31 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime29);
        int[] intArray33 = zonedChronology4.get((org.joda.time.ReadablePartial) partial7, 60035L);
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology4.secondOfMinute();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone39 = new org.joda.time.tz.FixedDateTimeZone("UTC", "", 0, 4);
        java.util.TimeZone timeZone40 = fixedDateTimeZone39.toTimeZone();
        java.util.TimeZone timeZone41 = fixedDateTimeZone39.toTimeZone();
        org.joda.time.chrono.ISOChronology iSOChronology42 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField43 = iSOChronology42.minutes();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str45 = dateTimeZone44.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology46 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology42, dateTimeZone44);
        org.joda.time.DateTimeZone dateTimeZone47 = zonedChronology46.getZone();
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone48 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone47);
        long long50 = fixedDateTimeZone39.getMillisKeepLocal(dateTimeZone47, (-1700857185313L));
        org.joda.time.Chronology chronology51 = zonedChronology4.withZone((org.joda.time.DateTimeZone) fixedDateTimeZone39);
        int int53 = fixedDateTimeZone39.getOffset((long) 970);
        java.util.TimeZone timeZone54 = fixedDateTimeZone39.toTimeZone();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(readableInterval22);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 114669905175276L + "'", long23 == 114669905175276L);
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(iSOChronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "UTC" + "'", str45, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(cachedDateTimeZone48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-1700857185313L) + "'", long50 == (-1700857185313L));
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(timeZone54);
        org.junit.Assert.assertEquals(timeZone54.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0331");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField11 = new org.joda.time.field.OffsetDateTimeField(dateTimeField8, dateTimeFieldType9, (int) (short) 1);
        long long14 = offsetDateTimeField11.addWrapField((long) 0, (int) (short) 0);
        long long17 = offsetDateTimeField11.add((long) (short) 0, 1439);
        long long19 = offsetDateTimeField11.roundHalfFloor(1701289168550L);
        java.lang.String str20 = offsetDateTimeField11.toString();
        org.joda.time.chrono.ISOChronology iSOChronology21 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField22 = iSOChronology21.weeks();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology21.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology21.weekyearOfCentury();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField26 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long29 = durationField26.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long31 = durationField26.getValueAsLong((long) 10);
        int int33 = durationField26.getValue((long) (byte) 10);
        boolean boolean34 = partial25.equals((java.lang.Object) durationField26);
        org.joda.time.Chronology chronology35 = partial25.getChronology();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        boolean boolean37 = partial25.isBefore((org.joda.time.ReadablePartial) partial36);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray38 = partial25.getFieldTypes();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField40 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long43 = durationField40.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long45 = durationField40.getValueAsLong((long) 10);
        int int47 = durationField40.getValue((long) (byte) 10);
        boolean boolean48 = partial39.equals((java.lang.Object) durationField40);
        org.joda.time.Chronology chronology49 = partial39.getChronology();
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        boolean boolean51 = partial39.isBefore((org.joda.time.ReadablePartial) partial50);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray52 = partial39.getFieldTypes();
        boolean boolean54 = partial39.equals((java.lang.Object) 1702281558665L);
        int int55 = partial25.compareTo((org.joda.time.ReadablePartial) partial39);
        java.util.Locale locale57 = null;
        java.lang.String str58 = dateTimeField24.getAsText((org.joda.time.ReadablePartial) partial25, (int) (byte) 10, locale57);
        java.util.Locale locale59 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str60 = offsetDateTimeField11.getAsShortText((org.joda.time.ReadablePartial) partial25, locale59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'millisOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 5180400000L + "'", long17 == 5180400000L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1701288000000L + "'", long19 == 1701288000000L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "DateTimeField[millisOfDay]" + "'", str20, "DateTimeField[millisOfDay]");
        org.junit.Assert.assertNotNull(iSOChronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 10L + "'", long31 == 10L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray38);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 10L + "'", long45 == 10L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "10" + "'", str58, "10");
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2420");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.ReadablePartial readablePartial4 = null;
        int int5 = dateTimeField3.getMinimumValue(readablePartial4);
        org.joda.time.ReadablePartial readablePartial6 = null;
        org.joda.time.ReadableInterval readableInterval7 = null;
        org.joda.time.ReadableInterval readableInterval8 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval7);
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval7);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.yearOfCentury();
        org.joda.time.DurationField durationField11 = chronology9.millis();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.clockhourOfDay();
        org.joda.time.ReadablePartial readablePartial14 = null;
        int[] intArray21 = new int[] { '#', (-1), 0, (byte) 1, (short) 1, (byte) 1 };
        int int22 = dateTimeField13.getMaximumValue(readablePartial14, intArray21);
        int int23 = dateTimeField3.getMinimumValue(readablePartial6, intArray21);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField26 = new org.joda.time.field.RemainderDateTimeField(dateTimeField3, dateTimeFieldType24, 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval28 = null;
        org.joda.time.ReadableInterval readableInterval29 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval28);
        org.joda.time.Chronology chronology30 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval28);
        org.joda.time.DateTimeField dateTimeField31 = chronology30.yearOfCentury();
        org.joda.time.DurationField durationField32 = chronology30.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField33 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType27, durationField32);
        long long36 = durationField32.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval38 = null;
        org.joda.time.ReadableInterval readableInterval39 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval38);
        org.joda.time.Chronology chronology40 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval38);
        org.joda.time.DateTimeField dateTimeField41 = chronology40.yearOfCentury();
        boolean boolean42 = durationFieldType37.isSupported(chronology40);
        org.joda.time.field.ScaledDurationField scaledDurationField44 = new org.joda.time.field.ScaledDurationField(durationField32, durationFieldType37, (int) 'a');
        long long45 = scaledDurationField44.getUnitMillis();
        org.joda.time.DurationFieldType durationFieldType46 = scaledDurationField44.getType();
        int int48 = scaledDurationField44.getValue((long) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType50 = dateTimeFieldType49.getDurationType();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField52 = new org.joda.time.field.RemainderDateTimeField((org.joda.time.DateTimeField) remainderDateTimeField26, (org.joda.time.DurationField) scaledDurationField44, dateTimeFieldType49, 53460006);
        int int54 = remainderDateTimeField52.get(1577836800000L);
        long long57 = remainderDateTimeField52.getDifferenceAsLong(3600009L, (long) 28);
        org.joda.time.DurationField durationField58 = remainderDateTimeField52.getRangeDurationField();
        org.joda.time.DurationField durationField59 = remainderDateTimeField52.getRangeDurationField();
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(readableInterval8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[35, -1, 0, 1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 24 + "'", int22 == 24);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(readableInterval29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-210866846400000L) + "'", long36 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertNotNull(readableInterval39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 97L + "'", long45 == 97L);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(durationField59);
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2657");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = null;
        boolean boolean3 = readableInterval1.contains(readableInterval2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = readableInterval1.toPeriod(periodType4);
        org.joda.time.DateTime dateTime6 = readableInterval1.getEnd();
        org.joda.time.ReadableInterval readableInterval7 = null;
        org.joda.time.ReadableInterval readableInterval8 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval7);
        org.joda.time.ReadableInterval readableInterval9 = null;
        boolean boolean10 = readableInterval8.contains(readableInterval9);
        org.joda.time.Duration duration11 = readableInterval8.toDuration();
        org.joda.time.DateTime dateTime12 = readableInterval8.getEnd();
        org.joda.time.Period period13 = readableInterval8.toPeriod();
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval8);
        boolean boolean15 = readableInterval1.isAfter(readableInterval8);
        org.joda.time.DateTime dateTime16 = readableInterval1.getEnd();
        long long17 = readableInterval1.toDurationMillis();
        org.joda.time.ReadableInterval readableInterval18 = null;
        org.joda.time.ReadableInterval readableInterval19 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval18);
        org.joda.time.ReadableInterval readableInterval20 = null;
        boolean boolean21 = readableInterval19.contains(readableInterval20);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = readableInterval19.toPeriod(periodType22);
        org.joda.time.DateTime dateTime24 = readableInterval19.getEnd();
        org.joda.time.ReadableInterval readableInterval25 = null;
        org.joda.time.ReadableInterval readableInterval26 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval25);
        org.joda.time.ReadableInterval readableInterval27 = null;
        boolean boolean28 = readableInterval26.contains(readableInterval27);
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Period period30 = readableInterval26.toPeriod(periodType29);
        org.joda.time.DateTime dateTime31 = readableInterval26.getEnd();
        org.joda.time.ReadableInterval readableInterval32 = null;
        org.joda.time.ReadableInterval readableInterval33 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval32);
        org.joda.time.ReadableInterval readableInterval34 = null;
        boolean boolean35 = readableInterval33.contains(readableInterval34);
        org.joda.time.ReadableInterval readableInterval36 = null;
        org.joda.time.ReadableInterval readableInterval37 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval36);
        org.joda.time.ReadableInterval readableInterval38 = null;
        boolean boolean39 = readableInterval37.contains(readableInterval38);
        org.joda.time.ReadableInterval readableInterval40 = null;
        boolean boolean41 = readableInterval37.isBefore(readableInterval40);
        org.joda.time.Interval interval42 = readableInterval37.toInterval();
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.PeriodType periodType44 = org.joda.time.DateTimeUtils.getPeriodType(periodType43);
        org.joda.time.PeriodType periodType45 = org.joda.time.DateTimeUtils.getPeriodType(periodType43);
        org.joda.time.Period period46 = readableInterval37.toPeriod(periodType45);
        org.joda.time.Period period47 = readableInterval33.toPeriod(periodType45);
        org.joda.time.PeriodType periodType48 = org.joda.time.DateTimeUtils.getPeriodType(periodType45);
        org.joda.time.PeriodType periodType49 = org.joda.time.DateTimeUtils.getPeriodType(periodType45);
        org.joda.time.Period period50 = readableInterval26.toPeriod(periodType49);
        org.joda.time.PeriodType periodType51 = org.joda.time.DateTimeUtils.getPeriodType(periodType49);
        org.joda.time.Period period52 = readableInterval19.toPeriod(periodType49);
        boolean boolean53 = readableInterval1.equals((java.lang.Object) readableInterval19);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(readableInterval8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(readableInterval19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(readableInterval26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(readableInterval33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(readableInterval37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2522");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology5 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone6 = gregorianChronology5.getZone();
        long long10 = gregorianChronology5.add(0L, (long) (byte) 1, (int) (byte) 0);
        org.joda.time.DateTimeField dateTimeField11 = gregorianChronology5.millisOfDay();
        org.joda.time.DurationField durationField12 = gregorianChronology5.weeks();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField14 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long17 = durationField14.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long19 = durationField14.getValueAsLong((long) 10);
        int int21 = durationField14.getValue((long) (byte) 10);
        boolean boolean22 = partial13.equals((java.lang.Object) durationField14);
        org.joda.time.ReadableInterval readableInterval23 = null;
        org.joda.time.ReadableInterval readableInterval24 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval23);
        org.joda.time.ReadableInterval readableInterval25 = null;
        boolean boolean26 = readableInterval24.contains(readableInterval25);
        org.joda.time.ReadableInterval readableInterval27 = null;
        boolean boolean28 = readableInterval24.isBefore(readableInterval27);
        org.joda.time.Interval interval29 = readableInterval24.toInterval();
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.PeriodType periodType31 = org.joda.time.DateTimeUtils.getPeriodType(periodType30);
        org.joda.time.PeriodType periodType32 = org.joda.time.DateTimeUtils.getPeriodType(periodType30);
        org.joda.time.Period period33 = readableInterval24.toPeriod(periodType32);
        org.joda.time.Partial partial34 = partial13.plus((org.joda.time.ReadablePeriod) period33);
        int[] intArray37 = gregorianChronology5.get((org.joda.time.ReadablePeriod) period33, 1701289178545L, (long) (short) 0);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField39 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long42 = durationField39.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long44 = durationField39.getValueAsLong((long) 10);
        int int46 = durationField39.getValue((long) (byte) 10);
        boolean boolean47 = partial38.equals((java.lang.Object) durationField39);
        org.joda.time.Chronology chronology48 = partial38.getChronology();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial38.isBefore((org.joda.time.ReadablePartial) partial49);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray51 = partial38.getFieldTypes();
        boolean boolean53 = partial38.equals((java.lang.Object) 1702281558665L);
        java.lang.String str54 = partial38.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = partial38.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.Partial partial57 = partial38.plus(readablePeriod56);
        int[] intArray59 = gregorianChronology5.get((org.joda.time.ReadablePartial) partial38, 1701289179647L);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.era();
        int int61 = partial38.indexOf(dateTimeFieldType60);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType63 = partial38.getFieldType(202);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 202");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(readableInterval24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-53, -10, -4, 0, -20, -19, -38, -545]");
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 10L + "'", long44 == 10L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[]" + "'", str54, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter55);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1738");
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField0 = null;
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField2 = iSOChronology1.minutes();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str4 = dateTimeZone3.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology5 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology1, dateTimeZone3);
        java.lang.String str6 = zonedChronology5.toString();
        org.joda.time.DateTimeField dateTimeField7 = zonedChronology5.millisOfDay();
        org.joda.time.DurationField durationField8 = zonedChronology5.seconds();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.dayOfWeek();
        java.lang.String str10 = dateTimeFieldType9.getName();
        org.joda.time.IllegalFieldValueException illegalFieldValueException12 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType9, "-08:00");
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval14 = null;
        org.joda.time.ReadableInterval readableInterval15 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval14);
        org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval14);
        org.joda.time.DateTimeField dateTimeField17 = chronology16.yearOfCentury();
        org.joda.time.DurationField durationField18 = chronology16.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField19 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType13, durationField18);
        long long22 = durationField18.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.Chronology chronology26 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval24);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfCentury();
        boolean boolean28 = durationFieldType23.isSupported(chronology26);
        org.joda.time.field.ScaledDurationField scaledDurationField30 = new org.joda.time.field.ScaledDurationField(durationField18, durationFieldType23, (int) 'a');
        int int32 = scaledDurationField30.getValue((long) (short) -1);
        boolean boolean33 = scaledDurationField30.isSupported();
        long long36 = scaledDurationField30.getDifferenceAsLong(28800001L, (-210858120000000L));
        java.lang.String str37 = scaledDurationField30.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType39 = dateTimeFieldType38.getDurationType();
        org.joda.time.field.PreciseDurationField preciseDurationField41 = new org.joda.time.field.PreciseDurationField(durationFieldType39, 28354819L);
        long long42 = preciseDurationField41.getUnitMillis();
        boolean boolean43 = preciseDurationField41.isPrecise();
        long long46 = preciseDurationField41.getValueAsLong((long) 719, 306607L);
        org.joda.time.field.PreciseDateTimeField preciseDateTimeField47 = new org.joda.time.field.PreciseDateTimeField(dateTimeFieldType9, (org.joda.time.DurationField) scaledDurationField30, (org.joda.time.DurationField) preciseDurationField41);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.field.DividedDateTimeField dividedDateTimeField48 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField0, durationField8, dateTimeFieldType9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "UTC" + "'", str4, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str6, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "dayOfWeek" + "'", str10, "dayOfWeek");
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(readableInterval15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-210866846400000L) + "'", long22 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 2173795348453L + "'", long36 == 2173795348453L);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "DurationField[hours]" + "'", str37, "DurationField[hours]");
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 28354819L + "'", long42 == 28354819L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0873");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology5 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone6 = gregorianChronology5.getZone();
        long long10 = gregorianChronology5.add(0L, (long) (byte) 1, (int) (byte) 0);
        org.joda.time.DateTimeField dateTimeField11 = gregorianChronology5.millisOfDay();
        org.joda.time.DurationField durationField12 = gregorianChronology5.weeks();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField14 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long17 = durationField14.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long19 = durationField14.getValueAsLong((long) 10);
        int int21 = durationField14.getValue((long) (byte) 10);
        boolean boolean22 = partial13.equals((java.lang.Object) durationField14);
        org.joda.time.ReadableInterval readableInterval23 = null;
        org.joda.time.ReadableInterval readableInterval24 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval23);
        org.joda.time.ReadableInterval readableInterval25 = null;
        boolean boolean26 = readableInterval24.contains(readableInterval25);
        org.joda.time.ReadableInterval readableInterval27 = null;
        boolean boolean28 = readableInterval24.isBefore(readableInterval27);
        org.joda.time.Interval interval29 = readableInterval24.toInterval();
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.PeriodType periodType31 = org.joda.time.DateTimeUtils.getPeriodType(periodType30);
        org.joda.time.PeriodType periodType32 = org.joda.time.DateTimeUtils.getPeriodType(periodType30);
        org.joda.time.Period period33 = readableInterval24.toPeriod(periodType32);
        org.joda.time.Partial partial34 = partial13.plus((org.joda.time.ReadablePeriod) period33);
        int[] intArray37 = gregorianChronology5.get((org.joda.time.ReadablePeriod) period33, 1701289178545L, (long) (short) 0);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField39 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long42 = durationField39.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long44 = durationField39.getValueAsLong((long) 10);
        int int46 = durationField39.getValue((long) (byte) 10);
        boolean boolean47 = partial38.equals((java.lang.Object) durationField39);
        org.joda.time.Chronology chronology48 = partial38.getChronology();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial38.isBefore((org.joda.time.ReadablePartial) partial49);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray51 = partial38.getFieldTypes();
        boolean boolean53 = partial38.equals((java.lang.Object) 1702281558665L);
        java.lang.String str54 = partial38.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = partial38.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.Partial partial57 = partial38.plus(readablePeriod56);
        int[] intArray59 = gregorianChronology5.get((org.joda.time.ReadablePartial) partial38, 1701289179647L);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.era();
        int int61 = partial38.indexOf(dateTimeFieldType60);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField63 = partial38.getField(13);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 13");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(readableInterval24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-53, -10, -4, 0, -20, -19, -38, -545]");
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 10L + "'", long44 == 10L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[]" + "'", str54, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter55);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2631");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = zonedChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField6 = zonedChronology4.monthOfYear();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField8 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long11 = durationField8.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long13 = durationField8.getValueAsLong((long) 10);
        int int15 = durationField8.getValue((long) (byte) 10);
        boolean boolean16 = partial7.equals((java.lang.Object) durationField8);
        org.joda.time.Chronology chronology17 = partial7.getChronology();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial7.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial7.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.ReadableInterval readableInterval22 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval21);
        long long23 = readableInterval22.getStartMillis();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.ReadableInterval readableInterval26 = null;
        boolean boolean27 = readableInterval25.contains(readableInterval26);
        org.joda.time.Duration duration28 = readableInterval25.toDuration();
        org.joda.time.DateTime dateTime29 = readableInterval25.getEnd();
        boolean boolean30 = readableInterval22.contains((org.joda.time.ReadableInstant) dateTime29);
        boolean boolean31 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime29);
        int[] intArray33 = zonedChronology4.get((org.joda.time.ReadablePartial) partial7, 60035L);
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology4.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str36 = dateTimeZone35.toString();
        java.lang.String str38 = dateTimeZone35.getShortName((-210866846400000L));
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeUtils.getZone(dateTimeZone35);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone40 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone39);
        boolean boolean42 = cachedDateTimeZone40.equals((java.lang.Object) 432000032L);
        int int44 = cachedDateTimeZone40.getOffset(1701289169842L);
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder45 = new org.joda.time.tz.DateTimeZoneBuilder();
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder47 = dateTimeZoneBuilder45.setStandardOffset((int) 'a');
        boolean boolean48 = cachedDateTimeZone40.equals((java.lang.Object) 'a');
        org.joda.time.Chronology chronology49 = zonedChronology4.withZone((org.joda.time.DateTimeZone) cachedDateTimeZone40);
        org.joda.time.DateTimeField dateTimeField50 = zonedChronology4.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long55 = zonedChronology4.getDateTimeMillis((-68), 37113, (-21674226), 30);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 37113 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(readableInterval22);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 116371194838348L + "'", long23 == 116371194838348L);
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "UTC" + "'", str36, "UTC");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(cachedDateTimeZone40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0384");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField11 = new org.joda.time.field.OffsetDateTimeField(dateTimeField8, dateTimeFieldType9, (int) (short) 1);
        long long14 = offsetDateTimeField11.addWrapField((long) 0, (int) (short) 0);
        long long17 = offsetDateTimeField11.add((long) (short) 0, 1439);
        long long19 = offsetDateTimeField11.roundFloor((-5L));
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField21 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long24 = durationField21.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long26 = durationField21.getValueAsLong((long) 10);
        int int28 = durationField21.getValue((long) (byte) 10);
        boolean boolean29 = partial20.equals((java.lang.Object) durationField21);
        org.joda.time.Chronology chronology30 = partial20.getChronology();
        java.lang.String str31 = partial20.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray32 = partial20.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval33 = null;
        org.joda.time.ReadableInterval readableInterval34 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval33);
        org.joda.time.ReadableInterval readableInterval35 = null;
        boolean boolean36 = readableInterval34.contains(readableInterval35);
        org.joda.time.ReadableInterval readableInterval37 = null;
        boolean boolean38 = readableInterval34.isBefore(readableInterval37);
        org.joda.time.Interval interval39 = readableInterval34.toInterval();
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.PeriodType periodType41 = org.joda.time.DateTimeUtils.getPeriodType(periodType40);
        org.joda.time.PeriodType periodType42 = org.joda.time.DateTimeUtils.getPeriodType(periodType40);
        org.joda.time.Period period43 = readableInterval34.toPeriod(periodType42);
        org.joda.time.Partial partial44 = partial20.plus((org.joda.time.ReadablePeriod) period43);
        org.joda.time.ReadableInterval readableInterval46 = null;
        org.joda.time.ReadableInterval readableInterval47 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval46);
        org.joda.time.Chronology chronology48 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval46);
        org.joda.time.DateTimeField dateTimeField49 = chronology48.yearOfCentury();
        org.joda.time.DurationField durationField50 = chronology48.millis();
        org.joda.time.DateTimeField dateTimeField51 = chronology48.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField52 = chronology48.clockhourOfDay();
        org.joda.time.ReadablePartial readablePartial53 = null;
        int[] intArray60 = new int[] { '#', (-1), 0, (byte) 1, (short) 1, (byte) 1 };
        int int61 = dateTimeField52.getMaximumValue(readablePartial53, intArray60);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray63 = offsetDateTimeField11.add((org.joda.time.ReadablePartial) partial20, 296907, intArray60, 28);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 296907");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 5180400000L + "'", long17 == 5180400000L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-3600000L) + "'", long19 == (-3600000L));
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10L + "'", long26 == 10L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray32);
        org.junit.Assert.assertNotNull(readableInterval34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(readableInterval47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[35, -1, 0, 1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 24 + "'", int61 == 24);
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2113");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DurationField durationField2 = iSOChronology0.months();
        long long7 = iSOChronology0.getDateTimeMillis(1, 1, (int) (byte) 1, (int) (short) 100);
        org.joda.time.DurationField durationField8 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField10 = iSOChronology9.minutes();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology9.millisOfDay();
        org.joda.time.ReadableInterval readableInterval12 = null;
        org.joda.time.ReadableInterval readableInterval13 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval12);
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        org.joda.time.DurationField durationField16 = chronology14.millis();
        org.joda.time.DurationField durationField17 = chronology14.centuries();
        org.joda.time.ReadableInterval readableInterval18 = null;
        org.joda.time.ReadableInterval readableInterval19 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval18);
        org.joda.time.Chronology chronology20 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval18);
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfCentury();
        org.joda.time.DurationField durationField22 = chronology20.millis();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.Chronology chronology26 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval24);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval29 = null;
        org.joda.time.ReadableInterval readableInterval30 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval29);
        org.joda.time.ReadableInterval readableInterval31 = null;
        boolean boolean32 = readableInterval30.contains(readableInterval31);
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = readableInterval30.toPeriod(periodType33);
        int[] intArray36 = chronology26.get((org.joda.time.ReadablePeriod) period34, (-210866846400000L));
        int[] intArray39 = chronology20.get((org.joda.time.ReadablePeriod) period34, 2173795348453L, (long) 1439);
        int[] intArray42 = chronology14.get((org.joda.time.ReadablePeriod) period34, 291L, 2580171L);
        int[] intArray45 = iSOChronology9.get((org.joda.time.ReadablePeriod) period34, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField46 = iSOChronology9.months();
        java.lang.String str47 = iSOChronology9.toString();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = iSOChronology9.equals((java.lang.Object) partial48);
        long long51 = iSOChronology0.set((org.joda.time.ReadablePartial) partial48, (long) (short) 1);
        boolean boolean52 = org.joda.time.DateTimeUtils.isContiguous((org.joda.time.ReadablePartial) partial48);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType54 = partial48.getFieldType((-28799996));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -28799996");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(durationField2);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-62135596799907L) + "'", long7 == (-62135596799907L));
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(readableInterval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(readableInterval19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(readableInterval30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(intArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(durationField46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ISOChronology[hourOfDay]" + "'", str47, "ISOChronology[hourOfDay]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1772");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        org.joda.time.DurationField durationField7 = unsupportedDateTimeField6.getDurationField();
        boolean boolean8 = unsupportedDateTimeField6.isLenient();
        org.joda.time.DurationField durationField9 = unsupportedDateTimeField6.getRangeDurationField();
        boolean boolean10 = unsupportedDateTimeField6.isSupported();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField12 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long15 = durationField12.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long17 = durationField12.getValueAsLong((long) 10);
        int int19 = durationField12.getValue((long) (byte) 10);
        boolean boolean20 = partial11.equals((java.lang.Object) durationField12);
        org.joda.time.Chronology chronology21 = partial11.getChronology();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial11.isBefore((org.joda.time.ReadablePartial) partial22);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = partial11.getFieldTypes();
        boolean boolean26 = partial11.equals((java.lang.Object) 1702281558665L);
        java.lang.String str27 = partial11.toString();
        org.joda.time.Chronology chronology28 = partial11.getChronology();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField31 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long34 = durationField31.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long36 = durationField31.getValueAsLong((long) 10);
        int int38 = durationField31.getValue((long) (byte) 10);
        boolean boolean39 = partial30.equals((java.lang.Object) durationField31);
        org.joda.time.Chronology chronology40 = partial30.getChronology();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        boolean boolean42 = partial30.isBefore((org.joda.time.ReadablePartial) partial41);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray43 = partial30.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval44 = null;
        org.joda.time.ReadableInterval readableInterval45 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval44);
        org.joda.time.ReadableInterval readableInterval46 = null;
        boolean boolean47 = readableInterval45.contains(readableInterval46);
        org.joda.time.ReadableInterval readableInterval48 = null;
        boolean boolean49 = readableInterval45.isBefore(readableInterval48);
        org.joda.time.DateTime dateTime50 = readableInterval45.getEnd();
        boolean boolean51 = partial30.isMatch((org.joda.time.ReadableInstant) dateTime50);
        int[] intArray52 = partial30.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray54 = unsupportedDateTimeField6.add((org.joda.time.ReadablePartial) partial11, 955, intArray52, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(durationField9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[]" + "'", str27, "[]");
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 10L + "'", long36 == 10L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray43);
        org.junit.Assert.assertNotNull(readableInterval45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2974");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        org.joda.time.DurationField durationField7 = unsupportedDateTimeField6.getDurationField();
        long long10 = unsupportedDateTimeField6.add((-53459996L), (int) (short) 0);
        org.joda.time.ReadableInterval readableInterval11 = null;
        org.joda.time.ReadableInterval readableInterval12 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval11);
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval11);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.minuteOfDay();
        java.lang.String str15 = dateTimeField14.toString();
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField17 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long20 = durationField17.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long22 = durationField17.getValueAsLong((long) 10);
        int int24 = durationField17.getValue((long) (byte) 10);
        boolean boolean25 = partial16.equals((java.lang.Object) durationField17);
        org.joda.time.Chronology chronology26 = partial16.getChronology();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        boolean boolean28 = partial16.isBefore((org.joda.time.ReadablePartial) partial27);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = partial16.getFieldTypes();
        boolean boolean31 = partial16.equals((java.lang.Object) 1702281558665L);
        java.lang.String str32 = partial16.toString();
        java.lang.String str33 = partial16.toString();
        java.util.Locale locale35 = null;
        java.lang.String str36 = dateTimeField14.getAsText((org.joda.time.ReadablePartial) partial16, 28, locale35);
        java.lang.String str37 = partial16.toStringList();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField40 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long43 = durationField40.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long45 = durationField40.getValueAsLong((long) 10);
        int int47 = durationField40.getValue((long) (byte) 10);
        boolean boolean48 = partial39.equals((java.lang.Object) durationField40);
        org.joda.time.Chronology chronology49 = partial39.getChronology();
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        boolean boolean51 = partial39.isBefore((org.joda.time.ReadablePartial) partial50);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray52 = partial39.getFieldTypes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = partial39.getFormatter();
        int[] intArray54 = partial39.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray56 = unsupportedDateTimeField6.add((org.joda.time.ReadablePartial) partial16, (-3158), intArray54, 13);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-53459996L) + "'", long10 == (-53459996L));
        org.junit.Assert.assertNotNull(readableInterval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "DateTimeField[minuteOfDay]" + "'", str15, "DateTimeField[minuteOfDay]");
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10L + "'", long22 == 10L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[]" + "'", str32, "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "28" + "'", str36, "28");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[]" + "'", str37, "[]");
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 10L + "'", long45 == 10L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray52);
        org.junit.Assert.assertNull(dateTimeFormatter53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0009");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        org.joda.time.ReadablePartial readablePartial23 = null;
        java.util.Locale locale25 = null;
        java.lang.String str26 = dividedDateTimeField11.getAsShortText(readablePartial23, (int) ' ', locale25);
        org.joda.time.ReadablePartial readablePartial27 = null;
        java.util.Locale locale29 = null;
        java.lang.String str30 = dividedDateTimeField11.getAsText(readablePartial27, (int) (byte) 10, locale29);
        long long32 = dividedDateTimeField11.roundHalfFloor((long) 100);
        long long35 = dividedDateTimeField11.getDifferenceAsLong((-30610224000000L), (long) 24);
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField37 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long40 = durationField37.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long42 = durationField37.getValueAsLong((long) 10);
        int int44 = durationField37.getValue((long) (byte) 10);
        boolean boolean45 = partial36.equals((java.lang.Object) durationField37);
        org.joda.time.ReadableInterval readableInterval47 = null;
        org.joda.time.ReadableInterval readableInterval48 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval47);
        org.joda.time.Chronology chronology49 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval47);
        org.joda.time.DateTimeField dateTimeField50 = chronology49.yearOfCentury();
        org.joda.time.DurationField durationField51 = chronology49.millis();
        org.joda.time.DateTimeField dateTimeField52 = chronology49.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField53 = chronology49.clockhourOfDay();
        org.joda.time.ReadablePartial readablePartial54 = null;
        int[] intArray61 = new int[] { '#', (-1), 0, (byte) 1, (short) 1, (byte) 1 };
        int int62 = dateTimeField53.getMaximumValue(readablePartial54, intArray61);
        java.util.Locale locale64 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray65 = dividedDateTimeField11.set((org.joda.time.ReadablePartial) partial36, 28354759, intArray61, "dayOfMonth", locale64);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"dayOfMonth\" for centuryOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "32" + "'", str26, "32");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "10" + "'", str30, "10");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-97L) + "'", long35 == (-97L));
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 10L + "'", long42 == 10L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(readableInterval48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[35, -1, 0, 1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 24 + "'", int62 == 24);
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0944");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add((-31L), (long) '#');
        org.joda.time.DurationField durationField10 = unsupportedDateTimeField6.getLeapDurationField();
        int int13 = unsupportedDateTimeField6.getDifference((long) (byte) 10, 10L);
        long long16 = unsupportedDateTimeField6.add((long) 1439, (int) (byte) -1);
        java.lang.String str17 = unsupportedDateTimeField6.toString();
        boolean boolean18 = unsupportedDateTimeField6.isSupported();
        java.lang.String str19 = unsupportedDateTimeField6.toString();
        org.joda.time.chrono.ISOChronology iSOChronology20 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField21 = iSOChronology20.minutes();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology20.millisOfDay();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology20.halfdayOfDay();
        org.joda.time.DurationField durationField24 = iSOChronology20.seconds();
        org.joda.time.DurationField durationField25 = iSOChronology20.days();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology20.dayOfYear();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology20.hourOfHalfday();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField29 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long32 = durationField29.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long34 = durationField29.getValueAsLong((long) 10);
        int int36 = durationField29.getValue((long) (byte) 10);
        boolean boolean37 = partial28.equals((java.lang.Object) durationField29);
        org.joda.time.ReadableInterval readableInterval38 = null;
        org.joda.time.ReadableInterval readableInterval39 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval38);
        org.joda.time.ReadableInterval readableInterval40 = null;
        boolean boolean41 = readableInterval39.contains(readableInterval40);
        org.joda.time.ReadableInterval readableInterval42 = null;
        boolean boolean43 = readableInterval39.isBefore(readableInterval42);
        org.joda.time.Interval interval44 = readableInterval39.toInterval();
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.PeriodType periodType46 = org.joda.time.DateTimeUtils.getPeriodType(periodType45);
        org.joda.time.PeriodType periodType47 = org.joda.time.DateTimeUtils.getPeriodType(periodType45);
        org.joda.time.Period period48 = readableInterval39.toPeriod(periodType47);
        org.joda.time.Partial partial49 = partial28.plus((org.joda.time.ReadablePeriod) period48);
        java.lang.String str50 = partial49.toStringList();
        int[] intArray52 = iSOChronology20.get((org.joda.time.ReadablePartial) partial49, (long) (-7));
        int[] intArray54 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray56 = unsupportedDateTimeField6.set((org.joda.time.ReadablePartial) partial49, 20, intArray54, 195);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1438L + "'", long16 == 1438L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UnsupportedDateTimeField" + "'", str17, "UnsupportedDateTimeField");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UnsupportedDateTimeField" + "'", str19, "UnsupportedDateTimeField");
        org.junit.Assert.assertNotNull(iSOChronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10L + "'", long34 == 10L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(readableInterval39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[]" + "'", str50, "[]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0358");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DurationField durationField2 = iSOChronology0.months();
        long long7 = iSOChronology0.getDateTimeMillis(1, 1, (int) (byte) 1, (int) (short) 100);
        org.joda.time.DurationField durationField8 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField10 = iSOChronology9.minutes();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology9.millisOfDay();
        org.joda.time.ReadableInterval readableInterval12 = null;
        org.joda.time.ReadableInterval readableInterval13 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval12);
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        org.joda.time.DurationField durationField16 = chronology14.millis();
        org.joda.time.DurationField durationField17 = chronology14.centuries();
        org.joda.time.ReadableInterval readableInterval18 = null;
        org.joda.time.ReadableInterval readableInterval19 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval18);
        org.joda.time.Chronology chronology20 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval18);
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfCentury();
        org.joda.time.DurationField durationField22 = chronology20.millis();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.Chronology chronology26 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval24);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval29 = null;
        org.joda.time.ReadableInterval readableInterval30 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval29);
        org.joda.time.ReadableInterval readableInterval31 = null;
        boolean boolean32 = readableInterval30.contains(readableInterval31);
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = readableInterval30.toPeriod(periodType33);
        int[] intArray36 = chronology26.get((org.joda.time.ReadablePeriod) period34, (-210866846400000L));
        int[] intArray39 = chronology20.get((org.joda.time.ReadablePeriod) period34, 2173795348453L, (long) 1439);
        int[] intArray42 = chronology14.get((org.joda.time.ReadablePeriod) period34, 291L, 2580171L);
        int[] intArray45 = iSOChronology9.get((org.joda.time.ReadablePeriod) period34, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField46 = iSOChronology9.months();
        java.lang.String str47 = iSOChronology9.toString();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = iSOChronology9.equals((java.lang.Object) partial48);
        long long51 = iSOChronology0.set((org.joda.time.ReadablePartial) partial48, (long) (short) 1);
        org.joda.time.DateTimeField dateTimeField52 = iSOChronology0.hourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            long long57 = iSOChronology0.getDateTimeMillis(29227999, 53460006, 4, 3);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53460006 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-62135568421900L) + "'", long7 == (-62135568421900L));
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(readableInterval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(readableInterval19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(readableInterval30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 0, 0, 0, -58574124, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[969, 11, 4, 2, 23, 52, 58, 291]");
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ISOChronology[America/Los_Angeles]" + "'", str47, "ISOChronology[America/Los_Angeles]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
        org.junit.Assert.assertNotNull(dateTimeField52);
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1313");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField11 = new org.joda.time.field.OffsetDateTimeField(dateTimeField8, dateTimeFieldType9, (int) (short) 1);
        org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField13 = iSOChronology12.minutes();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology12.halfdayOfDay();
        org.joda.time.DurationField durationField16 = iSOChronology12.seconds();
        org.joda.time.Chronology chronology17 = iSOChronology12.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology12.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology12.monthOfYear();
        org.joda.time.DurationField durationField20 = iSOChronology12.seconds();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval22 = null;
        org.joda.time.ReadableInterval readableInterval23 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval22);
        org.joda.time.Chronology chronology24 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval22);
        org.joda.time.DateTimeField dateTimeField25 = chronology24.yearOfCentury();
        org.joda.time.DurationField durationField26 = chronology24.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField27 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType21, durationField26);
        long long30 = durationField26.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval32 = null;
        org.joda.time.ReadableInterval readableInterval33 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval32);
        org.joda.time.Chronology chronology34 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval32);
        org.joda.time.DateTimeField dateTimeField35 = chronology34.yearOfCentury();
        boolean boolean36 = durationFieldType31.isSupported(chronology34);
        org.joda.time.field.ScaledDurationField scaledDurationField38 = new org.joda.time.field.ScaledDurationField(durationField26, durationFieldType31, (int) 'a');
        org.joda.time.DurationField durationField39 = scaledDurationField38.getWrappedField();
        long long42 = scaledDurationField38.add((-210866846400000L), (long) 53460006);
        int int45 = scaledDurationField38.getValue((long) 1, 1L);
        boolean boolean46 = scaledDurationField38.isPrecise();
        long long48 = scaledDurationField38.getMillis((int) (short) 10);
        long long49 = scaledDurationField38.getUnitMillis();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.field.PreciseDateTimeField preciseDateTimeField50 = new org.joda.time.field.PreciseDateTimeField(dateTimeFieldType9, durationField20, (org.joda.time.DurationField) scaledDurationField38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The effective range must be at least 2");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(iSOChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(readableInterval23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-210866846400000L) + "'", long30 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertNotNull(readableInterval33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-210861660779418L) + "'", long42 == (-210861660779418L));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 970L + "'", long48 == 970L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 97L + "'", long49 == 97L);
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3025");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add((-31L), (long) '#');
        org.joda.time.DurationField durationField10 = unsupportedDateTimeField6.getLeapDurationField();
        int int13 = unsupportedDateTimeField6.getDifference((long) (byte) 10, 10L);
        long long16 = unsupportedDateTimeField6.add((long) 1439, (int) (byte) -1);
        boolean boolean17 = unsupportedDateTimeField6.isSupported();
        long long20 = unsupportedDateTimeField6.getDifferenceAsLong(0L, 28800001L);
        boolean boolean21 = unsupportedDateTimeField6.isSupported();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField23 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long26 = durationField23.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long28 = durationField23.getValueAsLong((long) 10);
        int int30 = durationField23.getValue((long) (byte) 10);
        boolean boolean31 = partial22.equals((java.lang.Object) durationField23);
        org.joda.time.Chronology chronology32 = partial22.getChronology();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        boolean boolean34 = partial22.isBefore((org.joda.time.ReadablePartial) partial33);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray35 = partial22.getFieldTypes();
        boolean boolean37 = partial22.equals((java.lang.Object) 1702281558665L);
        org.joda.time.chrono.ISOChronology iSOChronology38 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField39 = iSOChronology38.minutes();
        org.joda.time.DateTimeField dateTimeField40 = iSOChronology38.millisOfDay();
        org.joda.time.DateTimeField dateTimeField41 = iSOChronology38.halfdayOfDay();
        org.joda.time.DurationField durationField42 = iSOChronology38.seconds();
        org.joda.time.Chronology chronology43 = iSOChronology38.withUTC();
        org.joda.time.DateTimeField dateTimeField44 = iSOChronology38.dayOfYear();
        org.joda.time.DurationField durationField45 = iSOChronology38.millis();
        org.joda.time.DurationField durationField46 = iSOChronology38.halfdays();
        org.joda.time.ReadableInterval readableInterval47 = null;
        org.joda.time.ReadableInterval readableInterval48 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval47);
        org.joda.time.ReadableInterval readableInterval49 = null;
        boolean boolean50 = readableInterval48.contains(readableInterval49);
        org.joda.time.Duration duration51 = readableInterval48.toDuration();
        org.joda.time.DateTime dateTime52 = readableInterval48.getEnd();
        org.joda.time.Period period53 = readableInterval48.toPeriod();
        int[] intArray55 = iSOChronology38.get((org.joda.time.ReadablePeriod) period53, (long) 10);
        // The following exception was thrown during execution in test generation
        try {
            int int56 = unsupportedDateTimeField6.getMaximumValue((org.joda.time.ReadablePartial) partial22, intArray55);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1438L + "'", long16 == 1438L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-28800001L) + "'", long20 == (-28800001L));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10L + "'", long28 == 10L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(iSOChronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(readableInterval48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[0, 0, 0, 0, 0, 0, 0, 10]");
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2322");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        int int23 = remainderDateTimeField22.getMaximumValue();
        long long25 = remainderDateTimeField22.roundCeiling((long) 97);
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField27 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long30 = durationField27.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long32 = durationField27.getValueAsLong((long) 10);
        int int34 = durationField27.getValue((long) (byte) 10);
        boolean boolean35 = partial26.equals((java.lang.Object) durationField27);
        org.joda.time.chrono.ISOChronology iSOChronology36 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField37 = iSOChronology36.minutes();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology36.millisOfDay();
        org.joda.time.DateTimeField dateTimeField39 = iSOChronology36.halfdayOfDay();
        org.joda.time.ReadableInterval readableInterval40 = null;
        org.joda.time.ReadableInterval readableInterval41 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval40);
        org.joda.time.ReadableInterval readableInterval42 = null;
        boolean boolean43 = readableInterval41.contains(readableInterval42);
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Period period45 = readableInterval41.toPeriod(periodType44);
        int[] intArray48 = iSOChronology36.get((org.joda.time.ReadablePeriod) period45, 4L, (long) '#');
        org.joda.time.Partial partial49 = partial26.plus((org.joda.time.ReadablePeriod) period45);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Partial partial51 = partial49.without(dateTimeFieldType50);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField52 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField22, dateTimeFieldType50);
        org.joda.time.DurationField durationField53 = remainderDateTimeField22.getLeapDurationField();
        long long55 = remainderDateTimeField22.roundHalfEven(5723L);
        org.joda.time.DurationField durationField56 = remainderDateTimeField22.getRangeDurationField();
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 31536000000L + "'", long25 == 31536000000L);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10L + "'", long32 == 10L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(iSOChronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(readableInterval41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[0, 0, 0, 0, 0, 0, 0, 31]");
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertNull(durationField53);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(durationField56);
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0962");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology5 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone6 = gregorianChronology5.getZone();
        long long10 = gregorianChronology5.add(0L, (long) (byte) 1, (int) (byte) 0);
        org.joda.time.DateTimeField dateTimeField11 = gregorianChronology5.millisOfDay();
        org.joda.time.DurationField durationField12 = gregorianChronology5.weeks();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField14 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long17 = durationField14.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long19 = durationField14.getValueAsLong((long) 10);
        int int21 = durationField14.getValue((long) (byte) 10);
        boolean boolean22 = partial13.equals((java.lang.Object) durationField14);
        org.joda.time.ReadableInterval readableInterval23 = null;
        org.joda.time.ReadableInterval readableInterval24 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval23);
        org.joda.time.ReadableInterval readableInterval25 = null;
        boolean boolean26 = readableInterval24.contains(readableInterval25);
        org.joda.time.ReadableInterval readableInterval27 = null;
        boolean boolean28 = readableInterval24.isBefore(readableInterval27);
        org.joda.time.Interval interval29 = readableInterval24.toInterval();
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.PeriodType periodType31 = org.joda.time.DateTimeUtils.getPeriodType(periodType30);
        org.joda.time.PeriodType periodType32 = org.joda.time.DateTimeUtils.getPeriodType(periodType30);
        org.joda.time.Period period33 = readableInterval24.toPeriod(periodType32);
        org.joda.time.Partial partial34 = partial13.plus((org.joda.time.ReadablePeriod) period33);
        int[] intArray37 = gregorianChronology5.get((org.joda.time.ReadablePeriod) period33, 1701289178545L, (long) (short) 0);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField39 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long42 = durationField39.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long44 = durationField39.getValueAsLong((long) 10);
        int int46 = durationField39.getValue((long) (byte) 10);
        boolean boolean47 = partial38.equals((java.lang.Object) durationField39);
        org.joda.time.Chronology chronology48 = partial38.getChronology();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial38.isBefore((org.joda.time.ReadablePartial) partial49);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray51 = partial38.getFieldTypes();
        boolean boolean53 = partial38.equals((java.lang.Object) 1702281558665L);
        java.lang.String str54 = partial38.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = partial38.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.Partial partial57 = partial38.plus(readablePeriod56);
        int[] intArray59 = gregorianChronology5.get((org.joda.time.ReadablePartial) partial38, 1701289179647L);
        org.joda.time.DateTimeField dateTimeField60 = gregorianChronology5.centuryOfEra();
        org.joda.time.DurationField durationField61 = gregorianChronology5.years();
        java.lang.String str62 = gregorianChronology5.toString();
        org.joda.time.DateTimeField dateTimeField63 = gregorianChronology5.secondOfMinute();
        org.junit.Assert.assertNotNull(gregorianChronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(readableInterval24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-53, -10, -4, 0, -20, -19, -38, -545]");
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 10L + "'", long44 == 10L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[]" + "'", str54, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter55);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "GregorianChronology[100]" + "'", str62, "GregorianChronology[100]");
        org.junit.Assert.assertNotNull(dateTimeField63);
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2008");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        long long2 = readableInterval1.getStartMillis();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        long long5 = readableInterval4.getEndMillis();
        boolean boolean6 = readableInterval1.overlaps(readableInterval4);
        org.joda.time.MutableInterval mutableInterval7 = readableInterval1.toMutableInterval();
        org.joda.time.ReadableInterval readableInterval8 = null;
        org.joda.time.ReadableInterval readableInterval9 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval8);
        long long10 = readableInterval9.getStartMillis();
        org.joda.time.ReadableInterval readableInterval11 = null;
        org.joda.time.ReadableInterval readableInterval12 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval11);
        long long13 = readableInterval12.getEndMillis();
        boolean boolean14 = readableInterval9.overlaps(readableInterval12);
        org.joda.time.MutableInterval mutableInterval15 = readableInterval9.toMutableInterval();
        org.joda.time.Duration duration16 = mutableInterval15.toDuration();
        org.joda.time.ReadableInterval readableInterval17 = null;
        org.joda.time.ReadableInterval readableInterval18 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval17);
        long long19 = readableInterval18.getStartMillis();
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.ReadableInterval readableInterval21 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval20);
        long long22 = readableInterval21.getEndMillis();
        boolean boolean23 = readableInterval18.overlaps(readableInterval21);
        org.joda.time.MutableInterval mutableInterval24 = readableInterval18.toMutableInterval();
        org.joda.time.Duration duration25 = mutableInterval24.toDuration();
        boolean boolean26 = mutableInterval15.isAfter((org.joda.time.ReadableInterval) mutableInterval24);
        boolean boolean27 = mutableInterval7.isAfter((org.joda.time.ReadableInterval) mutableInterval15);
        org.joda.time.ReadableInterval readableInterval28 = null;
        org.joda.time.ReadableInterval readableInterval29 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval28);
        org.joda.time.ReadableInterval readableInterval30 = null;
        boolean boolean31 = readableInterval29.contains(readableInterval30);
        org.joda.time.Duration duration32 = readableInterval29.toDuration();
        org.joda.time.MutableInterval mutableInterval33 = readableInterval29.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval34 = mutableInterval33.toMutableInterval();
        org.joda.time.Chronology chronology35 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInterval) mutableInterval33);
        org.joda.time.MutableInterval mutableInterval36 = mutableInterval33.toMutableInterval();
        boolean boolean37 = mutableInterval15.isAfter((org.joda.time.ReadableInterval) mutableInterval33);
        org.joda.time.ReadableInterval readableInterval38 = null;
        org.joda.time.ReadableInterval readableInterval39 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval38);
        long long40 = readableInterval39.getStartMillis();
        org.joda.time.Duration duration41 = readableInterval39.toDuration();
        boolean boolean42 = mutableInterval33.contains(readableInterval39);
        long long43 = readableInterval39.toDurationMillis();
        org.junit.Assert.assertNotNull(readableInterval1);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 114669905167038L + "'", long2 == 114669905167038L);
        org.junit.Assert.assertNotNull(readableInterval4);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 114669905167038L + "'", long5 == 114669905167038L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(readableInterval9);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 114669905167039L + "'", long10 == 114669905167039L);
        org.junit.Assert.assertNotNull(readableInterval12);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 114669905167039L + "'", long13 == 114669905167039L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(readableInterval18);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 114669905167039L + "'", long19 == 114669905167039L);
        org.junit.Assert.assertNotNull(readableInterval21);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 114669905167039L + "'", long22 == 114669905167039L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(mutableInterval24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(readableInterval29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(mutableInterval33);
        org.junit.Assert.assertNotNull(mutableInterval34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(mutableInterval36);
// flaky:         org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(readableInterval39);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 114669905167040L + "'", long40 == 114669905167040L);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0666");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        java.lang.String str5 = zonedChronology4.toString();
        org.joda.time.DateTimeField dateTimeField6 = zonedChronology4.millisOfDay();
        org.joda.time.DurationField durationField7 = zonedChronology4.seconds();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str9 = dateTimeZone8.toString();
        java.lang.String str11 = dateTimeZone8.getShortName((-210866846400000L));
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeUtils.getZone(dateTimeZone8);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone13 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone12);
        boolean boolean15 = cachedDateTimeZone13.equals((java.lang.Object) 432000032L);
        long long18 = cachedDateTimeZone13.convertLocalToUTC(432000032L, false);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone23 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology24 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone25 = gregorianChronology24.getZone();
        long long29 = gregorianChronology24.add(0L, (long) (byte) 1, (int) (byte) 0);
        org.joda.time.Chronology chronology30 = gregorianChronology24.withUTC();
        boolean boolean31 = cachedDateTimeZone13.equals((java.lang.Object) gregorianChronology24);
        org.joda.time.chrono.ISOChronology iSOChronology32 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField33 = iSOChronology32.minutes();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str35 = dateTimeZone34.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology36 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology32, dateTimeZone34);
        java.lang.String str37 = zonedChronology36.toString();
        org.joda.time.DateTimeField dateTimeField38 = zonedChronology36.millisOfDay();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone43 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        int int45 = fixedDateTimeZone43.getStandardOffset((long) 1439);
        boolean boolean46 = fixedDateTimeZone43.isFixed();
        long long48 = fixedDateTimeZone43.nextTransition((long) 24);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        long long52 = dateTimeZone49.adjustOffset((long) 100, true);
        long long54 = fixedDateTimeZone43.getMillisKeepLocal(dateTimeZone49, 10L);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.UTC;
        int int57 = dateTimeZone55.getStandardOffset((long) 1);
        long long59 = dateTimeZone49.getMillisKeepLocal(dateTimeZone55, 5L);
        org.joda.time.Chronology chronology60 = zonedChronology36.withZone(dateTimeZone49);
        org.joda.time.Chronology chronology61 = gregorianChronology24.withZone(dateTimeZone49);
        org.joda.time.Chronology chronology62 = zonedChronology4.withZone(dateTimeZone49);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str5, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(cachedDateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 432000032L + "'", long18 == 432000032L);
        org.junit.Assert.assertNotNull(gregorianChronology24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(iSOChronology32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "UTC" + "'", str35, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str37, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 24L + "'", long48 == 24L);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 100L + "'", long52 == 100L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 10L + "'", long54 == 10L);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 5L + "'", long59 == 5L);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(chronology62);
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1008");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology5 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone6 = gregorianChronology5.getZone();
        long long10 = gregorianChronology5.add(0L, (long) (byte) 1, (int) (byte) 0);
        org.joda.time.DateTimeField dateTimeField11 = gregorianChronology5.millisOfDay();
        org.joda.time.DurationField durationField12 = gregorianChronology5.weeks();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField14 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long17 = durationField14.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long19 = durationField14.getValueAsLong((long) 10);
        int int21 = durationField14.getValue((long) (byte) 10);
        boolean boolean22 = partial13.equals((java.lang.Object) durationField14);
        org.joda.time.ReadableInterval readableInterval23 = null;
        org.joda.time.ReadableInterval readableInterval24 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval23);
        org.joda.time.ReadableInterval readableInterval25 = null;
        boolean boolean26 = readableInterval24.contains(readableInterval25);
        org.joda.time.ReadableInterval readableInterval27 = null;
        boolean boolean28 = readableInterval24.isBefore(readableInterval27);
        org.joda.time.Interval interval29 = readableInterval24.toInterval();
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.PeriodType periodType31 = org.joda.time.DateTimeUtils.getPeriodType(periodType30);
        org.joda.time.PeriodType periodType32 = org.joda.time.DateTimeUtils.getPeriodType(periodType30);
        org.joda.time.Period period33 = readableInterval24.toPeriod(periodType32);
        org.joda.time.Partial partial34 = partial13.plus((org.joda.time.ReadablePeriod) period33);
        int[] intArray37 = gregorianChronology5.get((org.joda.time.ReadablePeriod) period33, 1701289178545L, (long) (short) 0);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField39 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long42 = durationField39.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long44 = durationField39.getValueAsLong((long) 10);
        int int46 = durationField39.getValue((long) (byte) 10);
        boolean boolean47 = partial38.equals((java.lang.Object) durationField39);
        org.joda.time.Chronology chronology48 = partial38.getChronology();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial38.isBefore((org.joda.time.ReadablePartial) partial49);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray51 = partial38.getFieldTypes();
        boolean boolean53 = partial38.equals((java.lang.Object) 1702281558665L);
        java.lang.String str54 = partial38.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = partial38.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.Partial partial57 = partial38.plus(readablePeriod56);
        int[] intArray59 = gregorianChronology5.get((org.joda.time.ReadablePartial) partial38, 1701289179647L);
        org.joda.time.DateTimeField dateTimeField60 = gregorianChronology5.centuryOfEra();
        org.joda.time.Chronology chronology61 = gregorianChronology5.withUTC();
        org.joda.time.DateTimeField dateTimeField62 = chronology61.secondOfDay();
        java.util.Locale locale64 = null;
        java.lang.String str65 = dateTimeField62.getAsShortText(297, locale64);
        org.junit.Assert.assertNotNull(gregorianChronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(readableInterval24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-53, -10, -4, 0, -20, -19, -38, -545]");
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 10L + "'", long44 == 10L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[]" + "'", str54, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter55);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "297" + "'", str65, "297");
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0552");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval3);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DurationField durationField7 = chronology5.millis();
        org.joda.time.DurationField durationField8 = chronology5.centuries();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval9);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology11.millis();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.ReadableInterval readableInterval16 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval15);
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.ReadableInterval readableInterval21 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval20);
        org.joda.time.ReadableInterval readableInterval22 = null;
        boolean boolean23 = readableInterval21.contains(readableInterval22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = readableInterval21.toPeriod(periodType24);
        int[] intArray27 = chronology17.get((org.joda.time.ReadablePeriod) period25, (-210866846400000L));
        int[] intArray30 = chronology11.get((org.joda.time.ReadablePeriod) period25, 2173795348453L, (long) 1439);
        int[] intArray33 = chronology5.get((org.joda.time.ReadablePeriod) period25, 291L, 2580171L);
        int[] intArray36 = iSOChronology0.get((org.joda.time.ReadablePeriod) period25, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField37 = iSOChronology0.months();
        java.lang.String str38 = iSOChronology0.toString();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = iSOChronology0.equals((java.lang.Object) partial39);
        org.joda.time.Chronology chronology41 = org.joda.time.DateTimeUtils.getChronology((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone46 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        int int48 = fixedDateTimeZone46.getStandardOffset((long) 1439);
        boolean boolean49 = fixedDateTimeZone46.isFixed();
        long long51 = fixedDateTimeZone46.nextTransition((long) 24);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        long long55 = dateTimeZone52.adjustOffset((long) 100, true);
        long long57 = fixedDateTimeZone46.getMillisKeepLocal(dateTimeZone52, 10L);
        org.joda.time.Chronology chronology58 = iSOChronology0.withZone((org.joda.time.DateTimeZone) fixedDateTimeZone46);
        org.joda.time.DurationField durationField59 = iSOChronology0.weekyears();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(readableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(readableInterval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(readableInterval21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[UTC]" + "'", str38, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 24L + "'", long51 == 24L);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 100L + "'", long55 == 100L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 10L + "'", long57 == 10L);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(durationField59);
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0904");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add((-31L), (long) '#');
        org.joda.time.DurationField durationField10 = unsupportedDateTimeField6.getLeapDurationField();
        int int13 = unsupportedDateTimeField6.getDifference((long) (byte) 10, 10L);
        long long16 = unsupportedDateTimeField6.add((long) 1439, (int) (byte) -1);
        boolean boolean17 = unsupportedDateTimeField6.isSupported();
        long long20 = unsupportedDateTimeField6.getDifferenceAsLong(0L, 28800001L);
        boolean boolean21 = unsupportedDateTimeField6.isSupported();
        org.joda.time.DurationField durationField22 = unsupportedDateTimeField6.getLeapDurationField();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField24 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long27 = durationField24.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long29 = durationField24.getValueAsLong((long) 10);
        int int31 = durationField24.getValue((long) (byte) 10);
        boolean boolean32 = partial23.equals((java.lang.Object) durationField24);
        org.joda.time.Chronology chronology33 = partial23.getChronology();
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        boolean boolean35 = partial23.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray36 = partial23.getFieldTypes();
        boolean boolean38 = partial23.equals((java.lang.Object) 1702281558665L);
        java.lang.String str39 = partial23.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = partial23.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial42 = partial23.plus(readablePeriod41);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField44 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long47 = durationField44.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long49 = durationField44.getValueAsLong((long) 10);
        int int51 = durationField44.getValue((long) (byte) 10);
        boolean boolean52 = partial43.equals((java.lang.Object) durationField44);
        org.joda.time.Chronology chronology53 = partial43.getChronology();
        java.lang.String str54 = partial43.toString();
        boolean boolean55 = partial42.isAfter((org.joda.time.ReadablePartial) partial43);
        java.lang.String str56 = partial42.toString();
        int[] intArray57 = partial42.getValues();
        java.util.Locale locale59 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str60 = unsupportedDateTimeField6.getAsShortText((org.joda.time.ReadablePartial) partial42, (-223445), locale59);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1438L + "'", long16 == 1438L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-28800001L) + "'", long20 == (-28800001L));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(durationField22);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10L + "'", long29 == 10L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[]" + "'", str39, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter40);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 10L + "'", long49 == 10L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[]" + "'", str54, "[]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[]" + "'", str56, "[]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1357");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology5 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone6 = gregorianChronology5.getZone();
        long long10 = gregorianChronology5.add(0L, (long) (byte) 1, (int) (byte) 0);
        org.joda.time.DateTimeField dateTimeField11 = gregorianChronology5.millisOfDay();
        org.joda.time.DurationField durationField12 = gregorianChronology5.weeks();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField14 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long17 = durationField14.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long19 = durationField14.getValueAsLong((long) 10);
        int int21 = durationField14.getValue((long) (byte) 10);
        boolean boolean22 = partial13.equals((java.lang.Object) durationField14);
        org.joda.time.ReadableInterval readableInterval23 = null;
        org.joda.time.ReadableInterval readableInterval24 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval23);
        org.joda.time.ReadableInterval readableInterval25 = null;
        boolean boolean26 = readableInterval24.contains(readableInterval25);
        org.joda.time.ReadableInterval readableInterval27 = null;
        boolean boolean28 = readableInterval24.isBefore(readableInterval27);
        org.joda.time.Interval interval29 = readableInterval24.toInterval();
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.PeriodType periodType31 = org.joda.time.DateTimeUtils.getPeriodType(periodType30);
        org.joda.time.PeriodType periodType32 = org.joda.time.DateTimeUtils.getPeriodType(periodType30);
        org.joda.time.Period period33 = readableInterval24.toPeriod(periodType32);
        org.joda.time.Partial partial34 = partial13.plus((org.joda.time.ReadablePeriod) period33);
        int[] intArray37 = gregorianChronology5.get((org.joda.time.ReadablePeriod) period33, 1701289178545L, (long) (short) 0);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField39 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long42 = durationField39.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long44 = durationField39.getValueAsLong((long) 10);
        int int46 = durationField39.getValue((long) (byte) 10);
        boolean boolean47 = partial38.equals((java.lang.Object) durationField39);
        org.joda.time.Chronology chronology48 = partial38.getChronology();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial38.isBefore((org.joda.time.ReadablePartial) partial49);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray51 = partial38.getFieldTypes();
        boolean boolean53 = partial38.equals((java.lang.Object) 1702281558665L);
        java.lang.String str54 = partial38.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = partial38.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.Partial partial57 = partial38.plus(readablePeriod56);
        int[] intArray59 = gregorianChronology5.get((org.joda.time.ReadablePartial) partial38, 1701289179647L);
        org.joda.time.DateTimeField dateTimeField60 = gregorianChronology5.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            long long65 = gregorianChronology5.getDateTimeMillis(32, 6691, 29227999, 955);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 6691 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(readableInterval24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-53, -10, -4, 0, -20, -19, -38, -545]");
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 10L + "'", long44 == 10L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[]" + "'", str54, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter55);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(dateTimeField60);
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0989");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = zonedChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField6 = zonedChronology4.monthOfYear();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField8 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long11 = durationField8.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long13 = durationField8.getValueAsLong((long) 10);
        int int15 = durationField8.getValue((long) (byte) 10);
        boolean boolean16 = partial7.equals((java.lang.Object) durationField8);
        org.joda.time.Chronology chronology17 = partial7.getChronology();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial7.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial7.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.ReadableInterval readableInterval22 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval21);
        long long23 = readableInterval22.getStartMillis();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.ReadableInterval readableInterval26 = null;
        boolean boolean27 = readableInterval25.contains(readableInterval26);
        org.joda.time.Duration duration28 = readableInterval25.toDuration();
        org.joda.time.DateTime dateTime29 = readableInterval25.getEnd();
        boolean boolean30 = readableInterval22.contains((org.joda.time.ReadableInstant) dateTime29);
        boolean boolean31 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime29);
        int[] intArray33 = zonedChronology4.get((org.joda.time.ReadablePartial) partial7, 60035L);
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval35 = null;
        org.joda.time.ReadableInterval readableInterval36 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval35);
        org.joda.time.Chronology chronology37 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval35);
        org.joda.time.DateTimeField dateTimeField38 = chronology37.yearOfCentury();
        boolean boolean39 = durationFieldType34.isSupported(chronology37);
        org.joda.time.DurationField durationField40 = chronology37.halfdays();
        org.joda.time.DateTimeField dateTimeField41 = chronology37.weekyearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField46 = new org.joda.time.field.OffsetDateTimeField(dateTimeField41, dateTimeFieldType42, 4, (int) ' ', (int) (short) -1);
        boolean boolean47 = partial7.isSupported(dateTimeFieldType42);
        int int48 = partial7.size();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = null;
        java.lang.String str50 = partial7.toString(dateTimeFormatter49);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str52 = partial7.toString("hourOfHalfday");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: o");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(readableInterval22);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1225154543407L + "'", long23 == 1225154543407L);
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertNotNull(readableInterval36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[]" + "'", str50, "[]");
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1747");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DurationField durationField2 = iSOChronology0.months();
        long long7 = iSOChronology0.getDateTimeMillis(1, 1, (int) (byte) 1, (int) (short) 100);
        org.joda.time.DurationField durationField8 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField10 = iSOChronology9.minutes();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology9.millisOfDay();
        org.joda.time.ReadableInterval readableInterval12 = null;
        org.joda.time.ReadableInterval readableInterval13 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval12);
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        org.joda.time.DurationField durationField16 = chronology14.millis();
        org.joda.time.DurationField durationField17 = chronology14.centuries();
        org.joda.time.ReadableInterval readableInterval18 = null;
        org.joda.time.ReadableInterval readableInterval19 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval18);
        org.joda.time.Chronology chronology20 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval18);
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfCentury();
        org.joda.time.DurationField durationField22 = chronology20.millis();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.Chronology chronology26 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval24);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval29 = null;
        org.joda.time.ReadableInterval readableInterval30 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval29);
        org.joda.time.ReadableInterval readableInterval31 = null;
        boolean boolean32 = readableInterval30.contains(readableInterval31);
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = readableInterval30.toPeriod(periodType33);
        int[] intArray36 = chronology26.get((org.joda.time.ReadablePeriod) period34, (-210866846400000L));
        int[] intArray39 = chronology20.get((org.joda.time.ReadablePeriod) period34, 2173795348453L, (long) 1439);
        int[] intArray42 = chronology14.get((org.joda.time.ReadablePeriod) period34, 291L, 2580171L);
        int[] intArray45 = iSOChronology9.get((org.joda.time.ReadablePeriod) period34, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField46 = iSOChronology9.months();
        java.lang.String str47 = iSOChronology9.toString();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = iSOChronology9.equals((java.lang.Object) partial48);
        long long51 = iSOChronology0.set((org.joda.time.ReadablePartial) partial48, (long) (short) 1);
        org.joda.time.DurationField durationField52 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField53 = iSOChronology0.hourOfHalfday();
        org.joda.time.DurationField durationField54 = iSOChronology0.months();
        org.joda.time.DurationField durationField55 = iSOChronology0.days();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(durationField2);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-62135596799900L) + "'", long7 == (-62135596799900L));
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(readableInterval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(readableInterval19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(readableInterval30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(intArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(durationField46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ISOChronology[100]" + "'", str47, "ISOChronology[100]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(durationField55);
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3078");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DurationField durationField2 = iSOChronology0.months();
        long long7 = iSOChronology0.getDateTimeMillis(1, 1, (int) (byte) 1, (int) (short) 100);
        org.joda.time.DurationField durationField8 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField10 = iSOChronology9.minutes();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology9.millisOfDay();
        org.joda.time.ReadableInterval readableInterval12 = null;
        org.joda.time.ReadableInterval readableInterval13 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval12);
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        org.joda.time.DurationField durationField16 = chronology14.millis();
        org.joda.time.DurationField durationField17 = chronology14.centuries();
        org.joda.time.ReadableInterval readableInterval18 = null;
        org.joda.time.ReadableInterval readableInterval19 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval18);
        org.joda.time.Chronology chronology20 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval18);
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfCentury();
        org.joda.time.DurationField durationField22 = chronology20.millis();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.Chronology chronology26 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval24);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval29 = null;
        org.joda.time.ReadableInterval readableInterval30 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval29);
        org.joda.time.ReadableInterval readableInterval31 = null;
        boolean boolean32 = readableInterval30.contains(readableInterval31);
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = readableInterval30.toPeriod(periodType33);
        int[] intArray36 = chronology26.get((org.joda.time.ReadablePeriod) period34, (-210866846400000L));
        int[] intArray39 = chronology20.get((org.joda.time.ReadablePeriod) period34, 2173795348453L, (long) 1439);
        int[] intArray42 = chronology14.get((org.joda.time.ReadablePeriod) period34, 291L, 2580171L);
        int[] intArray45 = iSOChronology9.get((org.joda.time.ReadablePeriod) period34, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField46 = iSOChronology9.months();
        java.lang.String str47 = iSOChronology9.toString();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = iSOChronology9.equals((java.lang.Object) partial48);
        long long51 = iSOChronology0.set((org.joda.time.ReadablePartial) partial48, (long) (short) 1);
        org.joda.time.DurationField durationField52 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField53 = iSOChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField54 = iSOChronology0.era();
        org.joda.time.DurationField durationField55 = iSOChronology0.halfdays();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(durationField2);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-62135596799909L) + "'", long7 == (-62135596799909L));
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(readableInterval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(readableInterval19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(readableInterval30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(intArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(durationField46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ISOChronology[73]" + "'", str47, "ISOChronology[73]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(durationField55);
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0503");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DurationField durationField2 = iSOChronology0.months();
        long long7 = iSOChronology0.getDateTimeMillis(1, 1, (int) (byte) 1, (int) (short) 100);
        org.joda.time.DurationField durationField8 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField10 = iSOChronology9.minutes();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology9.millisOfDay();
        org.joda.time.ReadableInterval readableInterval12 = null;
        org.joda.time.ReadableInterval readableInterval13 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval12);
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        org.joda.time.DurationField durationField16 = chronology14.millis();
        org.joda.time.DurationField durationField17 = chronology14.centuries();
        org.joda.time.ReadableInterval readableInterval18 = null;
        org.joda.time.ReadableInterval readableInterval19 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval18);
        org.joda.time.Chronology chronology20 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval18);
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfCentury();
        org.joda.time.DurationField durationField22 = chronology20.millis();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.Chronology chronology26 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval24);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval29 = null;
        org.joda.time.ReadableInterval readableInterval30 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval29);
        org.joda.time.ReadableInterval readableInterval31 = null;
        boolean boolean32 = readableInterval30.contains(readableInterval31);
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = readableInterval30.toPeriod(periodType33);
        int[] intArray36 = chronology26.get((org.joda.time.ReadablePeriod) period34, (-210866846400000L));
        int[] intArray39 = chronology20.get((org.joda.time.ReadablePeriod) period34, 2173795348453L, (long) 1439);
        int[] intArray42 = chronology14.get((org.joda.time.ReadablePeriod) period34, 291L, 2580171L);
        int[] intArray45 = iSOChronology9.get((org.joda.time.ReadablePeriod) period34, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField46 = iSOChronology9.months();
        java.lang.String str47 = iSOChronology9.toString();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = iSOChronology9.equals((java.lang.Object) partial48);
        long long51 = iSOChronology0.set((org.joda.time.ReadablePartial) partial48, (long) (short) 1);
        org.joda.time.DurationField durationField52 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField53 = iSOChronology0.hourOfHalfday();
        org.joda.time.DurationField durationField54 = iSOChronology0.months();
        org.joda.time.DurationField durationField55 = iSOChronology0.years();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-62135568421900L) + "'", long7 == (-62135568421900L));
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(readableInterval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(readableInterval19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(readableInterval30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 0, 0, 0, -58574124, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[969, 11, 4, 2, 23, 52, 58, 291]");
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ISOChronology[America/Los_Angeles]" + "'", str47, "ISOChronology[America/Los_Angeles]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(durationField55);
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1264");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.ReadablePartial readablePartial4 = null;
        int int5 = dateTimeField3.getMinimumValue(readablePartial4);
        org.joda.time.ReadablePartial readablePartial6 = null;
        org.joda.time.ReadableInterval readableInterval7 = null;
        org.joda.time.ReadableInterval readableInterval8 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval7);
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval7);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.yearOfCentury();
        org.joda.time.DurationField durationField11 = chronology9.millis();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.clockhourOfDay();
        org.joda.time.ReadablePartial readablePartial14 = null;
        int[] intArray21 = new int[] { '#', (-1), 0, (byte) 1, (short) 1, (byte) 1 };
        int int22 = dateTimeField13.getMaximumValue(readablePartial14, intArray21);
        int int23 = dateTimeField3.getMinimumValue(readablePartial6, intArray21);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField26 = new org.joda.time.field.RemainderDateTimeField(dateTimeField3, dateTimeFieldType24, 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval28 = null;
        org.joda.time.ReadableInterval readableInterval29 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval28);
        org.joda.time.Chronology chronology30 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval28);
        org.joda.time.DateTimeField dateTimeField31 = chronology30.yearOfCentury();
        org.joda.time.DurationField durationField32 = chronology30.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField33 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType27, durationField32);
        long long36 = durationField32.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval38 = null;
        org.joda.time.ReadableInterval readableInterval39 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval38);
        org.joda.time.Chronology chronology40 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval38);
        org.joda.time.DateTimeField dateTimeField41 = chronology40.yearOfCentury();
        boolean boolean42 = durationFieldType37.isSupported(chronology40);
        org.joda.time.field.ScaledDurationField scaledDurationField44 = new org.joda.time.field.ScaledDurationField(durationField32, durationFieldType37, (int) 'a');
        long long45 = scaledDurationField44.getUnitMillis();
        org.joda.time.DurationFieldType durationFieldType46 = scaledDurationField44.getType();
        int int48 = scaledDurationField44.getValue((long) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType50 = dateTimeFieldType49.getDurationType();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField52 = new org.joda.time.field.RemainderDateTimeField((org.joda.time.DateTimeField) remainderDateTimeField26, (org.joda.time.DurationField) scaledDurationField44, dateTimeFieldType49, 53460006);
        long long54 = scaledDurationField44.getMillis(32);
        long long57 = scaledDurationField44.add(2835106296L, 0L);
        long long58 = scaledDurationField44.getUnitMillis();
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(readableInterval8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[35, -1, 0, 1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 24 + "'", int22 == 24);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(readableInterval29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-210866846400000L) + "'", long36 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertNotNull(readableInterval39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 97L + "'", long45 == 97L);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 3104L + "'", long54 == 3104L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 2835106296L + "'", long57 == 2835106296L);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 97L + "'", long58 == 97L);
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2568");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = zonedChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField6 = zonedChronology4.monthOfYear();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField8 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long11 = durationField8.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long13 = durationField8.getValueAsLong((long) 10);
        int int15 = durationField8.getValue((long) (byte) 10);
        boolean boolean16 = partial7.equals((java.lang.Object) durationField8);
        org.joda.time.Chronology chronology17 = partial7.getChronology();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial7.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial7.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.ReadableInterval readableInterval22 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval21);
        long long23 = readableInterval22.getStartMillis();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.ReadableInterval readableInterval26 = null;
        boolean boolean27 = readableInterval25.contains(readableInterval26);
        org.joda.time.Duration duration28 = readableInterval25.toDuration();
        org.joda.time.DateTime dateTime29 = readableInterval25.getEnd();
        boolean boolean30 = readableInterval22.contains((org.joda.time.ReadableInstant) dateTime29);
        boolean boolean31 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime29);
        int[] intArray33 = zonedChronology4.get((org.joda.time.ReadablePartial) partial7, 60035L);
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval35 = null;
        org.joda.time.ReadableInterval readableInterval36 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval35);
        org.joda.time.Chronology chronology37 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval35);
        org.joda.time.DateTimeField dateTimeField38 = chronology37.yearOfCentury();
        boolean boolean39 = durationFieldType34.isSupported(chronology37);
        org.joda.time.DurationField durationField40 = chronology37.halfdays();
        org.joda.time.DateTimeField dateTimeField41 = chronology37.weekyearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField46 = new org.joda.time.field.OffsetDateTimeField(dateTimeField41, dateTimeFieldType42, 4, (int) ' ', (int) (short) -1);
        boolean boolean47 = partial7.isSupported(dateTimeFieldType42);
        java.lang.Number number49 = null;
        org.joda.time.IllegalFieldValueException illegalFieldValueException51 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType42, (java.lang.Number) 28800010L, number49, (java.lang.Number) 1701288000000L);
        boolean boolean52 = org.joda.time.IllegalInstantException.isIllegalInstant((java.lang.Throwable) illegalFieldValueException51);
        boolean boolean53 = org.joda.time.IllegalInstantException.isIllegalInstant((java.lang.Throwable) illegalFieldValueException51);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(readableInterval22);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-210861660779418L) + "'", long23 == (-210861660779418L));
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertNotNull(readableInterval36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0795");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        long long24 = remainderDateTimeField22.roundHalfFloor(3600000L);
        org.joda.time.DurationField durationField25 = remainderDateTimeField22.getRangeDurationField();
        long long27 = remainderDateTimeField22.remainder(179569353600000L);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField29 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long32 = durationField29.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long34 = durationField29.getValueAsLong((long) 10);
        int int36 = durationField29.getValue((long) (byte) 10);
        boolean boolean37 = partial28.equals((java.lang.Object) durationField29);
        org.joda.time.chrono.ISOChronology iSOChronology38 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField39 = iSOChronology38.minutes();
        org.joda.time.DateTimeField dateTimeField40 = iSOChronology38.millisOfDay();
        org.joda.time.DateTimeField dateTimeField41 = iSOChronology38.halfdayOfDay();
        org.joda.time.ReadableInterval readableInterval42 = null;
        org.joda.time.ReadableInterval readableInterval43 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval42);
        org.joda.time.ReadableInterval readableInterval44 = null;
        boolean boolean45 = readableInterval43.contains(readableInterval44);
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Period period47 = readableInterval43.toPeriod(periodType46);
        int[] intArray50 = iSOChronology38.get((org.joda.time.ReadablePeriod) period47, 4L, (long) '#');
        org.joda.time.Partial partial51 = partial28.plus((org.joda.time.ReadablePeriod) period47);
        boolean boolean52 = org.joda.time.DateTimeUtils.isContiguous((org.joda.time.ReadablePartial) partial28);
        java.util.Locale locale53 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str54 = remainderDateTimeField22.getAsText((org.joda.time.ReadablePartial) partial28, locale53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'dayOfYear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10281600000L + "'", long27 == 10281600000L);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10L + "'", long34 == 10L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(iSOChronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(readableInterval43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[0, 0, 0, 0, 0, 0, 0, 31]");
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2490");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DurationField durationField2 = iSOChronology0.months();
        long long7 = iSOChronology0.getDateTimeMillis(1, 1, (int) (byte) 1, (int) (short) 100);
        org.joda.time.DurationField durationField8 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField10 = iSOChronology9.minutes();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology9.millisOfDay();
        org.joda.time.ReadableInterval readableInterval12 = null;
        org.joda.time.ReadableInterval readableInterval13 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval12);
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        org.joda.time.DurationField durationField16 = chronology14.millis();
        org.joda.time.DurationField durationField17 = chronology14.centuries();
        org.joda.time.ReadableInterval readableInterval18 = null;
        org.joda.time.ReadableInterval readableInterval19 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval18);
        org.joda.time.Chronology chronology20 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval18);
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfCentury();
        org.joda.time.DurationField durationField22 = chronology20.millis();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.Chronology chronology26 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval24);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval29 = null;
        org.joda.time.ReadableInterval readableInterval30 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval29);
        org.joda.time.ReadableInterval readableInterval31 = null;
        boolean boolean32 = readableInterval30.contains(readableInterval31);
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = readableInterval30.toPeriod(periodType33);
        int[] intArray36 = chronology26.get((org.joda.time.ReadablePeriod) period34, (-210866846400000L));
        int[] intArray39 = chronology20.get((org.joda.time.ReadablePeriod) period34, 2173795348453L, (long) 1439);
        int[] intArray42 = chronology14.get((org.joda.time.ReadablePeriod) period34, 291L, 2580171L);
        int[] intArray45 = iSOChronology9.get((org.joda.time.ReadablePeriod) period34, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField46 = iSOChronology9.months();
        java.lang.String str47 = iSOChronology9.toString();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = iSOChronology9.equals((java.lang.Object) partial48);
        long long51 = iSOChronology0.set((org.joda.time.ReadablePartial) partial48, (long) (short) 1);
        org.joda.time.DurationField durationField52 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField53 = iSOChronology0.hourOfHalfday();
        org.joda.time.DurationField durationField54 = iSOChronology0.months();
        java.lang.String str55 = durationField54.getName();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-62135596799900L) + "'", long7 == (-62135596799900L));
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(readableInterval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(readableInterval19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(readableInterval30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ISOChronology[100]" + "'", str47, "ISOChronology[100]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "months" + "'", str55, "months");
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2789");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        long long24 = remainderDateTimeField22.roundHalfFloor(3600000L);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval26 = null;
        org.joda.time.ReadableInterval readableInterval27 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval26);
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval26);
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfCentury();
        org.joda.time.DurationField durationField30 = chronology28.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField31 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType25, durationField30);
        long long34 = unsupportedDateTimeField31.add((-31L), (long) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = unsupportedDateTimeField31.getType();
        org.joda.time.DurationFieldType durationFieldType36 = dateTimeFieldType35.getRangeDurationType();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField37 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField22, dateTimeFieldType35);
        long long39 = dividedDateTimeField37.roundFloor((-1L));
        long long42 = dividedDateTimeField37.set(1701289161914L, (int) (byte) 0);
        int int45 = dividedDateTimeField37.getDifference((-97L), 35L);
        org.joda.time.DurationField durationField46 = dividedDateTimeField37.getLeapDurationField();
        org.joda.time.DurationField durationField47 = dividedDateTimeField37.getLeapDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.dayOfWeek();
        java.lang.String str49 = dateTimeFieldType48.getName();
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField50 = new org.joda.time.field.ZeroIsMaxDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField37, dateTimeFieldType48);
        int int51 = zeroIsMaxDateTimeField50.getMaximumValue();
        long long53 = zeroIsMaxDateTimeField50.roundHalfEven(164730137506203L);
        int int55 = zeroIsMaxDateTimeField50.get((-533500L));
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(readableInterval27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 4L + "'", long34 == 4L);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-315619200000L) + "'", long39 == (-315619200000L));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-62043766838086L) + "'", long42 == (-62043766838086L));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNull(durationField46);
        org.junit.Assert.assertNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "dayOfWeek" + "'", str49, "dayOfWeek");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 29227900 + "'", int51 == 29227900);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 164727302400000L + "'", long53 == 164727302400000L);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 196 + "'", int55 == 196);
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1150");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add((-31L), (long) '#');
        org.joda.time.DurationField durationField10 = unsupportedDateTimeField6.getLeapDurationField();
        int int13 = unsupportedDateTimeField6.getDifference((long) (byte) 10, 10L);
        long long16 = unsupportedDateTimeField6.add(3600000L, 9);
        long long19 = unsupportedDateTimeField6.add(24L, 29227899);
        long long22 = unsupportedDateTimeField6.add(1701289172400L, 53);
        org.joda.time.ReadableInterval readableInterval23 = null;
        org.joda.time.ReadableInterval readableInterval24 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval23);
        org.joda.time.Chronology chronology25 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval23);
        org.joda.time.DateTimeField dateTimeField26 = chronology25.yearOfCentury();
        org.joda.time.DurationField durationField27 = chronology25.millis();
        org.joda.time.DurationField durationField28 = chronology25.centuries();
        org.joda.time.ReadableInterval readableInterval29 = null;
        org.joda.time.ReadableInterval readableInterval30 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval29);
        org.joda.time.Chronology chronology31 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval29);
        org.joda.time.DateTimeField dateTimeField32 = chronology31.yearOfCentury();
        org.joda.time.DurationField durationField33 = chronology31.millis();
        org.joda.time.DateTimeField dateTimeField34 = chronology31.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval35 = null;
        org.joda.time.ReadableInterval readableInterval36 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval35);
        org.joda.time.Chronology chronology37 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval35);
        org.joda.time.DateTimeField dateTimeField38 = chronology37.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval40 = null;
        org.joda.time.ReadableInterval readableInterval41 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval40);
        org.joda.time.ReadableInterval readableInterval42 = null;
        boolean boolean43 = readableInterval41.contains(readableInterval42);
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Period period45 = readableInterval41.toPeriod(periodType44);
        int[] intArray47 = chronology37.get((org.joda.time.ReadablePeriod) period45, (-210866846400000L));
        int[] intArray50 = chronology31.get((org.joda.time.ReadablePeriod) period45, 2173795348453L, (long) 1439);
        int[] intArray53 = chronology25.get((org.joda.time.ReadablePeriod) period45, 291L, 2580171L);
        org.joda.time.DurationField durationField54 = chronology25.halfdays();
        org.joda.time.Partial partial55 = new org.joda.time.Partial(chronology25);
        int[] intArray56 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int57 = unsupportedDateTimeField6.getMinimumValue((org.joda.time.ReadablePartial) partial55, intArray56);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 3600009L + "'", long16 == 3600009L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 29227923L + "'", long19 == 29227923L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1701289172453L + "'", long22 == 1701289172453L);
        org.junit.Assert.assertNotNull(readableInterval24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(readableInterval30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(readableInterval36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(readableInterval41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(durationField54);
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2330");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DurationField durationField2 = iSOChronology0.months();
        long long7 = iSOChronology0.getDateTimeMillis(1, 1, (int) (byte) 1, (int) (short) 100);
        org.joda.time.DurationField durationField8 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField10 = iSOChronology9.minutes();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology9.millisOfDay();
        org.joda.time.ReadableInterval readableInterval12 = null;
        org.joda.time.ReadableInterval readableInterval13 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval12);
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        org.joda.time.DurationField durationField16 = chronology14.millis();
        org.joda.time.DurationField durationField17 = chronology14.centuries();
        org.joda.time.ReadableInterval readableInterval18 = null;
        org.joda.time.ReadableInterval readableInterval19 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval18);
        org.joda.time.Chronology chronology20 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval18);
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfCentury();
        org.joda.time.DurationField durationField22 = chronology20.millis();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.Chronology chronology26 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval24);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval29 = null;
        org.joda.time.ReadableInterval readableInterval30 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval29);
        org.joda.time.ReadableInterval readableInterval31 = null;
        boolean boolean32 = readableInterval30.contains(readableInterval31);
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = readableInterval30.toPeriod(periodType33);
        int[] intArray36 = chronology26.get((org.joda.time.ReadablePeriod) period34, (-210866846400000L));
        int[] intArray39 = chronology20.get((org.joda.time.ReadablePeriod) period34, 2173795348453L, (long) 1439);
        int[] intArray42 = chronology14.get((org.joda.time.ReadablePeriod) period34, 291L, 2580171L);
        int[] intArray45 = iSOChronology9.get((org.joda.time.ReadablePeriod) period34, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField46 = iSOChronology9.months();
        java.lang.String str47 = iSOChronology9.toString();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = iSOChronology9.equals((java.lang.Object) partial48);
        long long51 = iSOChronology0.set((org.joda.time.ReadablePartial) partial48, (long) (short) 1);
        org.joda.time.DurationField durationField52 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField53 = iSOChronology0.hourOfHalfday();
        org.joda.time.DurationField durationField54 = iSOChronology0.months();
        org.joda.time.DateTimeField dateTimeField55 = iSOChronology0.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-62135596799900L) + "'", long7 == (-62135596799900L));
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(readableInterval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(readableInterval19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(readableInterval30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ISOChronology[UTC]" + "'", str47, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2373");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology5 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone6 = gregorianChronology5.getZone();
        long long10 = gregorianChronology5.add(0L, (long) (byte) 1, (int) (byte) 0);
        org.joda.time.DateTimeField dateTimeField11 = gregorianChronology5.millisOfDay();
        org.joda.time.DurationField durationField12 = gregorianChronology5.weeks();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField14 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long17 = durationField14.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long19 = durationField14.getValueAsLong((long) 10);
        int int21 = durationField14.getValue((long) (byte) 10);
        boolean boolean22 = partial13.equals((java.lang.Object) durationField14);
        org.joda.time.ReadableInterval readableInterval23 = null;
        org.joda.time.ReadableInterval readableInterval24 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval23);
        org.joda.time.ReadableInterval readableInterval25 = null;
        boolean boolean26 = readableInterval24.contains(readableInterval25);
        org.joda.time.ReadableInterval readableInterval27 = null;
        boolean boolean28 = readableInterval24.isBefore(readableInterval27);
        org.joda.time.Interval interval29 = readableInterval24.toInterval();
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.PeriodType periodType31 = org.joda.time.DateTimeUtils.getPeriodType(periodType30);
        org.joda.time.PeriodType periodType32 = org.joda.time.DateTimeUtils.getPeriodType(periodType30);
        org.joda.time.Period period33 = readableInterval24.toPeriod(periodType32);
        org.joda.time.Partial partial34 = partial13.plus((org.joda.time.ReadablePeriod) period33);
        int[] intArray37 = gregorianChronology5.get((org.joda.time.ReadablePeriod) period33, 1701289178545L, (long) (short) 0);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField39 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long42 = durationField39.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long44 = durationField39.getValueAsLong((long) 10);
        int int46 = durationField39.getValue((long) (byte) 10);
        boolean boolean47 = partial38.equals((java.lang.Object) durationField39);
        org.joda.time.Chronology chronology48 = partial38.getChronology();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial38.isBefore((org.joda.time.ReadablePartial) partial49);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray51 = partial38.getFieldTypes();
        boolean boolean53 = partial38.equals((java.lang.Object) 1702281558665L);
        java.lang.String str54 = partial38.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = partial38.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.Partial partial57 = partial38.plus(readablePeriod56);
        int[] intArray59 = gregorianChronology5.get((org.joda.time.ReadablePartial) partial38, 1701289179647L);
        org.joda.time.DateTimeField dateTimeField60 = gregorianChronology5.centuryOfEra();
        org.joda.time.Chronology chronology61 = gregorianChronology5.withUTC();
        org.joda.time.DurationField durationField62 = gregorianChronology5.months();
        org.joda.time.DateTimeField dateTimeField63 = gregorianChronology5.secondOfDay();
        org.junit.Assert.assertNotNull(gregorianChronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(readableInterval24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-53, -10, -4, 0, -20, -19, -38, -545]");
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 10L + "'", long44 == 10L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[]" + "'", str54, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter55);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0621");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DurationField durationField2 = iSOChronology0.months();
        long long7 = iSOChronology0.getDateTimeMillis(1, 1, (int) (byte) 1, (int) (short) 100);
        org.joda.time.DurationField durationField8 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField10 = iSOChronology9.minutes();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology9.millisOfDay();
        org.joda.time.ReadableInterval readableInterval12 = null;
        org.joda.time.ReadableInterval readableInterval13 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval12);
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        org.joda.time.DurationField durationField16 = chronology14.millis();
        org.joda.time.DurationField durationField17 = chronology14.centuries();
        org.joda.time.ReadableInterval readableInterval18 = null;
        org.joda.time.ReadableInterval readableInterval19 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval18);
        org.joda.time.Chronology chronology20 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval18);
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfCentury();
        org.joda.time.DurationField durationField22 = chronology20.millis();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.Chronology chronology26 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval24);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval29 = null;
        org.joda.time.ReadableInterval readableInterval30 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval29);
        org.joda.time.ReadableInterval readableInterval31 = null;
        boolean boolean32 = readableInterval30.contains(readableInterval31);
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = readableInterval30.toPeriod(periodType33);
        int[] intArray36 = chronology26.get((org.joda.time.ReadablePeriod) period34, (-210866846400000L));
        int[] intArray39 = chronology20.get((org.joda.time.ReadablePeriod) period34, 2173795348453L, (long) 1439);
        int[] intArray42 = chronology14.get((org.joda.time.ReadablePeriod) period34, 291L, 2580171L);
        int[] intArray45 = iSOChronology9.get((org.joda.time.ReadablePeriod) period34, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField46 = iSOChronology9.months();
        java.lang.String str47 = iSOChronology9.toString();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = iSOChronology9.equals((java.lang.Object) partial48);
        long long51 = iSOChronology0.set((org.joda.time.ReadablePartial) partial48, (long) (short) 1);
        org.joda.time.DurationField durationField52 = iSOChronology0.centuries();
        long long55 = durationField52.subtract(0L, (int) '4');
        long long58 = durationField52.subtract((-476134754960L), 1969);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(durationField2);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-62135596799907L) + "'", long7 == (-62135596799907L));
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(readableInterval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(readableInterval19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(readableInterval30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(durationField46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ISOChronology[hourOfDay]" + "'", str47, "ISOChronology[hourOfDay]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-164096150400000L) + "'", long55 == (-164096150400000L));
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-6214039961954960L) + "'", long58 == (-6214039961954960L));
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0368");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DurationField durationField2 = iSOChronology0.months();
        long long7 = iSOChronology0.getDateTimeMillis(1, 1, (int) (byte) 1, (int) (short) 100);
        org.joda.time.DurationField durationField8 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField10 = iSOChronology9.minutes();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology9.millisOfDay();
        org.joda.time.ReadableInterval readableInterval12 = null;
        org.joda.time.ReadableInterval readableInterval13 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval12);
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        org.joda.time.DurationField durationField16 = chronology14.millis();
        org.joda.time.DurationField durationField17 = chronology14.centuries();
        org.joda.time.ReadableInterval readableInterval18 = null;
        org.joda.time.ReadableInterval readableInterval19 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval18);
        org.joda.time.Chronology chronology20 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval18);
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfCentury();
        org.joda.time.DurationField durationField22 = chronology20.millis();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.Chronology chronology26 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval24);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval29 = null;
        org.joda.time.ReadableInterval readableInterval30 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval29);
        org.joda.time.ReadableInterval readableInterval31 = null;
        boolean boolean32 = readableInterval30.contains(readableInterval31);
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = readableInterval30.toPeriod(periodType33);
        int[] intArray36 = chronology26.get((org.joda.time.ReadablePeriod) period34, (-210866846400000L));
        int[] intArray39 = chronology20.get((org.joda.time.ReadablePeriod) period34, 2173795348453L, (long) 1439);
        int[] intArray42 = chronology14.get((org.joda.time.ReadablePeriod) period34, 291L, 2580171L);
        int[] intArray45 = iSOChronology9.get((org.joda.time.ReadablePeriod) period34, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField46 = iSOChronology9.months();
        java.lang.String str47 = iSOChronology9.toString();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = iSOChronology9.equals((java.lang.Object) partial48);
        long long51 = iSOChronology0.set((org.joda.time.ReadablePartial) partial48, (long) (short) 1);
        org.joda.time.DateTimeField dateTimeField52 = iSOChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField53 = iSOChronology0.year();
        java.util.Locale locale55 = null;
        java.lang.String str56 = dateTimeField53.getAsText(44048140383060006L, locale55);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-62135568421900L) + "'", long7 == (-62135568421900L));
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(readableInterval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(readableInterval19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(readableInterval30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 0, 0, 0, -58574124, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[969, 11, 4, 2, 23, 52, 58, 291]");
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ISOChronology[America/Los_Angeles]" + "'", str47, "ISOChronology[America/Los_Angeles]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "1397800" + "'", str56, "1397800");
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3099");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = zonedChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField6 = zonedChronology4.monthOfYear();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField8 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long11 = durationField8.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long13 = durationField8.getValueAsLong((long) 10);
        int int15 = durationField8.getValue((long) (byte) 10);
        boolean boolean16 = partial7.equals((java.lang.Object) durationField8);
        org.joda.time.Chronology chronology17 = partial7.getChronology();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial7.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial7.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.ReadableInterval readableInterval22 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval21);
        long long23 = readableInterval22.getStartMillis();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.ReadableInterval readableInterval26 = null;
        boolean boolean27 = readableInterval25.contains(readableInterval26);
        org.joda.time.Duration duration28 = readableInterval25.toDuration();
        org.joda.time.DateTime dateTime29 = readableInterval25.getEnd();
        boolean boolean30 = readableInterval22.contains((org.joda.time.ReadableInstant) dateTime29);
        boolean boolean31 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime29);
        int[] intArray33 = zonedChronology4.get((org.joda.time.ReadablePartial) partial7, 60035L);
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology4.secondOfMinute();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone39 = new org.joda.time.tz.FixedDateTimeZone("UTC", "", 0, 4);
        java.util.TimeZone timeZone40 = fixedDateTimeZone39.toTimeZone();
        java.util.TimeZone timeZone41 = fixedDateTimeZone39.toTimeZone();
        org.joda.time.chrono.ISOChronology iSOChronology42 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField43 = iSOChronology42.minutes();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str45 = dateTimeZone44.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology46 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology42, dateTimeZone44);
        org.joda.time.DateTimeZone dateTimeZone47 = zonedChronology46.getZone();
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone48 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone47);
        long long50 = fixedDateTimeZone39.getMillisKeepLocal(dateTimeZone47, (-1700857185313L));
        org.joda.time.Chronology chronology51 = zonedChronology4.withZone((org.joda.time.DateTimeZone) fixedDateTimeZone39);
        boolean boolean52 = fixedDateTimeZone39.isFixed();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(readableInterval22);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-296907L) + "'", long23 == (-296907L));
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(iSOChronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "UTC" + "'", str45, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(cachedDateTimeZone48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-1700857185313L) + "'", long50 == (-1700857185313L));
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0838");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add((-31L), (long) '#');
        org.joda.time.DurationField durationField10 = unsupportedDateTimeField6.getLeapDurationField();
        int int13 = unsupportedDateTimeField6.getDifference((long) (byte) 10, 10L);
        long long16 = unsupportedDateTimeField6.add((long) 1439, (int) (byte) -1);
        boolean boolean17 = unsupportedDateTimeField6.isSupported();
        long long20 = unsupportedDateTimeField6.getDifferenceAsLong(0L, 28800001L);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField22 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long25 = durationField22.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long27 = durationField22.getValueAsLong((long) 10);
        int int29 = durationField22.getValue((long) (byte) 10);
        boolean boolean30 = partial21.equals((java.lang.Object) durationField22);
        org.joda.time.Chronology chronology31 = partial21.getChronology();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        boolean boolean33 = partial21.isBefore((org.joda.time.ReadablePartial) partial32);
        org.joda.time.DateTimeField[] dateTimeFieldArray34 = partial32.getFields();
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial36 = partial32.plus(readablePeriod35);
        org.joda.time.ReadableInterval readableInterval38 = null;
        org.joda.time.ReadableInterval readableInterval39 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval38);
        org.joda.time.Chronology chronology40 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval38);
        org.joda.time.DateTimeField dateTimeField41 = chronology40.yearOfCentury();
        org.joda.time.ReadablePartial readablePartial42 = null;
        int int43 = dateTimeField41.getMinimumValue(readablePartial42);
        org.joda.time.ReadablePartial readablePartial44 = null;
        org.joda.time.ReadableInterval readableInterval45 = null;
        org.joda.time.ReadableInterval readableInterval46 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval45);
        org.joda.time.Chronology chronology47 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval45);
        org.joda.time.DateTimeField dateTimeField48 = chronology47.yearOfCentury();
        org.joda.time.DurationField durationField49 = chronology47.millis();
        org.joda.time.DateTimeField dateTimeField50 = chronology47.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField51 = chronology47.clockhourOfDay();
        org.joda.time.ReadablePartial readablePartial52 = null;
        int[] intArray59 = new int[] { '#', (-1), 0, (byte) 1, (short) 1, (byte) 1 };
        int int60 = dateTimeField51.getMaximumValue(readablePartial52, intArray59);
        int int61 = dateTimeField41.getMinimumValue(readablePartial44, intArray59);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray63 = unsupportedDateTimeField6.add((org.joda.time.ReadablePartial) partial36, 99, intArray59, (-472580));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1438L + "'", long16 == 1438L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-28800001L) + "'", long20 == (-28800001L));
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray34);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertNotNull(readableInterval39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(readableInterval46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[35, -1, 0, 1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 24 + "'", int60 == 24);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0765");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = null;
        boolean boolean3 = readableInterval1.contains(readableInterval2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = readableInterval1.toPeriod(periodType4);
        org.joda.time.DateTime dateTime6 = readableInterval1.getEnd();
        org.joda.time.ReadableInterval readableInterval7 = null;
        org.joda.time.ReadableInterval readableInterval8 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval7);
        org.joda.time.ReadableInterval readableInterval9 = null;
        boolean boolean10 = readableInterval8.contains(readableInterval9);
        org.joda.time.Duration duration11 = readableInterval8.toDuration();
        org.joda.time.DateTime dateTime12 = readableInterval8.getEnd();
        org.joda.time.Period period13 = readableInterval8.toPeriod();
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval8);
        boolean boolean15 = readableInterval1.isAfter(readableInterval8);
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.ReadableInterval readableInterval18 = null;
        boolean boolean19 = readableInterval17.contains(readableInterval18);
        org.joda.time.Duration duration20 = readableInterval17.toDuration();
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.ReadableInterval readableInterval22 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval21);
        org.joda.time.ReadableInterval readableInterval23 = null;
        boolean boolean24 = readableInterval22.contains(readableInterval23);
        org.joda.time.Duration duration25 = readableInterval22.toDuration();
        org.joda.time.DateTime dateTime26 = readableInterval22.getEnd();
        boolean boolean27 = readableInterval17.isBefore((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.chrono.ISOChronology iSOChronology28 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField29 = iSOChronology28.minutes();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str31 = dateTimeZone30.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology32 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology28, dateTimeZone30);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.ReadableInterval readableInterval34 = null;
        org.joda.time.ReadableInterval readableInterval35 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval34);
        org.joda.time.ReadableInterval readableInterval36 = null;
        boolean boolean37 = readableInterval35.contains(readableInterval36);
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Period period39 = readableInterval35.toPeriod(periodType38);
        org.joda.time.DateTime dateTime40 = readableInterval35.getEnd();
        org.joda.time.Chronology chronology41 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant33, (org.joda.time.ReadableInstant) dateTime40);
        int int42 = dateTimeZone30.getOffset((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Chronology chronology43 = org.joda.time.DateTimeUtils.getInstantChronology((org.joda.time.ReadableInstant) dateTime40);
        boolean boolean44 = readableInterval17.contains((org.joda.time.ReadableInstant) dateTime40);
        boolean boolean45 = readableInterval1.contains(readableInterval17);
        long long46 = readableInterval17.getEndMillis();
        long long47 = readableInterval17.getEndMillis();
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(readableInterval8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(chronology14);
// flaky:         org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(readableInterval22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(iSOChronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "UTC" + "'", str31, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology32);
        org.junit.Assert.assertNotNull(readableInterval35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1701260518968L + "'", long46 == 1701260518968L);
// flaky:         org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1701260518968L + "'", long47 == 1701260518968L);
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0693");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        java.lang.String str13 = partial0.toString();
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField15 = iSOChronology14.minutes();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str17 = dateTimeZone16.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology18 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology14, dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone19 = zonedChronology18.getZone();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology18.monthOfYear();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField22 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long25 = durationField22.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long27 = durationField22.getValueAsLong((long) 10);
        int int29 = durationField22.getValue((long) (byte) 10);
        boolean boolean30 = partial21.equals((java.lang.Object) durationField22);
        org.joda.time.Chronology chronology31 = partial21.getChronology();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        boolean boolean33 = partial21.isBefore((org.joda.time.ReadablePartial) partial32);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray34 = partial21.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval35 = null;
        org.joda.time.ReadableInterval readableInterval36 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval35);
        long long37 = readableInterval36.getStartMillis();
        org.joda.time.ReadableInterval readableInterval38 = null;
        org.joda.time.ReadableInterval readableInterval39 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval38);
        org.joda.time.ReadableInterval readableInterval40 = null;
        boolean boolean41 = readableInterval39.contains(readableInterval40);
        org.joda.time.Duration duration42 = readableInterval39.toDuration();
        org.joda.time.DateTime dateTime43 = readableInterval39.getEnd();
        boolean boolean44 = readableInterval36.contains((org.joda.time.ReadableInstant) dateTime43);
        boolean boolean45 = partial21.isMatch((org.joda.time.ReadableInstant) dateTime43);
        int[] intArray47 = zonedChronology18.get((org.joda.time.ReadablePartial) partial21, 60035L);
        boolean boolean48 = partial0.isMatch((org.joda.time.ReadablePartial) partial21);
        int int49 = partial0.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            int int51 = partial0.get(dateTimeFieldType50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'monthOfYear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray34);
        org.junit.Assert.assertNotNull(readableInterval36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 155017236551L + "'", long37 == 155017236551L);
        org.junit.Assert.assertNotNull(readableInterval39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0835");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.ReadableInterval readableInterval11 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval10);
        org.joda.time.ReadableInterval readableInterval12 = null;
        boolean boolean13 = readableInterval11.contains(readableInterval12);
        org.joda.time.ReadableInterval readableInterval14 = null;
        boolean boolean15 = readableInterval11.isBefore(readableInterval14);
        org.joda.time.Interval interval16 = readableInterval11.toInterval();
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.PeriodType periodType18 = org.joda.time.DateTimeUtils.getPeriodType(periodType17);
        org.joda.time.PeriodType periodType19 = org.joda.time.DateTimeUtils.getPeriodType(periodType17);
        org.joda.time.Period period20 = readableInterval11.toPeriod(periodType19);
        org.joda.time.Partial partial21 = partial0.plus((org.joda.time.ReadablePeriod) period20);
        java.lang.String str22 = partial21.toStringList();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField24 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long27 = durationField24.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long29 = durationField24.getValueAsLong((long) 10);
        int int31 = durationField24.getValue((long) (byte) 10);
        boolean boolean32 = partial23.equals((java.lang.Object) durationField24);
        org.joda.time.Chronology chronology33 = partial23.getChronology();
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        boolean boolean35 = partial23.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray36 = partial23.getFieldTypes();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField38 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long41 = durationField38.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long43 = durationField38.getValueAsLong((long) 10);
        int int45 = durationField38.getValue((long) (byte) 10);
        boolean boolean46 = partial37.equals((java.lang.Object) durationField38);
        org.joda.time.Chronology chronology47 = partial37.getChronology();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = partial37.isBefore((org.joda.time.ReadablePartial) partial48);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray50 = partial37.getFieldTypes();
        boolean boolean52 = partial37.equals((java.lang.Object) 1702281558665L);
        int int53 = partial23.compareTo((org.joda.time.ReadablePartial) partial37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = partial23.getFormatter();
        boolean boolean55 = partial21.isMatch((org.joda.time.ReadablePartial) partial23);
        org.joda.time.DurationFieldType durationFieldType56 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial58 = partial23.withFieldAdded(durationFieldType56, 74);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(readableInterval11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10L + "'", long29 == 10L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray36);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 10L + "'", long43 == 10L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNull(dateTimeFormatter54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2268");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval3);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DurationField durationField7 = chronology5.millis();
        org.joda.time.DurationField durationField8 = chronology5.centuries();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval9);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology11.millis();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.ReadableInterval readableInterval16 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval15);
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.ReadableInterval readableInterval21 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval20);
        org.joda.time.ReadableInterval readableInterval22 = null;
        boolean boolean23 = readableInterval21.contains(readableInterval22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = readableInterval21.toPeriod(periodType24);
        int[] intArray27 = chronology17.get((org.joda.time.ReadablePeriod) period25, (-210866846400000L));
        int[] intArray30 = chronology11.get((org.joda.time.ReadablePeriod) period25, 2173795348453L, (long) 1439);
        int[] intArray33 = chronology5.get((org.joda.time.ReadablePeriod) period25, 291L, 2580171L);
        int[] intArray36 = iSOChronology0.get((org.joda.time.ReadablePeriod) period25, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField37 = iSOChronology0.months();
        java.lang.String str38 = iSOChronology0.toString();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = iSOChronology0.equals((java.lang.Object) partial39);
        java.lang.String str41 = iSOChronology0.toString();
        org.joda.time.Chronology chronology42 = iSOChronology0.withUTC();
        org.joda.time.Partial partial43 = new org.joda.time.Partial((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.chrono.ISOChronology iSOChronology44 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField45 = iSOChronology44.minutes();
        org.joda.time.DurationField durationField46 = iSOChronology44.months();
        org.joda.time.DurationField durationField47 = iSOChronology44.years();
        org.joda.time.DurationField durationField48 = iSOChronology44.years();
        java.lang.String str49 = iSOChronology44.toString();
        boolean boolean50 = partial43.equals((java.lang.Object) str49);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(readableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(readableInterval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(readableInterval21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[UTC]" + "'", str38, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ISOChronology[UTC]" + "'", str41, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(iSOChronology44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ISOChronology[UTC]" + "'", str49, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0448");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology5 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone6 = gregorianChronology5.getZone();
        long long10 = gregorianChronology5.add(0L, (long) (byte) 1, (int) (byte) 0);
        org.joda.time.DateTimeField dateTimeField11 = gregorianChronology5.millisOfDay();
        org.joda.time.DurationField durationField12 = gregorianChronology5.weeks();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField14 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long17 = durationField14.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long19 = durationField14.getValueAsLong((long) 10);
        int int21 = durationField14.getValue((long) (byte) 10);
        boolean boolean22 = partial13.equals((java.lang.Object) durationField14);
        org.joda.time.ReadableInterval readableInterval23 = null;
        org.joda.time.ReadableInterval readableInterval24 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval23);
        org.joda.time.ReadableInterval readableInterval25 = null;
        boolean boolean26 = readableInterval24.contains(readableInterval25);
        org.joda.time.ReadableInterval readableInterval27 = null;
        boolean boolean28 = readableInterval24.isBefore(readableInterval27);
        org.joda.time.Interval interval29 = readableInterval24.toInterval();
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.PeriodType periodType31 = org.joda.time.DateTimeUtils.getPeriodType(periodType30);
        org.joda.time.PeriodType periodType32 = org.joda.time.DateTimeUtils.getPeriodType(periodType30);
        org.joda.time.Period period33 = readableInterval24.toPeriod(periodType32);
        org.joda.time.Partial partial34 = partial13.plus((org.joda.time.ReadablePeriod) period33);
        int[] intArray37 = gregorianChronology5.get((org.joda.time.ReadablePeriod) period33, 1701289178545L, (long) (short) 0);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField39 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long42 = durationField39.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long44 = durationField39.getValueAsLong((long) 10);
        int int46 = durationField39.getValue((long) (byte) 10);
        boolean boolean47 = partial38.equals((java.lang.Object) durationField39);
        org.joda.time.Chronology chronology48 = partial38.getChronology();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial38.isBefore((org.joda.time.ReadablePartial) partial49);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray51 = partial38.getFieldTypes();
        boolean boolean53 = partial38.equals((java.lang.Object) 1702281558665L);
        java.lang.String str54 = partial38.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = partial38.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.Partial partial57 = partial38.plus(readablePeriod56);
        int[] intArray59 = gregorianChronology5.get((org.joda.time.ReadablePartial) partial38, 1701289179647L);
        org.joda.time.DateTimeField dateTimeField60 = gregorianChronology5.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField61 = gregorianChronology5.centuryOfEra();
        long long64 = dateTimeField61.getDifferenceAsLong(0L, 2900521162108L);
        org.junit.Assert.assertNotNull(gregorianChronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(readableInterval24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-53, -10, -4, 0, -20, -19, -38, -545]");
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 10L + "'", long44 == 10L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[]" + "'", str54, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter55);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1459");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = partial0.getFormatter();
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField16 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long19 = durationField16.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long21 = durationField16.getValueAsLong((long) 10);
        int int23 = durationField16.getValue((long) (byte) 10);
        boolean boolean24 = partial15.equals((java.lang.Object) durationField16);
        org.joda.time.Chronology chronology25 = partial15.getChronology();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial15.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = partial15.getFieldTypes();
        boolean boolean30 = partial15.equals((java.lang.Object) 1702281558665L);
        java.lang.String str31 = partial15.toString();
        org.joda.time.Chronology chronology32 = partial15.getChronology();
        int int33 = partial0.compareTo((org.joda.time.ReadablePartial) partial15);
        int[] intArray34 = partial0.getValues();
        org.joda.time.ReadableInstant readableInstant35 = null;
        boolean boolean36 = partial0.isMatch(readableInstant35);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType38 = dateTimeFieldType37.getDurationType();
        org.joda.time.field.PreciseDurationField preciseDurationField40 = new org.joda.time.field.PreciseDurationField(durationFieldType38, 0L);
        org.joda.time.ReadableInterval readableInterval41 = null;
        org.joda.time.ReadableInterval readableInterval42 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval41);
        org.joda.time.Chronology chronology43 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval41);
        org.joda.time.DateTimeField dateTimeField44 = chronology43.yearOfCentury();
        org.joda.time.DurationField durationField45 = chronology43.minutes();
        org.joda.time.DurationField durationField46 = chronology43.halfdays();
        org.joda.time.DurationField durationField47 = chronology43.weeks();
        org.joda.time.DateTimeField dateTimeField48 = chronology43.millisOfDay();
        org.joda.time.DateTimeField dateTimeField49 = chronology43.dayOfWeek();
        boolean boolean50 = preciseDurationField40.equals((java.lang.Object) chronology43);
        org.joda.time.DurationFieldType durationFieldType51 = preciseDurationField40.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial53 = partial0.withFieldAddWrapped(durationFieldType51, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weeks' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10L + "'", long21 == 10L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertNotNull(readableInterval42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(durationFieldType51);
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2430");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField15 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long18 = durationField15.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long20 = durationField15.getValueAsLong((long) 10);
        int int22 = durationField15.getValue((long) (byte) 10);
        boolean boolean23 = partial14.equals((java.lang.Object) durationField15);
        boolean boolean24 = partial0.equals((java.lang.Object) durationField15);
        org.joda.time.ReadableInterval readableInterval25 = null;
        org.joda.time.ReadableInterval readableInterval26 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval25);
        org.joda.time.ReadableInterval readableInterval27 = null;
        boolean boolean28 = readableInterval26.contains(readableInterval27);
        org.joda.time.Duration duration29 = readableInterval26.toDuration();
        org.joda.time.ReadableInterval readableInterval30 = null;
        org.joda.time.ReadableInterval readableInterval31 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval30);
        org.joda.time.ReadableInterval readableInterval32 = null;
        boolean boolean33 = readableInterval31.contains(readableInterval32);
        org.joda.time.Duration duration34 = readableInterval31.toDuration();
        org.joda.time.DateTime dateTime35 = readableInterval31.getEnd();
        boolean boolean36 = readableInterval26.isBefore((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime dateTime37 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Chronology chronology38 = org.joda.time.DateTimeUtils.getInstantChronology((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.ReadableInterval readableInterval39 = null;
        org.joda.time.ReadableInterval readableInterval40 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval39);
        long long41 = readableInterval40.getStartMillis();
        org.joda.time.ReadableInterval readableInterval42 = null;
        org.joda.time.ReadableInterval readableInterval43 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval42);
        long long44 = readableInterval43.getEndMillis();
        boolean boolean45 = readableInterval40.overlaps(readableInterval43);
        org.joda.time.MutableInterval mutableInterval46 = readableInterval40.toMutableInterval();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        boolean boolean48 = mutableInterval46.equals((java.lang.Object) dateTimeFieldType47);
        org.joda.time.Chronology chronology49 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInterval) mutableInterval46);
        org.joda.time.DateTime dateTime50 = mutableInterval46.getEnd();
        org.joda.time.Chronology chronology51 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime50);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(readableInterval26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(readableInterval31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(readableInterval40);
// flaky:         org.junit.Assert.assertTrue("'" + long41 + "' != '" + 16707983010251L + "'", long41 == 16707983010251L);
        org.junit.Assert.assertNotNull(readableInterval43);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + 16707983010251L + "'", long44 == 16707983010251L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(mutableInterval46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(chronology51);
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0273");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DurationField durationField2 = iSOChronology0.months();
        long long7 = iSOChronology0.getDateTimeMillis(1, 1, (int) (byte) 1, (int) (short) 100);
        org.joda.time.DurationField durationField8 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField10 = iSOChronology9.minutes();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology9.millisOfDay();
        org.joda.time.ReadableInterval readableInterval12 = null;
        org.joda.time.ReadableInterval readableInterval13 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval12);
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        org.joda.time.DurationField durationField16 = chronology14.millis();
        org.joda.time.DurationField durationField17 = chronology14.centuries();
        org.joda.time.ReadableInterval readableInterval18 = null;
        org.joda.time.ReadableInterval readableInterval19 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval18);
        org.joda.time.Chronology chronology20 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval18);
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfCentury();
        org.joda.time.DurationField durationField22 = chronology20.millis();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.Chronology chronology26 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval24);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval29 = null;
        org.joda.time.ReadableInterval readableInterval30 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval29);
        org.joda.time.ReadableInterval readableInterval31 = null;
        boolean boolean32 = readableInterval30.contains(readableInterval31);
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = readableInterval30.toPeriod(periodType33);
        int[] intArray36 = chronology26.get((org.joda.time.ReadablePeriod) period34, (-210866846400000L));
        int[] intArray39 = chronology20.get((org.joda.time.ReadablePeriod) period34, 2173795348453L, (long) 1439);
        int[] intArray42 = chronology14.get((org.joda.time.ReadablePeriod) period34, 291L, 2580171L);
        int[] intArray45 = iSOChronology9.get((org.joda.time.ReadablePeriod) period34, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField46 = iSOChronology9.months();
        java.lang.String str47 = iSOChronology9.toString();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = iSOChronology9.equals((java.lang.Object) partial48);
        long long51 = iSOChronology0.set((org.joda.time.ReadablePartial) partial48, (long) (short) 1);
        org.joda.time.DateTimeField dateTimeField52 = iSOChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField53 = iSOChronology0.year();
        org.joda.time.DurationField durationField54 = iSOChronology0.months();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-62135568421900L) + "'", long7 == (-62135568421900L));
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(readableInterval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(readableInterval19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(readableInterval30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 0, 0, 0, -58574124, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[969, 11, 4, 2, 23, 52, 58, 291]");
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ISOChronology[America/Los_Angeles]" + "'", str47, "ISOChronology[America/Los_Angeles]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1497");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology1.minuteOfDay();
        org.joda.time.DurationField durationField3 = gregorianChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = gregorianChronology1.monthOfYear();
        org.joda.time.ReadableInterval readableInterval5 = null;
        org.joda.time.ReadableInterval readableInterval6 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval5);
        org.joda.time.Chronology chronology7 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval5);
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfCentury();
        org.joda.time.DurationField durationField9 = chronology7.millis();
        org.joda.time.DurationField durationField10 = chronology7.centuries();
        org.joda.time.DateTimeZone dateTimeZone11 = chronology7.getZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str13 = dateTimeZone12.toString();
        java.lang.String str15 = dateTimeZone12.getShortName((-210866846400000L));
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeUtils.getZone(dateTimeZone12);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone17 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone16);
        long long19 = dateTimeZone11.getMillisKeepLocal((org.joda.time.DateTimeZone) cachedDateTimeZone17, 60035L);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str21 = dateTimeZone20.toString();
        java.lang.String str23 = dateTimeZone20.getShortName((-210866846400000L));
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeUtils.getZone(dateTimeZone20);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone25 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone24);
        boolean boolean26 = cachedDateTimeZone17.equals((java.lang.Object) dateTimeZone24);
        long long29 = cachedDateTimeZone17.adjustOffset((-60505833599976L), false);
        int int31 = cachedDateTimeZone17.getStandardOffset(1701289169458L);
        org.joda.time.chrono.ZonedChronology zonedChronology32 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) gregorianChronology1, (org.joda.time.DateTimeZone) cachedDateTimeZone17);
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField34 = iSOChronology33.minutes();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str36 = dateTimeZone35.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology37 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology33, dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone38 = zonedChronology37.getZone();
        boolean boolean40 = zonedChronology37.equals((java.lang.Object) 4L);
        org.joda.time.DateTimeField dateTimeField41 = zonedChronology37.year();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone46 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology47 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone46);
        org.joda.time.DateTimeZone dateTimeZone48 = gregorianChronology47.getZone();
        org.joda.time.Chronology chronology49 = zonedChronology37.withZone(dateTimeZone48);
        org.joda.time.Chronology chronology50 = gregorianChronology1.withZone(dateTimeZone48);
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(readableInterval6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(cachedDateTimeZone17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 60035L + "'", long19 == 60035L);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(cachedDateTimeZone25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-60505833599976L) + "'", long29 == (-60505833599976L));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(zonedChronology32);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "UTC" + "'", str36, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(gregorianChronology47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(chronology50);
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0478");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.getDifferenceAsLong((long) (short) 100, (-30610224000000L));
        long long12 = unsupportedDateTimeField6.add((long) '4', (int) (byte) 1);
        org.joda.time.ReadablePartial readablePartial13 = null;
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone18 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology19 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone18);
        org.joda.time.DurationField durationField20 = gregorianChronology19.days();
        org.joda.time.DateTimeField dateTimeField21 = gregorianChronology19.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField22 = gregorianChronology19.era();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone27 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology28 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone29 = gregorianChronology28.getZone();
        long long34 = gregorianChronology28.getDateTimeMillis((int) '4', 8, 24, 24);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField36 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long39 = durationField36.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long41 = durationField36.getValueAsLong((long) 10);
        int int43 = durationField36.getValue((long) (byte) 10);
        boolean boolean44 = partial35.equals((java.lang.Object) durationField36);
        org.joda.time.Chronology chronology45 = partial35.getChronology();
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        boolean boolean47 = partial35.isBefore((org.joda.time.ReadablePartial) partial46);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray48 = partial35.getFieldTypes();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField50 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long53 = durationField50.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long55 = durationField50.getValueAsLong((long) 10);
        int int57 = durationField50.getValue((long) (byte) 10);
        boolean boolean58 = partial49.equals((java.lang.Object) durationField50);
        boolean boolean59 = partial35.equals((java.lang.Object) durationField50);
        int[] intArray61 = gregorianChronology28.get((org.joda.time.ReadablePartial) partial35, 0L);
        int[] intArray63 = gregorianChronology19.get((org.joda.time.ReadablePartial) partial35, 53459998L);
        // The following exception was thrown during execution in test generation
        try {
            int int64 = unsupportedDateTimeField6.getMinimumValue(readablePartial13, intArray63);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 30610224000100L + "'", long9 == 30610224000100L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 53L + "'", long12 == 53L);
        org.junit.Assert.assertNotNull(gregorianChronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(gregorianChronology28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-60505833599976L) + "'", long34 == (-60505833599976L));
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 10L + "'", long41 == 10L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray48);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1L + "'", long53 == 1L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 10L + "'", long55 == 10L);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2881");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DurationField durationField2 = iSOChronology0.months();
        long long7 = iSOChronology0.getDateTimeMillis(1, 1, (int) (byte) 1, (int) (short) 100);
        org.joda.time.DurationField durationField8 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField10 = iSOChronology9.minutes();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology9.millisOfDay();
        org.joda.time.ReadableInterval readableInterval12 = null;
        org.joda.time.ReadableInterval readableInterval13 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval12);
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        org.joda.time.DurationField durationField16 = chronology14.millis();
        org.joda.time.DurationField durationField17 = chronology14.centuries();
        org.joda.time.ReadableInterval readableInterval18 = null;
        org.joda.time.ReadableInterval readableInterval19 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval18);
        org.joda.time.Chronology chronology20 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval18);
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfCentury();
        org.joda.time.DurationField durationField22 = chronology20.millis();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.Chronology chronology26 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval24);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval29 = null;
        org.joda.time.ReadableInterval readableInterval30 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval29);
        org.joda.time.ReadableInterval readableInterval31 = null;
        boolean boolean32 = readableInterval30.contains(readableInterval31);
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = readableInterval30.toPeriod(periodType33);
        int[] intArray36 = chronology26.get((org.joda.time.ReadablePeriod) period34, (-210866846400000L));
        int[] intArray39 = chronology20.get((org.joda.time.ReadablePeriod) period34, 2173795348453L, (long) 1439);
        int[] intArray42 = chronology14.get((org.joda.time.ReadablePeriod) period34, 291L, 2580171L);
        int[] intArray45 = iSOChronology9.get((org.joda.time.ReadablePeriod) period34, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField46 = iSOChronology9.months();
        java.lang.String str47 = iSOChronology9.toString();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = iSOChronology9.equals((java.lang.Object) partial48);
        long long51 = iSOChronology0.set((org.joda.time.ReadablePartial) partial48, (long) (short) 1);
        org.joda.time.DurationField durationField52 = iSOChronology0.centuries();
        org.joda.time.DurationField durationField53 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField54 = iSOChronology0.yearOfCentury();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(durationField2);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-62135596799909L) + "'", long7 == (-62135596799909L));
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(readableInterval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(readableInterval19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(readableInterval30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(durationField46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ISOChronology[73]" + "'", str47, "ISOChronology[73]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2829");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str15 = dateTimeZone14.toString();
        org.joda.time.Chronology chronology16 = iSOChronology13.withZone(dateTimeZone14);
        boolean boolean17 = partial0.equals((java.lang.Object) dateTimeZone14);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray18 = partial0.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology20 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField21 = iSOChronology20.minutes();
        org.joda.time.DurationField durationField22 = iSOChronology20.months();
        org.joda.time.DurationField durationField23 = iSOChronology20.years();
        org.joda.time.DurationField durationField24 = iSOChronology20.weeks();
        boolean boolean25 = dateTimeFieldType19.isSupported((org.joda.time.Chronology) iSOChronology20);
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField27 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long30 = durationField27.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long32 = durationField27.getValueAsLong((long) 10);
        int int34 = durationField27.getValue((long) (byte) 10);
        boolean boolean35 = partial26.equals((java.lang.Object) durationField27);
        org.joda.time.Chronology chronology36 = partial26.getChronology();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        boolean boolean38 = partial26.isBefore((org.joda.time.ReadablePartial) partial37);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray39 = partial26.getFieldTypes();
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField41 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long44 = durationField41.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long46 = durationField41.getValueAsLong((long) 10);
        int int48 = durationField41.getValue((long) (byte) 10);
        boolean boolean49 = partial40.equals((java.lang.Object) durationField41);
        boolean boolean50 = partial26.equals((java.lang.Object) durationField41);
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField51 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType19, durationField41);
        org.joda.time.DurationFieldType durationFieldType52 = dateTimeFieldType19.getDurationType();
        boolean boolean53 = partial0.isSupported(dateTimeFieldType19);
        java.lang.String str54 = partial0.toStringList();
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(iSOChronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10L + "'", long32 == 10L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray39);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10L + "'", long46 == 10L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField51);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[]" + "'", str54, "[]");
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2117");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone5 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology6 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = gregorianChronology6.getZone();
        boolean boolean8 = dateTimeFieldType0.isSupported((org.joda.time.Chronology) gregorianChronology6);
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology6.hourOfHalfday();
        org.joda.time.Chronology chronology10 = gregorianChronology6.withUTC();
        org.joda.time.chrono.ISOChronology iSOChronology11 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField12 = iSOChronology11.minutes();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology15 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology11, dateTimeZone13);
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeZone13.getShortName(1L, locale17);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone19 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime20 = null;
        boolean boolean21 = cachedDateTimeZone19.isLocalDateTimeGap(localDateTime20);
        int int23 = cachedDateTimeZone19.getOffset(255193371L);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType25 = dateTimeFieldType24.getDurationType();
        org.joda.time.field.PreciseDurationField preciseDurationField27 = new org.joda.time.field.PreciseDurationField(durationFieldType25, 0L);
        boolean boolean28 = cachedDateTimeZone19.equals((java.lang.Object) 0L);
        boolean boolean30 = cachedDateTimeZone19.equals((java.lang.Object) 18110895568550L);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone31 = org.joda.time.tz.CachedDateTimeZone.forZone((org.joda.time.DateTimeZone) cachedDateTimeZone19);
        long long33 = cachedDateTimeZone31.nextTransition((-59028998263764L));
        org.joda.time.chrono.ZonedChronology zonedChronology34 = org.joda.time.chrono.ZonedChronology.getInstance(chronology10, (org.joda.time.DateTimeZone) cachedDateTimeZone31);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone39 = new org.joda.time.tz.FixedDateTimeZone("UTC", "", 0, 4);
        java.util.TimeZone timeZone40 = fixedDateTimeZone39.toTimeZone();
        java.lang.String str42 = fixedDateTimeZone39.getName(97L);
        int int44 = fixedDateTimeZone39.getOffsetFromLocal((-210858120000000L));
        long long46 = fixedDateTimeZone39.nextTransition(0L);
        int int48 = fixedDateTimeZone39.getOffset(2580171L);
        java.util.TimeZone timeZone49 = fixedDateTimeZone39.toTimeZone();
        int int51 = fixedDateTimeZone39.getStandardOffset(769L);
        org.joda.time.Chronology chronology52 = zonedChronology34.withZone((org.joda.time.DateTimeZone) fixedDateTimeZone39);
        org.joda.time.DateTimeField dateTimeField53 = zonedChronology34.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            long long59 = zonedChronology34.getDateTimeMillis((-60589296000000L), (-1893415679), 471, 1864073, 11);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1893415679 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(gregorianChronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(iSOChronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertNotNull(cachedDateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(cachedDateTimeZone31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-59028998263764L) + "'", long33 == (-59028998263764L));
        org.junit.Assert.assertNotNull(zonedChronology34);
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00" + "'", str42, "+00:00");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(timeZone49);
        org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 4 + "'", int51 == 4);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1857");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology5 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone6 = gregorianChronology5.getZone();
        long long10 = gregorianChronology5.add(0L, (long) (byte) 1, (int) (byte) 0);
        org.joda.time.DateTimeField dateTimeField11 = gregorianChronology5.millisOfDay();
        org.joda.time.DurationField durationField12 = gregorianChronology5.weeks();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField14 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long17 = durationField14.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long19 = durationField14.getValueAsLong((long) 10);
        int int21 = durationField14.getValue((long) (byte) 10);
        boolean boolean22 = partial13.equals((java.lang.Object) durationField14);
        org.joda.time.ReadableInterval readableInterval23 = null;
        org.joda.time.ReadableInterval readableInterval24 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval23);
        org.joda.time.ReadableInterval readableInterval25 = null;
        boolean boolean26 = readableInterval24.contains(readableInterval25);
        org.joda.time.ReadableInterval readableInterval27 = null;
        boolean boolean28 = readableInterval24.isBefore(readableInterval27);
        org.joda.time.Interval interval29 = readableInterval24.toInterval();
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.PeriodType periodType31 = org.joda.time.DateTimeUtils.getPeriodType(periodType30);
        org.joda.time.PeriodType periodType32 = org.joda.time.DateTimeUtils.getPeriodType(periodType30);
        org.joda.time.Period period33 = readableInterval24.toPeriod(periodType32);
        org.joda.time.Partial partial34 = partial13.plus((org.joda.time.ReadablePeriod) period33);
        int[] intArray37 = gregorianChronology5.get((org.joda.time.ReadablePeriod) period33, 1701289178545L, (long) (short) 0);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField39 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long42 = durationField39.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long44 = durationField39.getValueAsLong((long) 10);
        int int46 = durationField39.getValue((long) (byte) 10);
        boolean boolean47 = partial38.equals((java.lang.Object) durationField39);
        org.joda.time.Chronology chronology48 = partial38.getChronology();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial38.isBefore((org.joda.time.ReadablePartial) partial49);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray51 = partial38.getFieldTypes();
        boolean boolean53 = partial38.equals((java.lang.Object) 1702281558665L);
        java.lang.String str54 = partial38.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = partial38.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.Partial partial57 = partial38.plus(readablePeriod56);
        int[] intArray59 = gregorianChronology5.get((org.joda.time.ReadablePartial) partial38, 1701289179647L);
        org.joda.time.DateTimeField dateTimeField60 = gregorianChronology5.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField61 = gregorianChronology5.centuryOfEra();
        org.joda.time.DurationField durationField62 = gregorianChronology5.halfdays();
        org.junit.Assert.assertNotNull(gregorianChronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(readableInterval24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-53, -10, -4, 0, -20, -19, -38, -545]");
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 10L + "'", long44 == 10L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[]" + "'", str54, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter55);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(durationField62);
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0190");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.ReadablePartial readablePartial4 = null;
        int int5 = dateTimeField3.getMinimumValue(readablePartial4);
        org.joda.time.ReadablePartial readablePartial6 = null;
        org.joda.time.ReadableInterval readableInterval7 = null;
        org.joda.time.ReadableInterval readableInterval8 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval7);
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval7);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.yearOfCentury();
        org.joda.time.DurationField durationField11 = chronology9.millis();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.clockhourOfDay();
        org.joda.time.ReadablePartial readablePartial14 = null;
        int[] intArray21 = new int[] { '#', (-1), 0, (byte) 1, (short) 1, (byte) 1 };
        int int22 = dateTimeField13.getMaximumValue(readablePartial14, intArray21);
        int int23 = dateTimeField3.getMinimumValue(readablePartial6, intArray21);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField26 = new org.joda.time.field.RemainderDateTimeField(dateTimeField3, dateTimeFieldType24, 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval28 = null;
        org.joda.time.ReadableInterval readableInterval29 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval28);
        org.joda.time.Chronology chronology30 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval28);
        org.joda.time.DateTimeField dateTimeField31 = chronology30.yearOfCentury();
        org.joda.time.DurationField durationField32 = chronology30.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField33 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType27, durationField32);
        long long36 = durationField32.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval38 = null;
        org.joda.time.ReadableInterval readableInterval39 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval38);
        org.joda.time.Chronology chronology40 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval38);
        org.joda.time.DateTimeField dateTimeField41 = chronology40.yearOfCentury();
        boolean boolean42 = durationFieldType37.isSupported(chronology40);
        org.joda.time.field.ScaledDurationField scaledDurationField44 = new org.joda.time.field.ScaledDurationField(durationField32, durationFieldType37, (int) 'a');
        long long45 = scaledDurationField44.getUnitMillis();
        org.joda.time.DurationFieldType durationFieldType46 = scaledDurationField44.getType();
        int int48 = scaledDurationField44.getValue((long) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType50 = dateTimeFieldType49.getDurationType();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField52 = new org.joda.time.field.RemainderDateTimeField((org.joda.time.DateTimeField) remainderDateTimeField26, (org.joda.time.DurationField) scaledDurationField44, dateTimeFieldType49, 53460006);
        org.joda.time.DurationField durationField53 = remainderDateTimeField52.getRangeDurationField();
        int int54 = remainderDateTimeField52.iDivisor;
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(readableInterval8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[35, -1, 0, 1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 24 + "'", int22 == 24);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(readableInterval29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-210866846400000L) + "'", long36 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertNotNull(readableInterval39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 97L + "'", long45 == 97L);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 53460006 + "'", int54 == 53460006);
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2644");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = zonedChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField6 = zonedChronology4.monthOfYear();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField8 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long11 = durationField8.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long13 = durationField8.getValueAsLong((long) 10);
        int int15 = durationField8.getValue((long) (byte) 10);
        boolean boolean16 = partial7.equals((java.lang.Object) durationField8);
        org.joda.time.Chronology chronology17 = partial7.getChronology();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial7.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial7.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.ReadableInterval readableInterval22 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval21);
        long long23 = readableInterval22.getStartMillis();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.ReadableInterval readableInterval26 = null;
        boolean boolean27 = readableInterval25.contains(readableInterval26);
        org.joda.time.Duration duration28 = readableInterval25.toDuration();
        org.joda.time.DateTime dateTime29 = readableInterval25.getEnd();
        boolean boolean30 = readableInterval22.contains((org.joda.time.ReadableInstant) dateTime29);
        boolean boolean31 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime29);
        int[] intArray33 = zonedChronology4.get((org.joda.time.ReadablePartial) partial7, 60035L);
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval35 = null;
        org.joda.time.ReadableInterval readableInterval36 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval35);
        org.joda.time.Chronology chronology37 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval35);
        org.joda.time.DateTimeField dateTimeField38 = chronology37.yearOfCentury();
        boolean boolean39 = durationFieldType34.isSupported(chronology37);
        org.joda.time.DurationField durationField40 = chronology37.halfdays();
        org.joda.time.DateTimeField dateTimeField41 = chronology37.weekyearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField46 = new org.joda.time.field.OffsetDateTimeField(dateTimeField41, dateTimeFieldType42, 4, (int) ' ', (int) (short) -1);
        boolean boolean47 = partial7.isSupported(dateTimeFieldType42);
        java.lang.Number number49 = null;
        org.joda.time.IllegalFieldValueException illegalFieldValueException51 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType42, (java.lang.Number) 28800010L, number49, (java.lang.Number) 1701288000000L);
        org.joda.time.DurationFieldType durationFieldType52 = dateTimeFieldType42.getDurationType();
        org.joda.time.IllegalFieldValueException illegalFieldValueException54 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType42, "1439");
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(readableInterval22);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 114669905157955L + "'", long23 == 114669905157955L);
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertNotNull(readableInterval36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(durationFieldType52);
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0372");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        long long16 = dividedDateTimeField11.roundFloor(291L);
        boolean boolean17 = dividedDateTimeField11.isSupported();
        org.joda.time.DurationField durationField18 = dividedDateTimeField11.getDurationField();
        org.joda.time.ReadablePartial readablePartial19 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField22 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long25 = durationField22.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long27 = durationField22.getValueAsLong((long) 10);
        int int29 = durationField22.getValue((long) (byte) 10);
        boolean boolean30 = partial21.equals((java.lang.Object) durationField22);
        org.joda.time.Chronology chronology31 = partial21.getChronology();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        boolean boolean33 = partial21.isBefore((org.joda.time.ReadablePartial) partial32);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray34 = partial21.getFieldTypes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = partial21.getFormatter();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField37 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long40 = durationField37.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long42 = durationField37.getValueAsLong((long) 10);
        int int44 = durationField37.getValue((long) (byte) 10);
        boolean boolean45 = partial36.equals((java.lang.Object) durationField37);
        org.joda.time.Chronology chronology46 = partial36.getChronology();
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        boolean boolean48 = partial36.isBefore((org.joda.time.ReadablePartial) partial47);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray49 = partial36.getFieldTypes();
        boolean boolean51 = partial36.equals((java.lang.Object) 1702281558665L);
        java.lang.String str52 = partial36.toString();
        org.joda.time.Chronology chronology53 = partial36.getChronology();
        int int54 = partial21.compareTo((org.joda.time.ReadablePartial) partial36);
        int[] intArray55 = partial21.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray57 = dividedDateTimeField11.set(readablePartial19, 29227899, intArray55, (-28799996));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -28799996 for centuryOfEra must be in the range [0,29227899]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray34);
        org.junit.Assert.assertNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 10L + "'", long42 == 10L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[]" + "'", str52, "[]");
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2275");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology5 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone6 = gregorianChronology5.getZone();
        long long10 = gregorianChronology5.add(0L, (long) (byte) 1, (int) (byte) 0);
        org.joda.time.DateTimeField dateTimeField11 = gregorianChronology5.millisOfDay();
        org.joda.time.DurationField durationField12 = gregorianChronology5.weeks();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField14 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long17 = durationField14.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long19 = durationField14.getValueAsLong((long) 10);
        int int21 = durationField14.getValue((long) (byte) 10);
        boolean boolean22 = partial13.equals((java.lang.Object) durationField14);
        org.joda.time.ReadableInterval readableInterval23 = null;
        org.joda.time.ReadableInterval readableInterval24 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval23);
        org.joda.time.ReadableInterval readableInterval25 = null;
        boolean boolean26 = readableInterval24.contains(readableInterval25);
        org.joda.time.ReadableInterval readableInterval27 = null;
        boolean boolean28 = readableInterval24.isBefore(readableInterval27);
        org.joda.time.Interval interval29 = readableInterval24.toInterval();
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.PeriodType periodType31 = org.joda.time.DateTimeUtils.getPeriodType(periodType30);
        org.joda.time.PeriodType periodType32 = org.joda.time.DateTimeUtils.getPeriodType(periodType30);
        org.joda.time.Period period33 = readableInterval24.toPeriod(periodType32);
        org.joda.time.Partial partial34 = partial13.plus((org.joda.time.ReadablePeriod) period33);
        int[] intArray37 = gregorianChronology5.get((org.joda.time.ReadablePeriod) period33, 1701289178545L, (long) (short) 0);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField39 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long42 = durationField39.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long44 = durationField39.getValueAsLong((long) 10);
        int int46 = durationField39.getValue((long) (byte) 10);
        boolean boolean47 = partial38.equals((java.lang.Object) durationField39);
        org.joda.time.Chronology chronology48 = partial38.getChronology();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial38.isBefore((org.joda.time.ReadablePartial) partial49);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray51 = partial38.getFieldTypes();
        boolean boolean53 = partial38.equals((java.lang.Object) 1702281558665L);
        java.lang.String str54 = partial38.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = partial38.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.Partial partial57 = partial38.plus(readablePeriod56);
        int[] intArray59 = gregorianChronology5.get((org.joda.time.ReadablePartial) partial38, 1701289179647L);
        org.joda.time.DateTimeField dateTimeField60 = gregorianChronology5.weekOfWeekyear();
        org.joda.time.Chronology chronology61 = gregorianChronology5.withUTC();
        org.joda.time.DateTimeField dateTimeField62 = chronology61.hourOfHalfday();
        org.junit.Assert.assertNotNull(gregorianChronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(readableInterval24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-53, -10, -4, 0, -20, -19, -38, -545]");
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 10L + "'", long44 == 10L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[]" + "'", str54, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter55);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1837");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DurationField durationField2 = iSOChronology0.months();
        long long7 = iSOChronology0.getDateTimeMillis(1, 1, (int) (byte) 1, (int) (short) 100);
        org.joda.time.DurationField durationField8 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField10 = iSOChronology9.minutes();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology9.millisOfDay();
        org.joda.time.ReadableInterval readableInterval12 = null;
        org.joda.time.ReadableInterval readableInterval13 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval12);
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        org.joda.time.DurationField durationField16 = chronology14.millis();
        org.joda.time.DurationField durationField17 = chronology14.centuries();
        org.joda.time.ReadableInterval readableInterval18 = null;
        org.joda.time.ReadableInterval readableInterval19 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval18);
        org.joda.time.Chronology chronology20 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval18);
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfCentury();
        org.joda.time.DurationField durationField22 = chronology20.millis();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.Chronology chronology26 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval24);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval29 = null;
        org.joda.time.ReadableInterval readableInterval30 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval29);
        org.joda.time.ReadableInterval readableInterval31 = null;
        boolean boolean32 = readableInterval30.contains(readableInterval31);
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = readableInterval30.toPeriod(periodType33);
        int[] intArray36 = chronology26.get((org.joda.time.ReadablePeriod) period34, (-210866846400000L));
        int[] intArray39 = chronology20.get((org.joda.time.ReadablePeriod) period34, 2173795348453L, (long) 1439);
        int[] intArray42 = chronology14.get((org.joda.time.ReadablePeriod) period34, 291L, 2580171L);
        int[] intArray45 = iSOChronology9.get((org.joda.time.ReadablePeriod) period34, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField46 = iSOChronology9.months();
        java.lang.String str47 = iSOChronology9.toString();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = iSOChronology9.equals((java.lang.Object) partial48);
        long long51 = iSOChronology0.set((org.joda.time.ReadablePartial) partial48, (long) (short) 1);
        java.lang.String str52 = partial48.toString();
        java.lang.String str53 = partial48.toStringList();
        org.joda.time.Chronology chronology54 = partial48.getChronology();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-62135596799900L) + "'", long7 == (-62135596799900L));
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(readableInterval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(readableInterval19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(readableInterval30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ISOChronology[-1]" + "'", str47, "ISOChronology[-1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[]" + "'", str52, "[]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[]" + "'", str53, "[]");
        org.junit.Assert.assertNotNull(chronology54);
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2203");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DurationField durationField2 = iSOChronology0.months();
        long long7 = iSOChronology0.getDateTimeMillis(1, 1, (int) (byte) 1, (int) (short) 100);
        org.joda.time.DurationField durationField8 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField10 = iSOChronology9.minutes();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology9.millisOfDay();
        org.joda.time.ReadableInterval readableInterval12 = null;
        org.joda.time.ReadableInterval readableInterval13 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval12);
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        org.joda.time.DurationField durationField16 = chronology14.millis();
        org.joda.time.DurationField durationField17 = chronology14.centuries();
        org.joda.time.ReadableInterval readableInterval18 = null;
        org.joda.time.ReadableInterval readableInterval19 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval18);
        org.joda.time.Chronology chronology20 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval18);
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfCentury();
        org.joda.time.DurationField durationField22 = chronology20.millis();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.Chronology chronology26 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval24);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval29 = null;
        org.joda.time.ReadableInterval readableInterval30 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval29);
        org.joda.time.ReadableInterval readableInterval31 = null;
        boolean boolean32 = readableInterval30.contains(readableInterval31);
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = readableInterval30.toPeriod(periodType33);
        int[] intArray36 = chronology26.get((org.joda.time.ReadablePeriod) period34, (-210866846400000L));
        int[] intArray39 = chronology20.get((org.joda.time.ReadablePeriod) period34, 2173795348453L, (long) 1439);
        int[] intArray42 = chronology14.get((org.joda.time.ReadablePeriod) period34, 291L, 2580171L);
        int[] intArray45 = iSOChronology9.get((org.joda.time.ReadablePeriod) period34, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField46 = iSOChronology9.months();
        java.lang.String str47 = iSOChronology9.toString();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = iSOChronology9.equals((java.lang.Object) partial48);
        long long51 = iSOChronology0.set((org.joda.time.ReadablePartial) partial48, (long) (short) 1);
        org.joda.time.DateTimeField dateTimeField52 = iSOChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField53 = iSOChronology0.year();
        org.joda.time.DurationField durationField54 = iSOChronology0.millis();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-62135596799900L) + "'", long7 == (-62135596799900L));
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(readableInterval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(readableInterval19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(readableInterval30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ISOChronology[UTC]" + "'", str47, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0803");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add((-31L), (long) '#');
        org.joda.time.DurationField durationField10 = unsupportedDateTimeField6.getLeapDurationField();
        int int13 = unsupportedDateTimeField6.getDifference((long) (byte) 10, 10L);
        long long16 = unsupportedDateTimeField6.add((long) 1439, (int) (byte) -1);
        java.lang.String str17 = unsupportedDateTimeField6.toString();
        boolean boolean18 = unsupportedDateTimeField6.isSupported();
        long long21 = unsupportedDateTimeField6.getDifferenceAsLong((-28739965L), (-315619200000L));
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone26 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology27 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone28 = gregorianChronology27.getZone();
        long long33 = gregorianChronology27.getDateTimeMillis((int) '4', 8, 24, 24);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField35 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long38 = durationField35.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long40 = durationField35.getValueAsLong((long) 10);
        int int42 = durationField35.getValue((long) (byte) 10);
        boolean boolean43 = partial34.equals((java.lang.Object) durationField35);
        org.joda.time.Chronology chronology44 = partial34.getChronology();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        boolean boolean46 = partial34.isBefore((org.joda.time.ReadablePartial) partial45);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray47 = partial34.getFieldTypes();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField49 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long52 = durationField49.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long54 = durationField49.getValueAsLong((long) 10);
        int int56 = durationField49.getValue((long) (byte) 10);
        boolean boolean57 = partial48.equals((java.lang.Object) durationField49);
        boolean boolean58 = partial34.equals((java.lang.Object) durationField49);
        int[] intArray60 = gregorianChronology27.get((org.joda.time.ReadablePartial) partial34, 0L);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Partial partial62 = partial34.withChronologyRetainFields(chronology61);
        java.util.Locale locale63 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str64 = unsupportedDateTimeField6.getAsShortText((org.joda.time.ReadablePartial) partial34, locale63);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1438L + "'", long16 == 1438L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UnsupportedDateTimeField" + "'", str17, "UnsupportedDateTimeField");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 315590460035L + "'", long21 == 315590460035L);
        org.junit.Assert.assertNotNull(gregorianChronology27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-60505833599976L) + "'", long33 == (-60505833599976L));
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10L + "'", long40 == 10L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray47);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1L + "'", long52 == 1L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 10L + "'", long54 == 10L);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(partial62);
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0077");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.dayOfWeek();
        int int7 = dateTimeField5.get(9700L);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone12 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology13 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone14 = gregorianChronology13.getZone();
        long long19 = gregorianChronology13.getDateTimeMillis((int) '4', 8, 24, 24);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField21 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long24 = durationField21.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long26 = durationField21.getValueAsLong((long) 10);
        int int28 = durationField21.getValue((long) (byte) 10);
        boolean boolean29 = partial20.equals((java.lang.Object) durationField21);
        org.joda.time.Chronology chronology30 = partial20.getChronology();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        boolean boolean32 = partial20.isBefore((org.joda.time.ReadablePartial) partial31);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray33 = partial20.getFieldTypes();
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField35 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long38 = durationField35.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long40 = durationField35.getValueAsLong((long) 10);
        int int42 = durationField35.getValue((long) (byte) 10);
        boolean boolean43 = partial34.equals((java.lang.Object) durationField35);
        boolean boolean44 = partial20.equals((java.lang.Object) durationField35);
        int[] intArray46 = gregorianChronology13.get((org.joda.time.ReadablePartial) partial20, 0L);
        int int47 = partial20.size();
        org.joda.time.ReadableInterval readableInterval49 = null;
        org.joda.time.ReadableInterval readableInterval50 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval49);
        org.joda.time.Chronology chronology51 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval49);
        org.joda.time.DateTimeField dateTimeField52 = chronology51.yearOfCentury();
        org.joda.time.DurationField durationField53 = chronology51.millis();
        org.joda.time.DateTimeField dateTimeField54 = chronology51.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField55 = chronology51.clockhourOfDay();
        org.joda.time.ReadablePartial readablePartial56 = null;
        int[] intArray63 = new int[] { '#', (-1), 0, (byte) 1, (short) 1, (byte) 1 };
        int int64 = dateTimeField55.getMaximumValue(readablePartial56, intArray63);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray66 = dateTimeField5.set((org.joda.time.ReadablePartial) partial20, 0, intArray63, (-7));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -7 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(gregorianChronology13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-60505833599976L) + "'", long19 == (-60505833599976L));
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10L + "'", long26 == 10L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray33);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10L + "'", long40 == 10L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(readableInterval50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[35, -1, 0, 1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 24 + "'", int64 == 24);
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1452");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.ReadableInterval readableInterval11 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval10);
        org.joda.time.ReadableInterval readableInterval12 = null;
        boolean boolean13 = readableInterval11.contains(readableInterval12);
        org.joda.time.ReadableInterval readableInterval14 = null;
        boolean boolean15 = readableInterval11.isBefore(readableInterval14);
        org.joda.time.Interval interval16 = readableInterval11.toInterval();
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.PeriodType periodType18 = org.joda.time.DateTimeUtils.getPeriodType(periodType17);
        org.joda.time.PeriodType periodType19 = org.joda.time.DateTimeUtils.getPeriodType(periodType17);
        org.joda.time.Period period20 = readableInterval11.toPeriod(periodType19);
        org.joda.time.Partial partial21 = partial0.plus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField23 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long26 = durationField23.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long28 = durationField23.getValueAsLong((long) 10);
        int int30 = durationField23.getValue((long) (byte) 10);
        boolean boolean31 = partial22.equals((java.lang.Object) durationField23);
        org.joda.time.chrono.ISOChronology iSOChronology32 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField33 = iSOChronology32.minutes();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology32.millisOfDay();
        org.joda.time.DateTimeField dateTimeField35 = iSOChronology32.halfdayOfDay();
        org.joda.time.ReadableInterval readableInterval36 = null;
        org.joda.time.ReadableInterval readableInterval37 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval36);
        org.joda.time.ReadableInterval readableInterval38 = null;
        boolean boolean39 = readableInterval37.contains(readableInterval38);
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.Period period41 = readableInterval37.toPeriod(periodType40);
        int[] intArray44 = iSOChronology32.get((org.joda.time.ReadablePeriod) period41, 4L, (long) '#');
        org.joda.time.Partial partial45 = partial22.plus((org.joda.time.ReadablePeriod) period41);
        org.joda.time.Partial partial46 = partial21.minus((org.joda.time.ReadablePeriod) period41);
        org.joda.time.DurationFieldType durationFieldType47 = org.joda.time.DurationFieldType.hours();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField48 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType47);
        java.lang.String str49 = unsupportedDurationField48.toString();
        long long50 = unsupportedDurationField48.getUnitMillis();
        org.joda.time.DurationFieldType durationFieldType51 = unsupportedDurationField48.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial53 = partial46.withFieldAdded(durationFieldType51, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'hours' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(readableInterval11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10L + "'", long28 == 10L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(iSOChronology32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(readableInterval37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, 0, 0, 0, 0, 0, 0, 31]");
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertNotNull(unsupportedDurationField48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "UnsupportedDurationField[hours]" + "'", str49, "UnsupportedDurationField[hours]");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(durationFieldType51);
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0725");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField2 = iSOChronology1.minutes();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.millisOfDay();
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.ReadableInterval readableInterval5 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval4);
        org.joda.time.Chronology chronology6 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval4);
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.millis();
        org.joda.time.DurationField durationField9 = chronology6.centuries();
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.ReadableInterval readableInterval11 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval10);
        org.joda.time.Chronology chronology12 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval10);
        org.joda.time.DateTimeField dateTimeField13 = chronology12.yearOfCentury();
        org.joda.time.DurationField durationField14 = chronology12.millis();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.ReadableInterval readableInterval22 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval21);
        org.joda.time.ReadableInterval readableInterval23 = null;
        boolean boolean24 = readableInterval22.contains(readableInterval23);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Period period26 = readableInterval22.toPeriod(periodType25);
        int[] intArray28 = chronology18.get((org.joda.time.ReadablePeriod) period26, (-210866846400000L));
        int[] intArray31 = chronology12.get((org.joda.time.ReadablePeriod) period26, 2173795348453L, (long) 1439);
        int[] intArray34 = chronology6.get((org.joda.time.ReadablePeriod) period26, 291L, 2580171L);
        int[] intArray37 = iSOChronology1.get((org.joda.time.ReadablePeriod) period26, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField38 = iSOChronology1.months();
        java.lang.String str39 = iSOChronology1.toString();
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        boolean boolean41 = iSOChronology1.equals((java.lang.Object) partial40);
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology1.monthOfYear();
        org.joda.time.DurationField durationField43 = iSOChronology1.days();
        org.joda.time.DateTimeField dateTimeField44 = iSOChronology1.dayOfMonth();
        org.joda.time.DurationField durationField45 = durationFieldType0.getField((org.joda.time.Chronology) iSOChronology1);
        // The following exception was thrown during execution in test generation
        try {
            long long51 = iSOChronology1.getDateTimeMillis(296907L, (-751463), (int) (short) 100, 297, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -751463 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(readableInterval5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(readableInterval11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(readableInterval22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ISOChronology[UTC]" + "'", str39, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2049");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        java.lang.String str11 = partial0.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = partial0.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval13 = null;
        org.joda.time.ReadableInterval readableInterval14 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval13);
        org.joda.time.ReadableInterval readableInterval15 = null;
        boolean boolean16 = readableInterval14.contains(readableInterval15);
        org.joda.time.ReadableInterval readableInterval17 = null;
        boolean boolean18 = readableInterval14.isBefore(readableInterval17);
        org.joda.time.Interval interval19 = readableInterval14.toInterval();
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.PeriodType periodType21 = org.joda.time.DateTimeUtils.getPeriodType(periodType20);
        org.joda.time.PeriodType periodType22 = org.joda.time.DateTimeUtils.getPeriodType(periodType20);
        org.joda.time.Period period23 = readableInterval14.toPeriod(periodType22);
        org.joda.time.Partial partial24 = partial0.plus((org.joda.time.ReadablePeriod) period23);
        org.joda.time.ReadableInterval readableInterval25 = null;
        org.joda.time.ReadableInterval readableInterval26 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval25);
        org.joda.time.Chronology chronology27 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval25);
        org.joda.time.DateTimeField dateTimeField28 = chronology27.yearOfCentury();
        org.joda.time.DurationField durationField29 = chronology27.millis();
        org.joda.time.DurationField durationField30 = chronology27.centuries();
        org.joda.time.Chronology chronology31 = chronology27.withUTC();
        org.joda.time.DurationField durationField32 = chronology31.halfdays();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField36 = new org.joda.time.field.DividedDateTimeField(dateTimeField33, dateTimeFieldType34, 10);
        long long39 = dividedDateTimeField36.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval41 = null;
        org.joda.time.ReadableInterval readableInterval42 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval41);
        org.joda.time.Chronology chronology43 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval41);
        org.joda.time.DateTimeField dateTimeField44 = chronology43.yearOfCentury();
        org.joda.time.DurationField durationField45 = chronology43.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField46 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType40, durationField45);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField47 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField36, dateTimeFieldType40);
        org.joda.time.DurationFieldType durationFieldType48 = dateTimeFieldType40.getDurationType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property49 = partial0.property(dateTimeFieldType40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'dayOfYear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(readableInterval14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(readableInterval26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-30610224000000L) + "'", long39 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(readableInterval42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField46);
        org.junit.Assert.assertNotNull(durationFieldType48);
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0028");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        org.joda.time.ReadablePartial readablePartial23 = null;
        java.util.Locale locale25 = null;
        java.lang.String str26 = dividedDateTimeField11.getAsShortText(readablePartial23, (int) ' ', locale25);
        org.joda.time.ReadablePartial readablePartial27 = null;
        java.util.Locale locale29 = null;
        java.lang.String str30 = dividedDateTimeField11.getAsText(readablePartial27, (int) (byte) 10, locale29);
        boolean boolean31 = dividedDateTimeField11.isSupported();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField33 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long36 = durationField33.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long38 = durationField33.getValueAsLong((long) 10);
        int int40 = durationField33.getValue((long) (byte) 10);
        boolean boolean41 = partial32.equals((java.lang.Object) durationField33);
        org.joda.time.ReadableInterval readableInterval43 = null;
        org.joda.time.ReadableInterval readableInterval44 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval43);
        org.joda.time.Chronology chronology45 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval43);
        org.joda.time.DateTimeField dateTimeField46 = chronology45.yearOfCentury();
        org.joda.time.DurationField durationField47 = chronology45.millis();
        org.joda.time.DateTimeField dateTimeField48 = chronology45.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField49 = chronology45.clockhourOfDay();
        org.joda.time.ReadablePartial readablePartial50 = null;
        int[] intArray57 = new int[] { '#', (-1), 0, (byte) 1, (short) 1, (byte) 1 };
        int int58 = dateTimeField49.getMaximumValue(readablePartial50, intArray57);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray60 = dividedDateTimeField11.addWrapPartial((org.joda.time.ReadablePartial) partial32, (int) (short) 100, intArray57, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "32" + "'", str26, "32");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "10" + "'", str30, "10");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 10L + "'", long38 == 10L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(readableInterval44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[35, -1, 0, 1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 24 + "'", int58 == 24);
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1065");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField15 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long18 = durationField15.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long20 = durationField15.getValueAsLong((long) 10);
        int int22 = durationField15.getValue((long) (byte) 10);
        boolean boolean23 = partial14.equals((java.lang.Object) durationField15);
        org.joda.time.Chronology chronology24 = partial14.getChronology();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial14.isBefore((org.joda.time.ReadablePartial) partial25);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = partial14.getFieldTypes();
        boolean boolean29 = partial14.equals((java.lang.Object) 1702281558665L);
        int int30 = partial0.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = partial0.getFormatter();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField33 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long36 = durationField33.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long38 = durationField33.getValueAsLong((long) 10);
        int int40 = durationField33.getValue((long) (byte) 10);
        boolean boolean41 = partial32.equals((java.lang.Object) durationField33);
        org.joda.time.ReadableInterval readableInterval42 = null;
        org.joda.time.ReadableInterval readableInterval43 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval42);
        org.joda.time.ReadableInterval readableInterval44 = null;
        boolean boolean45 = readableInterval43.contains(readableInterval44);
        org.joda.time.ReadableInterval readableInterval46 = null;
        boolean boolean47 = readableInterval43.isBefore(readableInterval46);
        org.joda.time.Interval interval48 = readableInterval43.toInterval();
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.PeriodType periodType50 = org.joda.time.DateTimeUtils.getPeriodType(periodType49);
        org.joda.time.PeriodType periodType51 = org.joda.time.DateTimeUtils.getPeriodType(periodType49);
        org.joda.time.Period period52 = readableInterval43.toPeriod(periodType51);
        org.joda.time.Partial partial53 = partial32.plus((org.joda.time.ReadablePeriod) period52);
        boolean boolean54 = org.joda.time.DateTimeUtils.isContiguous((org.joda.time.ReadablePartial) partial32);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray55 = partial32.getFieldTypes();
        boolean boolean56 = partial0.isBefore((org.joda.time.ReadablePartial) partial32);
        java.lang.String str57 = partial32.toString();
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 10L + "'", long38 == 10L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(readableInterval43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1130");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add((-31L), (long) '#');
        org.joda.time.DurationField durationField10 = unsupportedDateTimeField6.getLeapDurationField();
        int int13 = unsupportedDateTimeField6.getDifference((long) (byte) 10, 10L);
        long long16 = unsupportedDateTimeField6.add((long) 1439, (int) (byte) -1);
        org.joda.time.DurationField durationField17 = unsupportedDateTimeField6.getLeapDurationField();
        org.joda.time.DurationField durationField18 = unsupportedDateTimeField6.getDurationField();
        org.joda.time.DurationField durationField19 = unsupportedDateTimeField6.getLeapDurationField();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField21 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long24 = durationField21.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long26 = durationField21.getValueAsLong((long) 10);
        int int28 = durationField21.getValue((long) (byte) 10);
        boolean boolean29 = partial20.equals((java.lang.Object) durationField21);
        org.joda.time.Chronology chronology30 = partial20.getChronology();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        boolean boolean32 = partial20.isBefore((org.joda.time.ReadablePartial) partial31);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray33 = partial20.getFieldTypes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = partial20.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray35 = partial20.getFieldTypes();
        int[] intArray36 = partial20.getValues();
        org.joda.time.chrono.ISOChronology iSOChronology37 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField38 = iSOChronology37.minutes();
        org.joda.time.DurationField durationField39 = iSOChronology37.months();
        org.joda.time.DurationField durationField40 = iSOChronology37.years();
        org.joda.time.DateTimeField dateTimeField41 = iSOChronology37.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology37.halfdayOfDay();
        boolean boolean43 = partial20.equals((java.lang.Object) iSOChronology37);
        org.joda.time.ReadableInterval readableInterval44 = null;
        org.joda.time.ReadableInterval readableInterval45 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval44);
        org.joda.time.ReadableInterval readableInterval46 = null;
        boolean boolean47 = readableInterval45.contains(readableInterval46);
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.Period period49 = readableInterval45.toPeriod(periodType48);
        org.joda.time.Partial partial50 = partial20.plus((org.joda.time.ReadablePeriod) period49);
        // The following exception was thrown during execution in test generation
        try {
            int int51 = unsupportedDateTimeField6.getMinimumValue((org.joda.time.ReadablePartial) partial50);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1438L + "'", long16 == 1438L);
        org.junit.Assert.assertNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNull(durationField19);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10L + "'", long26 == 10L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray33);
        org.junit.Assert.assertNull(dateTimeFormatter34);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(iSOChronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(readableInterval45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(partial50);
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2773");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        boolean boolean15 = partial0.equals((java.lang.Object) 1702281558665L);
        java.lang.String str16 = partial0.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = partial0.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.Partial partial19 = partial0.plus(readablePeriod18);
        int int20 = partial0.size();
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.ReadableInterval readableInterval22 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval21);
        org.joda.time.ReadableInterval readableInterval23 = null;
        boolean boolean24 = readableInterval22.contains(readableInterval23);
        org.joda.time.ReadableInterval readableInterval25 = null;
        boolean boolean26 = readableInterval22.isBefore(readableInterval25);
        org.joda.time.Interval interval27 = readableInterval22.toInterval();
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.PeriodType periodType29 = org.joda.time.DateTimeUtils.getPeriodType(periodType28);
        org.joda.time.PeriodType periodType30 = org.joda.time.DateTimeUtils.getPeriodType(periodType28);
        org.joda.time.Period period31 = readableInterval22.toPeriod(periodType30);
        org.joda.time.ReadableInterval readableInterval32 = null;
        org.joda.time.ReadableInterval readableInterval33 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval32);
        org.joda.time.ReadableInterval readableInterval34 = null;
        boolean boolean35 = readableInterval33.contains(readableInterval34);
        org.joda.time.ReadableInterval readableInterval36 = null;
        boolean boolean37 = readableInterval33.isBefore(readableInterval36);
        org.joda.time.Interval interval38 = readableInterval33.toInterval();
        boolean boolean39 = readableInterval22.overlaps(readableInterval33);
        org.joda.time.ReadableInterval readableInterval40 = null;
        org.joda.time.ReadableInterval readableInterval41 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval40);
        org.joda.time.ReadableInterval readableInterval42 = null;
        boolean boolean43 = readableInterval41.contains(readableInterval42);
        org.joda.time.ReadableInterval readableInterval44 = null;
        boolean boolean45 = readableInterval41.isBefore(readableInterval44);
        org.joda.time.Interval interval46 = readableInterval41.toInterval();
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.PeriodType periodType48 = org.joda.time.DateTimeUtils.getPeriodType(periodType47);
        org.joda.time.PeriodType periodType49 = org.joda.time.DateTimeUtils.getPeriodType(periodType47);
        org.joda.time.Period period50 = readableInterval41.toPeriod(periodType49);
        org.joda.time.DateTime dateTime51 = readableInterval41.getEnd();
        boolean boolean52 = readableInterval33.isAfter((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTime dateTime53 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime51);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[]" + "'", str16, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(readableInterval22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(readableInterval33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(readableInterval41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTime53);
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0776");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval3);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DurationField durationField7 = chronology5.millis();
        org.joda.time.DurationField durationField8 = chronology5.centuries();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval9);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology11.millis();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.ReadableInterval readableInterval16 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval15);
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.ReadableInterval readableInterval21 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval20);
        org.joda.time.ReadableInterval readableInterval22 = null;
        boolean boolean23 = readableInterval21.contains(readableInterval22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = readableInterval21.toPeriod(periodType24);
        int[] intArray27 = chronology17.get((org.joda.time.ReadablePeriod) period25, (-210866846400000L));
        int[] intArray30 = chronology11.get((org.joda.time.ReadablePeriod) period25, 2173795348453L, (long) 1439);
        int[] intArray33 = chronology5.get((org.joda.time.ReadablePeriod) period25, 291L, 2580171L);
        int[] intArray36 = iSOChronology0.get((org.joda.time.ReadablePeriod) period25, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField37 = iSOChronology0.months();
        java.lang.String str38 = iSOChronology0.toString();
        org.joda.time.chrono.ISOChronology iSOChronology39 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField40 = iSOChronology39.minutes();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str42 = dateTimeZone41.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology43 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology39, dateTimeZone41);
        org.joda.time.DateTimeZone dateTimeZone44 = zonedChronology43.getZone();
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone45 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone44);
        org.joda.time.chrono.GregorianChronology gregorianChronology46 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) cachedDateTimeZone45);
        org.joda.time.Chronology chronology47 = iSOChronology0.withZone((org.joda.time.DateTimeZone) cachedDateTimeZone45);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(readableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(readableInterval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(readableInterval21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[UTC]" + "'", str38, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(iSOChronology39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "UTC" + "'", str42, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(cachedDateTimeZone45);
        org.junit.Assert.assertNotNull(gregorianChronology46);
        org.junit.Assert.assertNotNull(chronology47);
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3138");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeField dateTimeField5 = zonedChronology4.monthOfYear();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField7 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long10 = durationField7.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long12 = durationField7.getValueAsLong((long) 10);
        int int14 = durationField7.getValue((long) (byte) 10);
        boolean boolean15 = partial6.equals((java.lang.Object) durationField7);
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.ReadableInterval readableInterval18 = null;
        boolean boolean19 = readableInterval17.contains(readableInterval18);
        org.joda.time.ReadableInterval readableInterval20 = null;
        boolean boolean21 = readableInterval17.isBefore(readableInterval20);
        org.joda.time.Interval interval22 = readableInterval17.toInterval();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.PeriodType periodType24 = org.joda.time.DateTimeUtils.getPeriodType(periodType23);
        org.joda.time.PeriodType periodType25 = org.joda.time.DateTimeUtils.getPeriodType(periodType23);
        org.joda.time.Period period26 = readableInterval17.toPeriod(periodType25);
        org.joda.time.Partial partial27 = partial6.plus((org.joda.time.ReadablePeriod) period26);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField29 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long32 = durationField29.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long34 = durationField29.getValueAsLong((long) 10);
        int int36 = durationField29.getValue((long) (byte) 10);
        boolean boolean37 = partial28.equals((java.lang.Object) durationField29);
        org.joda.time.chrono.ISOChronology iSOChronology38 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField39 = iSOChronology38.minutes();
        org.joda.time.DateTimeField dateTimeField40 = iSOChronology38.millisOfDay();
        org.joda.time.DateTimeField dateTimeField41 = iSOChronology38.halfdayOfDay();
        org.joda.time.ReadableInterval readableInterval42 = null;
        org.joda.time.ReadableInterval readableInterval43 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval42);
        org.joda.time.ReadableInterval readableInterval44 = null;
        boolean boolean45 = readableInterval43.contains(readableInterval44);
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Period period47 = readableInterval43.toPeriod(periodType46);
        int[] intArray50 = iSOChronology38.get((org.joda.time.ReadablePeriod) period47, 4L, (long) '#');
        org.joda.time.Partial partial51 = partial28.plus((org.joda.time.ReadablePeriod) period47);
        org.joda.time.Partial partial52 = partial27.minus((org.joda.time.ReadablePeriod) period47);
        int[] intArray54 = zonedChronology4.get((org.joda.time.ReadablePartial) partial52, 0L);
        org.joda.time.DateTimeField dateTimeField55 = zonedChronology4.halfdayOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10L + "'", long12 == 10L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10L + "'", long34 == 10L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(iSOChronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(readableInterval43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[0, 0, 0, 0, 0, 0, 0, 31]");
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(dateTimeField55);
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1309");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        org.joda.time.DurationField durationField7 = unsupportedDateTimeField6.getDurationField();
        org.joda.time.DurationField durationField8 = unsupportedDateTimeField6.getLeapDurationField();
        java.lang.String str9 = unsupportedDateTimeField6.toString();
        org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstanceUTC();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField12 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long15 = durationField12.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long17 = durationField12.getValueAsLong((long) 10);
        int int19 = durationField12.getValue((long) (byte) 10);
        boolean boolean20 = partial11.equals((java.lang.Object) durationField12);
        org.joda.time.Chronology chronology21 = partial11.getChronology();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial11.isBefore((org.joda.time.ReadablePartial) partial22);
        java.lang.String str24 = partial11.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType26 = dateTimeFieldType25.getDurationType();
        org.joda.time.Partial partial27 = partial11.without(dateTimeFieldType25);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone32 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology33 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone32);
        org.joda.time.ReadableInterval readableInterval34 = null;
        org.joda.time.ReadableInterval readableInterval35 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval34);
        org.joda.time.Chronology chronology36 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval34);
        org.joda.time.DateTimeField dateTimeField37 = chronology36.yearOfCentury();
        org.joda.time.DurationField durationField38 = chronology36.minutes();
        org.joda.time.DurationField durationField39 = chronology36.halfdays();
        org.joda.time.DurationField durationField40 = chronology36.weeks();
        org.joda.time.DateTimeField dateTimeField41 = chronology36.millisOfDay();
        boolean boolean42 = gregorianChronology33.equals((java.lang.Object) chronology36);
        boolean boolean43 = partial11.equals((java.lang.Object) boolean42);
        long long45 = iSOChronology10.set((org.joda.time.ReadablePartial) partial11, 164727302400000L);
        int[] intArray46 = partial11.getValues();
        java.util.Locale locale47 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str48 = unsupportedDateTimeField6.getAsText((org.joda.time.ReadablePartial) partial11, locale47);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNull(durationField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UnsupportedDateTimeField" + "'", str9, "UnsupportedDateTimeField");
        org.junit.Assert.assertNotNull(iSOChronology10);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[]" + "'", str24, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(gregorianChronology33);
        org.junit.Assert.assertNotNull(readableInterval35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 164727302400000L + "'", long45 == 164727302400000L);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1057");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DurationField durationField2 = iSOChronology0.months();
        long long7 = iSOChronology0.getDateTimeMillis(1, 1, (int) (byte) 1, (int) (short) 100);
        org.joda.time.DurationField durationField8 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField10 = iSOChronology9.minutes();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology9.millisOfDay();
        org.joda.time.ReadableInterval readableInterval12 = null;
        org.joda.time.ReadableInterval readableInterval13 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval12);
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        org.joda.time.DurationField durationField16 = chronology14.millis();
        org.joda.time.DurationField durationField17 = chronology14.centuries();
        org.joda.time.ReadableInterval readableInterval18 = null;
        org.joda.time.ReadableInterval readableInterval19 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval18);
        org.joda.time.Chronology chronology20 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval18);
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfCentury();
        org.joda.time.DurationField durationField22 = chronology20.millis();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.Chronology chronology26 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval24);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval29 = null;
        org.joda.time.ReadableInterval readableInterval30 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval29);
        org.joda.time.ReadableInterval readableInterval31 = null;
        boolean boolean32 = readableInterval30.contains(readableInterval31);
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = readableInterval30.toPeriod(periodType33);
        int[] intArray36 = chronology26.get((org.joda.time.ReadablePeriod) period34, (-210866846400000L));
        int[] intArray39 = chronology20.get((org.joda.time.ReadablePeriod) period34, 2173795348453L, (long) 1439);
        int[] intArray42 = chronology14.get((org.joda.time.ReadablePeriod) period34, 291L, 2580171L);
        int[] intArray45 = iSOChronology9.get((org.joda.time.ReadablePeriod) period34, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField46 = iSOChronology9.months();
        java.lang.String str47 = iSOChronology9.toString();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = iSOChronology9.equals((java.lang.Object) partial48);
        long long51 = iSOChronology0.set((org.joda.time.ReadablePartial) partial48, (long) (short) 1);
        java.lang.String str52 = partial48.toString();
        java.lang.String str53 = partial48.toString();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(durationField2);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-62135596799907L) + "'", long7 == (-62135596799907L));
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(readableInterval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(readableInterval19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(readableInterval30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(intArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(durationField46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ISOChronology[hourOfDay]" + "'", str47, "ISOChronology[hourOfDay]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[]" + "'", str52, "[]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[]" + "'", str53, "[]");
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3123");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.Chronology chronology3 = iSOChronology0.withZone(dateTimeZone1);
        org.joda.time.chrono.ISOChronology iSOChronology4 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField5 = iSOChronology4.minutes();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology4.millisOfDay();
        org.joda.time.ReadableInterval readableInterval7 = null;
        org.joda.time.ReadableInterval readableInterval8 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval7);
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval7);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.yearOfCentury();
        org.joda.time.DurationField durationField11 = chronology9.millis();
        org.joda.time.DurationField durationField12 = chronology9.centuries();
        org.joda.time.ReadableInterval readableInterval13 = null;
        org.joda.time.ReadableInterval readableInterval14 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval13);
        org.joda.time.Chronology chronology15 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval13);
        org.joda.time.DateTimeField dateTimeField16 = chronology15.yearOfCentury();
        org.joda.time.DurationField durationField17 = chronology15.millis();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval19 = null;
        org.joda.time.ReadableInterval readableInterval20 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval19);
        org.joda.time.Chronology chronology21 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval19);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.ReadableInterval readableInterval26 = null;
        boolean boolean27 = readableInterval25.contains(readableInterval26);
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Period period29 = readableInterval25.toPeriod(periodType28);
        int[] intArray31 = chronology21.get((org.joda.time.ReadablePeriod) period29, (-210866846400000L));
        int[] intArray34 = chronology15.get((org.joda.time.ReadablePeriod) period29, 2173795348453L, (long) 1439);
        int[] intArray37 = chronology9.get((org.joda.time.ReadablePeriod) period29, 291L, 2580171L);
        int[] intArray40 = iSOChronology4.get((org.joda.time.ReadablePeriod) period29, (-30610224000000L), 291L);
        int[] intArray42 = iSOChronology0.get((org.joda.time.ReadablePeriod) period29, 35L);
        org.joda.time.DateTimeField dateTimeField43 = iSOChronology0.monthOfYear();
        org.joda.time.DurationField durationField44 = iSOChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField45 = iSOChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField46 = iSOChronology0.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField47 = iSOChronology0.weekyearOfCentury();
        long long49 = dateTimeField47.roundHalfCeiling(7781943732048009700L);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTC" + "'", str2, "UTC");
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(iSOChronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(readableInterval8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(readableInterval14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(readableInterval20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(intArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 0, 0, 0, 0, 0, 0, 35]");
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
// flaky:         org.junit.Assert.assertTrue("'" + long49 + "' != '" + 7781943732047999991L + "'", long49 == 7781943732047999991L);
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2969");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeField dateTimeField5 = zonedChronology4.monthOfYear();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField7 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long10 = durationField7.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long12 = durationField7.getValueAsLong((long) 10);
        int int14 = durationField7.getValue((long) (byte) 10);
        boolean boolean15 = partial6.equals((java.lang.Object) durationField7);
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.ReadableInterval readableInterval18 = null;
        boolean boolean19 = readableInterval17.contains(readableInterval18);
        org.joda.time.ReadableInterval readableInterval20 = null;
        boolean boolean21 = readableInterval17.isBefore(readableInterval20);
        org.joda.time.Interval interval22 = readableInterval17.toInterval();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.PeriodType periodType24 = org.joda.time.DateTimeUtils.getPeriodType(periodType23);
        org.joda.time.PeriodType periodType25 = org.joda.time.DateTimeUtils.getPeriodType(periodType23);
        org.joda.time.Period period26 = readableInterval17.toPeriod(periodType25);
        org.joda.time.Partial partial27 = partial6.plus((org.joda.time.ReadablePeriod) period26);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField29 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long32 = durationField29.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long34 = durationField29.getValueAsLong((long) 10);
        int int36 = durationField29.getValue((long) (byte) 10);
        boolean boolean37 = partial28.equals((java.lang.Object) durationField29);
        org.joda.time.chrono.ISOChronology iSOChronology38 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField39 = iSOChronology38.minutes();
        org.joda.time.DateTimeField dateTimeField40 = iSOChronology38.millisOfDay();
        org.joda.time.DateTimeField dateTimeField41 = iSOChronology38.halfdayOfDay();
        org.joda.time.ReadableInterval readableInterval42 = null;
        org.joda.time.ReadableInterval readableInterval43 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval42);
        org.joda.time.ReadableInterval readableInterval44 = null;
        boolean boolean45 = readableInterval43.contains(readableInterval44);
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Period period47 = readableInterval43.toPeriod(periodType46);
        int[] intArray50 = iSOChronology38.get((org.joda.time.ReadablePeriod) period47, 4L, (long) '#');
        org.joda.time.Partial partial51 = partial28.plus((org.joda.time.ReadablePeriod) period47);
        org.joda.time.Partial partial52 = partial27.minus((org.joda.time.ReadablePeriod) period47);
        int[] intArray54 = zonedChronology4.get((org.joda.time.ReadablePartial) partial52, 0L);
        org.joda.time.Chronology chronology55 = zonedChronology4.withUTC();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10L + "'", long12 == 10L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10L + "'", long34 == 10L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(iSOChronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(readableInterval43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[0, 0, 0, 0, 0, 0, 0, 31]");
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(chronology55);
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1111");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField15 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long18 = durationField15.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long20 = durationField15.getValueAsLong((long) 10);
        int int22 = durationField15.getValue((long) (byte) 10);
        boolean boolean23 = partial14.equals((java.lang.Object) durationField15);
        boolean boolean24 = partial0.equals((java.lang.Object) durationField15);
        org.joda.time.ReadableInterval readableInterval25 = null;
        org.joda.time.ReadableInterval readableInterval26 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval25);
        org.joda.time.ReadableInterval readableInterval27 = null;
        boolean boolean28 = readableInterval26.contains(readableInterval27);
        org.joda.time.Duration duration29 = readableInterval26.toDuration();
        org.joda.time.ReadableInterval readableInterval30 = null;
        org.joda.time.ReadableInterval readableInterval31 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval30);
        org.joda.time.ReadableInterval readableInterval32 = null;
        boolean boolean33 = readableInterval31.contains(readableInterval32);
        org.joda.time.Duration duration34 = readableInterval31.toDuration();
        org.joda.time.DateTime dateTime35 = readableInterval31.getEnd();
        boolean boolean36 = readableInterval26.isBefore((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime dateTime37 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime35);
        java.lang.String str38 = partial0.toStringList();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval40 = null;
        org.joda.time.ReadableInterval readableInterval41 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval40);
        org.joda.time.Chronology chronology42 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval40);
        org.joda.time.DateTimeField dateTimeField43 = chronology42.yearOfCentury();
        org.joda.time.DurationField durationField44 = chronology42.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField45 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType39, durationField44);
        long long48 = unsupportedDateTimeField45.getDifferenceAsLong((long) (short) 100, (-30610224000000L));
        long long51 = unsupportedDateTimeField45.add((long) '4', (int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = unsupportedDateTimeField45.getType();
        // The following exception was thrown during execution in test generation
        try {
            int int53 = partial0.get(dateTimeFieldType52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'dayOfYear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(readableInterval26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(readableInterval31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[]" + "'", str38, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(readableInterval41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 30610224000100L + "'", long48 == 30610224000100L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 53L + "'", long51 == 53L);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1404");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField2 = iSOChronology1.minutes();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.millisOfDay();
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.ReadableInterval readableInterval5 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval4);
        org.joda.time.Chronology chronology6 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval4);
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.millis();
        org.joda.time.DurationField durationField9 = chronology6.centuries();
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.ReadableInterval readableInterval11 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval10);
        org.joda.time.Chronology chronology12 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval10);
        org.joda.time.DateTimeField dateTimeField13 = chronology12.yearOfCentury();
        org.joda.time.DurationField durationField14 = chronology12.millis();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.ReadableInterval readableInterval22 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval21);
        org.joda.time.ReadableInterval readableInterval23 = null;
        boolean boolean24 = readableInterval22.contains(readableInterval23);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Period period26 = readableInterval22.toPeriod(periodType25);
        int[] intArray28 = chronology18.get((org.joda.time.ReadablePeriod) period26, (-210866846400000L));
        int[] intArray31 = chronology12.get((org.joda.time.ReadablePeriod) period26, 2173795348453L, (long) 1439);
        int[] intArray34 = chronology6.get((org.joda.time.ReadablePeriod) period26, 291L, 2580171L);
        int[] intArray37 = iSOChronology1.get((org.joda.time.ReadablePeriod) period26, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField38 = iSOChronology1.months();
        java.lang.String str39 = iSOChronology1.toString();
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        boolean boolean41 = iSOChronology1.equals((java.lang.Object) partial40);
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology1.monthOfYear();
        org.joda.time.DurationField durationField43 = iSOChronology1.days();
        org.joda.time.DateTimeField dateTimeField44 = iSOChronology1.dayOfMonth();
        org.joda.time.DurationField durationField45 = durationFieldType0.getField((org.joda.time.Chronology) iSOChronology1);
        // The following exception was thrown during execution in test generation
        try {
            long long48 = durationField45.getMillis(52520168900655L, 8L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 52520168900655");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(readableInterval5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(readableInterval11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(readableInterval22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(durationField38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ISOChronology[UTC]" + "'", str39, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1783");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DurationField durationField2 = iSOChronology0.months();
        long long7 = iSOChronology0.getDateTimeMillis(1, 1, (int) (byte) 1, (int) (short) 100);
        org.joda.time.DurationField durationField8 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField10 = iSOChronology9.minutes();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology9.millisOfDay();
        org.joda.time.ReadableInterval readableInterval12 = null;
        org.joda.time.ReadableInterval readableInterval13 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval12);
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        org.joda.time.DurationField durationField16 = chronology14.millis();
        org.joda.time.DurationField durationField17 = chronology14.centuries();
        org.joda.time.ReadableInterval readableInterval18 = null;
        org.joda.time.ReadableInterval readableInterval19 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval18);
        org.joda.time.Chronology chronology20 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval18);
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfCentury();
        org.joda.time.DurationField durationField22 = chronology20.millis();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.Chronology chronology26 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval24);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval29 = null;
        org.joda.time.ReadableInterval readableInterval30 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval29);
        org.joda.time.ReadableInterval readableInterval31 = null;
        boolean boolean32 = readableInterval30.contains(readableInterval31);
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = readableInterval30.toPeriod(periodType33);
        int[] intArray36 = chronology26.get((org.joda.time.ReadablePeriod) period34, (-210866846400000L));
        int[] intArray39 = chronology20.get((org.joda.time.ReadablePeriod) period34, 2173795348453L, (long) 1439);
        int[] intArray42 = chronology14.get((org.joda.time.ReadablePeriod) period34, 291L, 2580171L);
        int[] intArray45 = iSOChronology9.get((org.joda.time.ReadablePeriod) period34, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField46 = iSOChronology9.months();
        java.lang.String str47 = iSOChronology9.toString();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = iSOChronology9.equals((java.lang.Object) partial48);
        long long51 = iSOChronology0.set((org.joda.time.ReadablePartial) partial48, (long) (short) 1);
        org.joda.time.DateTimeField dateTimeField52 = iSOChronology0.hourOfHalfday();
        org.joda.time.DurationField durationField53 = iSOChronology0.days();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(durationField2);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-62135596799900L) + "'", long7 == (-62135596799900L));
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(readableInterval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(readableInterval19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(readableInterval30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(intArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(durationField46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ISOChronology[100]" + "'", str47, "ISOChronology[100]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(durationField53);
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1476");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        int int23 = remainderDateTimeField22.getMaximumValue();
        long long25 = remainderDateTimeField22.roundCeiling((long) 97);
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField27 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long30 = durationField27.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long32 = durationField27.getValueAsLong((long) 10);
        int int34 = durationField27.getValue((long) (byte) 10);
        boolean boolean35 = partial26.equals((java.lang.Object) durationField27);
        org.joda.time.chrono.ISOChronology iSOChronology36 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField37 = iSOChronology36.minutes();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology36.millisOfDay();
        org.joda.time.DateTimeField dateTimeField39 = iSOChronology36.halfdayOfDay();
        org.joda.time.ReadableInterval readableInterval40 = null;
        org.joda.time.ReadableInterval readableInterval41 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval40);
        org.joda.time.ReadableInterval readableInterval42 = null;
        boolean boolean43 = readableInterval41.contains(readableInterval42);
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Period period45 = readableInterval41.toPeriod(periodType44);
        int[] intArray48 = iSOChronology36.get((org.joda.time.ReadablePeriod) period45, 4L, (long) '#');
        org.joda.time.Partial partial49 = partial26.plus((org.joda.time.ReadablePeriod) period45);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Partial partial51 = partial49.without(dateTimeFieldType50);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField52 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField22, dateTimeFieldType50);
        int int54 = dividedDateTimeField52.getMinimumValue((-476134772649L));
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 31536000000L + "'", long25 == 31536000000L);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10L + "'", long32 == 10L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(iSOChronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(readableInterval41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[0, 0, 0, 0, 0, 0, 0, 31]");
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1539");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add((-31L), (long) '#');
        org.joda.time.DurationField durationField10 = unsupportedDateTimeField6.getLeapDurationField();
        int int13 = unsupportedDateTimeField6.getDifference((long) (byte) 10, 10L);
        long long16 = unsupportedDateTimeField6.add((long) 1439, (int) (byte) -1);
        boolean boolean17 = unsupportedDateTimeField6.isSupported();
        long long20 = unsupportedDateTimeField6.getDifferenceAsLong(0L, 28800001L);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField22 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long25 = durationField22.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long27 = durationField22.getValueAsLong((long) 10);
        int int29 = durationField22.getValue((long) (byte) 10);
        boolean boolean30 = partial21.equals((java.lang.Object) durationField22);
        org.joda.time.Chronology chronology31 = partial21.getChronology();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        boolean boolean33 = partial21.isBefore((org.joda.time.ReadablePartial) partial32);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray34 = partial21.getFieldTypes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = partial21.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray36 = partial21.getFieldTypes();
        int[] intArray37 = partial21.getValues();
        org.joda.time.chrono.ISOChronology iSOChronology38 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField39 = iSOChronology38.minutes();
        org.joda.time.DurationField durationField40 = iSOChronology38.months();
        org.joda.time.DurationField durationField41 = iSOChronology38.years();
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology38.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField43 = iSOChronology38.halfdayOfDay();
        boolean boolean44 = partial21.equals((java.lang.Object) iSOChronology38);
        org.joda.time.ReadableInterval readableInterval45 = null;
        org.joda.time.ReadableInterval readableInterval46 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval45);
        org.joda.time.ReadableInterval readableInterval47 = null;
        boolean boolean48 = readableInterval46.contains(readableInterval47);
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.Period period50 = readableInterval46.toPeriod(periodType49);
        org.joda.time.Partial partial51 = partial21.plus((org.joda.time.ReadablePeriod) period50);
        java.util.Locale locale53 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str54 = unsupportedDateTimeField6.getAsText((org.joda.time.ReadablePartial) partial51, (-751463), locale53);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1438L + "'", long16 == 1438L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-28800001L) + "'", long20 == (-28800001L));
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray34);
        org.junit.Assert.assertNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(iSOChronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(readableInterval46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(partial51);
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0062");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add((-31L), (long) '#');
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField13 = iSOChronology12.minutes();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology12.millisOfDay();
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.ReadableInterval readableInterval16 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval15);
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        org.joda.time.DurationField durationField19 = chronology17.millis();
        org.joda.time.DurationField durationField20 = chronology17.centuries();
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.ReadableInterval readableInterval22 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval21);
        org.joda.time.Chronology chronology23 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval21);
        org.joda.time.DateTimeField dateTimeField24 = chronology23.yearOfCentury();
        org.joda.time.DurationField durationField25 = chronology23.millis();
        org.joda.time.DateTimeField dateTimeField26 = chronology23.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval27 = null;
        org.joda.time.ReadableInterval readableInterval28 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval27);
        org.joda.time.Chronology chronology29 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval27);
        org.joda.time.DateTimeField dateTimeField30 = chronology29.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval32 = null;
        org.joda.time.ReadableInterval readableInterval33 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval32);
        org.joda.time.ReadableInterval readableInterval34 = null;
        boolean boolean35 = readableInterval33.contains(readableInterval34);
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Period period37 = readableInterval33.toPeriod(periodType36);
        int[] intArray39 = chronology29.get((org.joda.time.ReadablePeriod) period37, (-210866846400000L));
        int[] intArray42 = chronology23.get((org.joda.time.ReadablePeriod) period37, 2173795348453L, (long) 1439);
        int[] intArray45 = chronology17.get((org.joda.time.ReadablePeriod) period37, 291L, 2580171L);
        int[] intArray48 = iSOChronology12.get((org.joda.time.ReadablePeriod) period37, (-30610224000000L), 291L);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray50 = unsupportedDateTimeField6.add((org.joda.time.ReadablePartial) partial10, (int) (short) 10, intArray48, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNotNull(iSOChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(readableInterval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(readableInterval22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(readableInterval28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(readableInterval33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[0, 0, 0, 0, -58574124, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[969, 11, 4, 2, 23, 52, 58, 291]");
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0640");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DurationField durationField2 = iSOChronology0.months();
        long long7 = iSOChronology0.getDateTimeMillis(1, 1, (int) (byte) 1, (int) (short) 100);
        org.joda.time.DurationField durationField8 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField10 = iSOChronology9.minutes();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology9.millisOfDay();
        org.joda.time.ReadableInterval readableInterval12 = null;
        org.joda.time.ReadableInterval readableInterval13 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval12);
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        org.joda.time.DurationField durationField16 = chronology14.millis();
        org.joda.time.DurationField durationField17 = chronology14.centuries();
        org.joda.time.ReadableInterval readableInterval18 = null;
        org.joda.time.ReadableInterval readableInterval19 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval18);
        org.joda.time.Chronology chronology20 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval18);
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfCentury();
        org.joda.time.DurationField durationField22 = chronology20.millis();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.Chronology chronology26 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval24);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval29 = null;
        org.joda.time.ReadableInterval readableInterval30 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval29);
        org.joda.time.ReadableInterval readableInterval31 = null;
        boolean boolean32 = readableInterval30.contains(readableInterval31);
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = readableInterval30.toPeriod(periodType33);
        int[] intArray36 = chronology26.get((org.joda.time.ReadablePeriod) period34, (-210866846400000L));
        int[] intArray39 = chronology20.get((org.joda.time.ReadablePeriod) period34, 2173795348453L, (long) 1439);
        int[] intArray42 = chronology14.get((org.joda.time.ReadablePeriod) period34, 291L, 2580171L);
        int[] intArray45 = iSOChronology9.get((org.joda.time.ReadablePeriod) period34, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField46 = iSOChronology9.months();
        java.lang.String str47 = iSOChronology9.toString();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = iSOChronology9.equals((java.lang.Object) partial48);
        long long51 = iSOChronology0.set((org.joda.time.ReadablePartial) partial48, (long) (short) 1);
        org.joda.time.DateTimeField dateTimeField52 = iSOChronology0.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone53 = iSOChronology0.getZone();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(durationField2);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-62135596799907L) + "'", long7 == (-62135596799907L));
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(readableInterval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(readableInterval19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(readableInterval30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(durationField46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ISOChronology[hourOfDay]" + "'", str47, "ISOChronology[hourOfDay]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2452");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        long long24 = remainderDateTimeField22.roundHalfFloor(3600000L);
        boolean boolean25 = remainderDateTimeField22.isSupported();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField27 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long30 = durationField27.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long32 = durationField27.getValueAsLong((long) 10);
        int int34 = durationField27.getValue((long) (byte) 10);
        boolean boolean35 = partial26.equals((java.lang.Object) durationField27);
        org.joda.time.Chronology chronology36 = partial26.getChronology();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        boolean boolean38 = partial26.isBefore((org.joda.time.ReadablePartial) partial37);
        java.lang.String str39 = partial26.toString();
        org.joda.time.Chronology chronology40 = partial26.getChronology();
        int int41 = remainderDateTimeField22.getMaximumValue((org.joda.time.ReadablePartial) partial26);
        org.joda.time.chrono.ISOChronology iSOChronology42 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField43 = iSOChronology42.minutes();
        org.joda.time.DateTimeField dateTimeField44 = iSOChronology42.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField45 = iSOChronology42.yearOfEra();
        org.joda.time.DurationField durationField46 = iSOChronology42.halfdays();
        long long50 = iSOChronology42.add((long) (-1), (-28739965L), 0);
        org.joda.time.Partial partial51 = partial26.withChronologyRetainFields((org.joda.time.Chronology) iSOChronology42);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField53 = partial26.getField(0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10L + "'", long32 == 10L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[]" + "'", str39, "[]");
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 9 + "'", int41 == 9);
        org.junit.Assert.assertNotNull(iSOChronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-1L) + "'", long50 == (-1L));
        org.junit.Assert.assertNotNull(partial51);
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1807");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = null;
        boolean boolean3 = readableInterval1.contains(readableInterval2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = readableInterval1.toPeriod(periodType4);
        org.joda.time.DateTime dateTime6 = readableInterval1.getEnd();
        org.joda.time.ReadableInterval readableInterval7 = null;
        org.joda.time.ReadableInterval readableInterval8 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval7);
        org.joda.time.ReadableInterval readableInterval9 = null;
        boolean boolean10 = readableInterval8.contains(readableInterval9);
        org.joda.time.Duration duration11 = readableInterval8.toDuration();
        org.joda.time.DateTime dateTime12 = readableInterval8.getEnd();
        org.joda.time.Period period13 = readableInterval8.toPeriod();
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval8);
        boolean boolean15 = readableInterval1.isAfter(readableInterval8);
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.ReadableInterval readableInterval18 = null;
        boolean boolean19 = readableInterval17.contains(readableInterval18);
        org.joda.time.Duration duration20 = readableInterval17.toDuration();
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.ReadableInterval readableInterval22 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval21);
        org.joda.time.ReadableInterval readableInterval23 = null;
        boolean boolean24 = readableInterval22.contains(readableInterval23);
        org.joda.time.Duration duration25 = readableInterval22.toDuration();
        org.joda.time.DateTime dateTime26 = readableInterval22.getEnd();
        boolean boolean27 = readableInterval17.isBefore((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.chrono.ISOChronology iSOChronology28 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField29 = iSOChronology28.minutes();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str31 = dateTimeZone30.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology32 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology28, dateTimeZone30);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.ReadableInterval readableInterval34 = null;
        org.joda.time.ReadableInterval readableInterval35 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval34);
        org.joda.time.ReadableInterval readableInterval36 = null;
        boolean boolean37 = readableInterval35.contains(readableInterval36);
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Period period39 = readableInterval35.toPeriod(periodType38);
        org.joda.time.DateTime dateTime40 = readableInterval35.getEnd();
        org.joda.time.Chronology chronology41 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant33, (org.joda.time.ReadableInstant) dateTime40);
        int int42 = dateTimeZone30.getOffset((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Chronology chronology43 = org.joda.time.DateTimeUtils.getInstantChronology((org.joda.time.ReadableInstant) dateTime40);
        boolean boolean44 = readableInterval17.contains((org.joda.time.ReadableInstant) dateTime40);
        boolean boolean45 = readableInterval1.contains(readableInterval17);
        org.joda.time.Chronology chronology46 = readableInterval17.getChronology();
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(readableInterval8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(readableInterval22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(iSOChronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "UTC" + "'", str31, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology32);
        org.junit.Assert.assertNotNull(readableInterval35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(chronology46);
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1199");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = zonedChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField6 = zonedChronology4.monthOfYear();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField8 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long11 = durationField8.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long13 = durationField8.getValueAsLong((long) 10);
        int int15 = durationField8.getValue((long) (byte) 10);
        boolean boolean16 = partial7.equals((java.lang.Object) durationField8);
        org.joda.time.Chronology chronology17 = partial7.getChronology();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial7.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial7.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.ReadableInterval readableInterval22 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval21);
        long long23 = readableInterval22.getStartMillis();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.ReadableInterval readableInterval26 = null;
        boolean boolean27 = readableInterval25.contains(readableInterval26);
        org.joda.time.Duration duration28 = readableInterval25.toDuration();
        org.joda.time.DateTime dateTime29 = readableInterval25.getEnd();
        boolean boolean30 = readableInterval22.contains((org.joda.time.ReadableInstant) dateTime29);
        boolean boolean31 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime29);
        int[] intArray33 = zonedChronology4.get((org.joda.time.ReadablePartial) partial7, 60035L);
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval35 = null;
        org.joda.time.ReadableInterval readableInterval36 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval35);
        org.joda.time.Chronology chronology37 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval35);
        org.joda.time.DateTimeField dateTimeField38 = chronology37.yearOfCentury();
        boolean boolean39 = durationFieldType34.isSupported(chronology37);
        org.joda.time.DurationField durationField40 = chronology37.halfdays();
        org.joda.time.DateTimeField dateTimeField41 = chronology37.weekyearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField46 = new org.joda.time.field.OffsetDateTimeField(dateTimeField41, dateTimeFieldType42, 4, (int) ' ', (int) (short) -1);
        boolean boolean47 = partial7.isSupported(dateTimeFieldType42);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial49 = new org.joda.time.Partial(dateTimeFieldType42, 197);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 197 for weekOfWeekyear must not be larger than 53");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(readableInterval22);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 315639019277L + "'", long23 == 315639019277L);
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertNotNull(readableInterval36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1506");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = zonedChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField6 = zonedChronology4.monthOfYear();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField8 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long11 = durationField8.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long13 = durationField8.getValueAsLong((long) 10);
        int int15 = durationField8.getValue((long) (byte) 10);
        boolean boolean16 = partial7.equals((java.lang.Object) durationField8);
        org.joda.time.Chronology chronology17 = partial7.getChronology();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial7.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial7.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.ReadableInterval readableInterval22 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval21);
        long long23 = readableInterval22.getStartMillis();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.ReadableInterval readableInterval26 = null;
        boolean boolean27 = readableInterval25.contains(readableInterval26);
        org.joda.time.Duration duration28 = readableInterval25.toDuration();
        org.joda.time.DateTime dateTime29 = readableInterval25.getEnd();
        boolean boolean30 = readableInterval22.contains((org.joda.time.ReadableInstant) dateTime29);
        boolean boolean31 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime29);
        int[] intArray33 = zonedChronology4.get((org.joda.time.ReadablePartial) partial7, 60035L);
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval35 = null;
        org.joda.time.ReadableInterval readableInterval36 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval35);
        org.joda.time.Chronology chronology37 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval35);
        org.joda.time.DateTimeField dateTimeField38 = chronology37.yearOfCentury();
        boolean boolean39 = durationFieldType34.isSupported(chronology37);
        org.joda.time.DurationField durationField40 = chronology37.halfdays();
        org.joda.time.DateTimeField dateTimeField41 = chronology37.weekyearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField46 = new org.joda.time.field.OffsetDateTimeField(dateTimeField41, dateTimeFieldType42, 4, (int) ' ', (int) (short) -1);
        boolean boolean47 = partial7.isSupported(dateTimeFieldType42);
        java.lang.Number number49 = null;
        org.joda.time.IllegalFieldValueException illegalFieldValueException51 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType42, (java.lang.Number) (-534470L), number49, (java.lang.Number) 60000L);
        boolean boolean52 = org.joda.time.IllegalInstantException.isIllegalInstant((java.lang.Throwable) illegalFieldValueException51);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(readableInterval22);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertNotNull(readableInterval36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3061");
        org.joda.time.JodaTimePermission jodaTimePermission1 = new org.joda.time.JodaTimePermission("DateTimeField[minuteOfDay]");
        java.lang.Object obj2 = null;
        jodaTimePermission1.checkGuard(obj2);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone8 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology9 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone8);
        org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField11 = iSOChronology10.minutes();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str13 = dateTimeZone12.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology14 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology10, dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone15 = zonedChronology14.getZone();
        boolean boolean16 = fixedDateTimeZone8.equals((java.lang.Object) zonedChronology14);
        jodaTimePermission1.checkGuard((java.lang.Object) fixedDateTimeZone8);
        org.joda.time.JodaTimePermission jodaTimePermission19 = new org.joda.time.JodaTimePermission("35");
        boolean boolean20 = jodaTimePermission1.implies((java.security.Permission) jodaTimePermission19);
        java.lang.String str21 = jodaTimePermission19.getActions();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone26 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology27 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone28 = gregorianChronology27.getZone();
        long long33 = gregorianChronology27.getDateTimeMillis((int) '4', 8, 24, 24);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField35 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long38 = durationField35.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long40 = durationField35.getValueAsLong((long) 10);
        int int42 = durationField35.getValue((long) (byte) 10);
        boolean boolean43 = partial34.equals((java.lang.Object) durationField35);
        org.joda.time.Chronology chronology44 = partial34.getChronology();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        boolean boolean46 = partial34.isBefore((org.joda.time.ReadablePartial) partial45);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray47 = partial34.getFieldTypes();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField49 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long52 = durationField49.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long54 = durationField49.getValueAsLong((long) 10);
        int int56 = durationField49.getValue((long) (byte) 10);
        boolean boolean57 = partial48.equals((java.lang.Object) durationField49);
        boolean boolean58 = partial34.equals((java.lang.Object) durationField49);
        int[] intArray60 = gregorianChronology27.get((org.joda.time.ReadablePartial) partial34, 0L);
        org.joda.time.DateTimeField dateTimeField61 = gregorianChronology27.dayOfMonth();
        boolean boolean62 = jodaTimePermission19.equals((java.lang.Object) dateTimeField61);
        java.lang.String str63 = jodaTimePermission19.getName();
        org.junit.Assert.assertNotNull(gregorianChronology9);
        org.junit.Assert.assertNotNull(iSOChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(gregorianChronology27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-60505833599976L) + "'", long33 == (-60505833599976L));
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10L + "'", long40 == 10L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray47);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1L + "'", long52 == 1L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 10L + "'", long54 == 10L);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "35" + "'", str63, "35");
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1833");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField15 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long18 = durationField15.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long20 = durationField15.getValueAsLong((long) 10);
        int int22 = durationField15.getValue((long) (byte) 10);
        boolean boolean23 = partial14.equals((java.lang.Object) durationField15);
        boolean boolean24 = partial0.equals((java.lang.Object) durationField15);
        org.joda.time.ReadableInterval readableInterval25 = null;
        org.joda.time.ReadableInterval readableInterval26 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval25);
        org.joda.time.ReadableInterval readableInterval27 = null;
        boolean boolean28 = readableInterval26.contains(readableInterval27);
        org.joda.time.Duration duration29 = readableInterval26.toDuration();
        org.joda.time.ReadableInterval readableInterval30 = null;
        org.joda.time.ReadableInterval readableInterval31 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval30);
        org.joda.time.ReadableInterval readableInterval32 = null;
        boolean boolean33 = readableInterval31.contains(readableInterval32);
        org.joda.time.Duration duration34 = readableInterval31.toDuration();
        org.joda.time.DateTime dateTime35 = readableInterval31.getEnd();
        boolean boolean36 = readableInterval26.isBefore((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime dateTime37 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.chrono.ISOChronology iSOChronology38 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField39 = iSOChronology38.minutes();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str41 = dateTimeZone40.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology42 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology38, dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone43 = zonedChronology42.getZone();
        boolean boolean45 = zonedChronology42.equals((java.lang.Object) 4L);
        org.joda.time.DateTimeField dateTimeField46 = zonedChronology42.year();
        org.joda.time.DateTimeField dateTimeField47 = zonedChronology42.yearOfCentury();
        boolean boolean48 = partial0.equals((java.lang.Object) zonedChronology42);
        org.joda.time.Chronology chronology49 = zonedChronology42.withUTC();
        // The following exception was thrown during execution in test generation
        try {
            long long54 = zonedChronology42.getDateTimeMillis(97, 0, 955, 16);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(readableInterval26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(readableInterval31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(iSOChronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "UTC" + "'", str41, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(chronology49);
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2344");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology5 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone6 = gregorianChronology5.getZone();
        long long10 = gregorianChronology5.add(0L, (long) (byte) 1, (int) (byte) 0);
        org.joda.time.DateTimeField dateTimeField11 = gregorianChronology5.millisOfDay();
        org.joda.time.DurationField durationField12 = gregorianChronology5.weeks();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField14 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long17 = durationField14.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long19 = durationField14.getValueAsLong((long) 10);
        int int21 = durationField14.getValue((long) (byte) 10);
        boolean boolean22 = partial13.equals((java.lang.Object) durationField14);
        org.joda.time.ReadableInterval readableInterval23 = null;
        org.joda.time.ReadableInterval readableInterval24 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval23);
        org.joda.time.ReadableInterval readableInterval25 = null;
        boolean boolean26 = readableInterval24.contains(readableInterval25);
        org.joda.time.ReadableInterval readableInterval27 = null;
        boolean boolean28 = readableInterval24.isBefore(readableInterval27);
        org.joda.time.Interval interval29 = readableInterval24.toInterval();
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.PeriodType periodType31 = org.joda.time.DateTimeUtils.getPeriodType(periodType30);
        org.joda.time.PeriodType periodType32 = org.joda.time.DateTimeUtils.getPeriodType(periodType30);
        org.joda.time.Period period33 = readableInterval24.toPeriod(periodType32);
        org.joda.time.Partial partial34 = partial13.plus((org.joda.time.ReadablePeriod) period33);
        int[] intArray37 = gregorianChronology5.get((org.joda.time.ReadablePeriod) period33, 1701289178545L, (long) (short) 0);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField39 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long42 = durationField39.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long44 = durationField39.getValueAsLong((long) 10);
        int int46 = durationField39.getValue((long) (byte) 10);
        boolean boolean47 = partial38.equals((java.lang.Object) durationField39);
        org.joda.time.Chronology chronology48 = partial38.getChronology();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial38.isBefore((org.joda.time.ReadablePartial) partial49);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray51 = partial38.getFieldTypes();
        boolean boolean53 = partial38.equals((java.lang.Object) 1702281558665L);
        java.lang.String str54 = partial38.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = partial38.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.Partial partial57 = partial38.plus(readablePeriod56);
        int[] intArray59 = gregorianChronology5.get((org.joda.time.ReadablePartial) partial38, 1701289179647L);
        org.joda.time.DateTimeField dateTimeField60 = gregorianChronology5.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField61 = gregorianChronology5.secondOfMinute();
        org.junit.Assert.assertNotNull(gregorianChronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(readableInterval24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-53, -10, -4, 0, -20, -19, -38, -545]");
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 10L + "'", long44 == 10L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[]" + "'", str54, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter55);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0547");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        org.joda.time.DurationFieldType durationFieldType23 = dateTimeFieldType15.getDurationType();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval25 = null;
        org.joda.time.ReadableInterval readableInterval26 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval25);
        org.joda.time.Chronology chronology27 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval25);
        org.joda.time.DateTimeField dateTimeField28 = chronology27.yearOfCentury();
        org.joda.time.DurationField durationField29 = chronology27.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField30 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType24, durationField29);
        long long33 = durationField29.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval35 = null;
        org.joda.time.ReadableInterval readableInterval36 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval35);
        org.joda.time.Chronology chronology37 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval35);
        org.joda.time.DateTimeField dateTimeField38 = chronology37.yearOfCentury();
        boolean boolean39 = durationFieldType34.isSupported(chronology37);
        org.joda.time.field.ScaledDurationField scaledDurationField41 = new org.joda.time.field.ScaledDurationField(durationField29, durationFieldType34, (int) 'a');
        org.joda.time.DurationField durationField42 = scaledDurationField41.getWrappedField();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField43 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, (org.joda.time.DurationField) scaledDurationField41);
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        // The following exception was thrown during execution in test generation
        try {
            int int45 = unsupportedDateTimeField43.getMaximumValue((org.joda.time.ReadablePartial) partial44);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(readableInterval26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-210866846400000L) + "'", long33 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertNotNull(readableInterval36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField43);
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0501");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology5 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone6 = gregorianChronology5.getZone();
        long long10 = gregorianChronology5.add(0L, (long) (byte) 1, (int) (byte) 0);
        org.joda.time.DateTimeField dateTimeField11 = gregorianChronology5.millisOfDay();
        org.joda.time.DurationField durationField12 = gregorianChronology5.weeks();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField14 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long17 = durationField14.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long19 = durationField14.getValueAsLong((long) 10);
        int int21 = durationField14.getValue((long) (byte) 10);
        boolean boolean22 = partial13.equals((java.lang.Object) durationField14);
        org.joda.time.ReadableInterval readableInterval23 = null;
        org.joda.time.ReadableInterval readableInterval24 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval23);
        org.joda.time.ReadableInterval readableInterval25 = null;
        boolean boolean26 = readableInterval24.contains(readableInterval25);
        org.joda.time.ReadableInterval readableInterval27 = null;
        boolean boolean28 = readableInterval24.isBefore(readableInterval27);
        org.joda.time.Interval interval29 = readableInterval24.toInterval();
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.PeriodType periodType31 = org.joda.time.DateTimeUtils.getPeriodType(periodType30);
        org.joda.time.PeriodType periodType32 = org.joda.time.DateTimeUtils.getPeriodType(periodType30);
        org.joda.time.Period period33 = readableInterval24.toPeriod(periodType32);
        org.joda.time.Partial partial34 = partial13.plus((org.joda.time.ReadablePeriod) period33);
        int[] intArray37 = gregorianChronology5.get((org.joda.time.ReadablePeriod) period33, 1701289178545L, (long) (short) 0);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField39 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long42 = durationField39.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long44 = durationField39.getValueAsLong((long) 10);
        int int46 = durationField39.getValue((long) (byte) 10);
        boolean boolean47 = partial38.equals((java.lang.Object) durationField39);
        org.joda.time.Chronology chronology48 = partial38.getChronology();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial38.isBefore((org.joda.time.ReadablePartial) partial49);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray51 = partial38.getFieldTypes();
        boolean boolean53 = partial38.equals((java.lang.Object) 1702281558665L);
        java.lang.String str54 = partial38.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = partial38.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.Partial partial57 = partial38.plus(readablePeriod56);
        int[] intArray59 = gregorianChronology5.get((org.joda.time.ReadablePartial) partial38, 1701289179647L);
        org.joda.time.DateTimeField dateTimeField60 = gregorianChronology5.weekOfWeekyear();
        org.joda.time.DurationField durationField61 = gregorianChronology5.millis();
        org.junit.Assert.assertNotNull(gregorianChronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(readableInterval24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-53, -10, -4, 0, -20, -19, -38, -545]");
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 10L + "'", long44 == 10L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[]" + "'", str54, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter55);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(durationField61);
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2491");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology5 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone6 = gregorianChronology5.getZone();
        long long10 = gregorianChronology5.add(0L, (long) (byte) 1, (int) (byte) 0);
        org.joda.time.DateTimeField dateTimeField11 = gregorianChronology5.millisOfDay();
        org.joda.time.DurationField durationField12 = gregorianChronology5.weeks();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField14 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long17 = durationField14.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long19 = durationField14.getValueAsLong((long) 10);
        int int21 = durationField14.getValue((long) (byte) 10);
        boolean boolean22 = partial13.equals((java.lang.Object) durationField14);
        org.joda.time.ReadableInterval readableInterval23 = null;
        org.joda.time.ReadableInterval readableInterval24 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval23);
        org.joda.time.ReadableInterval readableInterval25 = null;
        boolean boolean26 = readableInterval24.contains(readableInterval25);
        org.joda.time.ReadableInterval readableInterval27 = null;
        boolean boolean28 = readableInterval24.isBefore(readableInterval27);
        org.joda.time.Interval interval29 = readableInterval24.toInterval();
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.PeriodType periodType31 = org.joda.time.DateTimeUtils.getPeriodType(periodType30);
        org.joda.time.PeriodType periodType32 = org.joda.time.DateTimeUtils.getPeriodType(periodType30);
        org.joda.time.Period period33 = readableInterval24.toPeriod(periodType32);
        org.joda.time.Partial partial34 = partial13.plus((org.joda.time.ReadablePeriod) period33);
        int[] intArray37 = gregorianChronology5.get((org.joda.time.ReadablePeriod) period33, 1701289178545L, (long) (short) 0);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField39 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long42 = durationField39.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long44 = durationField39.getValueAsLong((long) 10);
        int int46 = durationField39.getValue((long) (byte) 10);
        boolean boolean47 = partial38.equals((java.lang.Object) durationField39);
        org.joda.time.Chronology chronology48 = partial38.getChronology();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial38.isBefore((org.joda.time.ReadablePartial) partial49);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray51 = partial38.getFieldTypes();
        boolean boolean53 = partial38.equals((java.lang.Object) 1702281558665L);
        java.lang.String str54 = partial38.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = partial38.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.Partial partial57 = partial38.plus(readablePeriod56);
        int[] intArray59 = gregorianChronology5.get((org.joda.time.ReadablePartial) partial38, 1701289179647L);
        org.joda.time.DateTimeField dateTimeField60 = gregorianChronology5.minuteOfHour();
        org.joda.time.DurationField durationField61 = gregorianChronology5.seconds();
        org.junit.Assert.assertNotNull(gregorianChronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(readableInterval24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-53, -10, -4, 0, -20, -19, -38, -545]");
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 10L + "'", long44 == 10L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[]" + "'", str54, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter55);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(durationField61);
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0121");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add((-31L), (long) '#');
        org.joda.time.DurationField durationField10 = unsupportedDateTimeField6.getLeapDurationField();
        org.joda.time.DurationField durationField11 = unsupportedDateTimeField6.getRangeDurationField();
        org.joda.time.DurationField durationField12 = unsupportedDateTimeField6.getRangeDurationField();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField14 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long17 = durationField14.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long19 = durationField14.getValueAsLong((long) 10);
        int int21 = durationField14.getValue((long) (byte) 10);
        boolean boolean22 = partial13.equals((java.lang.Object) durationField14);
        org.joda.time.ReadableInterval readableInterval23 = null;
        org.joda.time.ReadableInterval readableInterval24 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval23);
        org.joda.time.ReadableInterval readableInterval25 = null;
        boolean boolean26 = readableInterval24.contains(readableInterval25);
        org.joda.time.ReadableInterval readableInterval27 = null;
        boolean boolean28 = readableInterval24.isBefore(readableInterval27);
        org.joda.time.Interval interval29 = readableInterval24.toInterval();
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.PeriodType periodType31 = org.joda.time.DateTimeUtils.getPeriodType(periodType30);
        org.joda.time.PeriodType periodType32 = org.joda.time.DateTimeUtils.getPeriodType(periodType30);
        org.joda.time.Period period33 = readableInterval24.toPeriod(periodType32);
        org.joda.time.Partial partial34 = partial13.plus((org.joda.time.ReadablePeriod) period33);
        boolean boolean35 = org.joda.time.DateTimeUtils.isContiguous((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField37 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long40 = durationField37.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long42 = durationField37.getValueAsLong((long) 10);
        int int44 = durationField37.getValue((long) (byte) 10);
        boolean boolean45 = partial36.equals((java.lang.Object) durationField37);
        org.joda.time.Chronology chronology46 = partial36.getChronology();
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        boolean boolean48 = partial36.isBefore((org.joda.time.ReadablePartial) partial47);
        java.lang.String str49 = partial36.toString();
        boolean boolean50 = partial13.isBefore((org.joda.time.ReadablePartial) partial36);
        // The following exception was thrown during execution in test generation
        try {
            int int51 = unsupportedDateTimeField6.getMaximumValue((org.joda.time.ReadablePartial) partial13);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertNull(durationField11);
        org.junit.Assert.assertNull(durationField12);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(readableInterval24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 10L + "'", long42 == 10L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[]" + "'", str49, "[]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0132");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.ReadablePartial readablePartial4 = null;
        int int5 = dateTimeField3.getMinimumValue(readablePartial4);
        org.joda.time.ReadablePartial readablePartial6 = null;
        org.joda.time.ReadableInterval readableInterval7 = null;
        org.joda.time.ReadableInterval readableInterval8 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval7);
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval7);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.yearOfCentury();
        org.joda.time.DurationField durationField11 = chronology9.millis();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.clockhourOfDay();
        org.joda.time.ReadablePartial readablePartial14 = null;
        int[] intArray21 = new int[] { '#', (-1), 0, (byte) 1, (short) 1, (byte) 1 };
        int int22 = dateTimeField13.getMaximumValue(readablePartial14, intArray21);
        int int23 = dateTimeField3.getMinimumValue(readablePartial6, intArray21);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField26 = new org.joda.time.field.RemainderDateTimeField(dateTimeField3, dateTimeFieldType24, 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval28 = null;
        org.joda.time.ReadableInterval readableInterval29 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval28);
        org.joda.time.Chronology chronology30 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval28);
        org.joda.time.DateTimeField dateTimeField31 = chronology30.yearOfCentury();
        org.joda.time.DurationField durationField32 = chronology30.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField33 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType27, durationField32);
        long long36 = durationField32.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval38 = null;
        org.joda.time.ReadableInterval readableInterval39 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval38);
        org.joda.time.Chronology chronology40 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval38);
        org.joda.time.DateTimeField dateTimeField41 = chronology40.yearOfCentury();
        boolean boolean42 = durationFieldType37.isSupported(chronology40);
        org.joda.time.field.ScaledDurationField scaledDurationField44 = new org.joda.time.field.ScaledDurationField(durationField32, durationFieldType37, (int) 'a');
        long long45 = scaledDurationField44.getUnitMillis();
        org.joda.time.DurationFieldType durationFieldType46 = scaledDurationField44.getType();
        int int48 = scaledDurationField44.getValue((long) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType50 = dateTimeFieldType49.getDurationType();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField52 = new org.joda.time.field.RemainderDateTimeField((org.joda.time.DateTimeField) remainderDateTimeField26, (org.joda.time.DurationField) scaledDurationField44, dateTimeFieldType49, 53460006);
        long long55 = scaledDurationField44.add((long) 9, (int) (byte) 0);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(readableInterval8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[35, -1, 0, 1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 24 + "'", int22 == 24);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(readableInterval29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-210866846400000L) + "'", long36 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertNotNull(readableInterval39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 97L + "'", long45 == 97L);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 9L + "'", long55 == 9L);
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0997");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        org.joda.time.ReadablePartial readablePartial23 = null;
        java.util.Locale locale25 = null;
        java.lang.String str26 = dividedDateTimeField11.getAsShortText(readablePartial23, (int) ' ', locale25);
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField28 = new org.joda.time.field.OffsetDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField11, 100);
        org.joda.time.DurationField durationField29 = offsetDateTimeField28.getLeapDurationField();
        boolean boolean30 = offsetDateTimeField28.isSupported();
        long long33 = offsetDateTimeField28.add(1701289169842L, 296907);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField35 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long38 = durationField35.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long40 = durationField35.getValueAsLong((long) 10);
        int int42 = durationField35.getValue((long) (byte) 10);
        boolean boolean43 = partial34.equals((java.lang.Object) durationField35);
        org.joda.time.Chronology chronology44 = partial34.getChronology();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        boolean boolean46 = partial34.isBefore((org.joda.time.ReadablePartial) partial45);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray47 = partial34.getFieldTypes();
        boolean boolean49 = partial34.equals((java.lang.Object) 1702281558665L);
        int[] intArray50 = partial34.getValues();
        org.joda.time.DateTimeField[] dateTimeFieldArray51 = partial34.getFields();
        int int52 = offsetDateTimeField28.getMinimumValue((org.joda.time.ReadablePartial) partial34);
        // The following exception was thrown during execution in test generation
        try {
            int int54 = partial34.getValue(1969);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1969");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "32" + "'", str26, "32");
        org.junit.Assert.assertNull(durationField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 93696500809169842L + "'", long33 == 93696500809169842L);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10L + "'", long40 == 10L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 100 + "'", int52 == 100);
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1534");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        org.joda.time.ReadablePartial readablePartial23 = null;
        java.util.Locale locale25 = null;
        java.lang.String str26 = dividedDateTimeField11.getAsShortText(readablePartial23, (int) ' ', locale25);
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField28 = new org.joda.time.field.OffsetDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField11, 100);
        org.joda.time.DurationField durationField29 = offsetDateTimeField28.getLeapDurationField();
        boolean boolean30 = offsetDateTimeField28.isSupported();
        long long33 = offsetDateTimeField28.add(1701289169842L, 296907);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField35 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long38 = durationField35.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long40 = durationField35.getValueAsLong((long) 10);
        int int42 = durationField35.getValue((long) (byte) 10);
        boolean boolean43 = partial34.equals((java.lang.Object) durationField35);
        org.joda.time.Chronology chronology44 = partial34.getChronology();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        boolean boolean46 = partial34.isBefore((org.joda.time.ReadablePartial) partial45);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray47 = partial34.getFieldTypes();
        boolean boolean49 = partial34.equals((java.lang.Object) 1702281558665L);
        int[] intArray50 = partial34.getValues();
        org.joda.time.DateTimeField[] dateTimeFieldArray51 = partial34.getFields();
        int int52 = offsetDateTimeField28.getMinimumValue((org.joda.time.ReadablePartial) partial34);
        // The following exception was thrown during execution in test generation
        try {
            int int54 = partial34.getValue(3060);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3060");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "32" + "'", str26, "32");
        org.junit.Assert.assertNull(durationField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 93696500809169842L + "'", long33 == 93696500809169842L);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10L + "'", long40 == 10L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 100 + "'", int52 == 100);
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2093");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.ReadablePartial readablePartial4 = null;
        int int5 = dateTimeField3.getMinimumValue(readablePartial4);
        org.joda.time.ReadablePartial readablePartial6 = null;
        org.joda.time.ReadableInterval readableInterval7 = null;
        org.joda.time.ReadableInterval readableInterval8 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval7);
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval7);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.yearOfCentury();
        org.joda.time.DurationField durationField11 = chronology9.millis();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.clockhourOfDay();
        org.joda.time.ReadablePartial readablePartial14 = null;
        int[] intArray21 = new int[] { '#', (-1), 0, (byte) 1, (short) 1, (byte) 1 };
        int int22 = dateTimeField13.getMaximumValue(readablePartial14, intArray21);
        int int23 = dateTimeField3.getMinimumValue(readablePartial6, intArray21);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField26 = new org.joda.time.field.RemainderDateTimeField(dateTimeField3, dateTimeFieldType24, 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval28 = null;
        org.joda.time.ReadableInterval readableInterval29 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval28);
        org.joda.time.Chronology chronology30 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval28);
        org.joda.time.DateTimeField dateTimeField31 = chronology30.yearOfCentury();
        org.joda.time.DurationField durationField32 = chronology30.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField33 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType27, durationField32);
        long long36 = durationField32.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval38 = null;
        org.joda.time.ReadableInterval readableInterval39 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval38);
        org.joda.time.Chronology chronology40 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval38);
        org.joda.time.DateTimeField dateTimeField41 = chronology40.yearOfCentury();
        boolean boolean42 = durationFieldType37.isSupported(chronology40);
        org.joda.time.field.ScaledDurationField scaledDurationField44 = new org.joda.time.field.ScaledDurationField(durationField32, durationFieldType37, (int) 'a');
        long long45 = scaledDurationField44.getUnitMillis();
        org.joda.time.DurationFieldType durationFieldType46 = scaledDurationField44.getType();
        int int48 = scaledDurationField44.getValue((long) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType50 = dateTimeFieldType49.getDurationType();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField52 = new org.joda.time.field.RemainderDateTimeField((org.joda.time.DateTimeField) remainderDateTimeField26, (org.joda.time.DurationField) scaledDurationField44, dateTimeFieldType49, 53460006);
        long long55 = scaledDurationField44.add(0L, 1261L);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(readableInterval8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[35, -1, 0, 1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 24 + "'", int22 == 24);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(readableInterval29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-210866846400000L) + "'", long36 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertNotNull(readableInterval39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 97L + "'", long45 == 97L);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 122317L + "'", long55 == 122317L);
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2662");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = zonedChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField6 = zonedChronology4.monthOfYear();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField8 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long11 = durationField8.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long13 = durationField8.getValueAsLong((long) 10);
        int int15 = durationField8.getValue((long) (byte) 10);
        boolean boolean16 = partial7.equals((java.lang.Object) durationField8);
        org.joda.time.Chronology chronology17 = partial7.getChronology();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial7.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial7.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.ReadableInterval readableInterval22 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval21);
        long long23 = readableInterval22.getStartMillis();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.ReadableInterval readableInterval26 = null;
        boolean boolean27 = readableInterval25.contains(readableInterval26);
        org.joda.time.Duration duration28 = readableInterval25.toDuration();
        org.joda.time.DateTime dateTime29 = readableInterval25.getEnd();
        boolean boolean30 = readableInterval22.contains((org.joda.time.ReadableInstant) dateTime29);
        boolean boolean31 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime29);
        int[] intArray33 = zonedChronology4.get((org.joda.time.ReadablePartial) partial7, 60035L);
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology4.secondOfMinute();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone39 = new org.joda.time.tz.FixedDateTimeZone("UTC", "", 0, 4);
        java.util.TimeZone timeZone40 = fixedDateTimeZone39.toTimeZone();
        java.lang.String str42 = fixedDateTimeZone39.getName(97L);
        int int44 = fixedDateTimeZone39.getOffsetFromLocal((-210858120000000L));
        long long46 = fixedDateTimeZone39.nextTransition(0L);
        int int48 = fixedDateTimeZone39.getOffset(2580171L);
        org.joda.time.chrono.ZonedChronology zonedChronology49 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) zonedChronology4, (org.joda.time.DateTimeZone) fixedDateTimeZone39);
        org.joda.time.DurationField durationField50 = zonedChronology49.hours();
        org.joda.time.Chronology chronology51 = zonedChronology49.withUTC();
        // The following exception was thrown during execution in test generation
        try {
            long long57 = zonedChronology49.getDateTimeMillis(123452386764L, 17127628, 71, (int) (short) 0, (-28799989));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 17127628 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(readableInterval22);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 114669905157955L + "'", long23 == 114669905157955L);
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00" + "'", str42, "+00:00");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(zonedChronology49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(chronology51);
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0898");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        java.lang.String str13 = partial0.toString();
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField15 = iSOChronology14.minutes();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str17 = dateTimeZone16.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology18 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology14, dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone19 = zonedChronology18.getZone();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology18.monthOfYear();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField22 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long25 = durationField22.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long27 = durationField22.getValueAsLong((long) 10);
        int int29 = durationField22.getValue((long) (byte) 10);
        boolean boolean30 = partial21.equals((java.lang.Object) durationField22);
        org.joda.time.Chronology chronology31 = partial21.getChronology();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        boolean boolean33 = partial21.isBefore((org.joda.time.ReadablePartial) partial32);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray34 = partial21.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval35 = null;
        org.joda.time.ReadableInterval readableInterval36 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval35);
        long long37 = readableInterval36.getStartMillis();
        org.joda.time.ReadableInterval readableInterval38 = null;
        org.joda.time.ReadableInterval readableInterval39 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval38);
        org.joda.time.ReadableInterval readableInterval40 = null;
        boolean boolean41 = readableInterval39.contains(readableInterval40);
        org.joda.time.Duration duration42 = readableInterval39.toDuration();
        org.joda.time.DateTime dateTime43 = readableInterval39.getEnd();
        boolean boolean44 = readableInterval36.contains((org.joda.time.ReadableInstant) dateTime43);
        boolean boolean45 = partial21.isMatch((org.joda.time.ReadableInstant) dateTime43);
        int[] intArray47 = zonedChronology18.get((org.joda.time.ReadablePartial) partial21, 60035L);
        boolean boolean48 = partial0.isMatch((org.joda.time.ReadablePartial) partial21);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str50 = partial0.toString("DateTimeField[yearOfCentury]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: t");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray34);
        org.junit.Assert.assertNotNull(readableInterval36);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + 31536000000L + "'", long37 == 31536000000L);
        org.junit.Assert.assertNotNull(readableInterval39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1692");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.getDifferenceAsLong((long) (short) 100, (-30610224000000L));
        org.joda.time.DurationField durationField10 = unsupportedDateTimeField6.getRangeDurationField();
        org.joda.time.ReadableInterval readableInterval11 = null;
        org.joda.time.ReadableInterval readableInterval12 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval11);
        org.joda.time.ReadableInterval readableInterval13 = null;
        boolean boolean14 = readableInterval12.contains(readableInterval13);
        org.joda.time.Chronology chronology15 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval13);
        org.joda.time.DateTimeField dateTimeField16 = chronology15.halfdayOfDay();
        long long19 = dateTimeField16.getDifferenceAsLong((-45757612800000L), (-2177424000000L));
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField21 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long24 = durationField21.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long26 = durationField21.getValueAsLong((long) 10);
        int int28 = durationField21.getValue((long) (byte) 10);
        boolean boolean29 = partial20.equals((java.lang.Object) durationField21);
        org.joda.time.Chronology chronology30 = partial20.getChronology();
        java.lang.String str31 = partial20.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray32 = partial20.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval33 = null;
        org.joda.time.ReadableInterval readableInterval34 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval33);
        org.joda.time.ReadableInterval readableInterval35 = null;
        boolean boolean36 = readableInterval34.contains(readableInterval35);
        org.joda.time.ReadableInterval readableInterval37 = null;
        boolean boolean38 = readableInterval34.isBefore(readableInterval37);
        org.joda.time.Interval interval39 = readableInterval34.toInterval();
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.PeriodType periodType41 = org.joda.time.DateTimeUtils.getPeriodType(periodType40);
        org.joda.time.PeriodType periodType42 = org.joda.time.DateTimeUtils.getPeriodType(periodType40);
        org.joda.time.Period period43 = readableInterval34.toPeriod(periodType42);
        org.joda.time.Partial partial44 = partial20.plus((org.joda.time.ReadablePeriod) period43);
        int[] intArray45 = null;
        int int46 = dateTimeField16.getMaximumValue((org.joda.time.ReadablePartial) partial20, intArray45);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray47 = partial20.getFieldTypes();
        java.lang.String str48 = partial20.toString();
        java.util.Locale locale49 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str50 = unsupportedDateTimeField6.getAsText((org.joda.time.ReadablePartial) partial20, locale49);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 30610224000100L + "'", long9 == 30610224000100L);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertNotNull(readableInterval12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1008800L) + "'", long19 == (-1008800L));
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10L + "'", long26 == 10L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray32);
        org.junit.Assert.assertNotNull(readableInterval34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[]" + "'", str48, "[]");
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2296");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = zonedChronology4.getZone();
        boolean boolean7 = zonedChronology4.equals((java.lang.Object) 4L);
        org.joda.time.DateTimeField dateTimeField8 = zonedChronology4.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField9 = zonedChronology4.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone10 = zonedChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField11 = zonedChronology4.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = zonedChronology4.dayOfMonth();
        org.joda.time.DurationField durationField13 = zonedChronology4.years();
        org.joda.time.Chronology chronology14 = zonedChronology4.withUTC();
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology4.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology4.year();
        org.joda.time.ReadablePartial readablePartial17 = null;
        org.joda.time.chrono.ISOChronology iSOChronology19 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField20 = iSOChronology19.minutes();
        org.joda.time.DurationField durationField21 = iSOChronology19.months();
        long long26 = iSOChronology19.getDateTimeMillis(1, 1, (int) (byte) 1, (int) (short) 100);
        org.joda.time.ReadableInterval readableInterval27 = null;
        org.joda.time.ReadableInterval readableInterval28 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval27);
        org.joda.time.Chronology chronology29 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval27);
        org.joda.time.DateTimeField dateTimeField30 = chronology29.yearOfCentury();
        org.joda.time.DurationField durationField31 = chronology29.millis();
        org.joda.time.DurationField durationField32 = chronology29.centuries();
        org.joda.time.Chronology chronology33 = chronology29.withUTC();
        org.joda.time.DurationField durationField34 = chronology33.halfdays();
        org.joda.time.DateTimeField dateTimeField35 = chronology33.yearOfEra();
        org.joda.time.ReadableInterval readableInterval36 = null;
        org.joda.time.ReadableInterval readableInterval37 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval36);
        org.joda.time.ReadableInterval readableInterval38 = null;
        boolean boolean39 = readableInterval37.contains(readableInterval38);
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.Period period41 = readableInterval37.toPeriod(periodType40);
        org.joda.time.DateTime dateTime42 = readableInterval37.getEnd();
        org.joda.time.MutableInterval mutableInterval43 = readableInterval37.toMutableInterval();
        org.joda.time.Period period44 = readableInterval37.toPeriod();
        int[] intArray47 = chronology33.get((org.joda.time.ReadablePeriod) period44, (-31L), 1701289167159L);
        int[] intArray50 = iSOChronology19.get((org.joda.time.ReadablePeriod) period44, 1701289179712L, 35L);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray52 = dateTimeField16.add(readablePartial17, 196222, intArray50, 23);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 196222");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(iSOChronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-62135596799900L) + "'", long26 == (-62135596799900L));
        org.junit.Assert.assertNotNull(readableInterval28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(readableInterval37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(mutableInterval43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[53, 10, 4, 0, 20, 19, 27, 190]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-53, -10, -4, 0, -20, -19, -39, -677]");
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1170");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        org.joda.time.ReadablePartial readablePartial23 = null;
        java.util.Locale locale25 = null;
        java.lang.String str26 = dividedDateTimeField11.getAsShortText(readablePartial23, (int) ' ', locale25);
        org.joda.time.ReadablePartial readablePartial27 = null;
        java.util.Locale locale29 = null;
        java.lang.String str30 = dividedDateTimeField11.getAsText(readablePartial27, (int) (byte) 10, locale29);
        long long32 = dividedDateTimeField11.roundHalfFloor((long) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField37 = new org.joda.time.field.OffsetDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField11, dateTimeFieldType33, (int) (byte) 10, (int) '#', 3);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone43 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology44 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone43);
        org.joda.time.ReadableInterval readableInterval45 = null;
        org.joda.time.ReadableInterval readableInterval46 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval45);
        org.joda.time.Chronology chronology47 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval45);
        org.joda.time.DateTimeField dateTimeField48 = chronology47.yearOfCentury();
        org.joda.time.DurationField durationField49 = chronology47.minutes();
        org.joda.time.DurationField durationField50 = chronology47.halfdays();
        org.joda.time.DurationField durationField51 = chronology47.weeks();
        org.joda.time.DateTimeField dateTimeField52 = chronology47.millisOfDay();
        boolean boolean53 = gregorianChronology44.equals((java.lang.Object) chronology47);
        org.joda.time.Chronology chronology54 = gregorianChronology44.withUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial55 = new org.joda.time.Partial(dateTimeFieldType33, 17127628, chronology54);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 17127628 for dayOfWeek must not be larger than 7");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "32" + "'", str26, "32");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "10" + "'", str30, "10");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(gregorianChronology44);
        org.junit.Assert.assertNotNull(readableInterval46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(chronology54);
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0705");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = zonedChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField6 = zonedChronology4.monthOfYear();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField8 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long11 = durationField8.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long13 = durationField8.getValueAsLong((long) 10);
        int int15 = durationField8.getValue((long) (byte) 10);
        boolean boolean16 = partial7.equals((java.lang.Object) durationField8);
        org.joda.time.Chronology chronology17 = partial7.getChronology();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial7.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial7.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.ReadableInterval readableInterval22 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval21);
        long long23 = readableInterval22.getStartMillis();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.ReadableInterval readableInterval26 = null;
        boolean boolean27 = readableInterval25.contains(readableInterval26);
        org.joda.time.Duration duration28 = readableInterval25.toDuration();
        org.joda.time.DateTime dateTime29 = readableInterval25.getEnd();
        boolean boolean30 = readableInterval22.contains((org.joda.time.ReadableInstant) dateTime29);
        boolean boolean31 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime29);
        int[] intArray33 = zonedChronology4.get((org.joda.time.ReadablePartial) partial7, 60035L);
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval35 = null;
        org.joda.time.ReadableInterval readableInterval36 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval35);
        org.joda.time.Chronology chronology37 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval35);
        org.joda.time.DateTimeField dateTimeField38 = chronology37.yearOfCentury();
        boolean boolean39 = durationFieldType34.isSupported(chronology37);
        org.joda.time.DurationField durationField40 = chronology37.halfdays();
        org.joda.time.DateTimeField dateTimeField41 = chronology37.weekyearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField46 = new org.joda.time.field.OffsetDateTimeField(dateTimeField41, dateTimeFieldType42, 4, (int) ' ', (int) (short) -1);
        boolean boolean47 = partial7.isSupported(dateTimeFieldType42);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType49 = partial7.getFieldType(719);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 719");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(readableInterval22);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1701260506115L + "'", long23 == 1701260506115L);
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertNotNull(readableInterval36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3094");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        org.joda.time.DurationFieldType durationFieldType23 = dateTimeFieldType15.getDurationType();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval25 = null;
        org.joda.time.ReadableInterval readableInterval26 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval25);
        org.joda.time.Chronology chronology27 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval25);
        org.joda.time.DateTimeField dateTimeField28 = chronology27.yearOfCentury();
        org.joda.time.DurationField durationField29 = chronology27.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField30 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType24, durationField29);
        long long33 = durationField29.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval35 = null;
        org.joda.time.ReadableInterval readableInterval36 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval35);
        org.joda.time.Chronology chronology37 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval35);
        org.joda.time.DateTimeField dateTimeField38 = chronology37.yearOfCentury();
        boolean boolean39 = durationFieldType34.isSupported(chronology37);
        org.joda.time.field.ScaledDurationField scaledDurationField41 = new org.joda.time.field.ScaledDurationField(durationField29, durationFieldType34, (int) 'a');
        org.joda.time.DurationField durationField42 = scaledDurationField41.getWrappedField();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField43 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, (org.joda.time.DurationField) scaledDurationField41);
        java.util.Locale locale46 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long47 = unsupportedDateTimeField43.set(62167132800000L, "69", locale46);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(readableInterval26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-210866846400000L) + "'", long33 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertNotNull(readableInterval36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField43);
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1583");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add((-31L), (long) '#');
        org.joda.time.DurationField durationField10 = unsupportedDateTimeField6.getLeapDurationField();
        int int13 = unsupportedDateTimeField6.getDifference((long) (byte) 10, 10L);
        long long16 = unsupportedDateTimeField6.add((long) 1439, (int) (byte) -1);
        boolean boolean17 = unsupportedDateTimeField6.isSupported();
        org.joda.time.chrono.ISOChronology iSOChronology18 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField19 = iSOChronology18.minutes();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology18.millisOfDay();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology18.halfdayOfDay();
        org.joda.time.DurationField durationField22 = iSOChronology18.seconds();
        org.joda.time.DurationField durationField23 = iSOChronology18.days();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology18.dayOfYear();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology18.hourOfHalfday();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField27 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long30 = durationField27.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long32 = durationField27.getValueAsLong((long) 10);
        int int34 = durationField27.getValue((long) (byte) 10);
        boolean boolean35 = partial26.equals((java.lang.Object) durationField27);
        org.joda.time.ReadableInterval readableInterval36 = null;
        org.joda.time.ReadableInterval readableInterval37 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval36);
        org.joda.time.ReadableInterval readableInterval38 = null;
        boolean boolean39 = readableInterval37.contains(readableInterval38);
        org.joda.time.ReadableInterval readableInterval40 = null;
        boolean boolean41 = readableInterval37.isBefore(readableInterval40);
        org.joda.time.Interval interval42 = readableInterval37.toInterval();
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.PeriodType periodType44 = org.joda.time.DateTimeUtils.getPeriodType(periodType43);
        org.joda.time.PeriodType periodType45 = org.joda.time.DateTimeUtils.getPeriodType(periodType43);
        org.joda.time.Period period46 = readableInterval37.toPeriod(periodType45);
        org.joda.time.Partial partial47 = partial26.plus((org.joda.time.ReadablePeriod) period46);
        java.lang.String str48 = partial47.toStringList();
        int[] intArray50 = iSOChronology18.get((org.joda.time.ReadablePartial) partial47, (long) (-7));
        java.util.Locale locale51 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str52 = unsupportedDateTimeField6.getAsText((org.joda.time.ReadablePartial) partial47, locale51);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1438L + "'", long16 == 1438L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(iSOChronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10L + "'", long32 == 10L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(readableInterval37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[]" + "'", str48, "[]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2386");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.ReadablePartial readablePartial4 = null;
        int int5 = dateTimeField3.getMinimumValue(readablePartial4);
        org.joda.time.ReadablePartial readablePartial6 = null;
        org.joda.time.ReadableInterval readableInterval7 = null;
        org.joda.time.ReadableInterval readableInterval8 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval7);
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval7);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.yearOfCentury();
        org.joda.time.DurationField durationField11 = chronology9.millis();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.clockhourOfDay();
        org.joda.time.ReadablePartial readablePartial14 = null;
        int[] intArray21 = new int[] { '#', (-1), 0, (byte) 1, (short) 1, (byte) 1 };
        int int22 = dateTimeField13.getMaximumValue(readablePartial14, intArray21);
        int int23 = dateTimeField3.getMinimumValue(readablePartial6, intArray21);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField26 = new org.joda.time.field.RemainderDateTimeField(dateTimeField3, dateTimeFieldType24, 10);
        org.joda.time.DurationField durationField27 = remainderDateTimeField26.getRangeDurationField();
        java.util.Locale locale28 = null;
        int int29 = remainderDateTimeField26.getMaximumTextLength(locale28);
        java.util.Locale locale31 = null;
        java.lang.String str32 = remainderDateTimeField26.getAsText((long) (-7), locale31);
        long long34 = remainderDateTimeField26.roundCeiling((-476134739671L));
        org.joda.time.chrono.ISOChronology iSOChronology35 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField36 = iSOChronology35.minutes();
        org.joda.time.DurationField durationField37 = iSOChronology35.months();
        org.joda.time.DurationField durationField38 = iSOChronology35.years();
        org.joda.time.DurationField durationField39 = iSOChronology35.hours();
        org.joda.time.DateTimeField dateTimeField40 = iSOChronology35.hourOfDay();
        org.joda.time.DurationField durationField41 = iSOChronology35.centuries();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval43 = null;
        org.joda.time.ReadableInterval readableInterval44 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval43);
        org.joda.time.Chronology chronology45 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval43);
        org.joda.time.DateTimeField dateTimeField46 = chronology45.yearOfCentury();
        org.joda.time.DurationField durationField47 = chronology45.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField48 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType42, durationField47);
        long long51 = unsupportedDateTimeField48.add((-31L), (long) '#');
        org.joda.time.DurationField durationField52 = unsupportedDateTimeField48.getLeapDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = unsupportedDateTimeField48.getType();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField54 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField26, durationField41, dateTimeFieldType53);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(readableInterval8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[35, -1, 0, 1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 24 + "'", int22 == 24);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "9" + "'", str32, "9");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-473385600000L) + "'", long34 == (-473385600000L));
        org.junit.Assert.assertNotNull(iSOChronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(readableInterval44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField48);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 4L + "'", long51 == 4L);
        org.junit.Assert.assertNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1758");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = zonedChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField6 = zonedChronology4.monthOfYear();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField8 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long11 = durationField8.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long13 = durationField8.getValueAsLong((long) 10);
        int int15 = durationField8.getValue((long) (byte) 10);
        boolean boolean16 = partial7.equals((java.lang.Object) durationField8);
        org.joda.time.Chronology chronology17 = partial7.getChronology();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial7.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial7.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.ReadableInterval readableInterval22 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval21);
        long long23 = readableInterval22.getStartMillis();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.ReadableInterval readableInterval26 = null;
        boolean boolean27 = readableInterval25.contains(readableInterval26);
        org.joda.time.Duration duration28 = readableInterval25.toDuration();
        org.joda.time.DateTime dateTime29 = readableInterval25.getEnd();
        boolean boolean30 = readableInterval22.contains((org.joda.time.ReadableInstant) dateTime29);
        boolean boolean31 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime29);
        int[] intArray33 = zonedChronology4.get((org.joda.time.ReadablePartial) partial7, 60035L);
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval35 = null;
        org.joda.time.ReadableInterval readableInterval36 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval35);
        org.joda.time.Chronology chronology37 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval35);
        org.joda.time.DateTimeField dateTimeField38 = chronology37.yearOfCentury();
        boolean boolean39 = durationFieldType34.isSupported(chronology37);
        org.joda.time.DurationField durationField40 = chronology37.halfdays();
        org.joda.time.DateTimeField dateTimeField41 = chronology37.weekyearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField46 = new org.joda.time.field.OffsetDateTimeField(dateTimeField41, dateTimeFieldType42, 4, (int) ' ', (int) (short) -1);
        boolean boolean47 = partial7.isSupported(dateTimeFieldType42);
        java.lang.Number number49 = null;
        org.joda.time.IllegalFieldValueException illegalFieldValueException51 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType42, (java.lang.Number) (-534470L), number49, (java.lang.Number) 60000L);
        java.lang.Number number52 = illegalFieldValueException51.getLowerBound();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(readableInterval22);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-476134762239L) + "'", long23 == (-476134762239L));
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertNotNull(readableInterval36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(number52);
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2383");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        int int9 = unsupportedDateTimeField6.getDifference((long) 197, 0L);
        org.joda.time.ReadablePartial readablePartial10 = null;
        org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField13 = iSOChronology12.minutes();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str15 = dateTimeZone14.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology16 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology12, dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone17 = zonedChronology16.getZone();
        org.joda.time.DateTimeField dateTimeField18 = zonedChronology16.monthOfYear();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField20 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long23 = durationField20.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long25 = durationField20.getValueAsLong((long) 10);
        int int27 = durationField20.getValue((long) (byte) 10);
        boolean boolean28 = partial19.equals((java.lang.Object) durationField20);
        org.joda.time.Chronology chronology29 = partial19.getChronology();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        boolean boolean31 = partial19.isBefore((org.joda.time.ReadablePartial) partial30);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray32 = partial19.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval33 = null;
        org.joda.time.ReadableInterval readableInterval34 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval33);
        long long35 = readableInterval34.getStartMillis();
        org.joda.time.ReadableInterval readableInterval36 = null;
        org.joda.time.ReadableInterval readableInterval37 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval36);
        org.joda.time.ReadableInterval readableInterval38 = null;
        boolean boolean39 = readableInterval37.contains(readableInterval38);
        org.joda.time.Duration duration40 = readableInterval37.toDuration();
        org.joda.time.DateTime dateTime41 = readableInterval37.getEnd();
        boolean boolean42 = readableInterval34.contains((org.joda.time.ReadableInstant) dateTime41);
        boolean boolean43 = partial19.isMatch((org.joda.time.ReadableInstant) dateTime41);
        int[] intArray45 = zonedChronology16.get((org.joda.time.ReadablePartial) partial19, 60035L);
        int[] intArray46 = partial19.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray48 = unsupportedDateTimeField6.addWrapPartial(readablePartial10, (-1893415679), intArray46, 202);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 197 + "'", int9 == 197);
        org.junit.Assert.assertNotNull(iSOChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10L + "'", long25 == 10L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray32);
        org.junit.Assert.assertNotNull(readableInterval34);
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + 16707983010251L + "'", long35 == 16707983010251L);
        org.junit.Assert.assertNotNull(readableInterval37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2274");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add((-31L), (long) '#');
        org.joda.time.DurationField durationField10 = unsupportedDateTimeField6.getLeapDurationField();
        org.joda.time.DurationField durationField11 = unsupportedDateTimeField6.getRangeDurationField();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField13 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long16 = durationField13.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long18 = durationField13.getValueAsLong((long) 10);
        int int20 = durationField13.getValue((long) (byte) 10);
        boolean boolean21 = partial12.equals((java.lang.Object) durationField13);
        org.joda.time.Chronology chronology22 = partial12.getChronology();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        boolean boolean24 = partial12.isBefore((org.joda.time.ReadablePartial) partial23);
        org.joda.time.DateTimeField[] dateTimeFieldArray25 = partial23.getFields();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial27 = partial23.plus(readablePeriod26);
        org.joda.time.JodaTimePermission jodaTimePermission30 = new org.joda.time.JodaTimePermission("DateTimeField[minuteOfDay]");
        org.joda.time.ReadableInterval readableInterval31 = null;
        org.joda.time.ReadableInterval readableInterval32 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval31);
        org.joda.time.Chronology chronology33 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval31);
        org.joda.time.DateTimeField dateTimeField34 = chronology33.yearOfCentury();
        org.joda.time.ReadablePartial readablePartial35 = null;
        int int36 = dateTimeField34.getMinimumValue(readablePartial35);
        org.joda.time.ReadablePartial readablePartial37 = null;
        org.joda.time.ReadableInterval readableInterval38 = null;
        org.joda.time.ReadableInterval readableInterval39 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval38);
        org.joda.time.Chronology chronology40 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval38);
        org.joda.time.DateTimeField dateTimeField41 = chronology40.yearOfCentury();
        org.joda.time.DurationField durationField42 = chronology40.millis();
        org.joda.time.DateTimeField dateTimeField43 = chronology40.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField44 = chronology40.clockhourOfDay();
        org.joda.time.ReadablePartial readablePartial45 = null;
        int[] intArray52 = new int[] { '#', (-1), 0, (byte) 1, (short) 1, (byte) 1 };
        int int53 = dateTimeField44.getMaximumValue(readablePartial45, intArray52);
        int int54 = dateTimeField34.getMinimumValue(readablePartial37, intArray52);
        jodaTimePermission30.checkGuard((java.lang.Object) intArray52);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray57 = unsupportedDateTimeField6.addWrapField((org.joda.time.ReadablePartial) partial27, (-465), intArray52, (-16792));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertNull(durationField11);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10L + "'", long18 == 10L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray25);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(readableInterval32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(readableInterval39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[35, -1, 0, 1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 24 + "'", int53 == 24);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1006");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.field.PreciseDurationField preciseDurationField2 = new org.joda.time.field.PreciseDurationField(durationFieldType0, (long) 'a');
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField4 = iSOChronology3.minutes();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str6 = dateTimeZone5.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology7 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology3, dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = zonedChronology7.getZone();
        boolean boolean10 = zonedChronology7.equals((java.lang.Object) 4L);
        org.joda.time.DateTimeField dateTimeField11 = zonedChronology7.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField12 = zonedChronology7.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone13 = zonedChronology7.getZone();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology7.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology7.weekOfWeekyear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.DurationField durationField21 = chronology18.centuries();
        org.joda.time.DateTimeZone dateTimeZone22 = chronology18.getZone();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str24 = dateTimeZone23.toString();
        java.lang.String str26 = dateTimeZone23.getShortName((-210866846400000L));
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeUtils.getZone(dateTimeZone23);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone28 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone27);
        long long30 = dateTimeZone22.getMillisKeepLocal((org.joda.time.DateTimeZone) cachedDateTimeZone28, 60035L);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone35 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        int int37 = fixedDateTimeZone35.getStandardOffset((long) 1439);
        boolean boolean38 = fixedDateTimeZone35.isFixed();
        long long40 = fixedDateTimeZone35.nextTransition((long) 24);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        long long44 = dateTimeZone41.adjustOffset((long) 100, true);
        long long46 = fixedDateTimeZone35.getMillisKeepLocal(dateTimeZone41, 10L);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        int int49 = dateTimeZone47.getStandardOffset((long) 1);
        long long51 = dateTimeZone41.getMillisKeepLocal(dateTimeZone47, 5L);
        long long53 = dateTimeZone22.getMillisKeepLocal(dateTimeZone47, 53459998L);
        org.joda.time.Chronology chronology54 = zonedChronology7.withZone(dateTimeZone47);
        org.joda.time.DurationField durationField55 = durationFieldType0.getField(chronology54);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(cachedDateTimeZone28);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 60042L + "'", long30 == 60042L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 24L + "'", long40 == 24L);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 100L + "'", long44 == 100L);
// flaky:         org.junit.Assert.assertTrue("'" + long46 + "' != '" + 3L + "'", long46 == 3L);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long51 + "' != '" + 12L + "'", long51 == 12L);
// flaky:         org.junit.Assert.assertTrue("'" + long53 + "' != '" + 53460005L + "'", long53 == 53460005L);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(durationField55);
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1673");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField11 = new org.joda.time.field.OffsetDateTimeField(dateTimeField8, dateTimeFieldType9, (int) (short) 1);
        long long13 = offsetDateTimeField11.roundHalfCeiling(29227899L);
        long long15 = offsetDateTimeField11.roundCeiling((long) 1);
        int int16 = offsetDateTimeField11.getMaximumValue();
        long long18 = offsetDateTimeField11.roundHalfEven((long) 3);
        boolean boolean20 = offsetDateTimeField11.isLeap(1701289169458L);
        java.lang.String str22 = offsetDateTimeField11.getAsShortText(1701289169842L);
        org.joda.time.ReadableInterval readableInterval23 = null;
        org.joda.time.ReadableInterval readableInterval24 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval23);
        org.joda.time.Chronology chronology25 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval23);
        org.joda.time.DateTimeField dateTimeField26 = chronology25.hourOfHalfday();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField29 = new org.joda.time.field.OffsetDateTimeField(dateTimeField26, dateTimeFieldType27, (-28800000));
        long long32 = offsetDateTimeField29.add(1577836800000L, 28354759);
        boolean boolean34 = offsetDateTimeField29.isLeap(31564800000L);
        org.joda.time.DurationField durationField35 = offsetDateTimeField29.getRangeDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval37 = null;
        org.joda.time.ReadableInterval readableInterval38 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval37);
        org.joda.time.Chronology chronology39 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval37);
        org.joda.time.DateTimeField dateTimeField40 = chronology39.yearOfCentury();
        org.joda.time.DurationField durationField41 = chronology39.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField42 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType36, durationField41);
        long long45 = unsupportedDateTimeField42.add((-31L), (long) '#');
        org.joda.time.DurationField durationField46 = unsupportedDateTimeField42.getLeapDurationField();
        int int49 = unsupportedDateTimeField42.getDifference((long) (byte) 10, 10L);
        long long52 = unsupportedDateTimeField42.add((long) 1439, (int) (byte) -1);
        long long55 = unsupportedDateTimeField42.add((-315569319587L), (int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = unsupportedDateTimeField42.getType();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField58 = new org.joda.time.field.DividedDateTimeField((org.joda.time.DateTimeField) offsetDateTimeField11, durationField35, dateTimeFieldType56, 1225154542);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 28800000L + "'", long13 == 28800000L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 3600000L + "'", long15 == 3600000L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 24 + "'", int16 == 24);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "21" + "'", str22, "21");
        org.junit.Assert.assertNotNull(readableInterval24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 103654969200000L + "'", long32 == 103654969200000L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(readableInterval38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 4L + "'", long45 == 4L);
        org.junit.Assert.assertNull(durationField46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1438L + "'", long52 == 1438L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-315569319555L) + "'", long55 == (-315569319555L));
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0131");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add((-31L), (long) '#');
        org.joda.time.DurationField durationField10 = unsupportedDateTimeField6.getLeapDurationField();
        int int13 = unsupportedDateTimeField6.getDifference((long) (byte) 10, 10L);
        long long16 = unsupportedDateTimeField6.add(3600000L, 9);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField18 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long21 = durationField18.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long23 = durationField18.getValueAsLong((long) 10);
        int int25 = durationField18.getValue((long) (byte) 10);
        boolean boolean26 = partial17.equals((java.lang.Object) durationField18);
        org.joda.time.Chronology chronology27 = partial17.getChronology();
        java.lang.String str28 = partial17.toString();
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField30 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long33 = durationField30.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long35 = durationField30.getValueAsLong((long) 10);
        int int37 = durationField30.getValue((long) (byte) 10);
        boolean boolean38 = partial29.equals((java.lang.Object) durationField30);
        org.joda.time.Chronology chronology39 = partial29.getChronology();
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        boolean boolean41 = partial29.isBefore((org.joda.time.ReadablePartial) partial40);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray42 = partial29.getFieldTypes();
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField44 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long47 = durationField44.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long49 = durationField44.getValueAsLong((long) 10);
        int int51 = durationField44.getValue((long) (byte) 10);
        boolean boolean52 = partial43.equals((java.lang.Object) durationField44);
        boolean boolean53 = partial29.equals((java.lang.Object) durationField44);
        int int54 = partial17.compareTo((org.joda.time.ReadablePartial) partial29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = null;
        java.lang.String str56 = partial29.toString(dateTimeFormatter55);
        java.util.Locale locale57 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str58 = unsupportedDateTimeField6.getAsText((org.joda.time.ReadablePartial) partial29, locale57);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 3600009L + "'", long16 == 3600009L);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 10L + "'", long23 == 10L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[]" + "'", str28, "[]");
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10L + "'", long35 == 10L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray42);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 10L + "'", long49 == 10L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[]" + "'", str56, "[]");
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2908");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = zonedChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField6 = zonedChronology4.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = zonedChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField8 = zonedChronology4.dayOfWeek();
        org.joda.time.DurationField durationField9 = zonedChronology4.weeks();
        org.joda.time.DateTimeField dateTimeField10 = zonedChronology4.minuteOfDay();
        org.joda.time.Chronology chronology11 = zonedChronology4.withUTC();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone16 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        long long18 = fixedDateTimeZone16.nextTransition(0L);
        org.joda.time.ReadableInterval readableInterval19 = null;
        org.joda.time.ReadableInterval readableInterval20 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval19);
        org.joda.time.ReadableInterval readableInterval21 = null;
        boolean boolean22 = readableInterval20.contains(readableInterval21);
        org.joda.time.ReadableInterval readableInterval23 = null;
        boolean boolean24 = readableInterval20.isBefore(readableInterval23);
        org.joda.time.Interval interval25 = readableInterval20.toInterval();
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.PeriodType periodType27 = org.joda.time.DateTimeUtils.getPeriodType(periodType26);
        org.joda.time.PeriodType periodType28 = org.joda.time.DateTimeUtils.getPeriodType(periodType26);
        org.joda.time.Period period29 = readableInterval20.toPeriod(periodType28);
        org.joda.time.ReadableInterval readableInterval30 = null;
        org.joda.time.ReadableInterval readableInterval31 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval30);
        org.joda.time.ReadableInterval readableInterval32 = null;
        boolean boolean33 = readableInterval31.contains(readableInterval32);
        org.joda.time.ReadableInterval readableInterval34 = null;
        boolean boolean35 = readableInterval31.isBefore(readableInterval34);
        org.joda.time.Interval interval36 = readableInterval31.toInterval();
        boolean boolean37 = readableInterval20.overlaps(readableInterval31);
        org.joda.time.ReadableInterval readableInterval38 = null;
        org.joda.time.ReadableInterval readableInterval39 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval38);
        org.joda.time.ReadableInterval readableInterval40 = null;
        boolean boolean41 = readableInterval39.contains(readableInterval40);
        org.joda.time.ReadableInterval readableInterval42 = null;
        boolean boolean43 = readableInterval39.isBefore(readableInterval42);
        boolean boolean44 = readableInterval31.overlaps(readableInterval39);
        java.lang.String str45 = readableInterval31.toString();
        org.joda.time.DateTime dateTime46 = readableInterval31.getStart();
        int int47 = fixedDateTimeZone16.getOffset((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Chronology chronology48 = zonedChronology4.withZone((org.joda.time.DateTimeZone) fixedDateTimeZone16);
        org.joda.time.DateTimeField dateTimeField49 = chronology48.weekyear();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(readableInterval20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(readableInterval31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(readableInterval39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1969-12-31T23:55:03.102+00:00:00.009/1969-12-31T23:55:03.102+00:00:00.009" + "'", str45, "1969-12-31T23:55:03.102+00:00:00.009/1969-12-31T23:55:03.102+00:00:00.009");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0735");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval3);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DurationField durationField7 = chronology5.millis();
        org.joda.time.DurationField durationField8 = chronology5.centuries();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval9);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology11.millis();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.ReadableInterval readableInterval16 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval15);
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.ReadableInterval readableInterval21 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval20);
        org.joda.time.ReadableInterval readableInterval22 = null;
        boolean boolean23 = readableInterval21.contains(readableInterval22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = readableInterval21.toPeriod(periodType24);
        int[] intArray27 = chronology17.get((org.joda.time.ReadablePeriod) period25, (-210866846400000L));
        int[] intArray30 = chronology11.get((org.joda.time.ReadablePeriod) period25, 2173795348453L, (long) 1439);
        int[] intArray33 = chronology5.get((org.joda.time.ReadablePeriod) period25, 291L, 2580171L);
        int[] intArray36 = iSOChronology0.get((org.joda.time.ReadablePeriod) period25, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField37 = iSOChronology0.months();
        java.lang.String str38 = iSOChronology0.toString();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = iSOChronology0.equals((java.lang.Object) partial39);
        java.lang.String str41 = iSOChronology0.toString();
        org.joda.time.Chronology chronology42 = iSOChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField43 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField44 = iSOChronology0.weekyearOfCentury();
        org.joda.time.DurationField durationField45 = iSOChronology0.seconds();
        org.joda.time.ReadablePartial readablePartial46 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long48 = iSOChronology0.set(readablePartial46, 1439L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(readableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(readableInterval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(readableInterval21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[UTC]" + "'", str38, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ISOChronology[UTC]" + "'", str41, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2922");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add((-31L), (long) '#');
        org.joda.time.DurationField durationField10 = unsupportedDateTimeField6.getLeapDurationField();
        org.joda.time.DurationField durationField11 = unsupportedDateTimeField6.getRangeDurationField();
        long long14 = unsupportedDateTimeField6.getDifferenceAsLong(10L, 0L);
        long long17 = unsupportedDateTimeField6.add((long) 15, 0);
        long long20 = unsupportedDateTimeField6.add(164730137506203L, 10);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField22 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long25 = durationField22.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long27 = durationField22.getValueAsLong((long) 10);
        int int29 = durationField22.getValue((long) (byte) 10);
        boolean boolean30 = partial21.equals((java.lang.Object) durationField22);
        org.joda.time.Chronology chronology31 = partial21.getChronology();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        boolean boolean33 = partial21.isBefore((org.joda.time.ReadablePartial) partial32);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray34 = partial21.getFieldTypes();
        boolean boolean36 = partial21.equals((java.lang.Object) 1702281558665L);
        java.lang.String str37 = partial21.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = partial21.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial40 = partial21.plus(readablePeriod39);
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField42 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long45 = durationField42.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long47 = durationField42.getValueAsLong((long) 10);
        int int49 = durationField42.getValue((long) (byte) 10);
        boolean boolean50 = partial41.equals((java.lang.Object) durationField42);
        org.joda.time.Chronology chronology51 = partial41.getChronology();
        java.lang.String str52 = partial41.toString();
        boolean boolean53 = partial40.isAfter((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Partial partial54 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial41);
        java.lang.String str55 = partial41.toString();
        java.util.Locale locale56 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str57 = unsupportedDateTimeField6.getAsText((org.joda.time.ReadablePartial) partial41, locale56);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertNull(durationField11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 15L + "'", long17 == 15L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 164730137506213L + "'", long20 == 164730137506213L);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[]" + "'", str37, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 10L + "'", long47 == 10L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[]" + "'", str52, "[]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[]" + "'", str55, "[]");
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2643");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        long long24 = remainderDateTimeField22.roundHalfFloor(3600000L);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval26 = null;
        org.joda.time.ReadableInterval readableInterval27 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval26);
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval26);
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfCentury();
        org.joda.time.DurationField durationField30 = chronology28.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField31 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType25, durationField30);
        long long34 = unsupportedDateTimeField31.add((-31L), (long) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = unsupportedDateTimeField31.getType();
        org.joda.time.DurationFieldType durationFieldType36 = dateTimeFieldType35.getRangeDurationType();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField37 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField22, dateTimeFieldType35);
        org.joda.time.DurationField durationField38 = remainderDateTimeField22.iDurationField;
        long long40 = remainderDateTimeField22.roundFloor(1701289161428L);
        int int42 = remainderDateTimeField22.get(2102400001L);
        org.joda.time.DurationField durationField43 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType45 = dateTimeFieldType44.getDurationType();
        org.joda.time.IllegalFieldValueException illegalFieldValueException48 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType44, (java.lang.Number) 1701289172564L, "org.joda.time.IllegalFieldValueException: Value 10 for dayOfYear is not supported: hourOfDay");
        org.joda.time.field.DividedDateTimeField dividedDateTimeField49 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField22, durationField43, dateTimeFieldType44);
        int int51 = dividedDateTimeField49.get(0L);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(readableInterval27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 4L + "'", long34 == 4L);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1672531200000L + "'", long40 == 1672531200000L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 197 + "'", int51 == 197);
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2929");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        long long24 = remainderDateTimeField22.roundHalfFloor(3600000L);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval26 = null;
        org.joda.time.ReadableInterval readableInterval27 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval26);
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval26);
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfCentury();
        org.joda.time.DurationField durationField30 = chronology28.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField31 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType25, durationField30);
        long long34 = unsupportedDateTimeField31.add((-31L), (long) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = unsupportedDateTimeField31.getType();
        org.joda.time.DurationFieldType durationFieldType36 = dateTimeFieldType35.getRangeDurationType();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField37 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField22, dateTimeFieldType35);
        org.joda.time.DurationField durationField38 = remainderDateTimeField22.iDurationField;
        org.joda.time.DurationField durationField39 = remainderDateTimeField22.iDurationField;
        int int40 = remainderDateTimeField22.iDivisor;
        java.lang.String str42 = remainderDateTimeField22.getAsText(183661330465L);
        int int43 = remainderDateTimeField22.iDivisor;
        long long45 = remainderDateTimeField22.roundHalfFloor(1701289168550L);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField47 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField22, dateTimeFieldType46);
        long long50 = dividedDateTimeField47.add((-4881L), 139780);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(readableInterval27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 4L + "'", long34 == 4L);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "5" + "'", str42, "5");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1704067200000L + "'", long45 == 1704067200000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 44110307548795119L + "'", long50 == 44110307548795119L);
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2248");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = null;
        boolean boolean3 = readableInterval1.contains(readableInterval2);
        org.joda.time.ReadableInterval readableInterval4 = null;
        boolean boolean5 = readableInterval1.isBefore(readableInterval4);
        org.joda.time.Interval interval6 = readableInterval1.toInterval();
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.PeriodType periodType8 = org.joda.time.DateTimeUtils.getPeriodType(periodType7);
        org.joda.time.PeriodType periodType9 = org.joda.time.DateTimeUtils.getPeriodType(periodType7);
        org.joda.time.Period period10 = readableInterval1.toPeriod(periodType9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField12 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long15 = durationField12.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long17 = durationField12.getValueAsLong((long) 10);
        int int19 = durationField12.getValue((long) (byte) 10);
        boolean boolean20 = partial11.equals((java.lang.Object) durationField12);
        org.joda.time.Chronology chronology21 = partial11.getChronology();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial11.isBefore((org.joda.time.ReadablePartial) partial22);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = partial11.getFieldTypes();
        boolean boolean26 = partial11.equals((java.lang.Object) 1702281558665L);
        java.lang.String str27 = partial11.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = partial11.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Partial partial30 = partial11.plus(readablePeriod29);
        org.joda.time.ReadableInterval readableInterval31 = null;
        org.joda.time.ReadableInterval readableInterval32 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval31);
        org.joda.time.ReadableInterval readableInterval33 = null;
        boolean boolean34 = readableInterval32.contains(readableInterval33);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadableInterval readableInterval36 = null;
        org.joda.time.ReadableInterval readableInterval37 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval36);
        org.joda.time.ReadableInterval readableInterval38 = null;
        boolean boolean39 = readableInterval37.contains(readableInterval38);
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.Period period41 = readableInterval37.toPeriod(periodType40);
        org.joda.time.DateTime dateTime42 = readableInterval37.getEnd();
        org.joda.time.Chronology chronology43 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant35, (org.joda.time.ReadableInstant) dateTime42);
        boolean boolean44 = readableInterval32.isAfter((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.MutableInterval mutableInterval45 = readableInterval32.toMutableInterval();
        org.joda.time.DateTime dateTime46 = readableInterval32.getStart();
        org.joda.time.ReadableInterval readableInterval47 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval32);
        org.joda.time.DateTime dateTime48 = readableInterval47.getStart();
        boolean boolean49 = partial30.isMatch((org.joda.time.ReadableInstant) dateTime48);
        boolean boolean50 = readableInterval1.isBefore((org.joda.time.ReadableInstant) dateTime48);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[]" + "'", str27, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNotNull(readableInterval32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(readableInterval37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(mutableInterval45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(readableInterval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1572");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.ReadableInterval readableInterval11 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval10);
        org.joda.time.ReadableInterval readableInterval12 = null;
        boolean boolean13 = readableInterval11.contains(readableInterval12);
        org.joda.time.ReadableInterval readableInterval14 = null;
        boolean boolean15 = readableInterval11.isBefore(readableInterval14);
        org.joda.time.Interval interval16 = readableInterval11.toInterval();
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.PeriodType periodType18 = org.joda.time.DateTimeUtils.getPeriodType(periodType17);
        org.joda.time.PeriodType periodType19 = org.joda.time.DateTimeUtils.getPeriodType(periodType17);
        org.joda.time.Period period20 = readableInterval11.toPeriod(periodType19);
        org.joda.time.Partial partial21 = partial0.plus((org.joda.time.ReadablePeriod) period20);
        java.lang.String str22 = partial21.toStringList();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField24 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long27 = durationField24.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long29 = durationField24.getValueAsLong((long) 10);
        int int31 = durationField24.getValue((long) (byte) 10);
        boolean boolean32 = partial23.equals((java.lang.Object) durationField24);
        org.joda.time.Chronology chronology33 = partial23.getChronology();
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        boolean boolean35 = partial23.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray36 = partial23.getFieldTypes();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField38 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long41 = durationField38.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long43 = durationField38.getValueAsLong((long) 10);
        int int45 = durationField38.getValue((long) (byte) 10);
        boolean boolean46 = partial37.equals((java.lang.Object) durationField38);
        org.joda.time.Chronology chronology47 = partial37.getChronology();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = partial37.isBefore((org.joda.time.ReadablePartial) partial48);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray50 = partial37.getFieldTypes();
        boolean boolean52 = partial37.equals((java.lang.Object) 1702281558665L);
        int int53 = partial23.compareTo((org.joda.time.ReadablePartial) partial37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = partial23.getFormatter();
        boolean boolean55 = partial21.isMatch((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Chronology chronology56 = partial21.getChronology();
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(readableInterval11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10L + "'", long29 == 10L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray36);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 10L + "'", long43 == 10L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNull(dateTimeFormatter54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(chronology56);
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1898");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DurationField durationField2 = iSOChronology0.months();
        long long7 = iSOChronology0.getDateTimeMillis(1, 1, (int) (byte) 1, (int) (short) 100);
        org.joda.time.DurationField durationField8 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField10 = iSOChronology9.minutes();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology9.millisOfDay();
        org.joda.time.ReadableInterval readableInterval12 = null;
        org.joda.time.ReadableInterval readableInterval13 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval12);
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        org.joda.time.DurationField durationField16 = chronology14.millis();
        org.joda.time.DurationField durationField17 = chronology14.centuries();
        org.joda.time.ReadableInterval readableInterval18 = null;
        org.joda.time.ReadableInterval readableInterval19 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval18);
        org.joda.time.Chronology chronology20 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval18);
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfCentury();
        org.joda.time.DurationField durationField22 = chronology20.millis();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.Chronology chronology26 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval24);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval29 = null;
        org.joda.time.ReadableInterval readableInterval30 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval29);
        org.joda.time.ReadableInterval readableInterval31 = null;
        boolean boolean32 = readableInterval30.contains(readableInterval31);
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = readableInterval30.toPeriod(periodType33);
        int[] intArray36 = chronology26.get((org.joda.time.ReadablePeriod) period34, (-210866846400000L));
        int[] intArray39 = chronology20.get((org.joda.time.ReadablePeriod) period34, 2173795348453L, (long) 1439);
        int[] intArray42 = chronology14.get((org.joda.time.ReadablePeriod) period34, 291L, 2580171L);
        int[] intArray45 = iSOChronology9.get((org.joda.time.ReadablePeriod) period34, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField46 = iSOChronology9.months();
        java.lang.String str47 = iSOChronology9.toString();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = iSOChronology9.equals((java.lang.Object) partial48);
        long long51 = iSOChronology0.set((org.joda.time.ReadablePartial) partial48, (long) (short) 1);
        org.joda.time.DurationField durationField52 = iSOChronology0.halfdays();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-62135596799900L) + "'", long7 == (-62135596799900L));
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(readableInterval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(readableInterval19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(readableInterval30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(durationField46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ISOChronology[UTC]" + "'", str47, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
        org.junit.Assert.assertNotNull(durationField52);
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1896");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.DurationField durationField6 = chronology3.centuries();
        org.joda.time.Chronology chronology7 = chronology3.withUTC();
        org.joda.time.DurationField durationField8 = chronology7.halfdays();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField12 = new org.joda.time.field.DividedDateTimeField(dateTimeField9, dateTimeFieldType10, 10);
        long long15 = dividedDateTimeField12.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval17 = null;
        org.joda.time.ReadableInterval readableInterval18 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval17);
        org.joda.time.Chronology chronology19 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval17);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfCentury();
        org.joda.time.DurationField durationField21 = chronology19.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField22 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType16, durationField21);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField23 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField12, dateTimeFieldType16);
        long long25 = remainderDateTimeField23.roundHalfFloor(3600000L);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval27 = null;
        org.joda.time.ReadableInterval readableInterval28 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval27);
        org.joda.time.Chronology chronology29 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval27);
        org.joda.time.DateTimeField dateTimeField30 = chronology29.yearOfCentury();
        org.joda.time.DurationField durationField31 = chronology29.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField32 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType26, durationField31);
        long long35 = unsupportedDateTimeField32.add((-31L), (long) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = unsupportedDateTimeField32.getType();
        org.joda.time.DurationFieldType durationFieldType37 = dateTimeFieldType36.getRangeDurationType();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField38 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField23, dateTimeFieldType36);
        org.joda.time.DurationField durationField39 = remainderDateTimeField23.iDurationField;
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField40 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField39);
        long long43 = unsupportedDateTimeField40.add(1701289161914L, 0);
        java.util.Locale locale45 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str46 = unsupportedDateTimeField40.getAsShortText(16, locale45);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfMonth field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-30610224000000L) + "'", long15 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(readableInterval18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(readableInterval28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 4L + "'", long35 == 4L);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField40);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1701289161914L + "'", long43 == 1701289161914L);
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2621");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.ReadableInterval readableInterval11 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval10);
        org.joda.time.ReadableInterval readableInterval12 = null;
        boolean boolean13 = readableInterval11.contains(readableInterval12);
        org.joda.time.ReadableInterval readableInterval14 = null;
        boolean boolean15 = readableInterval11.isBefore(readableInterval14);
        org.joda.time.Interval interval16 = readableInterval11.toInterval();
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.PeriodType periodType18 = org.joda.time.DateTimeUtils.getPeriodType(periodType17);
        org.joda.time.PeriodType periodType19 = org.joda.time.DateTimeUtils.getPeriodType(periodType17);
        org.joda.time.Period period20 = readableInterval11.toPeriod(periodType19);
        org.joda.time.Partial partial21 = partial0.plus((org.joda.time.ReadablePeriod) period20);
        java.lang.String str22 = partial21.toStringList();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField24 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long27 = durationField24.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long29 = durationField24.getValueAsLong((long) 10);
        int int31 = durationField24.getValue((long) (byte) 10);
        boolean boolean32 = partial23.equals((java.lang.Object) durationField24);
        org.joda.time.Chronology chronology33 = partial23.getChronology();
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        boolean boolean35 = partial23.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray36 = partial23.getFieldTypes();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField38 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long41 = durationField38.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long43 = durationField38.getValueAsLong((long) 10);
        int int45 = durationField38.getValue((long) (byte) 10);
        boolean boolean46 = partial37.equals((java.lang.Object) durationField38);
        org.joda.time.Chronology chronology47 = partial37.getChronology();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = partial37.isBefore((org.joda.time.ReadablePartial) partial48);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray50 = partial37.getFieldTypes();
        boolean boolean52 = partial37.equals((java.lang.Object) 1702281558665L);
        int int53 = partial23.compareTo((org.joda.time.ReadablePartial) partial37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = partial23.getFormatter();
        boolean boolean55 = partial21.isMatch((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Partial partial56 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial23);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(readableInterval11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10L + "'", long29 == 10L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray36);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 10L + "'", long43 == 10L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNull(dateTimeFormatter54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1561");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        long long24 = remainderDateTimeField22.roundHalfFloor(3600000L);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval26 = null;
        org.joda.time.ReadableInterval readableInterval27 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval26);
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval26);
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfCentury();
        org.joda.time.DurationField durationField30 = chronology28.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField31 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType25, durationField30);
        long long34 = unsupportedDateTimeField31.add((-31L), (long) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = unsupportedDateTimeField31.getType();
        org.joda.time.DurationFieldType durationFieldType36 = dateTimeFieldType35.getRangeDurationType();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField37 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField22, dateTimeFieldType35);
        org.joda.time.DurationField durationField38 = remainderDateTimeField22.iDurationField;
        org.joda.time.DurationField durationField39 = remainderDateTimeField22.iDurationField;
        org.joda.time.DurationField durationField40 = remainderDateTimeField22.getDurationField();
        long long42 = remainderDateTimeField22.roundCeiling((-53459996L));
        org.joda.time.DurationField durationField43 = remainderDateTimeField22.getRangeDurationField();
        java.util.Locale locale45 = null;
        java.lang.String str46 = remainderDateTimeField22.getAsShortText(0L, locale45);
        org.joda.time.DurationField durationField47 = remainderDateTimeField22.getDurationField();
        int int49 = durationField47.getValue(0L);
        long long50 = durationField47.getUnitMillis();
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(readableInterval27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 4L + "'", long34 == 4L);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "0" + "'", str46, "0");
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 31556952000L + "'", long50 == 31556952000L);
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0118");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        int int23 = remainderDateTimeField22.getMaximumValue();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.ReadableInterval readableInterval26 = null;
        org.joda.time.ReadableInterval readableInterval27 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval26);
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval26);
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfCentury();
        org.joda.time.DurationField durationField30 = chronology28.millis();
        org.joda.time.DurationField durationField31 = chronology28.centuries();
        org.joda.time.Chronology chronology32 = chronology28.withUTC();
        org.joda.time.DurationField durationField33 = chronology32.halfdays();
        org.joda.time.DateTimeField dateTimeField34 = chronology32.yearOfEra();
        org.joda.time.ReadableInterval readableInterval35 = null;
        org.joda.time.ReadableInterval readableInterval36 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval35);
        org.joda.time.ReadableInterval readableInterval37 = null;
        boolean boolean38 = readableInterval36.contains(readableInterval37);
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Period period40 = readableInterval36.toPeriod(periodType39);
        org.joda.time.DateTime dateTime41 = readableInterval36.getEnd();
        org.joda.time.MutableInterval mutableInterval42 = readableInterval36.toMutableInterval();
        org.joda.time.Period period43 = readableInterval36.toPeriod();
        int[] intArray46 = chronology32.get((org.joda.time.ReadablePeriod) period43, (-31L), 1701289167159L);
        java.util.Locale locale48 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray49 = remainderDateTimeField22.set((org.joda.time.ReadablePartial) partial24, 100, intArray46, "hi!", locale48);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"hi!\" for dayOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNotNull(readableInterval27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(readableInterval36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(mutableInterval42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[53, 10, 4, 0, 20, 19, 27, 190]");
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1798");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = zonedChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField6 = zonedChronology4.monthOfYear();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField8 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long11 = durationField8.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long13 = durationField8.getValueAsLong((long) 10);
        int int15 = durationField8.getValue((long) (byte) 10);
        boolean boolean16 = partial7.equals((java.lang.Object) durationField8);
        org.joda.time.Chronology chronology17 = partial7.getChronology();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial7.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial7.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.ReadableInterval readableInterval22 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval21);
        long long23 = readableInterval22.getStartMillis();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.ReadableInterval readableInterval26 = null;
        boolean boolean27 = readableInterval25.contains(readableInterval26);
        org.joda.time.Duration duration28 = readableInterval25.toDuration();
        org.joda.time.DateTime dateTime29 = readableInterval25.getEnd();
        boolean boolean30 = readableInterval22.contains((org.joda.time.ReadableInstant) dateTime29);
        boolean boolean31 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime29);
        int[] intArray33 = zonedChronology4.get((org.joda.time.ReadablePartial) partial7, 60035L);
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology4.centuryOfEra();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField36 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long39 = durationField36.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long41 = durationField36.getValueAsLong((long) 10);
        int int43 = durationField36.getValue((long) (byte) 10);
        boolean boolean44 = partial35.equals((java.lang.Object) durationField36);
        org.joda.time.Chronology chronology45 = partial35.getChronology();
        int[] intArray47 = zonedChronology4.get((org.joda.time.ReadablePartial) partial35, 291L);
        org.joda.time.DateTimeField dateTimeField48 = zonedChronology4.hourOfDay();
        org.joda.time.DateTimeField dateTimeField49 = zonedChronology4.dayOfMonth();
        org.joda.time.DurationField durationField50 = zonedChronology4.minutes();
        long long53 = durationField50.getMillis(57294273L, (-39381L));
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(readableInterval22);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-476134762239L) + "'", long23 == (-476134762239L));
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 10L + "'", long41 == 10L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 3437656380000L + "'", long53 == 3437656380000L);
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2563");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField15 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long18 = durationField15.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long20 = durationField15.getValueAsLong((long) 10);
        int int22 = durationField15.getValue((long) (byte) 10);
        boolean boolean23 = partial14.equals((java.lang.Object) durationField15);
        boolean boolean24 = partial0.equals((java.lang.Object) durationField15);
        org.joda.time.ReadableInterval readableInterval25 = null;
        org.joda.time.ReadableInterval readableInterval26 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval25);
        org.joda.time.ReadableInterval readableInterval27 = null;
        boolean boolean28 = readableInterval26.contains(readableInterval27);
        org.joda.time.Duration duration29 = readableInterval26.toDuration();
        org.joda.time.ReadableInterval readableInterval30 = null;
        org.joda.time.ReadableInterval readableInterval31 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval30);
        org.joda.time.ReadableInterval readableInterval32 = null;
        boolean boolean33 = readableInterval31.contains(readableInterval32);
        org.joda.time.Duration duration34 = readableInterval31.toDuration();
        org.joda.time.DateTime dateTime35 = readableInterval31.getEnd();
        boolean boolean36 = readableInterval26.isBefore((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime dateTime37 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.ReadableInterval readableInterval38 = null;
        org.joda.time.ReadableInterval readableInterval39 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval38);
        long long40 = readableInterval39.getStartMillis();
        org.joda.time.ReadableInterval readableInterval41 = null;
        org.joda.time.ReadableInterval readableInterval42 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval41);
        org.joda.time.ReadableInterval readableInterval43 = null;
        boolean boolean44 = readableInterval42.contains(readableInterval43);
        org.joda.time.Duration duration45 = readableInterval42.toDuration();
        org.joda.time.DateTime dateTime46 = readableInterval42.getEnd();
        boolean boolean47 = readableInterval39.contains((org.joda.time.ReadableInstant) dateTime46);
        long long48 = org.joda.time.DateTimeUtils.getInstantMillis((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Chronology chronology49 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DurationField durationField50 = chronology49.halfdays();
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(readableInterval26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(readableInterval31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(readableInterval39);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-210861660779418L) + "'", long40 == (-210861660779418L));
        org.junit.Assert.assertNotNull(readableInterval42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-210861660779418L) + "'", long48 == (-210861660779418L));
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(durationField50);
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1148");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.Chronology chronology3 = iSOChronology0.withZone(dateTimeZone1);
        org.joda.time.chrono.ISOChronology iSOChronology4 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField5 = iSOChronology4.minutes();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology4.millisOfDay();
        org.joda.time.ReadableInterval readableInterval7 = null;
        org.joda.time.ReadableInterval readableInterval8 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval7);
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval7);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.yearOfCentury();
        org.joda.time.DurationField durationField11 = chronology9.millis();
        org.joda.time.DurationField durationField12 = chronology9.centuries();
        org.joda.time.ReadableInterval readableInterval13 = null;
        org.joda.time.ReadableInterval readableInterval14 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval13);
        org.joda.time.Chronology chronology15 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval13);
        org.joda.time.DateTimeField dateTimeField16 = chronology15.yearOfCentury();
        org.joda.time.DurationField durationField17 = chronology15.millis();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval19 = null;
        org.joda.time.ReadableInterval readableInterval20 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval19);
        org.joda.time.Chronology chronology21 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval19);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.ReadableInterval readableInterval26 = null;
        boolean boolean27 = readableInterval25.contains(readableInterval26);
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Period period29 = readableInterval25.toPeriod(periodType28);
        int[] intArray31 = chronology21.get((org.joda.time.ReadablePeriod) period29, (-210866846400000L));
        int[] intArray34 = chronology15.get((org.joda.time.ReadablePeriod) period29, 2173795348453L, (long) 1439);
        int[] intArray37 = chronology9.get((org.joda.time.ReadablePeriod) period29, 291L, 2580171L);
        int[] intArray40 = iSOChronology4.get((org.joda.time.ReadablePeriod) period29, (-30610224000000L), 291L);
        int[] intArray42 = iSOChronology0.get((org.joda.time.ReadablePeriod) period29, 35L);
        org.joda.time.DateTimeField dateTimeField43 = iSOChronology0.monthOfYear();
        org.joda.time.DurationField durationField44 = iSOChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField45 = iSOChronology0.secondOfDay();
        org.joda.time.DurationField durationField46 = iSOChronology0.months();
        long long49 = durationField46.getDifferenceAsLong(0L, 1669753266908L);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTC" + "'", str2, "UTC");
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(iSOChronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(readableInterval8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(readableInterval14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(readableInterval20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 0, 0, 0, 0, 0, 0, 35]");
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-634L) + "'", long49 == (-634L));
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0373");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        boolean boolean15 = partial0.equals((java.lang.Object) 1702281558665L);
        java.lang.String str16 = partial0.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = partial0.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.Partial partial19 = partial0.plus(readablePeriod18);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField21 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long24 = durationField21.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long26 = durationField21.getValueAsLong((long) 10);
        int int28 = durationField21.getValue((long) (byte) 10);
        boolean boolean29 = partial20.equals((java.lang.Object) durationField21);
        org.joda.time.Chronology chronology30 = partial20.getChronology();
        java.lang.String str31 = partial20.toString();
        boolean boolean32 = partial19.isAfter((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Partial partial33 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField35 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long38 = durationField35.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long40 = durationField35.getValueAsLong((long) 10);
        int int42 = durationField35.getValue((long) (byte) 10);
        boolean boolean43 = partial34.equals((java.lang.Object) durationField35);
        org.joda.time.Chronology chronology44 = partial34.getChronology();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        boolean boolean46 = partial34.isBefore((org.joda.time.ReadablePartial) partial45);
        org.joda.time.DateTimeField[] dateTimeFieldArray47 = partial45.getFields();
        org.joda.time.Chronology chronology48 = partial45.getChronology();
        boolean boolean49 = partial20.isEqual((org.joda.time.ReadablePartial) partial45);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.IllegalFieldValueException illegalFieldValueException53 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType50, (java.lang.Number) 60035L, "");
        org.joda.time.DurationFieldType durationFieldType54 = dateTimeFieldType50.getDurationType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial56 = partial45.withField(dateTimeFieldType50, 29227899);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'hourOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[]" + "'", str16, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10L + "'", long26 == 10L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10L + "'", long40 == 10L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(durationFieldType54);
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0778");
        org.joda.time.JodaTimePermission jodaTimePermission1 = new org.joda.time.JodaTimePermission("DateTimeField[minuteOfDay]");
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval3);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        boolean boolean7 = durationFieldType2.isSupported(chronology5);
        org.joda.time.DurationField durationField8 = chronology5.halfdays();
        jodaTimePermission1.checkGuard((java.lang.Object) chronology5);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField11 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long14 = durationField11.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long16 = durationField11.getValueAsLong((long) 10);
        int int18 = durationField11.getValue((long) (byte) 10);
        boolean boolean19 = partial10.equals((java.lang.Object) durationField11);
        org.joda.time.Chronology chronology20 = partial10.getChronology();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        boolean boolean22 = partial10.isBefore((org.joda.time.ReadablePartial) partial21);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = partial10.getFieldTypes();
        boolean boolean25 = partial10.equals((java.lang.Object) 1702281558665L);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType27 = dateTimeFieldType26.getDurationType();
        boolean boolean28 = partial10.isSupported(dateTimeFieldType26);
        org.joda.time.ReadableInterval readableInterval29 = null;
        org.joda.time.ReadableInterval readableInterval30 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval29);
        long long31 = readableInterval30.getStartMillis();
        org.joda.time.ReadableInterval readableInterval32 = null;
        org.joda.time.ReadableInterval readableInterval33 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval32);
        long long34 = readableInterval33.getEndMillis();
        boolean boolean35 = readableInterval30.overlaps(readableInterval33);
        org.joda.time.MutableInterval mutableInterval36 = readableInterval30.toMutableInterval();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        boolean boolean38 = mutableInterval36.equals((java.lang.Object) dateTimeFieldType37);
        long long39 = mutableInterval36.toDurationMillis();
        org.joda.time.Period period40 = mutableInterval36.toPeriod();
        boolean boolean41 = partial10.equals((java.lang.Object) period40);
        int[] intArray44 = chronology5.get((org.joda.time.ReadablePeriod) period40, (long) 9, (long) 3);
        // The following exception was thrown during execution in test generation
        try {
            long long50 = chronology5.getDateTimeMillis(2835481900L, 4, (int) (byte) 1, 53460005, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53460005 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10L + "'", long16 == 10L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(readableInterval30);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1701260523035L + "'", long31 == 1701260523035L);
        org.junit.Assert.assertNotNull(readableInterval33);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1701260523035L + "'", long34 == 1701260523035L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(mutableInterval36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, 0, 0, 0, 0, 0, 0, -6]");
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2115");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = zonedChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField6 = zonedChronology4.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = zonedChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField8 = zonedChronology4.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField9 = zonedChronology4.weekOfWeekyear();
        org.joda.time.DurationField durationField10 = zonedChronology4.days();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone15 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology16 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone17 = gregorianChronology16.getZone();
        long long22 = gregorianChronology16.getDateTimeMillis((int) '4', 8, 24, 24);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField24 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long27 = durationField24.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long29 = durationField24.getValueAsLong((long) 10);
        int int31 = durationField24.getValue((long) (byte) 10);
        boolean boolean32 = partial23.equals((java.lang.Object) durationField24);
        org.joda.time.Chronology chronology33 = partial23.getChronology();
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        boolean boolean35 = partial23.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray36 = partial23.getFieldTypes();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField38 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long41 = durationField38.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long43 = durationField38.getValueAsLong((long) 10);
        int int45 = durationField38.getValue((long) (byte) 10);
        boolean boolean46 = partial37.equals((java.lang.Object) durationField38);
        boolean boolean47 = partial23.equals((java.lang.Object) durationField38);
        int[] intArray49 = gregorianChronology16.get((org.joda.time.ReadablePartial) partial23, 0L);
        org.joda.time.DateTimeField dateTimeField50 = gregorianChronology16.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone51 = gregorianChronology16.getZone();
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone52 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone51);
        org.joda.time.Chronology chronology53 = zonedChronology4.withZone(dateTimeZone51);
        // The following exception was thrown during execution in test generation
        try {
            long long61 = zonedChronology4.getDateTimeMillis(29227899, 31, 16, 3060, 37113, (int) (short) 100, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3060 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(gregorianChronology16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-60505833599976L) + "'", long22 == (-60505833599976L));
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10L + "'", long29 == 10L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray36);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 10L + "'", long43 == 10L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(cachedDateTimeZone52);
        org.junit.Assert.assertNotNull(chronology53);
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1285");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval3);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DurationField durationField7 = chronology5.millis();
        org.joda.time.DurationField durationField8 = chronology5.centuries();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval9);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology11.millis();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.ReadableInterval readableInterval16 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval15);
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.ReadableInterval readableInterval21 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval20);
        org.joda.time.ReadableInterval readableInterval22 = null;
        boolean boolean23 = readableInterval21.contains(readableInterval22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = readableInterval21.toPeriod(periodType24);
        int[] intArray27 = chronology17.get((org.joda.time.ReadablePeriod) period25, (-210866846400000L));
        int[] intArray30 = chronology11.get((org.joda.time.ReadablePeriod) period25, 2173795348453L, (long) 1439);
        int[] intArray33 = chronology5.get((org.joda.time.ReadablePeriod) period25, 291L, 2580171L);
        int[] intArray36 = iSOChronology0.get((org.joda.time.ReadablePeriod) period25, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField37 = iSOChronology0.months();
        java.lang.String str38 = iSOChronology0.toString();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = iSOChronology0.equals((java.lang.Object) partial39);
        java.lang.String str41 = iSOChronology0.toString();
        org.joda.time.Chronology chronology42 = iSOChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField43 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField44 = iSOChronology0.weekyearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            long long50 = iSOChronology0.getDateTimeMillis((-17539063764L), 296907, 29227900, 74, 6691);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 296907 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(readableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(readableInterval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(readableInterval21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(durationField37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[UTC]" + "'", str38, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ISOChronology[UTC]" + "'", str41, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2698");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone18 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology19 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = gregorianChronology19.getZone();
        org.joda.time.DateTimeField dateTimeField21 = gregorianChronology19.minuteOfHour();
        boolean boolean23 = gregorianChronology19.equals((java.lang.Object) (-2173831554426L));
        org.joda.time.DurationField durationField24 = gregorianChronology19.halfdays();
        org.joda.time.DateTimeField dateTimeField25 = gregorianChronology19.dayOfWeek();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField27 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long30 = durationField27.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long32 = durationField27.getValueAsLong((long) 10);
        int int34 = durationField27.getValue((long) (byte) 10);
        boolean boolean35 = partial26.equals((java.lang.Object) durationField27);
        org.joda.time.Chronology chronology36 = partial26.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.IllegalFieldValueException illegalFieldValueException40 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType37, (java.lang.Number) 60035L, "");
        org.joda.time.DurationFieldType durationFieldType41 = dateTimeFieldType37.getDurationType();
        int int42 = partial26.indexOf(dateTimeFieldType37);
        int[] intArray44 = gregorianChronology19.get((org.joda.time.ReadablePartial) partial26, (-476134744301L));
        org.joda.time.chrono.ISOChronology iSOChronology45 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField46 = iSOChronology45.minutes();
        org.joda.time.DateTimeField dateTimeField47 = iSOChronology45.millisOfDay();
        org.joda.time.DateTimeField dateTimeField48 = iSOChronology45.halfdayOfDay();
        org.joda.time.DurationField durationField49 = iSOChronology45.seconds();
        org.joda.time.Chronology chronology50 = iSOChronology45.withUTC();
        org.joda.time.DateTimeField dateTimeField51 = iSOChronology45.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField52 = iSOChronology45.minuteOfDay();
        org.joda.time.Partial partial53 = new org.joda.time.Partial(dateTimeFieldTypeArray13, intArray44, (org.joda.time.Chronology) iSOChronology45);
        // The following exception was thrown during execution in test generation
        try {
            int int55 = partial53.getValue((-1968));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1968");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(gregorianChronology19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10L + "'", long32 == 10L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(iSOChronology45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1677");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField15 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long18 = durationField15.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long20 = durationField15.getValueAsLong((long) 10);
        int int22 = durationField15.getValue((long) (byte) 10);
        boolean boolean23 = partial14.equals((java.lang.Object) durationField15);
        boolean boolean24 = partial0.equals((java.lang.Object) durationField15);
        org.joda.time.ReadableInterval readableInterval25 = null;
        org.joda.time.ReadableInterval readableInterval26 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval25);
        org.joda.time.ReadableInterval readableInterval27 = null;
        boolean boolean28 = readableInterval26.contains(readableInterval27);
        org.joda.time.Duration duration29 = readableInterval26.toDuration();
        org.joda.time.ReadableInterval readableInterval30 = null;
        org.joda.time.ReadableInterval readableInterval31 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval30);
        org.joda.time.ReadableInterval readableInterval32 = null;
        boolean boolean33 = readableInterval31.contains(readableInterval32);
        org.joda.time.Duration duration34 = readableInterval31.toDuration();
        org.joda.time.DateTime dateTime35 = readableInterval31.getEnd();
        boolean boolean36 = readableInterval26.isBefore((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime dateTime37 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.chrono.ISOChronology iSOChronology38 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField39 = iSOChronology38.minutes();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str41 = dateTimeZone40.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology42 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology38, dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone43 = zonedChronology42.getZone();
        boolean boolean45 = zonedChronology42.equals((java.lang.Object) 4L);
        org.joda.time.DateTimeField dateTimeField46 = zonedChronology42.year();
        org.joda.time.DateTimeField dateTimeField47 = zonedChronology42.yearOfCentury();
        boolean boolean48 = partial0.equals((java.lang.Object) zonedChronology42);
        org.joda.time.DateTimeField dateTimeField49 = zonedChronology42.hourOfDay();
        java.lang.String str50 = zonedChronology42.toString();
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(readableInterval26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(readableInterval31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(iSOChronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "UTC" + "'", str41, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str50, "ZonedChronology[ISOChronology[UTC], UTC]");
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1423");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.Chronology chronology3 = iSOChronology0.withZone(dateTimeZone1);
        org.joda.time.chrono.ISOChronology iSOChronology4 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField5 = iSOChronology4.minutes();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology4.millisOfDay();
        org.joda.time.ReadableInterval readableInterval7 = null;
        org.joda.time.ReadableInterval readableInterval8 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval7);
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval7);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.yearOfCentury();
        org.joda.time.DurationField durationField11 = chronology9.millis();
        org.joda.time.DurationField durationField12 = chronology9.centuries();
        org.joda.time.ReadableInterval readableInterval13 = null;
        org.joda.time.ReadableInterval readableInterval14 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval13);
        org.joda.time.Chronology chronology15 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval13);
        org.joda.time.DateTimeField dateTimeField16 = chronology15.yearOfCentury();
        org.joda.time.DurationField durationField17 = chronology15.millis();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval19 = null;
        org.joda.time.ReadableInterval readableInterval20 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval19);
        org.joda.time.Chronology chronology21 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval19);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.ReadableInterval readableInterval26 = null;
        boolean boolean27 = readableInterval25.contains(readableInterval26);
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Period period29 = readableInterval25.toPeriod(periodType28);
        int[] intArray31 = chronology21.get((org.joda.time.ReadablePeriod) period29, (-210866846400000L));
        int[] intArray34 = chronology15.get((org.joda.time.ReadablePeriod) period29, 2173795348453L, (long) 1439);
        int[] intArray37 = chronology9.get((org.joda.time.ReadablePeriod) period29, 291L, 2580171L);
        int[] intArray40 = iSOChronology4.get((org.joda.time.ReadablePeriod) period29, (-30610224000000L), 291L);
        int[] intArray42 = iSOChronology0.get((org.joda.time.ReadablePeriod) period29, 35L);
        org.joda.time.DateTimeField dateTimeField43 = iSOChronology0.monthOfYear();
        org.joda.time.DurationField durationField44 = iSOChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField45 = iSOChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField46 = iSOChronology0.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField47 = iSOChronology0.hourOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTC" + "'", str2, "UTC");
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(iSOChronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(readableInterval8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(readableInterval14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(readableInterval20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 0, 0, 0, 0, 0, 0, 35]");
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3072");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = zonedChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField6 = zonedChronology4.monthOfYear();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField8 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long11 = durationField8.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long13 = durationField8.getValueAsLong((long) 10);
        int int15 = durationField8.getValue((long) (byte) 10);
        boolean boolean16 = partial7.equals((java.lang.Object) durationField8);
        org.joda.time.Chronology chronology17 = partial7.getChronology();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial7.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial7.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.ReadableInterval readableInterval22 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval21);
        long long23 = readableInterval22.getStartMillis();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.ReadableInterval readableInterval26 = null;
        boolean boolean27 = readableInterval25.contains(readableInterval26);
        org.joda.time.Duration duration28 = readableInterval25.toDuration();
        org.joda.time.DateTime dateTime29 = readableInterval25.getEnd();
        boolean boolean30 = readableInterval22.contains((org.joda.time.ReadableInstant) dateTime29);
        boolean boolean31 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime29);
        int[] intArray33 = zonedChronology4.get((org.joda.time.ReadablePartial) partial7, 60035L);
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval35 = null;
        org.joda.time.ReadableInterval readableInterval36 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval35);
        org.joda.time.Chronology chronology37 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval35);
        org.joda.time.DateTimeField dateTimeField38 = chronology37.yearOfCentury();
        boolean boolean39 = durationFieldType34.isSupported(chronology37);
        org.joda.time.DurationField durationField40 = chronology37.halfdays();
        org.joda.time.DateTimeField dateTimeField41 = chronology37.weekyearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField46 = new org.joda.time.field.OffsetDateTimeField(dateTimeField41, dateTimeFieldType42, 4, (int) ' ', (int) (short) -1);
        boolean boolean47 = partial7.isSupported(dateTimeFieldType42);
        int int48 = partial7.size();
        java.lang.String str49 = partial7.toString();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(readableInterval22);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-296907L) + "'", long23 == (-296907L));
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertNotNull(readableInterval36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[]" + "'", str49, "[]");
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3159");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone5 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology6 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = gregorianChronology6.getZone();
        boolean boolean8 = dateTimeFieldType0.isSupported((org.joda.time.Chronology) gregorianChronology6);
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology6.hourOfHalfday();
        org.joda.time.Chronology chronology10 = gregorianChronology6.withUTC();
        org.joda.time.chrono.ISOChronology iSOChronology11 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField12 = iSOChronology11.minutes();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology15 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology11, dateTimeZone13);
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeZone13.getShortName(1L, locale17);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone19 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime20 = null;
        boolean boolean21 = cachedDateTimeZone19.isLocalDateTimeGap(localDateTime20);
        int int23 = cachedDateTimeZone19.getOffset(255193371L);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType25 = dateTimeFieldType24.getDurationType();
        org.joda.time.field.PreciseDurationField preciseDurationField27 = new org.joda.time.field.PreciseDurationField(durationFieldType25, 0L);
        boolean boolean28 = cachedDateTimeZone19.equals((java.lang.Object) 0L);
        boolean boolean30 = cachedDateTimeZone19.equals((java.lang.Object) 18110895568550L);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone31 = org.joda.time.tz.CachedDateTimeZone.forZone((org.joda.time.DateTimeZone) cachedDateTimeZone19);
        long long33 = cachedDateTimeZone31.nextTransition((-59028998263764L));
        org.joda.time.chrono.ZonedChronology zonedChronology34 = org.joda.time.chrono.ZonedChronology.getInstance(chronology10, (org.joda.time.DateTimeZone) cachedDateTimeZone31);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone39 = new org.joda.time.tz.FixedDateTimeZone("UTC", "", 0, 4);
        java.util.TimeZone timeZone40 = fixedDateTimeZone39.toTimeZone();
        java.lang.String str42 = fixedDateTimeZone39.getName(97L);
        int int44 = fixedDateTimeZone39.getOffsetFromLocal((-210858120000000L));
        long long46 = fixedDateTimeZone39.nextTransition(0L);
        int int48 = fixedDateTimeZone39.getOffset(2580171L);
        java.util.TimeZone timeZone49 = fixedDateTimeZone39.toTimeZone();
        int int51 = fixedDateTimeZone39.getStandardOffset(769L);
        org.joda.time.Chronology chronology52 = zonedChronology34.withZone((org.joda.time.DateTimeZone) fixedDateTimeZone39);
        org.joda.time.DateTimeField dateTimeField53 = zonedChronology34.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone54 = zonedChronology34.getZone();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(gregorianChronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(iSOChronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertNotNull(cachedDateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(cachedDateTimeZone31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-59028998263764L) + "'", long33 == (-59028998263764L));
        org.junit.Assert.assertNotNull(zonedChronology34);
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00" + "'", str42, "+00:00");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(timeZone49);
        org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 4 + "'", int51 == 4);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2479");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        long long24 = remainderDateTimeField22.roundHalfFloor(3600000L);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval26 = null;
        org.joda.time.ReadableInterval readableInterval27 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval26);
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval26);
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfCentury();
        org.joda.time.DurationField durationField30 = chronology28.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField31 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType25, durationField30);
        long long34 = unsupportedDateTimeField31.add((-31L), (long) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = unsupportedDateTimeField31.getType();
        org.joda.time.DurationFieldType durationFieldType36 = dateTimeFieldType35.getRangeDurationType();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField37 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField22, dateTimeFieldType35);
        org.joda.time.DurationField durationField38 = remainderDateTimeField22.iDurationField;
        org.joda.time.DurationField durationField39 = remainderDateTimeField22.iDurationField;
        int int40 = remainderDateTimeField22.iDivisor;
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField42 = new org.joda.time.field.OffsetDateTimeField((org.joda.time.DateTimeField) remainderDateTimeField22, (int) (short) 1);
        int int43 = remainderDateTimeField22.getDivisor();
        long long45 = remainderDateTimeField22.roundFloor((-296907L));
        // The following exception was thrown during execution in test generation
        try {
            long long48 = remainderDateTimeField22.set(816110831573633L, 16);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 16 for dayOfYear must be in the range [0,9]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(readableInterval27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 4L + "'", long34 == 4L);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-31536000000L) + "'", long45 == (-31536000000L));
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1920");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone5 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology6 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = gregorianChronology6.getZone();
        boolean boolean8 = dateTimeFieldType0.isSupported((org.joda.time.Chronology) gregorianChronology6);
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology6.hourOfHalfday();
        org.joda.time.Chronology chronology10 = gregorianChronology6.withUTC();
        org.joda.time.chrono.ISOChronology iSOChronology11 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField12 = iSOChronology11.minutes();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology15 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology11, dateTimeZone13);
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeZone13.getShortName(1L, locale17);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone19 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime20 = null;
        boolean boolean21 = cachedDateTimeZone19.isLocalDateTimeGap(localDateTime20);
        int int23 = cachedDateTimeZone19.getOffset(255193371L);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType25 = dateTimeFieldType24.getDurationType();
        org.joda.time.field.PreciseDurationField preciseDurationField27 = new org.joda.time.field.PreciseDurationField(durationFieldType25, 0L);
        boolean boolean28 = cachedDateTimeZone19.equals((java.lang.Object) 0L);
        boolean boolean30 = cachedDateTimeZone19.equals((java.lang.Object) 18110895568550L);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone31 = org.joda.time.tz.CachedDateTimeZone.forZone((org.joda.time.DateTimeZone) cachedDateTimeZone19);
        long long33 = cachedDateTimeZone31.nextTransition((-59028998263764L));
        org.joda.time.chrono.ZonedChronology zonedChronology34 = org.joda.time.chrono.ZonedChronology.getInstance(chronology10, (org.joda.time.DateTimeZone) cachedDateTimeZone31);
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology34.weekyearOfCentury();
        org.joda.time.ReadableInterval readableInterval36 = null;
        org.joda.time.ReadableInterval readableInterval37 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval36);
        org.joda.time.ReadableInterval readableInterval38 = null;
        boolean boolean39 = readableInterval37.contains(readableInterval38);
        org.joda.time.ReadableInterval readableInterval40 = null;
        boolean boolean41 = readableInterval37.isBefore(readableInterval40);
        org.joda.time.Interval interval42 = readableInterval37.toInterval();
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.PeriodType periodType44 = org.joda.time.DateTimeUtils.getPeriodType(periodType43);
        org.joda.time.PeriodType periodType45 = org.joda.time.DateTimeUtils.getPeriodType(periodType43);
        org.joda.time.Period period46 = readableInterval37.toPeriod(periodType45);
        int[] intArray48 = zonedChronology34.get((org.joda.time.ReadablePeriod) period46, 1701289191236L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(gregorianChronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(iSOChronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertNotNull(cachedDateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(cachedDateTimeZone31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-59028998263764L) + "'", long33 == (-59028998263764L));
        org.junit.Assert.assertNotNull(zonedChronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(readableInterval37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[0, 0, 2812, 6, 20, 19, 51, 236]");
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0398");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add((-31L), (long) '#');
        org.joda.time.DurationField durationField10 = unsupportedDateTimeField6.getLeapDurationField();
        int int13 = unsupportedDateTimeField6.getDifference((long) (byte) 10, 10L);
        long long16 = unsupportedDateTimeField6.add((long) 1439, (int) (byte) -1);
        boolean boolean17 = unsupportedDateTimeField6.isSupported();
        long long20 = unsupportedDateTimeField6.getDifferenceAsLong(0L, 28800001L);
        boolean boolean21 = unsupportedDateTimeField6.isSupported();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField23 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long26 = durationField23.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long28 = durationField23.getValueAsLong((long) 10);
        int int30 = durationField23.getValue((long) (byte) 10);
        boolean boolean31 = partial22.equals((java.lang.Object) durationField23);
        org.joda.time.Chronology chronology32 = partial22.getChronology();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        boolean boolean34 = partial22.isBefore((org.joda.time.ReadablePartial) partial33);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray35 = partial22.getFieldTypes();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField37 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long40 = durationField37.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long42 = durationField37.getValueAsLong((long) 10);
        int int44 = durationField37.getValue((long) (byte) 10);
        boolean boolean45 = partial36.equals((java.lang.Object) durationField37);
        org.joda.time.Chronology chronology46 = partial36.getChronology();
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        boolean boolean48 = partial36.isBefore((org.joda.time.ReadablePartial) partial47);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray49 = partial36.getFieldTypes();
        boolean boolean51 = partial36.equals((java.lang.Object) 1702281558665L);
        int int52 = partial22.compareTo((org.joda.time.ReadablePartial) partial36);
        java.util.Locale locale54 = null;
        java.lang.String str55 = partial36.toString("13", locale54);
        int[] intArray57 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray59 = unsupportedDateTimeField6.add((org.joda.time.ReadablePartial) partial36, 100, intArray57, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1438L + "'", long16 == 1438L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-28800001L) + "'", long20 == (-28800001L));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10L + "'", long28 == 10L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray35);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 10L + "'", long42 == 10L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "13" + "'", str55, "13");
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0652");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        org.joda.time.DurationField durationField7 = unsupportedDateTimeField6.getDurationField();
        boolean boolean8 = unsupportedDateTimeField6.isLenient();
        org.joda.time.DurationField durationField9 = unsupportedDateTimeField6.getRangeDurationField();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField11 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long14 = durationField11.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long16 = durationField11.getValueAsLong((long) 10);
        int int18 = durationField11.getValue((long) (byte) 10);
        boolean boolean19 = partial10.equals((java.lang.Object) durationField11);
        org.joda.time.Chronology chronology20 = partial10.getChronology();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        boolean boolean22 = partial10.isBefore((org.joda.time.ReadablePartial) partial21);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = partial10.getFieldTypes();
        boolean boolean25 = partial10.equals((java.lang.Object) 1702281558665L);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType27 = dateTimeFieldType26.getDurationType();
        boolean boolean28 = partial10.isSupported(dateTimeFieldType26);
        java.util.Locale locale30 = null;
        java.lang.String str31 = partial10.toString("[]", locale30);
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField34 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long37 = durationField34.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long39 = durationField34.getValueAsLong((long) 10);
        int int41 = durationField34.getValue((long) (byte) 10);
        boolean boolean42 = partial33.equals((java.lang.Object) durationField34);
        org.joda.time.Chronology chronology43 = partial33.getChronology();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        boolean boolean45 = partial33.isBefore((org.joda.time.ReadablePartial) partial44);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray46 = partial33.getFieldTypes();
        boolean boolean48 = partial33.equals((java.lang.Object) 1702281558665L);
        int[] intArray49 = partial33.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray51 = unsupportedDateTimeField6.addWrapPartial((org.joda.time.ReadablePartial) partial10, 0, intArray49, 1439);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(durationField9);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10L + "'", long16 == 10L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L + "'", long37 == 1L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 10L + "'", long39 == 10L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2531");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        long long24 = remainderDateTimeField22.roundHalfFloor(3600000L);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval26 = null;
        org.joda.time.ReadableInterval readableInterval27 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval26);
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval26);
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfCentury();
        org.joda.time.DurationField durationField30 = chronology28.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField31 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType25, durationField30);
        long long34 = unsupportedDateTimeField31.add((-31L), (long) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = unsupportedDateTimeField31.getType();
        org.joda.time.DurationFieldType durationFieldType36 = dateTimeFieldType35.getRangeDurationType();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField37 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField22, dateTimeFieldType35);
        org.joda.time.DurationField durationField38 = remainderDateTimeField22.iDurationField;
        org.joda.time.DurationField durationField39 = remainderDateTimeField22.iDurationField;
        int int40 = remainderDateTimeField22.iDivisor;
        java.lang.String str42 = remainderDateTimeField22.getAsText(183661330465L);
        int int43 = remainderDateTimeField22.getMinimumValue();
        int int44 = remainderDateTimeField22.getDivisor();
        int int45 = remainderDateTimeField22.getMaximumValue();
        org.joda.time.DurationField durationField46 = remainderDateTimeField22.getDurationField();
        org.joda.time.DurationField durationField47 = remainderDateTimeField22.getDurationField();
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(readableInterval27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 4L + "'", long34 == 4L);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "5" + "'", str42, "5");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(durationField47);
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2061");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField15 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long18 = durationField15.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long20 = durationField15.getValueAsLong((long) 10);
        int int22 = durationField15.getValue((long) (byte) 10);
        boolean boolean23 = partial14.equals((java.lang.Object) durationField15);
        boolean boolean24 = partial0.equals((java.lang.Object) durationField15);
        org.joda.time.DateTimeField[] dateTimeFieldArray25 = partial0.getFields();
        org.joda.time.chrono.ISOChronology iSOChronology26 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField27 = iSOChronology26.minutes();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology26.millisOfDay();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology26.halfdayOfDay();
        org.joda.time.DurationField durationField30 = iSOChronology26.seconds();
        org.joda.time.Chronology chronology31 = iSOChronology26.withUTC();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology26.yearOfCentury();
        org.joda.time.Partial partial33 = partial0.withChronologyRetainFields((org.joda.time.Chronology) iSOChronology26);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField35 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long38 = durationField35.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long40 = durationField35.getValueAsLong((long) 10);
        int int42 = durationField35.getValue((long) (byte) 10);
        boolean boolean43 = partial34.equals((java.lang.Object) durationField35);
        org.joda.time.Chronology chronology44 = partial34.getChronology();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        boolean boolean46 = partial34.isBefore((org.joda.time.ReadablePartial) partial45);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray47 = partial34.getFieldTypes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = partial34.getFormatter();
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = partial34.toDateTime(readableInstant49);
        int int51 = partial0.compareTo((org.joda.time.ReadablePartial) partial34);
        // The following exception was thrown during execution in test generation
        try {
            int int53 = partial0.getValue(254226);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 254226");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray25);
        org.junit.Assert.assertNotNull(iSOChronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10L + "'", long40 == 10L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray47);
        org.junit.Assert.assertNull(dateTimeFormatter48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1766");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = null;
        boolean boolean3 = readableInterval1.contains(readableInterval2);
        org.joda.time.ReadableInterval readableInterval4 = null;
        boolean boolean5 = readableInterval1.isBefore(readableInterval4);
        org.joda.time.DateTime dateTime6 = readableInterval1.getEnd();
        org.joda.time.MutableInterval mutableInterval7 = readableInterval1.toMutableInterval();
        org.joda.time.Interval interval8 = readableInterval1.toInterval();
        org.joda.time.MutableInterval mutableInterval9 = interval8.toMutableInterval();
        org.joda.time.Chronology chronology10 = mutableInterval9.getChronology();
        org.joda.time.ReadableInterval readableInterval11 = null;
        org.joda.time.ReadableInterval readableInterval12 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval11);
        org.joda.time.ReadableInterval readableInterval13 = null;
        boolean boolean14 = readableInterval12.contains(readableInterval13);
        org.joda.time.Duration duration15 = readableInterval12.toDuration();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.ReadableInterval readableInterval18 = null;
        boolean boolean19 = readableInterval17.contains(readableInterval18);
        org.joda.time.Duration duration20 = readableInterval17.toDuration();
        org.joda.time.DateTime dateTime21 = readableInterval17.getEnd();
        boolean boolean22 = readableInterval12.isBefore((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.ReadableInterval readableInterval23 = null;
        org.joda.time.ReadableInterval readableInterval24 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval23);
        long long25 = readableInterval24.getEndMillis();
        org.joda.time.chrono.ISOChronology iSOChronology26 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField27 = iSOChronology26.minutes();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str29 = dateTimeZone28.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology30 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology26, dateTimeZone28);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadableInterval readableInterval32 = null;
        org.joda.time.ReadableInterval readableInterval33 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval32);
        org.joda.time.ReadableInterval readableInterval34 = null;
        boolean boolean35 = readableInterval33.contains(readableInterval34);
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Period period37 = readableInterval33.toPeriod(periodType36);
        org.joda.time.DateTime dateTime38 = readableInterval33.getEnd();
        org.joda.time.Chronology chronology39 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant31, (org.joda.time.ReadableInstant) dateTime38);
        int int40 = dateTimeZone28.getOffset((org.joda.time.ReadableInstant) dateTime38);
        boolean boolean41 = readableInterval24.isAfter((org.joda.time.ReadableInstant) dateTime38);
        boolean boolean42 = readableInterval12.isAfter((org.joda.time.ReadableInstant) dateTime38);
        boolean boolean43 = mutableInterval9.isBefore((org.joda.time.ReadableInstant) dateTime38);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(readableInterval12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(readableInterval24);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-476134762239L) + "'", long25 == (-476134762239L));
        org.junit.Assert.assertNotNull(iSOChronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "UTC" + "'", str29, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology30);
        org.junit.Assert.assertNotNull(readableInterval33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1576");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField2 = iSOChronology1.minutes();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str4 = dateTimeZone3.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology5 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology1, dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = zonedChronology5.getZone();
        boolean boolean8 = zonedChronology5.equals((java.lang.Object) 4L);
        org.joda.time.DateTimeField dateTimeField9 = zonedChronology5.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField10 = zonedChronology5.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone11 = zonedChronology5.getZone();
        org.joda.time.DateTimeField dateTimeField12 = zonedChronology5.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology5.dayOfMonth();
        org.joda.time.DurationField durationField14 = zonedChronology5.years();
        org.joda.time.Chronology chronology15 = zonedChronology5.withUTC();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology5.weekOfWeekyear();
        org.joda.time.DurationField durationField17 = zonedChronology5.days();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval19 = null;
        org.joda.time.ReadableInterval readableInterval20 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval19);
        org.joda.time.Chronology chronology21 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval19);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.yearOfCentury();
        org.joda.time.DurationField durationField23 = chronology21.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField24 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType18, durationField23);
        long long27 = durationField23.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval29 = null;
        org.joda.time.ReadableInterval readableInterval30 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval29);
        org.joda.time.Chronology chronology31 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval29);
        org.joda.time.DateTimeField dateTimeField32 = chronology31.yearOfCentury();
        boolean boolean33 = durationFieldType28.isSupported(chronology31);
        org.joda.time.field.ScaledDurationField scaledDurationField35 = new org.joda.time.field.ScaledDurationField(durationField23, durationFieldType28, (int) 'a');
        org.joda.time.DurationField durationField36 = scaledDurationField35.getWrappedField();
        int int39 = scaledDurationField35.getDifference((long) (byte) -1, (long) (short) 0);
        org.joda.time.DurationFieldType durationFieldType40 = scaledDurationField35.getType();
        long long43 = scaledDurationField35.getMillis((-1), 30610224000100L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.field.PreciseDateTimeField preciseDateTimeField44 = new org.joda.time.field.PreciseDateTimeField(dateTimeFieldType0, durationField17, (org.joda.time.DurationField) scaledDurationField35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "UTC" + "'", str4, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(readableInterval20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-210866846400000L) + "'", long27 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(readableInterval30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-97L) + "'", long43 == (-97L));
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1875");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str1 = dateTimeZone0.toString();
        java.lang.String str3 = dateTimeZone0.getShortName((-210866846400000L));
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeUtils.getZone(dateTimeZone0);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone5 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone4);
        boolean boolean7 = cachedDateTimeZone5.equals((java.lang.Object) 432000032L);
        org.joda.time.LocalDateTime localDateTime8 = null;
        boolean boolean9 = cachedDateTimeZone5.isLocalDateTimeGap(localDateTime8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.ReadableInterval readableInterval11 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval10);
        org.joda.time.Chronology chronology12 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval10);
        org.joda.time.DateTimeField dateTimeField13 = chronology12.yearOfCentury();
        org.joda.time.DurationField durationField14 = chronology12.millis();
        org.joda.time.DurationField durationField15 = chronology12.centuries();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval22 = null;
        org.joda.time.ReadableInterval readableInterval23 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval22);
        org.joda.time.Chronology chronology24 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval22);
        org.joda.time.DateTimeField dateTimeField25 = chronology24.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval27 = null;
        org.joda.time.ReadableInterval readableInterval28 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval27);
        org.joda.time.ReadableInterval readableInterval29 = null;
        boolean boolean30 = readableInterval28.contains(readableInterval29);
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Period period32 = readableInterval28.toPeriod(periodType31);
        int[] intArray34 = chronology24.get((org.joda.time.ReadablePeriod) period32, (-210866846400000L));
        int[] intArray37 = chronology18.get((org.joda.time.ReadablePeriod) period32, 2173795348453L, (long) 1439);
        int[] intArray40 = chronology12.get((org.joda.time.ReadablePeriod) period32, 291L, 2580171L);
        org.joda.time.DurationField durationField41 = chronology12.halfdays();
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology12);
        boolean boolean43 = cachedDateTimeZone5.equals((java.lang.Object) chronology12);
        int int45 = cachedDateTimeZone5.getStandardOffset((long) 96);
        java.lang.Object obj46 = null;
        boolean boolean47 = cachedDateTimeZone5.equals(obj46);
        int int49 = cachedDateTimeZone5.getStandardOffset(1704096000000L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "UTC" + "'", str1, "UTC");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(cachedDateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(readableInterval11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(readableInterval23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(readableInterval28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1046");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        boolean boolean15 = partial0.equals((java.lang.Object) 1702281558665L);
        java.lang.String str16 = partial0.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = partial0.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.Partial partial19 = partial0.plus(readablePeriod18);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField21 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long24 = durationField21.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long26 = durationField21.getValueAsLong((long) 10);
        int int28 = durationField21.getValue((long) (byte) 10);
        boolean boolean29 = partial20.equals((java.lang.Object) durationField21);
        org.joda.time.Chronology chronology30 = partial20.getChronology();
        java.lang.String str31 = partial20.toString();
        boolean boolean32 = partial19.isAfter((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Partial partial33 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField35 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long38 = durationField35.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long40 = durationField35.getValueAsLong((long) 10);
        int int42 = durationField35.getValue((long) (byte) 10);
        boolean boolean43 = partial34.equals((java.lang.Object) durationField35);
        org.joda.time.Chronology chronology44 = partial34.getChronology();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        boolean boolean46 = partial34.isBefore((org.joda.time.ReadablePartial) partial45);
        org.joda.time.DateTimeField[] dateTimeFieldArray47 = partial45.getFields();
        org.joda.time.Chronology chronology48 = partial45.getChronology();
        boolean boolean49 = partial20.isEqual((org.joda.time.ReadablePartial) partial45);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.IllegalFieldValueException illegalFieldValueException54 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType50, (java.lang.Number) (-1454470839259L), (java.lang.Number) (-2580268L), (java.lang.Number) (-476134765767L));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial56 = partial45.withField(dateTimeFieldType50, 11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'yearOfEra' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[]" + "'", str16, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10L + "'", long26 == 10L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10L + "'", long40 == 10L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2234");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, (int) '4');
        long long16 = dividedDateTimeField11.remainder((-210858120422000L));
        java.lang.String str17 = dividedDateTimeField11.getName();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField19 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long22 = durationField19.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long24 = durationField19.getValueAsLong((long) 10);
        int int26 = durationField19.getValue((long) (byte) 10);
        boolean boolean27 = partial18.equals((java.lang.Object) durationField19);
        org.joda.time.Chronology chronology28 = partial18.getChronology();
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        boolean boolean30 = partial18.isBefore((org.joda.time.ReadablePartial) partial29);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray31 = partial18.getFieldTypes();
        boolean boolean33 = partial18.equals((java.lang.Object) 1702281558665L);
        java.lang.String str34 = partial18.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = partial18.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial37 = partial18.plus(readablePeriod36);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField39 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long42 = durationField39.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long44 = durationField39.getValueAsLong((long) 10);
        int int46 = durationField39.getValue((long) (byte) 10);
        boolean boolean47 = partial38.equals((java.lang.Object) durationField39);
        org.joda.time.Chronology chronology48 = partial38.getChronology();
        java.lang.String str49 = partial38.toString();
        boolean boolean50 = partial37.isAfter((org.joda.time.ReadablePartial) partial38);
        org.joda.time.Partial partial51 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial38);
        boolean boolean53 = partial51.equals((java.lang.Object) (short) -1);
        java.lang.String str54 = partial51.toString();
        int int55 = dividedDateTimeField11.getMaximumValue((org.joda.time.ReadablePartial) partial51);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-45757612800000L) + "'", long14 == (-45757612800000L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-124392110822000L) + "'", long16 == (-124392110822000L));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "centuryOfEra" + "'", str17, "centuryOfEra");
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10L + "'", long24 == 10L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[]" + "'", str34, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 10L + "'", long44 == 10L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[]" + "'", str49, "[]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[]" + "'", str54, "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 29227899 + "'", int55 == 29227899);
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1905");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add((-31L), (long) '#');
        org.joda.time.DurationField durationField10 = unsupportedDateTimeField6.getLeapDurationField();
        int int13 = unsupportedDateTimeField6.getDifference((long) (byte) 10, 10L);
        long long16 = unsupportedDateTimeField6.add((long) 1439, (int) (byte) -1);
        java.lang.String str17 = unsupportedDateTimeField6.toString();
        boolean boolean18 = unsupportedDateTimeField6.isSupported();
        long long21 = unsupportedDateTimeField6.getDifferenceAsLong((-210866846400000L), 0L);
        long long24 = unsupportedDateTimeField6.add((-476134572553L), (-476134763449L));
        org.joda.time.DurationField durationField25 = unsupportedDateTimeField6.getRangeDurationField();
        org.joda.time.chrono.ISOChronology iSOChronology26 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology26.secondOfDay();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology26.dayOfYear();
        org.joda.time.DurationField durationField29 = iSOChronology26.minutes();
        org.joda.time.DurationField durationField30 = iSOChronology26.seconds();
        org.joda.time.DurationField durationField31 = iSOChronology26.weeks();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology26.millisOfSecond();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField34 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long37 = durationField34.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long39 = durationField34.getValueAsLong((long) 10);
        int int41 = durationField34.getValue((long) (byte) 10);
        boolean boolean42 = partial33.equals((java.lang.Object) durationField34);
        org.joda.time.Chronology chronology43 = partial33.getChronology();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        boolean boolean45 = partial33.isBefore((org.joda.time.ReadablePartial) partial44);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray46 = partial33.getFieldTypes();
        boolean boolean48 = partial33.equals((java.lang.Object) 1702281558665L);
        java.lang.String str49 = partial33.toString();
        int[] intArray51 = iSOChronology26.get((org.joda.time.ReadablePartial) partial33, 9700L);
        // The following exception was thrown during execution in test generation
        try {
            int int52 = unsupportedDateTimeField6.getMaximumValue((org.joda.time.ReadablePartial) partial33);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1438L + "'", long16 == 1438L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UnsupportedDateTimeField" + "'", str17, "UnsupportedDateTimeField");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-210866846400000L) + "'", long21 == (-210866846400000L));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-952269336002L) + "'", long24 == (-952269336002L));
        org.junit.Assert.assertNull(durationField25);
        org.junit.Assert.assertNotNull(iSOChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L + "'", long37 == 1L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 10L + "'", long39 == 10L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[]" + "'", str49, "[]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1112");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add((-31L), (long) '#');
        org.joda.time.DurationField durationField10 = unsupportedDateTimeField6.getLeapDurationField();
        int int13 = unsupportedDateTimeField6.getDifference((long) (byte) 10, 10L);
        long long16 = unsupportedDateTimeField6.add((long) 1439, (int) (byte) -1);
        boolean boolean17 = unsupportedDateTimeField6.isSupported();
        long long20 = unsupportedDateTimeField6.getDifferenceAsLong(0L, 28800001L);
        long long23 = unsupportedDateTimeField6.add((long) (byte) 0, 53460006);
        java.lang.String str24 = unsupportedDateTimeField6.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.Partial partial27 = new org.joda.time.Partial(dateTimeFieldType25, 100);
        org.joda.time.chrono.ISOChronology iSOChronology28 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField29 = iSOChronology28.minutes();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology28.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology28.yearOfEra();
        org.joda.time.DurationField durationField32 = iSOChronology28.halfdays();
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval34 = null;
        org.joda.time.ReadableInterval readableInterval35 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval34);
        org.joda.time.Chronology chronology36 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval34);
        org.joda.time.DateTimeField dateTimeField37 = chronology36.yearOfCentury();
        org.joda.time.DurationField durationField38 = chronology36.millis();
        org.joda.time.DurationField durationField39 = chronology36.centuries();
        org.joda.time.Chronology chronology40 = chronology36.withUTC();
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        long long44 = chronology40.add(readablePeriod41, 0L, (int) (short) 10);
        org.joda.time.DateTimeField dateTimeField45 = chronology40.minuteOfHour();
        boolean boolean46 = durationFieldType33.isSupported(chronology40);
        org.joda.time.field.ScaledDurationField scaledDurationField48 = new org.joda.time.field.ScaledDurationField(durationField32, durationFieldType33, (-28800000));
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField49 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType25, (org.joda.time.DurationField) scaledDurationField48);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.field.OffsetDateTimeField offsetDateTimeField53 = new org.joda.time.field.OffsetDateTimeField((org.joda.time.DateTimeField) unsupportedDateTimeField6, dateTimeFieldType25, 0, (-465), (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field must be supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1438L + "'", long16 == 1438L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-28800001L) + "'", long20 == (-28800001L));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 53460006L + "'", long23 == 53460006L);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UnsupportedDateTimeField" + "'", str24, "UnsupportedDateTimeField");
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(iSOChronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertNotNull(readableInterval35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField49);
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1019");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        boolean boolean5 = durationFieldType0.isSupported(chronology3);
        org.joda.time.DurationField durationField6 = chronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.weekyearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField12 = new org.joda.time.field.OffsetDateTimeField(dateTimeField7, dateTimeFieldType8, 4, (int) ' ', (int) (short) -1);
        long long14 = offsetDateTimeField12.roundCeiling(2102400001L);
        int int15 = offsetDateTimeField12.getMinimumValue();
        boolean boolean17 = offsetDateTimeField12.isLeap(28800000L);
        long long19 = offsetDateTimeField12.roundFloor(2750411623L);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField21 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long24 = durationField21.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long26 = durationField21.getValueAsLong((long) 10);
        int int28 = durationField21.getValue((long) (byte) 10);
        boolean boolean29 = partial20.equals((java.lang.Object) durationField21);
        org.joda.time.Chronology chronology30 = partial20.getChronology();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        boolean boolean32 = partial20.isBefore((org.joda.time.ReadablePartial) partial31);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray33 = partial20.getFieldTypes();
        boolean boolean35 = partial20.equals((java.lang.Object) 1702281558665L);
        java.lang.String str36 = partial20.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = partial20.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial39 = partial20.plus(readablePeriod38);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField41 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long44 = durationField41.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long46 = durationField41.getValueAsLong((long) 10);
        int int48 = durationField41.getValue((long) (byte) 10);
        boolean boolean49 = partial40.equals((java.lang.Object) durationField41);
        org.joda.time.Chronology chronology50 = partial40.getChronology();
        java.lang.String str51 = partial40.toString();
        boolean boolean52 = partial39.isAfter((org.joda.time.ReadablePartial) partial40);
        java.lang.String str53 = partial39.toStringList();
        java.util.Locale locale55 = null;
        java.lang.String str56 = offsetDateTimeField12.getAsShortText((org.joda.time.ReadablePartial) partial39, 199, locale55);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 31535999993L + "'", long14 == 31535999993L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 32 + "'", int15 == 32);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-7L) + "'", long19 == (-7L));
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10L + "'", long26 == 10L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter37);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10L + "'", long46 == 10L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[]" + "'", str51, "[]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[]" + "'", str53, "[]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "199" + "'", str56, "199");
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2435");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = zonedChronology4.getZone();
        boolean boolean7 = zonedChronology4.equals((java.lang.Object) 4L);
        org.joda.time.DateTimeField dateTimeField8 = zonedChronology4.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField9 = zonedChronology4.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone10 = zonedChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField11 = zonedChronology4.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = zonedChronology4.weekOfWeekyear();
        org.joda.time.ReadableInterval readableInterval13 = null;
        org.joda.time.ReadableInterval readableInterval14 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval13);
        org.joda.time.Chronology chronology15 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval13);
        org.joda.time.DateTimeField dateTimeField16 = chronology15.yearOfCentury();
        org.joda.time.DurationField durationField17 = chronology15.millis();
        org.joda.time.DurationField durationField18 = chronology15.centuries();
        org.joda.time.DateTimeZone dateTimeZone19 = chronology15.getZone();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str21 = dateTimeZone20.toString();
        java.lang.String str23 = dateTimeZone20.getShortName((-210866846400000L));
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeUtils.getZone(dateTimeZone20);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone25 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone24);
        long long27 = dateTimeZone19.getMillisKeepLocal((org.joda.time.DateTimeZone) cachedDateTimeZone25, 60035L);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone32 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        int int34 = fixedDateTimeZone32.getStandardOffset((long) 1439);
        boolean boolean35 = fixedDateTimeZone32.isFixed();
        long long37 = fixedDateTimeZone32.nextTransition((long) 24);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        long long41 = dateTimeZone38.adjustOffset((long) 100, true);
        long long43 = fixedDateTimeZone32.getMillisKeepLocal(dateTimeZone38, 10L);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.UTC;
        int int46 = dateTimeZone44.getStandardOffset((long) 1);
        long long48 = dateTimeZone38.getMillisKeepLocal(dateTimeZone44, 5L);
        long long50 = dateTimeZone19.getMillisKeepLocal(dateTimeZone44, 53459998L);
        org.joda.time.Chronology chronology51 = zonedChronology4.withZone(dateTimeZone44);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray54 = zonedChronology4.get(readablePeriod52, (long) 196);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(readableInterval14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(cachedDateTimeZone25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 60035L + "'", long27 == 60035L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 24L + "'", long37 == 24L);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 100L + "'", long41 == 100L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 10L + "'", long43 == 10L);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 5L + "'", long48 == 5L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 53459998L + "'", long50 == 53459998L);
        org.junit.Assert.assertNotNull(chronology51);
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2474");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField15 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long18 = durationField15.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long20 = durationField15.getValueAsLong((long) 10);
        int int22 = durationField15.getValue((long) (byte) 10);
        boolean boolean23 = partial14.equals((java.lang.Object) durationField15);
        boolean boolean24 = partial0.equals((java.lang.Object) durationField15);
        org.joda.time.ReadableInterval readableInterval25 = null;
        org.joda.time.ReadableInterval readableInterval26 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval25);
        org.joda.time.ReadableInterval readableInterval27 = null;
        boolean boolean28 = readableInterval26.contains(readableInterval27);
        org.joda.time.Duration duration29 = readableInterval26.toDuration();
        org.joda.time.ReadableInterval readableInterval30 = null;
        org.joda.time.ReadableInterval readableInterval31 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval30);
        org.joda.time.ReadableInterval readableInterval32 = null;
        boolean boolean33 = readableInterval31.contains(readableInterval32);
        org.joda.time.Duration duration34 = readableInterval31.toDuration();
        org.joda.time.DateTime dateTime35 = readableInterval31.getEnd();
        boolean boolean36 = readableInterval26.isBefore((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime dateTime37 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField39 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long42 = durationField39.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long44 = durationField39.getValueAsLong((long) 10);
        int int46 = durationField39.getValue((long) (byte) 10);
        boolean boolean47 = partial38.equals((java.lang.Object) durationField39);
        org.joda.time.Chronology chronology48 = partial38.getChronology();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial38.isBefore((org.joda.time.ReadablePartial) partial49);
        boolean boolean51 = partial0.isBefore((org.joda.time.ReadablePartial) partial49);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType53 = partial49.getFieldType((-1669753266));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1669753266");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(readableInterval26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(readableInterval31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 10L + "'", long44 == 10L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3079");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str1 = dateTimeZone0.toString();
        java.lang.String str3 = dateTimeZone0.getShortName((-210866846400000L));
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeUtils.getZone(dateTimeZone0);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone5 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone4);
        long long7 = cachedDateTimeZone5.previousTransition(1758458159332803L);
        java.lang.String str9 = cachedDateTimeZone5.getShortName(183661330465L);
        long long12 = cachedDateTimeZone5.convertLocalToUTC(2580171L, false);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval14 = null;
        org.joda.time.ReadableInterval readableInterval15 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval14);
        org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval14);
        org.joda.time.DateTimeField dateTimeField17 = chronology16.yearOfCentury();
        org.joda.time.DurationField durationField18 = chronology16.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField19 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType13, durationField18);
        long long22 = durationField18.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.Chronology chronology26 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval24);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfCentury();
        boolean boolean28 = durationFieldType23.isSupported(chronology26);
        org.joda.time.field.ScaledDurationField scaledDurationField30 = new org.joda.time.field.ScaledDurationField(durationField18, durationFieldType23, (int) 'a');
        long long31 = scaledDurationField30.getUnitMillis();
        org.joda.time.DurationFieldType durationFieldType32 = scaledDurationField30.getType();
        int int34 = scaledDurationField30.getValue((long) '4');
        long long35 = scaledDurationField30.getUnitMillis();
        long long37 = scaledDurationField30.getValueAsLong(1701289172564L);
        boolean boolean38 = cachedDateTimeZone5.equals((java.lang.Object) 1701289172564L);
        java.util.Locale locale40 = null;
        java.lang.String str41 = cachedDateTimeZone5.getName(946713600000L, locale40);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone46 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology47 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone46);
        org.joda.time.DateTimeZone dateTimeZone48 = gregorianChronology47.getZone();
        org.joda.time.DateTimeZone dateTimeZone49 = gregorianChronology47.getZone();
        long long51 = cachedDateTimeZone5.getMillisKeepLocal(dateTimeZone49, 1641255540000L);
        long long53 = dateTimeZone49.convertUTCToLocal(1683808134545L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "UTC" + "'", str1, "UTC");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(cachedDateTimeZone5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1758458159332803L + "'", long7 == 1758458159332803L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 2580171L + "'", long12 == 2580171L);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(readableInterval15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-210866846400000L) + "'", long22 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 97L + "'", long31 == 97L);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 97L + "'", long35 == 97L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 17539063634L + "'", long37 == 17539063634L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
        org.junit.Assert.assertNotNull(gregorianChronology47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1641255540000L + "'", long51 == 1641255540000L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1683808134545L + "'", long53 == 1683808134545L);
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2957");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfWeek();
        java.lang.String str1 = dateTimeFieldType0.getName();
        org.joda.time.IllegalFieldValueException illegalFieldValueException3 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType0, "-08:00");
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval5 = null;
        org.joda.time.ReadableInterval readableInterval6 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval5);
        org.joda.time.Chronology chronology7 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval5);
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfCentury();
        org.joda.time.DurationField durationField9 = chronology7.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField10 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType4, durationField9);
        long long13 = durationField9.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.ReadableInterval readableInterval16 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval15);
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        boolean boolean19 = durationFieldType14.isSupported(chronology17);
        org.joda.time.field.ScaledDurationField scaledDurationField21 = new org.joda.time.field.ScaledDurationField(durationField9, durationFieldType14, (int) 'a');
        int int23 = scaledDurationField21.getValue((long) (short) -1);
        boolean boolean24 = scaledDurationField21.isSupported();
        long long27 = scaledDurationField21.getDifferenceAsLong(28800001L, (-210858120000000L));
        java.lang.String str28 = scaledDurationField21.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType30 = dateTimeFieldType29.getDurationType();
        org.joda.time.field.PreciseDurationField preciseDurationField32 = new org.joda.time.field.PreciseDurationField(durationFieldType30, 28354819L);
        long long33 = preciseDurationField32.getUnitMillis();
        boolean boolean34 = preciseDurationField32.isPrecise();
        long long37 = preciseDurationField32.getValueAsLong((long) 719, 306607L);
        org.joda.time.field.PreciseDateTimeField preciseDateTimeField38 = new org.joda.time.field.PreciseDateTimeField(dateTimeFieldType0, (org.joda.time.DurationField) scaledDurationField21, (org.joda.time.DurationField) preciseDurationField32);
        org.joda.time.DurationField durationField39 = preciseDateTimeField38.getDurationField();
        long long42 = preciseDateTimeField38.set(0L, (int) (byte) 0);
        long long45 = preciseDateTimeField38.set(52520177280000L, 11);
        int int47 = preciseDateTimeField38.get(0L);
        int int48 = preciseDateTimeField38.getRange();
        boolean boolean49 = preciseDateTimeField38.isLenient();
        boolean boolean50 = preciseDateTimeField38.isSupported();
        int int51 = preciseDateTimeField38.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "dayOfWeek" + "'", str1, "dayOfWeek");
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(readableInterval6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-210866846400000L) + "'", long13 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(readableInterval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 2173795348453L + "'", long27 == 2173795348453L);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "DurationField[hours]" + "'", str28, "DurationField[hours]");
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 28354819L + "'", long33 == 28354819L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 52520168900655L + "'", long45 == 52520168900655L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 292317 + "'", int48 == 292317);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0364");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        long long16 = dividedDateTimeField11.roundFloor(291L);
        int int19 = dividedDateTimeField11.getDifference((long) (byte) 10, 2102400001L);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField21 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long24 = durationField21.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long26 = durationField21.getValueAsLong((long) 10);
        int int28 = durationField21.getValue((long) (byte) 10);
        boolean boolean29 = partial20.equals((java.lang.Object) durationField21);
        org.joda.time.Chronology chronology30 = partial20.getChronology();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        boolean boolean32 = partial20.isBefore((org.joda.time.ReadablePartial) partial31);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray33 = partial20.getFieldTypes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = partial20.getFormatter();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField36 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long39 = durationField36.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long41 = durationField36.getValueAsLong((long) 10);
        int int43 = durationField36.getValue((long) (byte) 10);
        boolean boolean44 = partial35.equals((java.lang.Object) durationField36);
        org.joda.time.Chronology chronology45 = partial35.getChronology();
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        boolean boolean47 = partial35.isBefore((org.joda.time.ReadablePartial) partial46);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray48 = partial35.getFieldTypes();
        boolean boolean50 = partial35.equals((java.lang.Object) 1702281558665L);
        java.lang.String str51 = partial35.toString();
        org.joda.time.Chronology chronology52 = partial35.getChronology();
        int int53 = partial20.compareTo((org.joda.time.ReadablePartial) partial35);
        int[] intArray55 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray57 = dividedDateTimeField11.addWrapField((org.joda.time.ReadablePartial) partial20, 0, intArray55, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10L + "'", long26 == 10L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray33);
        org.junit.Assert.assertNull(dateTimeFormatter34);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 10L + "'", long41 == 10L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[]" + "'", str51, "[]");
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1002");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.Chronology chronology3 = iSOChronology0.withZone(dateTimeZone1);
        org.joda.time.chrono.ISOChronology iSOChronology4 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField5 = iSOChronology4.minutes();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology4.millisOfDay();
        org.joda.time.ReadableInterval readableInterval7 = null;
        org.joda.time.ReadableInterval readableInterval8 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval7);
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval7);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.yearOfCentury();
        org.joda.time.DurationField durationField11 = chronology9.millis();
        org.joda.time.DurationField durationField12 = chronology9.centuries();
        org.joda.time.ReadableInterval readableInterval13 = null;
        org.joda.time.ReadableInterval readableInterval14 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval13);
        org.joda.time.Chronology chronology15 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval13);
        org.joda.time.DateTimeField dateTimeField16 = chronology15.yearOfCentury();
        org.joda.time.DurationField durationField17 = chronology15.millis();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval19 = null;
        org.joda.time.ReadableInterval readableInterval20 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval19);
        org.joda.time.Chronology chronology21 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval19);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.ReadableInterval readableInterval26 = null;
        boolean boolean27 = readableInterval25.contains(readableInterval26);
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Period period29 = readableInterval25.toPeriod(periodType28);
        int[] intArray31 = chronology21.get((org.joda.time.ReadablePeriod) period29, (-210866846400000L));
        int[] intArray34 = chronology15.get((org.joda.time.ReadablePeriod) period29, 2173795348453L, (long) 1439);
        int[] intArray37 = chronology9.get((org.joda.time.ReadablePeriod) period29, 291L, 2580171L);
        int[] intArray40 = iSOChronology4.get((org.joda.time.ReadablePeriod) period29, (-30610224000000L), 291L);
        int[] intArray42 = iSOChronology0.get((org.joda.time.ReadablePeriod) period29, 35L);
        org.joda.time.DateTimeField dateTimeField43 = iSOChronology0.clockhourOfDay();
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray46 = iSOChronology0.get(readablePeriod44, (long) 6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTC" + "'", str2, "UTC");
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(iSOChronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(readableInterval8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(readableInterval14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(readableInterval20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(intArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 0, 0, 0, 0, 0, 0, 35]");
        org.junit.Assert.assertNotNull(dateTimeField43);
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2174");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.halfdayOfDay();
        org.joda.time.DurationField durationField4 = iSOChronology0.seconds();
        org.joda.time.DurationField durationField5 = iSOChronology0.days();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.yearOfCentury();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField8 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long11 = durationField8.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long13 = durationField8.getValueAsLong((long) 10);
        int int15 = durationField8.getValue((long) (byte) 10);
        boolean boolean16 = partial7.equals((java.lang.Object) durationField8);
        org.joda.time.Chronology chronology17 = partial7.getChronology();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial7.isBefore((org.joda.time.ReadablePartial) partial18);
        java.lang.String str20 = partial7.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType22 = dateTimeFieldType21.getDurationType();
        org.joda.time.Partial partial23 = partial7.without(dateTimeFieldType21);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone28 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology29 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone28);
        org.joda.time.ReadableInterval readableInterval30 = null;
        org.joda.time.ReadableInterval readableInterval31 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval30);
        org.joda.time.Chronology chronology32 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval30);
        org.joda.time.DateTimeField dateTimeField33 = chronology32.yearOfCentury();
        org.joda.time.DurationField durationField34 = chronology32.minutes();
        org.joda.time.DurationField durationField35 = chronology32.halfdays();
        org.joda.time.DurationField durationField36 = chronology32.weeks();
        org.joda.time.DateTimeField dateTimeField37 = chronology32.millisOfDay();
        boolean boolean38 = gregorianChronology29.equals((java.lang.Object) chronology32);
        boolean boolean39 = partial7.equals((java.lang.Object) boolean38);
        java.util.Locale locale41 = null;
        java.lang.String str42 = dateTimeField6.getAsShortText((org.joda.time.ReadablePartial) partial7, (int) ' ', locale41);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.hourOfDay();
        java.lang.String str44 = dateTimeFieldType43.getName();
        int int45 = partial7.indexOf(dateTimeFieldType43);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = partial7.toDateTime(readableInstant46);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField49 = partial7.getField(297);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 297");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(gregorianChronology29);
        org.junit.Assert.assertNotNull(readableInterval31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "32" + "'", str42, "32");
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hourOfDay" + "'", str44, "hourOfDay");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(dateTime47);
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0627");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = partial0.getFormatter();
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField16 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long19 = durationField16.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long21 = durationField16.getValueAsLong((long) 10);
        int int23 = durationField16.getValue((long) (byte) 10);
        boolean boolean24 = partial15.equals((java.lang.Object) durationField16);
        org.joda.time.Chronology chronology25 = partial15.getChronology();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial15.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = partial15.getFieldTypes();
        boolean boolean30 = partial15.equals((java.lang.Object) 1702281558665L);
        java.lang.String str31 = partial15.toString();
        org.joda.time.Chronology chronology32 = partial15.getChronology();
        int int33 = partial0.compareTo((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField35 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long38 = durationField35.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long40 = durationField35.getValueAsLong((long) 10);
        int int42 = durationField35.getValue((long) (byte) 10);
        boolean boolean43 = partial34.equals((java.lang.Object) durationField35);
        org.joda.time.Chronology chronology44 = partial34.getChronology();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        boolean boolean46 = partial34.isBefore((org.joda.time.ReadablePartial) partial45);
        java.lang.String str47 = partial34.toString();
        java.lang.String str48 = partial34.toString();
        boolean boolean49 = partial0.isMatch((org.joda.time.ReadablePartial) partial34);
        int int50 = partial34.size();
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.weeks();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial53 = partial34.withFieldAdded(durationFieldType51, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weeks' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10L + "'", long21 == 10L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10L + "'", long40 == 10L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[]" + "'", str47, "[]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[]" + "'", str48, "[]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(durationFieldType51);
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2312");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField15 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long18 = durationField15.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long20 = durationField15.getValueAsLong((long) 10);
        int int22 = durationField15.getValue((long) (byte) 10);
        boolean boolean23 = partial14.equals((java.lang.Object) durationField15);
        boolean boolean24 = partial0.equals((java.lang.Object) durationField15);
        org.joda.time.ReadableInterval readableInterval25 = null;
        org.joda.time.ReadableInterval readableInterval26 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval25);
        org.joda.time.ReadableInterval readableInterval27 = null;
        boolean boolean28 = readableInterval26.contains(readableInterval27);
        org.joda.time.Duration duration29 = readableInterval26.toDuration();
        org.joda.time.ReadableInterval readableInterval30 = null;
        org.joda.time.ReadableInterval readableInterval31 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval30);
        org.joda.time.ReadableInterval readableInterval32 = null;
        boolean boolean33 = readableInterval31.contains(readableInterval32);
        org.joda.time.Duration duration34 = readableInterval31.toDuration();
        org.joda.time.DateTime dateTime35 = readableInterval31.getEnd();
        boolean boolean36 = readableInterval26.isBefore((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime dateTime37 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField39 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long42 = durationField39.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long44 = durationField39.getValueAsLong((long) 10);
        int int46 = durationField39.getValue((long) (byte) 10);
        boolean boolean47 = partial38.equals((java.lang.Object) durationField39);
        org.joda.time.Chronology chronology48 = partial38.getChronology();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial38.isBefore((org.joda.time.ReadablePartial) partial49);
        boolean boolean51 = partial0.isBefore((org.joda.time.ReadablePartial) partial49);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType53 = partial0.getFieldType(970);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 970");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(readableInterval26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(readableInterval31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 10L + "'", long44 == 10L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3001");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval3);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DurationField durationField7 = chronology5.millis();
        org.joda.time.DurationField durationField8 = chronology5.centuries();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval9);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology11.millis();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.ReadableInterval readableInterval16 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval15);
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.ReadableInterval readableInterval21 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval20);
        org.joda.time.ReadableInterval readableInterval22 = null;
        boolean boolean23 = readableInterval21.contains(readableInterval22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = readableInterval21.toPeriod(periodType24);
        int[] intArray27 = chronology17.get((org.joda.time.ReadablePeriod) period25, (-210866846400000L));
        int[] intArray30 = chronology11.get((org.joda.time.ReadablePeriod) period25, 2173795348453L, (long) 1439);
        int[] intArray33 = chronology5.get((org.joda.time.ReadablePeriod) period25, 291L, 2580171L);
        int[] intArray36 = iSOChronology0.get((org.joda.time.ReadablePeriod) period25, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField37 = iSOChronology0.months();
        java.lang.String str38 = iSOChronology0.toString();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = iSOChronology0.equals((java.lang.Object) partial39);
        org.joda.time.DateTimeField dateTimeField41 = iSOChronology0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology0.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone43 = iSOChronology0.getZone();
        long long46 = dateTimeZone43.adjustOffset(31536000000L, false);
        long long49 = dateTimeZone43.adjustOffset(4347186L, false);
        long long52 = dateTimeZone43.convertLocalToUTC(28800071L, true);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(readableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(readableInterval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(readableInterval21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(intArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(durationField37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[73]" + "'", str38, "ISOChronology[73]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 31536000000L + "'", long46 == 31536000000L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 4347186L + "'", long49 == 4347186L);
// flaky:         org.junit.Assert.assertTrue("'" + long52 + "' != '" + 28800062L + "'", long52 == 28800062L);
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0218");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval3);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DurationField durationField7 = chronology5.millis();
        org.joda.time.DurationField durationField8 = chronology5.centuries();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval9);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology11.millis();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.ReadableInterval readableInterval16 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval15);
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.ReadableInterval readableInterval21 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval20);
        org.joda.time.ReadableInterval readableInterval22 = null;
        boolean boolean23 = readableInterval21.contains(readableInterval22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = readableInterval21.toPeriod(periodType24);
        int[] intArray27 = chronology17.get((org.joda.time.ReadablePeriod) period25, (-210866846400000L));
        int[] intArray30 = chronology11.get((org.joda.time.ReadablePeriod) period25, 2173795348453L, (long) 1439);
        int[] intArray33 = chronology5.get((org.joda.time.ReadablePeriod) period25, 291L, 2580171L);
        int[] intArray36 = iSOChronology0.get((org.joda.time.ReadablePeriod) period25, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField37 = iSOChronology0.months();
        java.lang.String str38 = iSOChronology0.toString();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = iSOChronology0.equals((java.lang.Object) partial39);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.IllegalFieldValueException illegalFieldValueException44 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType41, (java.lang.Number) 60035L, "");
        org.joda.time.DurationFieldType durationFieldType45 = dateTimeFieldType41.getDurationType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial47 = partial39.withFieldAdded(durationFieldType45, 8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'hours' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(readableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(readableInterval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(readableInterval21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, 0, 0, -58574124, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[969, 11, 4, 2, 23, 52, 58, 291]");
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[America/Los_Angeles]" + "'", str38, "ISOChronology[America/Los_Angeles]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(durationFieldType45);
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2623");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = zonedChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField6 = zonedChronology4.monthOfYear();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField8 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long11 = durationField8.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long13 = durationField8.getValueAsLong((long) 10);
        int int15 = durationField8.getValue((long) (byte) 10);
        boolean boolean16 = partial7.equals((java.lang.Object) durationField8);
        org.joda.time.Chronology chronology17 = partial7.getChronology();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial7.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial7.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.ReadableInterval readableInterval22 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval21);
        long long23 = readableInterval22.getStartMillis();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.ReadableInterval readableInterval26 = null;
        boolean boolean27 = readableInterval25.contains(readableInterval26);
        org.joda.time.Duration duration28 = readableInterval25.toDuration();
        org.joda.time.DateTime dateTime29 = readableInterval25.getEnd();
        boolean boolean30 = readableInterval22.contains((org.joda.time.ReadableInstant) dateTime29);
        boolean boolean31 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime29);
        int[] intArray33 = zonedChronology4.get((org.joda.time.ReadablePartial) partial7, 60035L);
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology4.secondOfMinute();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone39 = new org.joda.time.tz.FixedDateTimeZone("UTC", "", 0, 4);
        java.util.TimeZone timeZone40 = fixedDateTimeZone39.toTimeZone();
        java.lang.String str42 = fixedDateTimeZone39.getName(97L);
        int int44 = fixedDateTimeZone39.getOffsetFromLocal((-210858120000000L));
        long long46 = fixedDateTimeZone39.nextTransition(0L);
        int int48 = fixedDateTimeZone39.getOffset(2580171L);
        org.joda.time.chrono.ZonedChronology zonedChronology49 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) zonedChronology4, (org.joda.time.DateTimeZone) fixedDateTimeZone39);
        org.joda.time.DateTimeField dateTimeField50 = zonedChronology4.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone51 = zonedChronology4.getZone();
        long long55 = zonedChronology4.add(2440588L, 1703967980957L, 560);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(readableInterval22);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-210861660779418L) + "'", long23 == (-210861660779418L));
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00" + "'", str42, "+00:00");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(zonedChronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 954222071776508L + "'", long55 == 954222071776508L);
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0381");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = zonedChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField6 = zonedChronology4.monthOfYear();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField8 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long11 = durationField8.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long13 = durationField8.getValueAsLong((long) 10);
        int int15 = durationField8.getValue((long) (byte) 10);
        boolean boolean16 = partial7.equals((java.lang.Object) durationField8);
        org.joda.time.Chronology chronology17 = partial7.getChronology();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial7.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial7.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.ReadableInterval readableInterval22 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval21);
        long long23 = readableInterval22.getStartMillis();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.ReadableInterval readableInterval26 = null;
        boolean boolean27 = readableInterval25.contains(readableInterval26);
        org.joda.time.Duration duration28 = readableInterval25.toDuration();
        org.joda.time.DateTime dateTime29 = readableInterval25.getEnd();
        boolean boolean30 = readableInterval22.contains((org.joda.time.ReadableInstant) dateTime29);
        boolean boolean31 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime29);
        int[] intArray33 = zonedChronology4.get((org.joda.time.ReadablePartial) partial7, 60035L);
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology4.secondOfMinute();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone39 = new org.joda.time.tz.FixedDateTimeZone("UTC", "", 0, 4);
        java.util.TimeZone timeZone40 = fixedDateTimeZone39.toTimeZone();
        java.lang.String str42 = fixedDateTimeZone39.getName(97L);
        int int44 = fixedDateTimeZone39.getOffsetFromLocal((-210858120000000L));
        long long46 = fixedDateTimeZone39.nextTransition(0L);
        int int48 = fixedDateTimeZone39.getOffset(2580171L);
        org.joda.time.chrono.ZonedChronology zonedChronology49 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) zonedChronology4, (org.joda.time.DateTimeZone) fixedDateTimeZone39);
        // The following exception was thrown during execution in test generation
        try {
            long long54 = zonedChronology49.getDateTimeMillis(8, 53460006, (int) 'a', (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53460006 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(readableInterval22);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-476134764460L) + "'", long23 == (-476134764460L));
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00" + "'", str42, "+00:00");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(zonedChronology49);
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1330");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = zonedChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField6 = zonedChronology4.monthOfYear();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField8 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long11 = durationField8.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long13 = durationField8.getValueAsLong((long) 10);
        int int15 = durationField8.getValue((long) (byte) 10);
        boolean boolean16 = partial7.equals((java.lang.Object) durationField8);
        org.joda.time.Chronology chronology17 = partial7.getChronology();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial7.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial7.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.ReadableInterval readableInterval22 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval21);
        long long23 = readableInterval22.getStartMillis();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.ReadableInterval readableInterval26 = null;
        boolean boolean27 = readableInterval25.contains(readableInterval26);
        org.joda.time.Duration duration28 = readableInterval25.toDuration();
        org.joda.time.DateTime dateTime29 = readableInterval25.getEnd();
        boolean boolean30 = readableInterval22.contains((org.joda.time.ReadableInstant) dateTime29);
        boolean boolean31 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime29);
        int[] intArray33 = zonedChronology4.get((org.joda.time.ReadablePartial) partial7, 60035L);
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology4.centuryOfEra();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField36 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long39 = durationField36.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long41 = durationField36.getValueAsLong((long) 10);
        int int43 = durationField36.getValue((long) (byte) 10);
        boolean boolean44 = partial35.equals((java.lang.Object) durationField36);
        org.joda.time.Chronology chronology45 = partial35.getChronology();
        int[] intArray47 = zonedChronology4.get((org.joda.time.ReadablePartial) partial35, 291L);
        // The following exception was thrown during execution in test generation
        try {
            long long52 = zonedChronology4.getDateTimeMillis(2, 0, 53460005, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(readableInterval22);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 315639019277L + "'", long23 == 315639019277L);
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 10L + "'", long41 == 10L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0417");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField8 = iSOChronology7.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str10 = dateTimeZone9.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology11 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology7, dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone12 = zonedChronology11.getZone();
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology11.monthOfYear();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField15 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long18 = durationField15.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long20 = durationField15.getValueAsLong((long) 10);
        int int22 = durationField15.getValue((long) (byte) 10);
        boolean boolean23 = partial14.equals((java.lang.Object) durationField15);
        org.joda.time.Chronology chronology24 = partial14.getChronology();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial14.isBefore((org.joda.time.ReadablePartial) partial25);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = partial14.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval28 = null;
        org.joda.time.ReadableInterval readableInterval29 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval28);
        long long30 = readableInterval29.getStartMillis();
        org.joda.time.ReadableInterval readableInterval31 = null;
        org.joda.time.ReadableInterval readableInterval32 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval31);
        org.joda.time.ReadableInterval readableInterval33 = null;
        boolean boolean34 = readableInterval32.contains(readableInterval33);
        org.joda.time.Duration duration35 = readableInterval32.toDuration();
        org.joda.time.DateTime dateTime36 = readableInterval32.getEnd();
        boolean boolean37 = readableInterval29.contains((org.joda.time.ReadableInstant) dateTime36);
        boolean boolean38 = partial14.isMatch((org.joda.time.ReadableInstant) dateTime36);
        int[] intArray40 = zonedChronology11.get((org.joda.time.ReadablePartial) partial14, 60035L);
        int[] intArray41 = partial14.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int int42 = unsupportedDateTimeField6.getMaximumValue((org.joda.time.ReadablePartial) partial14);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(readableInterval29);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-476134759119L) + "'", long30 == (-476134759119L));
        org.junit.Assert.assertNotNull(readableInterval32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0906");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = zonedChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField6 = zonedChronology4.monthOfYear();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField8 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long11 = durationField8.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long13 = durationField8.getValueAsLong((long) 10);
        int int15 = durationField8.getValue((long) (byte) 10);
        boolean boolean16 = partial7.equals((java.lang.Object) durationField8);
        org.joda.time.Chronology chronology17 = partial7.getChronology();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial7.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial7.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.ReadableInterval readableInterval22 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval21);
        long long23 = readableInterval22.getStartMillis();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.ReadableInterval readableInterval26 = null;
        boolean boolean27 = readableInterval25.contains(readableInterval26);
        org.joda.time.Duration duration28 = readableInterval25.toDuration();
        org.joda.time.DateTime dateTime29 = readableInterval25.getEnd();
        boolean boolean30 = readableInterval22.contains((org.joda.time.ReadableInstant) dateTime29);
        boolean boolean31 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime29);
        int[] intArray33 = zonedChronology4.get((org.joda.time.ReadablePartial) partial7, 60035L);
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology4.secondOfMinute();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone39 = new org.joda.time.tz.FixedDateTimeZone("UTC", "", 0, 4);
        java.util.TimeZone timeZone40 = fixedDateTimeZone39.toTimeZone();
        java.lang.String str42 = fixedDateTimeZone39.getName(97L);
        int int44 = fixedDateTimeZone39.getOffsetFromLocal((-210858120000000L));
        long long46 = fixedDateTimeZone39.nextTransition(0L);
        int int48 = fixedDateTimeZone39.getOffset(2580171L);
        org.joda.time.chrono.ZonedChronology zonedChronology49 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) zonedChronology4, (org.joda.time.DateTimeZone) fixedDateTimeZone39);
        // The following exception was thrown during execution in test generation
        try {
            long long55 = zonedChronology49.getDateTimeMillis((long) 7, 53460006, 0, 197, (-28800000));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53460006 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(readableInterval22);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 31536000000L + "'", long23 == 31536000000L);
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00" + "'", str42, "+00:00");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(zonedChronology49);
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1474");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone5 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology6 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = gregorianChronology6.getZone();
        boolean boolean8 = dateTimeFieldType0.isSupported((org.joda.time.Chronology) gregorianChronology6);
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology6.hourOfHalfday();
        org.joda.time.Chronology chronology10 = gregorianChronology6.withUTC();
        org.joda.time.chrono.ISOChronology iSOChronology11 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField12 = iSOChronology11.minutes();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology15 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology11, dateTimeZone13);
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeZone13.getShortName(1L, locale17);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone19 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime20 = null;
        boolean boolean21 = cachedDateTimeZone19.isLocalDateTimeGap(localDateTime20);
        int int23 = cachedDateTimeZone19.getOffset(255193371L);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType25 = dateTimeFieldType24.getDurationType();
        org.joda.time.field.PreciseDurationField preciseDurationField27 = new org.joda.time.field.PreciseDurationField(durationFieldType25, 0L);
        boolean boolean28 = cachedDateTimeZone19.equals((java.lang.Object) 0L);
        boolean boolean30 = cachedDateTimeZone19.equals((java.lang.Object) 18110895568550L);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone31 = org.joda.time.tz.CachedDateTimeZone.forZone((org.joda.time.DateTimeZone) cachedDateTimeZone19);
        long long33 = cachedDateTimeZone31.nextTransition((-59028998263764L));
        org.joda.time.chrono.ZonedChronology zonedChronology34 = org.joda.time.chrono.ZonedChronology.getInstance(chronology10, (org.joda.time.DateTimeZone) cachedDateTimeZone31);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone39 = new org.joda.time.tz.FixedDateTimeZone("UTC", "", 0, 4);
        java.util.TimeZone timeZone40 = fixedDateTimeZone39.toTimeZone();
        java.lang.String str42 = fixedDateTimeZone39.getName(97L);
        int int44 = fixedDateTimeZone39.getOffsetFromLocal((-210858120000000L));
        long long46 = fixedDateTimeZone39.nextTransition(0L);
        int int48 = fixedDateTimeZone39.getOffset(2580171L);
        java.util.TimeZone timeZone49 = fixedDateTimeZone39.toTimeZone();
        int int51 = fixedDateTimeZone39.getStandardOffset(769L);
        org.joda.time.Chronology chronology52 = zonedChronology34.withZone((org.joda.time.DateTimeZone) fixedDateTimeZone39);
        java.lang.String str54 = fixedDateTimeZone39.getNameKey((long) 11);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(gregorianChronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(iSOChronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertNotNull(cachedDateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(cachedDateTimeZone31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-59028998263764L) + "'", long33 == (-59028998263764L));
        org.junit.Assert.assertNotNull(zonedChronology34);
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00" + "'", str42, "+00:00");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(timeZone49);
        org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 4 + "'", int51 == 4);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0051");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField11 = new org.joda.time.field.OffsetDateTimeField(dateTimeField8, dateTimeFieldType9, (int) (short) 1);
        long long13 = offsetDateTimeField11.roundHalfCeiling(29227899L);
        long long15 = offsetDateTimeField11.roundCeiling((long) 1);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField17 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long20 = durationField17.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long22 = durationField17.getValueAsLong((long) 10);
        int int24 = durationField17.getValue((long) (byte) 10);
        boolean boolean25 = partial16.equals((java.lang.Object) durationField17);
        org.joda.time.Chronology chronology26 = partial16.getChronology();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        boolean boolean28 = partial16.isBefore((org.joda.time.ReadablePartial) partial27);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = partial16.getFieldTypes();
        boolean boolean31 = partial16.equals((java.lang.Object) 1702281558665L);
        int[] intArray32 = partial16.getValues();
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField35 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long38 = durationField35.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long40 = durationField35.getValueAsLong((long) 10);
        int int42 = durationField35.getValue((long) (byte) 10);
        boolean boolean43 = partial34.equals((java.lang.Object) durationField35);
        org.joda.time.Chronology chronology44 = partial34.getChronology();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        boolean boolean46 = partial34.isBefore((org.joda.time.ReadablePartial) partial45);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray47 = partial34.getFieldTypes();
        boolean boolean49 = partial34.equals((java.lang.Object) 1702281558665L);
        int[] intArray50 = partial34.getValues();
        java.util.Locale locale52 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray53 = offsetDateTimeField11.set((org.joda.time.ReadablePartial) partial16, (int) 'a', intArray50, "DurationField[millis]", locale52);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"DurationField[millis]\" for millisOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 28800000L + "'", long13 == 28800000L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 3600000L + "'", long15 == 3600000L);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10L + "'", long22 == 10L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[]");
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10L + "'", long40 == 10L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1556");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.Partial partial2 = new org.joda.time.Partial(dateTimeFieldType0, 100);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone7 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology8 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = gregorianChronology8.getZone();
        org.joda.time.DateTimeZone dateTimeZone10 = gregorianChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField11 = gregorianChronology8.dayOfMonth();
        org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology12.secondOfDay();
        org.joda.time.ReadableInterval readableInterval14 = null;
        org.joda.time.ReadableInterval readableInterval15 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval14);
        org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval14);
        org.joda.time.DateTimeField dateTimeField17 = chronology16.yearOfCentury();
        org.joda.time.DurationField durationField18 = chronology16.millis();
        org.joda.time.DurationField durationField19 = chronology16.centuries();
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.ReadableInterval readableInterval21 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval20);
        org.joda.time.Chronology chronology22 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval20);
        org.joda.time.DateTimeField dateTimeField23 = chronology22.yearOfCentury();
        org.joda.time.DurationField durationField24 = chronology22.millis();
        org.joda.time.DateTimeField dateTimeField25 = chronology22.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval26 = null;
        org.joda.time.ReadableInterval readableInterval27 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval26);
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval26);
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval31 = null;
        org.joda.time.ReadableInterval readableInterval32 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval31);
        org.joda.time.ReadableInterval readableInterval33 = null;
        boolean boolean34 = readableInterval32.contains(readableInterval33);
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Period period36 = readableInterval32.toPeriod(periodType35);
        int[] intArray38 = chronology28.get((org.joda.time.ReadablePeriod) period36, (-210866846400000L));
        int[] intArray41 = chronology22.get((org.joda.time.ReadablePeriod) period36, 2173795348453L, (long) 1439);
        int[] intArray44 = chronology16.get((org.joda.time.ReadablePeriod) period36, 291L, 2580171L);
        int[] intArray46 = iSOChronology12.get((org.joda.time.ReadablePeriod) period36, 29227899L);
        int[] intArray49 = gregorianChronology8.get((org.joda.time.ReadablePeriod) period36, (-476134749439L), 0L);
        org.joda.time.Partial partial50 = partial2.minus((org.joda.time.ReadablePeriod) period36);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(gregorianChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(iSOChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(readableInterval15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(readableInterval21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(readableInterval27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(readableInterval32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(intArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[0, 0, 0, 0, 8, 7, 7, 899]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[15, 1, 0, 1, 19, 39, 9, 439]");
        org.junit.Assert.assertNotNull(partial50);
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0202");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = zonedChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField6 = zonedChronology4.monthOfYear();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField8 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long11 = durationField8.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long13 = durationField8.getValueAsLong((long) 10);
        int int15 = durationField8.getValue((long) (byte) 10);
        boolean boolean16 = partial7.equals((java.lang.Object) durationField8);
        org.joda.time.Chronology chronology17 = partial7.getChronology();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial7.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial7.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.ReadableInterval readableInterval22 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval21);
        long long23 = readableInterval22.getStartMillis();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.ReadableInterval readableInterval26 = null;
        boolean boolean27 = readableInterval25.contains(readableInterval26);
        org.joda.time.Duration duration28 = readableInterval25.toDuration();
        org.joda.time.DateTime dateTime29 = readableInterval25.getEnd();
        boolean boolean30 = readableInterval22.contains((org.joda.time.ReadableInstant) dateTime29);
        boolean boolean31 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime29);
        int[] intArray33 = zonedChronology4.get((org.joda.time.ReadablePartial) partial7, 60035L);
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology4.centuryOfEra();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField36 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long39 = durationField36.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long41 = durationField36.getValueAsLong((long) 10);
        int int43 = durationField36.getValue((long) (byte) 10);
        boolean boolean44 = partial35.equals((java.lang.Object) durationField36);
        org.joda.time.Chronology chronology45 = partial35.getChronology();
        int[] intArray47 = zonedChronology4.get((org.joda.time.ReadablePartial) partial35, 291L);
        // The following exception was thrown during execution in test generation
        try {
            long long53 = zonedChronology4.getDateTimeMillis(0L, (int) '#', 0, 28354819, (int) ' ');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(readableInterval22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 296907L + "'", long23 == 296907L);
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 10L + "'", long41 == 10L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0103");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField15 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long18 = durationField15.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long20 = durationField15.getValueAsLong((long) 10);
        int int22 = durationField15.getValue((long) (byte) 10);
        boolean boolean23 = partial14.equals((java.lang.Object) durationField15);
        boolean boolean24 = partial0.equals((java.lang.Object) durationField15);
        org.joda.time.ReadableInterval readableInterval25 = null;
        org.joda.time.ReadableInterval readableInterval26 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval25);
        org.joda.time.ReadableInterval readableInterval27 = null;
        boolean boolean28 = readableInterval26.contains(readableInterval27);
        org.joda.time.Duration duration29 = readableInterval26.toDuration();
        org.joda.time.ReadableInterval readableInterval30 = null;
        org.joda.time.ReadableInterval readableInterval31 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval30);
        org.joda.time.ReadableInterval readableInterval32 = null;
        boolean boolean33 = readableInterval31.contains(readableInterval32);
        org.joda.time.Duration duration34 = readableInterval31.toDuration();
        org.joda.time.DateTime dateTime35 = readableInterval31.getEnd();
        boolean boolean36 = readableInterval26.isBefore((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime dateTime37 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField39 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long42 = durationField39.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long44 = durationField39.getValueAsLong((long) 10);
        int int46 = durationField39.getValue((long) (byte) 10);
        boolean boolean47 = partial38.equals((java.lang.Object) durationField39);
        org.joda.time.Chronology chronology48 = partial38.getChronology();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial38.isBefore((org.joda.time.ReadablePartial) partial49);
        boolean boolean51 = partial0.isBefore((org.joda.time.ReadablePartial) partial49);
        // The following exception was thrown during execution in test generation
        try {
            int int53 = partial0.getValue((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(readableInterval26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(readableInterval31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 10L + "'", long44 == 10L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2940");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        long long24 = dividedDateTimeField11.roundFloor((long) (short) 1);
        java.util.Locale locale26 = null;
        java.lang.String str27 = dividedDateTimeField11.getAsShortText(28354819, locale26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.IllegalFieldValueException illegalFieldValueException31 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType28, (java.lang.Number) 60035L, "");
        boolean boolean32 = org.joda.time.IllegalInstantException.isIllegalInstant((java.lang.Throwable) illegalFieldValueException31);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.IllegalFieldValueException illegalFieldValueException36 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType33, (java.lang.Number) 10L, "hourOfDay");
        java.lang.Number number37 = illegalFieldValueException36.getIllegalNumberValue();
        illegalFieldValueException31.addSuppressed((java.lang.Throwable) illegalFieldValueException36);
        java.lang.String str39 = illegalFieldValueException31.getFieldName();
        java.lang.String str40 = illegalFieldValueException31.getFieldName();
        java.lang.String str41 = illegalFieldValueException31.getFieldName();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = illegalFieldValueException31.getDateTimeFieldType();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField43 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType42);
        org.joda.time.DurationField durationField44 = remainderDateTimeField43.getLeapDurationField();
        org.joda.time.DurationField durationField45 = remainderDateTimeField43.getRangeDurationField();
        org.joda.time.DurationField durationField46 = remainderDateTimeField43.getDurationField();
        long long48 = remainderDateTimeField43.roundFloor((-1890432000000000L));
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "28354819" + "'", str27, "28354819");
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertEquals("'" + number37 + "' != '" + 10L + "'", number37, 10L);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hourOfDay" + "'", str39, "hourOfDay");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hourOfDay" + "'", str40, "hourOfDay");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hourOfDay" + "'", str41, "hourOfDay");
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNull(durationField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-1890450748800000L) + "'", long48 == (-1890450748800000L));
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1520");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval3);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DurationField durationField7 = chronology5.millis();
        org.joda.time.DurationField durationField8 = chronology5.centuries();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval9);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology11.millis();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.ReadableInterval readableInterval16 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval15);
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.ReadableInterval readableInterval21 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval20);
        org.joda.time.ReadableInterval readableInterval22 = null;
        boolean boolean23 = readableInterval21.contains(readableInterval22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = readableInterval21.toPeriod(periodType24);
        int[] intArray27 = chronology17.get((org.joda.time.ReadablePeriod) period25, (-210866846400000L));
        int[] intArray30 = chronology11.get((org.joda.time.ReadablePeriod) period25, 2173795348453L, (long) 1439);
        int[] intArray33 = chronology5.get((org.joda.time.ReadablePeriod) period25, 291L, 2580171L);
        int[] intArray36 = iSOChronology0.get((org.joda.time.ReadablePeriod) period25, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField37 = iSOChronology0.months();
        java.lang.String str38 = iSOChronology0.toString();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = iSOChronology0.equals((java.lang.Object) partial39);
        org.joda.time.DateTimeField dateTimeField41 = iSOChronology0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology0.monthOfYear();
        org.joda.time.DurationField durationField43 = iSOChronology0.weeks();
        // The following exception was thrown during execution in test generation
        try {
            long long51 = iSOChronology0.getDateTimeMillis(53460006, 53460005, (int) (short) 10, 199, 296, (-28799996), (-5));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 199 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(readableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(readableInterval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(readableInterval21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(intArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(durationField37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[100]" + "'", str38, "ISOChronology[100]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0941");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        org.joda.time.DurationField durationField7 = unsupportedDateTimeField6.getDurationField();
        org.joda.time.DurationField durationField8 = unsupportedDateTimeField6.getLeapDurationField();
        java.lang.String str9 = unsupportedDateTimeField6.toString();
        org.joda.time.DurationField durationField10 = unsupportedDateTimeField6.getRangeDurationField();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField12 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long15 = durationField12.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long17 = durationField12.getValueAsLong((long) 10);
        int int19 = durationField12.getValue((long) (byte) 10);
        boolean boolean20 = partial11.equals((java.lang.Object) durationField12);
        org.joda.time.Chronology chronology21 = partial11.getChronology();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial11.isBefore((org.joda.time.ReadablePartial) partial22);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = partial11.getFieldTypes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = partial11.getFormatter();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField27 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long30 = durationField27.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long32 = durationField27.getValueAsLong((long) 10);
        int int34 = durationField27.getValue((long) (byte) 10);
        boolean boolean35 = partial26.equals((java.lang.Object) durationField27);
        org.joda.time.Chronology chronology36 = partial26.getChronology();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        boolean boolean38 = partial26.isBefore((org.joda.time.ReadablePartial) partial37);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray39 = partial26.getFieldTypes();
        boolean boolean41 = partial26.equals((java.lang.Object) 1702281558665L);
        java.lang.String str42 = partial26.toString();
        org.joda.time.Chronology chronology43 = partial26.getChronology();
        int int44 = partial11.compareTo((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology45 = partial11.getChronology();
        java.util.Locale locale46 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str47 = unsupportedDateTimeField6.getAsText((org.joda.time.ReadablePartial) partial11, locale46);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNull(durationField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UnsupportedDateTimeField" + "'", str9, "UnsupportedDateTimeField");
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10L + "'", long32 == 10L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[]" + "'", str42, "[]");
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(chronology45);
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1528");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = zonedChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField6 = zonedChronology4.monthOfYear();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField8 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long11 = durationField8.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long13 = durationField8.getValueAsLong((long) 10);
        int int15 = durationField8.getValue((long) (byte) 10);
        boolean boolean16 = partial7.equals((java.lang.Object) durationField8);
        org.joda.time.Chronology chronology17 = partial7.getChronology();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial7.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial7.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.ReadableInterval readableInterval22 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval21);
        long long23 = readableInterval22.getStartMillis();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.ReadableInterval readableInterval26 = null;
        boolean boolean27 = readableInterval25.contains(readableInterval26);
        org.joda.time.Duration duration28 = readableInterval25.toDuration();
        org.joda.time.DateTime dateTime29 = readableInterval25.getEnd();
        boolean boolean30 = readableInterval22.contains((org.joda.time.ReadableInstant) dateTime29);
        boolean boolean31 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime29);
        int[] intArray33 = zonedChronology4.get((org.joda.time.ReadablePartial) partial7, 60035L);
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology4.secondOfMinute();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone39 = new org.joda.time.tz.FixedDateTimeZone("UTC", "", 0, 4);
        java.util.TimeZone timeZone40 = fixedDateTimeZone39.toTimeZone();
        java.lang.String str42 = fixedDateTimeZone39.getName(97L);
        int int44 = fixedDateTimeZone39.getOffsetFromLocal((-210858120000000L));
        long long46 = fixedDateTimeZone39.nextTransition(0L);
        int int48 = fixedDateTimeZone39.getOffset(2580171L);
        org.joda.time.chrono.ZonedChronology zonedChronology49 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) zonedChronology4, (org.joda.time.DateTimeZone) fixedDateTimeZone39);
        java.lang.String str50 = zonedChronology4.toString();
        org.joda.time.Chronology chronology51 = org.joda.time.DateTimeUtils.getChronology((org.joda.time.Chronology) zonedChronology4);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(readableInterval22);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1225226728220L + "'", long23 == 1225226728220L);
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00" + "'", str42, "+00:00");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(zonedChronology49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str50, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(chronology51);
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1955");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        org.joda.time.DurationField durationField7 = unsupportedDateTimeField6.getDurationField();
        boolean boolean8 = unsupportedDateTimeField6.isLenient();
        org.joda.time.DurationField durationField9 = unsupportedDateTimeField6.getRangeDurationField();
        boolean boolean10 = unsupportedDateTimeField6.isSupported();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = unsupportedDateTimeField6.getType();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone16 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology17 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone18 = gregorianChronology17.getZone();
        long long23 = gregorianChronology17.getDateTimeMillis((int) '4', 8, 24, 24);
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField25 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long28 = durationField25.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long30 = durationField25.getValueAsLong((long) 10);
        int int32 = durationField25.getValue((long) (byte) 10);
        boolean boolean33 = partial24.equals((java.lang.Object) durationField25);
        org.joda.time.Chronology chronology34 = partial24.getChronology();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        boolean boolean36 = partial24.isBefore((org.joda.time.ReadablePartial) partial35);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = partial24.getFieldTypes();
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField39 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long42 = durationField39.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long44 = durationField39.getValueAsLong((long) 10);
        int int46 = durationField39.getValue((long) (byte) 10);
        boolean boolean47 = partial38.equals((java.lang.Object) durationField39);
        boolean boolean48 = partial24.equals((java.lang.Object) durationField39);
        int[] intArray50 = gregorianChronology17.get((org.joda.time.ReadablePartial) partial24, 0L);
        org.joda.time.Chronology chronology51 = partial24.getChronology();
        java.util.Locale locale53 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str54 = unsupportedDateTimeField6.getAsText((org.joda.time.ReadablePartial) partial24, 86399, locale53);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(durationField9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(gregorianChronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-60505833599976L) + "'", long23 == (-60505833599976L));
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10L + "'", long30 == 10L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 10L + "'", long44 == 10L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(chronology51);
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1971");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval3);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DurationField durationField7 = chronology5.millis();
        org.joda.time.DurationField durationField8 = chronology5.centuries();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval9);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology11.millis();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.ReadableInterval readableInterval16 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval15);
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.ReadableInterval readableInterval21 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval20);
        org.joda.time.ReadableInterval readableInterval22 = null;
        boolean boolean23 = readableInterval21.contains(readableInterval22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = readableInterval21.toPeriod(periodType24);
        int[] intArray27 = chronology17.get((org.joda.time.ReadablePeriod) period25, (-210866846400000L));
        int[] intArray30 = chronology11.get((org.joda.time.ReadablePeriod) period25, 2173795348453L, (long) 1439);
        int[] intArray33 = chronology5.get((org.joda.time.ReadablePeriod) period25, 291L, 2580171L);
        int[] intArray36 = iSOChronology0.get((org.joda.time.ReadablePeriod) period25, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField37 = iSOChronology0.months();
        java.lang.String str38 = iSOChronology0.toString();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = iSOChronology0.equals((java.lang.Object) partial39);
        java.lang.String str41 = iSOChronology0.toString();
        org.joda.time.Chronology chronology42 = iSOChronology0.withUTC();
        org.joda.time.Partial partial43 = new org.joda.time.Partial((org.joda.time.Chronology) iSOChronology0);
        // The following exception was thrown during execution in test generation
        try {
            long long48 = iSOChronology0.getDateTimeMillis(109, (-11021), 197, 58571700);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -11021 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(readableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(readableInterval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(readableInterval21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(durationField37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[UTC]" + "'", str38, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ISOChronology[UTC]" + "'", str41, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(chronology42);
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1737");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeZone dateTimeZone1 = iSOChronology0.getZone();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.millisOfDay();
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField6 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long9 = durationField6.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long11 = durationField6.getValueAsLong((long) 10);
        int int13 = durationField6.getValue((long) (byte) 10);
        boolean boolean14 = partial5.equals((java.lang.Object) durationField6);
        org.joda.time.Chronology chronology15 = partial5.getChronology();
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        boolean boolean17 = partial5.isBefore((org.joda.time.ReadablePartial) partial16);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray18 = partial5.getFieldTypes();
        boolean boolean20 = partial5.equals((java.lang.Object) 1702281558665L);
        java.lang.String str21 = partial5.toString();
        java.lang.String str22 = partial5.toString();
        int int23 = partial5.size();
        boolean boolean24 = org.joda.time.DateTimeUtils.isContiguous((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField27 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long30 = durationField27.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long32 = durationField27.getValueAsLong((long) 10);
        int int34 = durationField27.getValue((long) (byte) 10);
        boolean boolean35 = partial26.equals((java.lang.Object) durationField27);
        org.joda.time.Chronology chronology36 = partial26.getChronology();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        boolean boolean38 = partial26.isBefore((org.joda.time.ReadablePartial) partial37);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray39 = partial26.getFieldTypes();
        boolean boolean41 = partial26.equals((java.lang.Object) 1702281558665L);
        java.lang.String str42 = partial26.toString();
        java.lang.String str43 = partial26.toString();
        int int44 = partial26.size();
        boolean boolean45 = org.joda.time.DateTimeUtils.isContiguous((org.joda.time.ReadablePartial) partial26);
        int[] intArray46 = partial26.getValues();
        java.util.Locale locale48 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray49 = dateTimeField4.set((org.joda.time.ReadablePartial) partial5, (-21674226), intArray46, "DateTimeField[yearOfCentury]", locale48);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"DateTimeField[yearOfCentury]\" for millisOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10L + "'", long11 == 10L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[]" + "'", str21, "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10L + "'", long32 == 10L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[]" + "'", str42, "[]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[]" + "'", str43, "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2092");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = zonedChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField6 = zonedChronology4.monthOfYear();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField8 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long11 = durationField8.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long13 = durationField8.getValueAsLong((long) 10);
        int int15 = durationField8.getValue((long) (byte) 10);
        boolean boolean16 = partial7.equals((java.lang.Object) durationField8);
        org.joda.time.Chronology chronology17 = partial7.getChronology();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial7.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial7.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.ReadableInterval readableInterval22 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval21);
        long long23 = readableInterval22.getStartMillis();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.ReadableInterval readableInterval26 = null;
        boolean boolean27 = readableInterval25.contains(readableInterval26);
        org.joda.time.Duration duration28 = readableInterval25.toDuration();
        org.joda.time.DateTime dateTime29 = readableInterval25.getEnd();
        boolean boolean30 = readableInterval22.contains((org.joda.time.ReadableInstant) dateTime29);
        boolean boolean31 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime29);
        int[] intArray33 = zonedChronology4.get((org.joda.time.ReadablePartial) partial7, 60035L);
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology4.secondOfMinute();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone39 = new org.joda.time.tz.FixedDateTimeZone("UTC", "", 0, 4);
        java.util.TimeZone timeZone40 = fixedDateTimeZone39.toTimeZone();
        java.lang.String str42 = fixedDateTimeZone39.getName(97L);
        int int44 = fixedDateTimeZone39.getOffsetFromLocal((-210858120000000L));
        long long46 = fixedDateTimeZone39.nextTransition(0L);
        int int48 = fixedDateTimeZone39.getOffset(2580171L);
        org.joda.time.chrono.ZonedChronology zonedChronology49 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) zonedChronology4, (org.joda.time.DateTimeZone) fixedDateTimeZone39);
        org.joda.time.DurationField durationField50 = zonedChronology49.hours();
        org.joda.time.DurationField durationField51 = zonedChronology49.days();
        org.joda.time.DateTimeField dateTimeField52 = zonedChronology49.weekOfWeekyear();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(readableInterval22);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 2440588L + "'", long23 == 2440588L);
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00" + "'", str42, "+00:00");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(zonedChronology49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0510");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        java.lang.String str13 = partial0.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType15 = dateTimeFieldType14.getDurationType();
        org.joda.time.Partial partial16 = partial0.without(dateTimeFieldType14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType18 = dateTimeFieldType17.getDurationType();
        org.joda.time.field.PreciseDurationField preciseDurationField20 = new org.joda.time.field.PreciseDurationField(durationFieldType18, 28354819L);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval22 = null;
        org.joda.time.ReadableInterval readableInterval23 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval22);
        org.joda.time.Chronology chronology24 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval22);
        org.joda.time.DateTimeField dateTimeField25 = chronology24.yearOfCentury();
        org.joda.time.DurationField durationField26 = chronology24.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField27 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType21, durationField26);
        long long30 = durationField26.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval32 = null;
        org.joda.time.ReadableInterval readableInterval33 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval32);
        org.joda.time.Chronology chronology34 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval32);
        org.joda.time.DateTimeField dateTimeField35 = chronology34.yearOfCentury();
        boolean boolean36 = durationFieldType31.isSupported(chronology34);
        org.joda.time.field.ScaledDurationField scaledDurationField38 = new org.joda.time.field.ScaledDurationField(durationField26, durationFieldType31, (int) 'a');
        int int40 = scaledDurationField38.getValue((long) (short) -1);
        long long43 = scaledDurationField38.add((long) (-1), 10);
        org.joda.time.DurationFieldType durationFieldType44 = scaledDurationField38.getType();
        org.joda.time.IllegalFieldValueException illegalFieldValueException46 = new org.joda.time.IllegalFieldValueException(durationFieldType44, "69");
        org.joda.time.field.ScaledDurationField scaledDurationField48 = new org.joda.time.field.ScaledDurationField((org.joda.time.DurationField) preciseDurationField20, durationFieldType44, 1969);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial50 = partial0.withFieldAdded(durationFieldType44, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'hours' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(readableInterval23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-210866846400000L) + "'", long30 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertNotNull(readableInterval33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 969L + "'", long43 == 969L);
        org.junit.Assert.assertNotNull(durationFieldType44);
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1936");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval3);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DurationField durationField7 = chronology5.millis();
        org.joda.time.DurationField durationField8 = chronology5.centuries();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval9);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology11.millis();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.ReadableInterval readableInterval16 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval15);
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.ReadableInterval readableInterval21 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval20);
        org.joda.time.ReadableInterval readableInterval22 = null;
        boolean boolean23 = readableInterval21.contains(readableInterval22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = readableInterval21.toPeriod(periodType24);
        int[] intArray27 = chronology17.get((org.joda.time.ReadablePeriod) period25, (-210866846400000L));
        int[] intArray30 = chronology11.get((org.joda.time.ReadablePeriod) period25, 2173795348453L, (long) 1439);
        int[] intArray33 = chronology5.get((org.joda.time.ReadablePeriod) period25, 291L, 2580171L);
        int[] intArray36 = iSOChronology0.get((org.joda.time.ReadablePeriod) period25, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField37 = iSOChronology0.months();
        java.lang.String str38 = iSOChronology0.toString();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = iSOChronology0.equals((java.lang.Object) partial39);
        java.lang.String str41 = iSOChronology0.toString();
        org.joda.time.Chronology chronology42 = iSOChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField43 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField44 = iSOChronology0.weekyearOfCentury();
        org.joda.time.DurationField durationField45 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField46 = iSOChronology0.minuteOfHour();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(readableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(readableInterval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(readableInterval21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(durationField37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[100]" + "'", str38, "ISOChronology[100]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ISOChronology[100]" + "'", str41, "ISOChronology[100]");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0407");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = durationField5.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval11 = null;
        org.joda.time.ReadableInterval readableInterval12 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval11);
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval11);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfCentury();
        boolean boolean15 = durationFieldType10.isSupported(chronology13);
        org.joda.time.field.ScaledDurationField scaledDurationField17 = new org.joda.time.field.ScaledDurationField(durationField5, durationFieldType10, (int) 'a');
        org.joda.time.DurationField durationField18 = scaledDurationField17.getWrappedField();
        int int21 = scaledDurationField17.getDifference((long) (byte) -1, (long) (short) 0);
        long long24 = scaledDurationField17.getMillis((int) (short) 100, (long) 4);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval26 = null;
        org.joda.time.ReadableInterval readableInterval27 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval26);
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval26);
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfCentury();
        org.joda.time.DurationField durationField30 = chronology28.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField31 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType25, durationField30);
        long long34 = durationField30.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType35 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval36 = null;
        org.joda.time.ReadableInterval readableInterval37 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval36);
        org.joda.time.Chronology chronology38 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval36);
        org.joda.time.DateTimeField dateTimeField39 = chronology38.yearOfCentury();
        boolean boolean40 = durationFieldType35.isSupported(chronology38);
        org.joda.time.field.ScaledDurationField scaledDurationField42 = new org.joda.time.field.ScaledDurationField(durationField30, durationFieldType35, (int) 'a');
        int int44 = scaledDurationField42.getValue((long) (short) -1);
        long long47 = scaledDurationField42.add((long) (-1), 10);
        boolean boolean48 = scaledDurationField17.equals((java.lang.Object) 10);
        long long51 = scaledDurationField17.add((long) (-7), 8);
        long long53 = scaledDurationField17.getMillis(28);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-210866846400000L) + "'", long9 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(readableInterval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 9700L + "'", long24 == 9700L);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(readableInterval27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-210866846400000L) + "'", long34 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertNotNull(readableInterval37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 969L + "'", long47 == 969L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 769L + "'", long51 == 769L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 2716L + "'", long53 == 2716L);
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3068");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = zonedChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField6 = zonedChronology4.monthOfYear();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField8 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long11 = durationField8.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long13 = durationField8.getValueAsLong((long) 10);
        int int15 = durationField8.getValue((long) (byte) 10);
        boolean boolean16 = partial7.equals((java.lang.Object) durationField8);
        org.joda.time.Chronology chronology17 = partial7.getChronology();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial7.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial7.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.ReadableInterval readableInterval22 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval21);
        long long23 = readableInterval22.getStartMillis();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.ReadableInterval readableInterval26 = null;
        boolean boolean27 = readableInterval25.contains(readableInterval26);
        org.joda.time.Duration duration28 = readableInterval25.toDuration();
        org.joda.time.DateTime dateTime29 = readableInterval25.getEnd();
        boolean boolean30 = readableInterval22.contains((org.joda.time.ReadableInstant) dateTime29);
        boolean boolean31 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime29);
        int[] intArray33 = zonedChronology4.get((org.joda.time.ReadablePartial) partial7, 60035L);
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology4.secondOfMinute();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone39 = new org.joda.time.tz.FixedDateTimeZone("UTC", "", 0, 4);
        java.util.TimeZone timeZone40 = fixedDateTimeZone39.toTimeZone();
        java.lang.String str42 = fixedDateTimeZone39.getName(97L);
        int int44 = fixedDateTimeZone39.getOffsetFromLocal((-210858120000000L));
        long long46 = fixedDateTimeZone39.nextTransition(0L);
        int int48 = fixedDateTimeZone39.getOffset(2580171L);
        org.joda.time.chrono.ZonedChronology zonedChronology49 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) zonedChronology4, (org.joda.time.DateTimeZone) fixedDateTimeZone39);
        org.joda.time.DateTimeField dateTimeField50 = zonedChronology4.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone51 = zonedChronology4.getZone();
        java.lang.Class<?> wildcardClass52 = zonedChronology4.getClass();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(readableInterval22);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-296907L) + "'", long23 == (-296907L));
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00" + "'", str42, "+00:00");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(zonedChronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2231");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        long long24 = dividedDateTimeField11.roundFloor((long) (short) 1);
        java.util.Locale locale26 = null;
        java.lang.String str27 = dividedDateTimeField11.getAsShortText(28354819, locale26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.IllegalFieldValueException illegalFieldValueException31 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType28, (java.lang.Number) 60035L, "");
        boolean boolean32 = org.joda.time.IllegalInstantException.isIllegalInstant((java.lang.Throwable) illegalFieldValueException31);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.IllegalFieldValueException illegalFieldValueException36 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType33, (java.lang.Number) 10L, "hourOfDay");
        java.lang.Number number37 = illegalFieldValueException36.getIllegalNumberValue();
        illegalFieldValueException31.addSuppressed((java.lang.Throwable) illegalFieldValueException36);
        java.lang.String str39 = illegalFieldValueException31.getFieldName();
        java.lang.String str40 = illegalFieldValueException31.getFieldName();
        java.lang.String str41 = illegalFieldValueException31.getFieldName();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = illegalFieldValueException31.getDateTimeFieldType();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField43 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType42);
        org.joda.time.DurationField durationField44 = remainderDateTimeField43.getLeapDurationField();
        org.joda.time.DurationField durationField45 = remainderDateTimeField43.getRangeDurationField();
        org.joda.time.DurationField durationField46 = remainderDateTimeField43.getDurationField();
        org.joda.time.DurationField durationField47 = remainderDateTimeField43.iRangeField;
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "28354819" + "'", str27, "28354819");
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertEquals("'" + number37 + "' != '" + 10L + "'", number37, 10L);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hourOfDay" + "'", str39, "hourOfDay");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hourOfDay" + "'", str40, "hourOfDay");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hourOfDay" + "'", str41, "hourOfDay");
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNull(durationField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(durationField47);
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2488");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        long long24 = remainderDateTimeField22.roundHalfFloor(3600000L);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval26 = null;
        org.joda.time.ReadableInterval readableInterval27 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval26);
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval26);
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfCentury();
        org.joda.time.DurationField durationField30 = chronology28.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField31 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType25, durationField30);
        long long34 = unsupportedDateTimeField31.add((-31L), (long) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = unsupportedDateTimeField31.getType();
        org.joda.time.DurationFieldType durationFieldType36 = dateTimeFieldType35.getRangeDurationType();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField37 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField22, dateTimeFieldType35);
        org.joda.time.DurationField durationField38 = remainderDateTimeField22.iDurationField;
        org.joda.time.DurationField durationField39 = remainderDateTimeField22.iDurationField;
        org.joda.time.DurationField durationField40 = remainderDateTimeField22.getDurationField();
        long long42 = remainderDateTimeField22.roundCeiling((-53459996L));
        org.joda.time.DurationField durationField43 = remainderDateTimeField22.getRangeDurationField();
        java.util.Locale locale45 = null;
        java.lang.String str46 = remainderDateTimeField22.getAsShortText(0L, locale45);
        java.util.Locale locale48 = null;
        java.lang.String str49 = remainderDateTimeField22.getAsShortText(296, locale48);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(readableInterval27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 4L + "'", long34 == 4L);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "0" + "'", str46, "0");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "296" + "'", str49, "296");
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1923");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.DurationField durationField6 = chronology3.centuries();
        org.joda.time.Chronology chronology7 = chronology3.withUTC();
        org.joda.time.DurationField durationField8 = chronology7.halfdays();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField12 = new org.joda.time.field.DividedDateTimeField(dateTimeField9, dateTimeFieldType10, 10);
        long long15 = dividedDateTimeField12.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval17 = null;
        org.joda.time.ReadableInterval readableInterval18 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval17);
        org.joda.time.Chronology chronology19 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval17);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfCentury();
        org.joda.time.DurationField durationField21 = chronology19.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField22 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType16, durationField21);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField23 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField12, dateTimeFieldType16);
        long long25 = remainderDateTimeField23.roundHalfFloor(3600000L);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval27 = null;
        org.joda.time.ReadableInterval readableInterval28 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval27);
        org.joda.time.Chronology chronology29 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval27);
        org.joda.time.DateTimeField dateTimeField30 = chronology29.yearOfCentury();
        org.joda.time.DurationField durationField31 = chronology29.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField32 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType26, durationField31);
        long long35 = unsupportedDateTimeField32.add((-31L), (long) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = unsupportedDateTimeField32.getType();
        org.joda.time.DurationFieldType durationFieldType37 = dateTimeFieldType36.getRangeDurationType();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField38 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField23, dateTimeFieldType36);
        org.joda.time.DurationField durationField39 = remainderDateTimeField23.iDurationField;
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField40 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField39);
        // The following exception was thrown during execution in test generation
        try {
            long long43 = unsupportedDateTimeField40.addWrapField((-3L), 1969);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfMonth field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-30610224000000L) + "'", long15 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(readableInterval18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(readableInterval28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 4L + "'", long35 == 4L);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField40);
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0870");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        boolean boolean5 = durationFieldType0.isSupported(chronology3);
        org.joda.time.DurationField durationField6 = chronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.weekyearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField12 = new org.joda.time.field.OffsetDateTimeField(dateTimeField7, dateTimeFieldType8, 4, (int) ' ', (int) (short) -1);
        long long14 = offsetDateTimeField12.roundCeiling(2102400001L);
        int int15 = offsetDateTimeField12.getMinimumValue();
        boolean boolean17 = offsetDateTimeField12.isLeap(28800000L);
        long long19 = offsetDateTimeField12.roundFloor(2750411623L);
        long long21 = offsetDateTimeField12.roundCeiling(0L);
        int int24 = offsetDateTimeField12.getDifference(1701289183453L, 29227923L);
        java.util.Locale locale25 = null;
        int int26 = offsetDateTimeField12.getMaximumShortTextLength(locale25);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField28 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long31 = durationField28.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long33 = durationField28.getValueAsLong((long) 10);
        int int35 = durationField28.getValue((long) (byte) 10);
        boolean boolean36 = partial27.equals((java.lang.Object) durationField28);
        org.joda.time.Chronology chronology37 = partial27.getChronology();
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        boolean boolean39 = partial27.isBefore((org.joda.time.ReadablePartial) partial38);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray40 = partial27.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval41 = null;
        org.joda.time.ReadableInterval readableInterval42 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval41);
        org.joda.time.ReadableInterval readableInterval43 = null;
        boolean boolean44 = readableInterval42.contains(readableInterval43);
        org.joda.time.ReadableInterval readableInterval45 = null;
        boolean boolean46 = readableInterval42.isBefore(readableInterval45);
        org.joda.time.DateTime dateTime47 = readableInterval42.getEnd();
        boolean boolean48 = partial27.isMatch((org.joda.time.ReadableInstant) dateTime47);
        int[] intArray49 = partial27.getValues();
        int[] intArray51 = null;
        java.util.Locale locale53 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray54 = offsetDateTimeField12.set((org.joda.time.ReadablePartial) partial27, 14, intArray51, "3", locale53);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3 for weekOfWeekyear must be in the range [32,-1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 31536000000L + "'", long14 == 31536000000L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 32 + "'", int15 == 32);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 53 + "'", int24 == 53);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10L + "'", long33 == 10L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray40);
        org.junit.Assert.assertNotNull(readableInterval42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0741");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add((-31L), (long) '#');
        org.joda.time.DurationField durationField10 = unsupportedDateTimeField6.getLeapDurationField();
        int int13 = unsupportedDateTimeField6.getDifference((long) (byte) 10, 10L);
        long long16 = unsupportedDateTimeField6.add((long) 1439, (int) (byte) -1);
        java.lang.String str17 = unsupportedDateTimeField6.toString();
        boolean boolean18 = unsupportedDateTimeField6.isSupported();
        long long21 = unsupportedDateTimeField6.getDifferenceAsLong((-210866846400000L), 0L);
        boolean boolean22 = unsupportedDateTimeField6.isSupported();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField24 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long27 = durationField24.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long29 = durationField24.getValueAsLong((long) 10);
        int int31 = durationField24.getValue((long) (byte) 10);
        boolean boolean32 = partial23.equals((java.lang.Object) durationField24);
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField34 = iSOChronology33.minutes();
        org.joda.time.DateTimeField dateTimeField35 = iSOChronology33.millisOfDay();
        org.joda.time.DateTimeField dateTimeField36 = iSOChronology33.halfdayOfDay();
        org.joda.time.ReadableInterval readableInterval37 = null;
        org.joda.time.ReadableInterval readableInterval38 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval37);
        org.joda.time.ReadableInterval readableInterval39 = null;
        boolean boolean40 = readableInterval38.contains(readableInterval39);
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Period period42 = readableInterval38.toPeriod(periodType41);
        int[] intArray45 = iSOChronology33.get((org.joda.time.ReadablePeriod) period42, 4L, (long) '#');
        org.joda.time.Partial partial46 = partial23.plus((org.joda.time.ReadablePeriod) period42);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Partial partial48 = partial46.without(dateTimeFieldType47);
        int[] intArray49 = partial48.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int int50 = unsupportedDateTimeField6.getMinimumValue((org.joda.time.ReadablePartial) partial48);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1438L + "'", long16 == 1438L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UnsupportedDateTimeField" + "'", str17, "UnsupportedDateTimeField");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-210866846400000L) + "'", long21 == (-210866846400000L));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10L + "'", long29 == 10L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(readableInterval38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[0, 0, 0, 0, 0, 0, 0, 31]");
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2422");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.minutes();
        org.joda.time.DurationField durationField5 = chronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.year();
        long long8 = dateTimeField6.roundHalfCeiling(2750411L);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField10 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long13 = durationField10.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long15 = durationField10.getValueAsLong((long) 10);
        int int17 = durationField10.getValue((long) (byte) 10);
        boolean boolean18 = partial9.equals((java.lang.Object) durationField10);
        org.joda.time.Chronology chronology19 = partial9.getChronology();
        java.lang.String str20 = partial9.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray21 = partial9.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        boolean boolean23 = partial9.isSupported(dateTimeFieldType22);
        org.joda.time.chrono.ISOChronology iSOChronology24 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField25 = iSOChronology24.minutes();
        org.joda.time.DurationField durationField26 = iSOChronology24.months();
        org.joda.time.DurationField durationField27 = iSOChronology24.years();
        org.joda.time.DateTimeZone dateTimeZone28 = iSOChronology24.getZone();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str30 = dateTimeZone29.toString();
        java.lang.String str32 = dateTimeZone29.getShortName((-210866846400000L));
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeUtils.getZone(dateTimeZone29);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone34 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone33);
        org.joda.time.Chronology chronology35 = iSOChronology24.withZone((org.joda.time.DateTimeZone) cachedDateTimeZone34);
        org.joda.time.DateTimeField dateTimeField36 = iSOChronology24.centuryOfEra();
        org.joda.time.Partial partial37 = new org.joda.time.Partial((org.joda.time.Chronology) iSOChronology24);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType39 = dateTimeFieldType38.getRangeDurationType();
        org.joda.time.Chronology chronology40 = null;
        boolean boolean41 = dateTimeFieldType38.isSupported(chronology40);
        boolean boolean42 = partial37.isSupported(dateTimeFieldType38);
        int int43 = partial9.indexOf(dateTimeFieldType38);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField45 = new org.joda.time.field.DividedDateTimeField(dateTimeField6, dateTimeFieldType38, 11);
        org.joda.time.IllegalFieldValueException illegalFieldValueException48 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType38, (java.lang.Number) 2835115903L, "2117409001");
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(iSOChronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "UTC" + "'", str30, "UTC");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(cachedDateTimeZone34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0775");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str1 = dateTimeZone0.toString();
        java.lang.String str3 = dateTimeZone0.getShortName((-210866846400000L));
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeUtils.getZone(dateTimeZone0);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone5 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone4);
        boolean boolean7 = cachedDateTimeZone5.equals((java.lang.Object) 432000032L);
        long long10 = cachedDateTimeZone5.convertLocalToUTC(432000032L, false);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone15 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology16 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone17 = gregorianChronology16.getZone();
        long long21 = gregorianChronology16.add(0L, (long) (byte) 1, (int) (byte) 0);
        org.joda.time.Chronology chronology22 = gregorianChronology16.withUTC();
        boolean boolean23 = cachedDateTimeZone5.equals((java.lang.Object) gregorianChronology16);
        org.joda.time.JodaTimePermission jodaTimePermission25 = new org.joda.time.JodaTimePermission("DateTimeField[minuteOfDay]");
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval27 = null;
        org.joda.time.ReadableInterval readableInterval28 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval27);
        org.joda.time.Chronology chronology29 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval27);
        org.joda.time.DateTimeField dateTimeField30 = chronology29.yearOfCentury();
        boolean boolean31 = durationFieldType26.isSupported(chronology29);
        org.joda.time.DurationField durationField32 = chronology29.halfdays();
        jodaTimePermission25.checkGuard((java.lang.Object) chronology29);
        java.lang.String str34 = jodaTimePermission25.toString();
        org.joda.time.JodaTimePermission jodaTimePermission36 = new org.joda.time.JodaTimePermission("DateTimeField[minuteOfDay]");
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval38 = null;
        org.joda.time.ReadableInterval readableInterval39 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval38);
        org.joda.time.Chronology chronology40 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval38);
        org.joda.time.DateTimeField dateTimeField41 = chronology40.yearOfCentury();
        boolean boolean42 = durationFieldType37.isSupported(chronology40);
        org.joda.time.DurationField durationField43 = chronology40.halfdays();
        jodaTimePermission36.checkGuard((java.lang.Object) chronology40);
        java.lang.String str45 = jodaTimePermission36.toString();
        boolean boolean46 = jodaTimePermission25.implies((java.security.Permission) jodaTimePermission36);
        java.security.PermissionCollection permissionCollection47 = jodaTimePermission25.newPermissionCollection();
        boolean boolean48 = cachedDateTimeZone5.equals((java.lang.Object) permissionCollection47);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "UTC" + "'", str1, "UTC");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(cachedDateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 432000032L + "'", long10 == 432000032L);
        org.junit.Assert.assertNotNull(gregorianChronology16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertNotNull(readableInterval28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(\"org.joda.time.JodaTimePermission\" \"DateTimeField[minuteOfDay]\")" + "'", str34, "(\"org.joda.time.JodaTimePermission\" \"DateTimeField[minuteOfDay]\")");
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertNotNull(readableInterval39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "(\"org.joda.time.JodaTimePermission\" \"DateTimeField[minuteOfDay]\")" + "'", str45, "(\"org.joda.time.JodaTimePermission\" \"DateTimeField[minuteOfDay]\")");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(permissionCollection47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2600");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add((-31L), (long) '#');
        org.joda.time.DurationField durationField10 = unsupportedDateTimeField6.getLeapDurationField();
        org.joda.time.DurationField durationField11 = unsupportedDateTimeField6.getRangeDurationField();
        long long14 = unsupportedDateTimeField6.getDifferenceAsLong(10L, 0L);
        long long17 = unsupportedDateTimeField6.getDifferenceAsLong(0L, (long) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = unsupportedDateTimeField6.getType();
        long long21 = unsupportedDateTimeField6.add((-17213950163L), 2629746000L);
        long long24 = unsupportedDateTimeField6.add(1701289188819L, (int) 'a');
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology25.secondOfDay();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology25.dayOfYear();
        org.joda.time.DurationField durationField28 = iSOChronology25.minutes();
        org.joda.time.DurationField durationField29 = iSOChronology25.seconds();
        org.joda.time.DurationField durationField30 = iSOChronology25.weeks();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology25.millisOfSecond();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField33 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long36 = durationField33.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long38 = durationField33.getValueAsLong((long) 10);
        int int40 = durationField33.getValue((long) (byte) 10);
        boolean boolean41 = partial32.equals((java.lang.Object) durationField33);
        org.joda.time.Chronology chronology42 = partial32.getChronology();
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        boolean boolean44 = partial32.isBefore((org.joda.time.ReadablePartial) partial43);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray45 = partial32.getFieldTypes();
        boolean boolean47 = partial32.equals((java.lang.Object) 1702281558665L);
        java.lang.String str48 = partial32.toString();
        int[] intArray50 = iSOChronology25.get((org.joda.time.ReadablePartial) partial32, 9700L);
        java.util.Locale locale52 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str53 = unsupportedDateTimeField6.getAsShortText((org.joda.time.ReadablePartial) partial32, 58571700, locale52);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertNull(durationField11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-14584204163L) + "'", long21 == (-14584204163L));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1701289188916L + "'", long24 == 1701289188916L);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 10L + "'", long38 == 10L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[]" + "'", str48, "[]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2918");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = zonedChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField6 = zonedChronology4.monthOfYear();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField8 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long11 = durationField8.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long13 = durationField8.getValueAsLong((long) 10);
        int int15 = durationField8.getValue((long) (byte) 10);
        boolean boolean16 = partial7.equals((java.lang.Object) durationField8);
        org.joda.time.Chronology chronology17 = partial7.getChronology();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial7.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial7.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.ReadableInterval readableInterval22 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval21);
        long long23 = readableInterval22.getStartMillis();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.ReadableInterval readableInterval26 = null;
        boolean boolean27 = readableInterval25.contains(readableInterval26);
        org.joda.time.Duration duration28 = readableInterval25.toDuration();
        org.joda.time.DateTime dateTime29 = readableInterval25.getEnd();
        boolean boolean30 = readableInterval22.contains((org.joda.time.ReadableInstant) dateTime29);
        boolean boolean31 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime29);
        int[] intArray33 = zonedChronology4.get((org.joda.time.ReadablePartial) partial7, 60035L);
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology4.secondOfMinute();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone39 = new org.joda.time.tz.FixedDateTimeZone("UTC", "", 0, 4);
        java.util.TimeZone timeZone40 = fixedDateTimeZone39.toTimeZone();
        java.lang.String str42 = fixedDateTimeZone39.getName(97L);
        int int44 = fixedDateTimeZone39.getOffsetFromLocal((-210858120000000L));
        long long46 = fixedDateTimeZone39.nextTransition(0L);
        int int48 = fixedDateTimeZone39.getOffset(2580171L);
        org.joda.time.chrono.ZonedChronology zonedChronology49 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) zonedChronology4, (org.joda.time.DateTimeZone) fixedDateTimeZone39);
        java.lang.String str50 = zonedChronology4.toString();
        org.joda.time.DateTimeField dateTimeField51 = zonedChronology4.weekOfWeekyear();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(readableInterval22);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-296907L) + "'", long23 == (-296907L));
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00" + "'", str42, "+00:00");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(zonedChronology49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str50, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeField51);
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1578");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        boolean boolean15 = partial0.equals((java.lang.Object) 1702281558665L);
        java.lang.String str16 = partial0.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = partial0.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.Partial partial19 = partial0.plus(readablePeriod18);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField21 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long24 = durationField21.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long26 = durationField21.getValueAsLong((long) 10);
        int int28 = durationField21.getValue((long) (byte) 10);
        boolean boolean29 = partial20.equals((java.lang.Object) durationField21);
        org.joda.time.Chronology chronology30 = partial20.getChronology();
        java.lang.String str31 = partial20.toString();
        boolean boolean32 = partial19.isAfter((org.joda.time.ReadablePartial) partial20);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.days();
        org.joda.time.ReadableInterval readableInterval34 = null;
        org.joda.time.ReadableInterval readableInterval35 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval34);
        org.joda.time.Chronology chronology36 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval34);
        org.joda.time.DateTimeField dateTimeField37 = chronology36.yearOfCentury();
        org.joda.time.DurationField durationField38 = chronology36.minutes();
        boolean boolean39 = durationFieldType33.isSupported(chronology36);
        org.joda.time.DateTimeField dateTimeField40 = chronology36.dayOfMonth();
        org.joda.time.Chronology chronology41 = chronology36.withUTC();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.hourOfHalfday();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DurationFieldType durationFieldType44 = dateTimeFieldType43.getRangeDurationType();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField46 = new org.joda.time.field.OffsetDateTimeField(dateTimeField42, dateTimeFieldType43, 199);
        org.joda.time.IllegalFieldValueException illegalFieldValueException49 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType43, (java.lang.Number) (-212544964L), "weekOfWeekyear");
        // The following exception was thrown during execution in test generation
        try {
            int int50 = partial20.get(dateTimeFieldType43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'minuteOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[]" + "'", str16, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10L + "'", long26 == 10L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertNotNull(readableInterval35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(durationFieldType44);
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1024");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = zonedChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField6 = zonedChronology4.monthOfYear();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField8 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long11 = durationField8.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long13 = durationField8.getValueAsLong((long) 10);
        int int15 = durationField8.getValue((long) (byte) 10);
        boolean boolean16 = partial7.equals((java.lang.Object) durationField8);
        org.joda.time.Chronology chronology17 = partial7.getChronology();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial7.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial7.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.ReadableInterval readableInterval22 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval21);
        long long23 = readableInterval22.getStartMillis();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.ReadableInterval readableInterval26 = null;
        boolean boolean27 = readableInterval25.contains(readableInterval26);
        org.joda.time.Duration duration28 = readableInterval25.toDuration();
        org.joda.time.DateTime dateTime29 = readableInterval25.getEnd();
        boolean boolean30 = readableInterval22.contains((org.joda.time.ReadableInstant) dateTime29);
        boolean boolean31 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime29);
        int[] intArray33 = zonedChronology4.get((org.joda.time.ReadablePartial) partial7, 60035L);
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology4.centuryOfEra();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField36 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long39 = durationField36.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long41 = durationField36.getValueAsLong((long) 10);
        int int43 = durationField36.getValue((long) (byte) 10);
        boolean boolean44 = partial35.equals((java.lang.Object) durationField36);
        org.joda.time.Chronology chronology45 = partial35.getChronology();
        int[] intArray47 = zonedChronology4.get((org.joda.time.ReadablePartial) partial35, 291L);
        org.joda.time.DateTimeField dateTimeField48 = zonedChronology4.hourOfDay();
        org.joda.time.Chronology chronology49 = org.joda.time.DateTimeUtils.getChronology((org.joda.time.Chronology) zonedChronology4);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(readableInterval22);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1701292973409L + "'", long23 == 1701292973409L);
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 10L + "'", long41 == 10L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(chronology49);
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2988");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        boolean boolean5 = durationFieldType0.isSupported(chronology3);
        org.joda.time.DurationField durationField6 = chronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.weekyearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField12 = new org.joda.time.field.OffsetDateTimeField(dateTimeField7, dateTimeFieldType8, 4, (int) ' ', (int) (short) -1);
        long long14 = offsetDateTimeField12.roundCeiling(2102400001L);
        boolean boolean15 = offsetDateTimeField12.isSupported();
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField17 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long20 = durationField17.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long22 = durationField17.getValueAsLong((long) 10);
        int int24 = durationField17.getValue((long) (byte) 10);
        boolean boolean25 = partial16.equals((java.lang.Object) durationField17);
        org.joda.time.Chronology chronology26 = partial16.getChronology();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        boolean boolean28 = partial16.isBefore((org.joda.time.ReadablePartial) partial27);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = partial16.getFieldTypes();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField31 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long34 = durationField31.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long36 = durationField31.getValueAsLong((long) 10);
        int int38 = durationField31.getValue((long) (byte) 10);
        boolean boolean39 = partial30.equals((java.lang.Object) durationField31);
        org.joda.time.Chronology chronology40 = partial30.getChronology();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        boolean boolean42 = partial30.isBefore((org.joda.time.ReadablePartial) partial41);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray43 = partial30.getFieldTypes();
        boolean boolean45 = partial30.equals((java.lang.Object) 1702281558665L);
        int int46 = partial16.compareTo((org.joda.time.ReadablePartial) partial30);
        java.util.Locale locale48 = null;
        java.lang.String str49 = offsetDateTimeField12.getAsShortText((org.joda.time.ReadablePartial) partial30, 9, locale48);
        int int51 = offsetDateTimeField12.getLeapAmount(33258197981048L);
        java.util.Locale locale53 = null;
        java.lang.String str54 = offsetDateTimeField12.getAsText((-315585559), locale53);
        int int55 = offsetDateTimeField12.getMinimumValue();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 31535999991L + "'", long14 == 31535999991L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10L + "'", long22 == 10L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 10L + "'", long36 == 10L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "9" + "'", str49, "9");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "-315585559" + "'", str54, "-315585559");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 32 + "'", int55 == 32);
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3139");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField11 = new org.joda.time.field.OffsetDateTimeField(dateTimeField8, dateTimeFieldType9, (int) (short) 1);
        java.lang.String str13 = offsetDateTimeField11.getAsText((long) 1);
        long long15 = offsetDateTimeField11.roundHalfFloor((-210858120000000L));
        java.lang.String str16 = offsetDateTimeField11.getName();
        org.joda.time.ReadableInterval readableInterval17 = null;
        org.joda.time.ReadableInterval readableInterval18 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval17);
        org.joda.time.Chronology chronology19 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval17);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfCentury();
        org.joda.time.DurationField durationField21 = chronology19.minutes();
        long long22 = durationField21.getUnitMillis();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField25 = new org.joda.time.field.DividedDateTimeField((org.joda.time.DateTimeField) offsetDateTimeField11, durationField21, dateTimeFieldType23, (int) '#');
        org.joda.time.DurationField durationField26 = dividedDateTimeField25.getRangeDurationField();
        java.util.Locale locale27 = null;
        int int28 = dividedDateTimeField25.getMaximumTextLength(locale27);
        org.joda.time.ReadableInterval readableInterval29 = null;
        org.joda.time.ReadableInterval readableInterval30 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval29);
        long long31 = readableInterval30.getStartMillis();
        org.joda.time.ReadableInterval readableInterval32 = null;
        org.joda.time.ReadableInterval readableInterval33 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval32);
        long long34 = readableInterval33.getEndMillis();
        boolean boolean35 = readableInterval30.overlaps(readableInterval33);
        org.joda.time.MutableInterval mutableInterval36 = readableInterval30.toMutableInterval();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        boolean boolean38 = mutableInterval36.equals((java.lang.Object) dateTimeFieldType37);
        java.lang.String str39 = dateTimeFieldType37.getName();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField40 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField25, dateTimeFieldType37);
        java.lang.String str41 = dividedDateTimeField25.toString();
        int int42 = dividedDateTimeField25.getMaximumValue();
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-210858120000009L) + "'", long15 == (-210858120000009L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "millisOfDay" + "'", str16, "millisOfDay");
        org.junit.Assert.assertNotNull(readableInterval18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 60000L + "'", long22 == 60000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(readableInterval30);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-296907L) + "'", long31 == (-296907L));
        org.junit.Assert.assertNotNull(readableInterval33);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-296907L) + "'", long34 == (-296907L));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(mutableInterval36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "weekOfWeekyear" + "'", str39, "weekOfWeekyear");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "DateTimeField[minuteOfHour]" + "'", str41, "DateTimeField[minuteOfHour]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0421");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add((-31L), (long) '#');
        org.joda.time.DurationField durationField10 = unsupportedDateTimeField6.getLeapDurationField();
        int int13 = unsupportedDateTimeField6.getDifference((long) (byte) 10, 10L);
        long long16 = unsupportedDateTimeField6.add((long) 1439, (int) (byte) -1);
        long long19 = unsupportedDateTimeField6.add((-315569319587L), (int) ' ');
        org.joda.time.DurationField durationField20 = unsupportedDateTimeField6.getDurationField();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField22 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long25 = durationField22.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long27 = durationField22.getValueAsLong((long) 10);
        int int29 = durationField22.getValue((long) (byte) 10);
        boolean boolean30 = partial21.equals((java.lang.Object) durationField22);
        org.joda.time.Chronology chronology31 = partial21.getChronology();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        boolean boolean33 = partial21.isBefore((org.joda.time.ReadablePartial) partial32);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray34 = partial21.getFieldTypes();
        boolean boolean36 = partial21.equals((java.lang.Object) 1702281558665L);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType38 = dateTimeFieldType37.getDurationType();
        boolean boolean39 = partial21.isSupported(dateTimeFieldType37);
        java.util.Locale locale41 = null;
        java.lang.String str42 = partial21.toString("[]", locale41);
        org.joda.time.ReadableInterval readableInterval43 = null;
        org.joda.time.ReadableInterval readableInterval44 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval43);
        org.joda.time.Chronology chronology45 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval43);
        org.joda.time.DateTimeField dateTimeField46 = chronology45.minuteOfDay();
        org.joda.time.ReadablePartial readablePartial47 = null;
        int[] intArray54 = new int[] { 53460006, ' ', (short) 100, 28354759, 53460006, 10 };
        int int55 = dateTimeField46.getMinimumValue(readablePartial47, intArray54);
        // The following exception was thrown during execution in test generation
        try {
            int int56 = unsupportedDateTimeField6.getMinimumValue((org.joda.time.ReadablePartial) partial21, intArray54);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1438L + "'", long16 == 1438L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-315569319555L) + "'", long19 == (-315569319555L));
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[]" + "'", str42, "[]");
        org.junit.Assert.assertNotNull(readableInterval44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[53460006, 32, 100, 28354759, 53460006, 10]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0684");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        java.lang.String str11 = partial0.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = partial0.getFieldTypes();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField14 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long17 = durationField14.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long19 = durationField14.getValueAsLong((long) 10);
        int int21 = durationField14.getValue((long) (byte) 10);
        boolean boolean22 = partial13.equals((java.lang.Object) durationField14);
        org.joda.time.Chronology chronology23 = partial13.getChronology();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial13.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = partial13.getFieldTypes();
        boolean boolean28 = partial13.equals((java.lang.Object) 1702281558665L);
        java.lang.String str29 = partial13.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = partial13.getFormatter();
        boolean boolean31 = partial0.isEqual((org.joda.time.ReadablePartial) partial13);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval33 = null;
        org.joda.time.ReadableInterval readableInterval34 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval33);
        org.joda.time.Chronology chronology35 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval33);
        org.joda.time.DateTimeField dateTimeField36 = chronology35.yearOfCentury();
        org.joda.time.DurationField durationField37 = chronology35.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField38 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType32, durationField37);
        long long41 = unsupportedDateTimeField38.add((-31L), (long) '#');
        org.joda.time.DurationField durationField42 = unsupportedDateTimeField38.getLeapDurationField();
        org.joda.time.DurationField durationField43 = unsupportedDateTimeField38.getRangeDurationField();
        long long46 = unsupportedDateTimeField38.getDifferenceAsLong(10L, 0L);
        long long49 = unsupportedDateTimeField38.getDifferenceAsLong(0L, (long) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = unsupportedDateTimeField38.getType();
        // The following exception was thrown during execution in test generation
        try {
            int int51 = partial13.get(dateTimeFieldType50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'dayOfYear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[]" + "'", str29, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(readableInterval34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 4L + "'", long41 == 4L);
        org.junit.Assert.assertNull(durationField42);
        org.junit.Assert.assertNull(durationField43);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10L + "'", long46 == 10L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2171");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str1 = dateTimeZone0.toString();
        java.lang.String str3 = dateTimeZone0.getShortName((-210866846400000L));
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeUtils.getZone(dateTimeZone0);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone5 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone4);
        boolean boolean7 = cachedDateTimeZone5.equals((java.lang.Object) 432000032L);
        long long10 = cachedDateTimeZone5.convertLocalToUTC(432000032L, false);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone15 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology16 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone17 = gregorianChronology16.getZone();
        long long21 = gregorianChronology16.add(0L, (long) (byte) 1, (int) (byte) 0);
        org.joda.time.Chronology chronology22 = gregorianChronology16.withUTC();
        boolean boolean23 = cachedDateTimeZone5.equals((java.lang.Object) gregorianChronology16);
        org.joda.time.chrono.ISOChronology iSOChronology24 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField25 = iSOChronology24.minutes();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str27 = dateTimeZone26.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology24, dateTimeZone26);
        java.lang.String str29 = zonedChronology28.toString();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfDay();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone35 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        int int37 = fixedDateTimeZone35.getStandardOffset((long) 1439);
        boolean boolean38 = fixedDateTimeZone35.isFixed();
        long long40 = fixedDateTimeZone35.nextTransition((long) 24);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        long long44 = dateTimeZone41.adjustOffset((long) 100, true);
        long long46 = fixedDateTimeZone35.getMillisKeepLocal(dateTimeZone41, 10L);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        int int49 = dateTimeZone47.getStandardOffset((long) 1);
        long long51 = dateTimeZone41.getMillisKeepLocal(dateTimeZone47, 5L);
        org.joda.time.Chronology chronology52 = zonedChronology28.withZone(dateTimeZone41);
        org.joda.time.Chronology chronology53 = gregorianChronology16.withZone(dateTimeZone41);
        long long55 = dateTimeZone41.nextTransition((-476134743445L));
        int int57 = dateTimeZone41.getOffsetFromLocal(103654969200000L);
        java.util.TimeZone timeZone58 = dateTimeZone41.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "UTC" + "'", str1, "UTC");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(cachedDateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 432000032L + "'", long10 == 432000032L);
        org.junit.Assert.assertNotNull(gregorianChronology16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(iSOChronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTC" + "'", str27, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str29, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 24L + "'", long40 == 24L);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 100L + "'", long44 == 100L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10L + "'", long46 == 10L);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 5L + "'", long51 == 5L);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-476134743445L) + "'", long55 == (-476134743445L));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(timeZone58);
        org.junit.Assert.assertEquals(timeZone58.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2880");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        java.lang.String str11 = partial0.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = partial0.getFieldTypes();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField14 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long17 = durationField14.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long19 = durationField14.getValueAsLong((long) 10);
        int int21 = durationField14.getValue((long) (byte) 10);
        boolean boolean22 = partial13.equals((java.lang.Object) durationField14);
        org.joda.time.Chronology chronology23 = partial13.getChronology();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial13.isBefore((org.joda.time.ReadablePartial) partial24);
        java.lang.String str26 = partial13.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType28 = dateTimeFieldType27.getDurationType();
        org.joda.time.Partial partial29 = partial13.without(dateTimeFieldType27);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone34 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology35 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone34);
        org.joda.time.ReadableInterval readableInterval36 = null;
        org.joda.time.ReadableInterval readableInterval37 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval36);
        org.joda.time.Chronology chronology38 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval36);
        org.joda.time.DateTimeField dateTimeField39 = chronology38.yearOfCentury();
        org.joda.time.DurationField durationField40 = chronology38.minutes();
        org.joda.time.DurationField durationField41 = chronology38.halfdays();
        org.joda.time.DurationField durationField42 = chronology38.weeks();
        org.joda.time.DateTimeField dateTimeField43 = chronology38.millisOfDay();
        boolean boolean44 = gregorianChronology35.equals((java.lang.Object) chronology38);
        boolean boolean45 = partial13.equals((java.lang.Object) boolean44);
        boolean boolean46 = partial0.isMatch((org.joda.time.ReadablePartial) partial13);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.Partial partial48 = partial0.plus(readablePeriod47);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int50 = partial48.get(dateTimeFieldType49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(gregorianChronology35);
        org.junit.Assert.assertNotNull(readableInterval37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(partial48);
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0708");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        long long24 = remainderDateTimeField22.roundHalfFloor(3600000L);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval26 = null;
        org.joda.time.ReadableInterval readableInterval27 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval26);
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval26);
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfCentury();
        org.joda.time.DurationField durationField30 = chronology28.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField31 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType25, durationField30);
        long long34 = unsupportedDateTimeField31.add((-31L), (long) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = unsupportedDateTimeField31.getType();
        org.joda.time.DurationFieldType durationFieldType36 = dateTimeFieldType35.getRangeDurationType();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField37 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField22, dateTimeFieldType35);
        long long39 = dividedDateTimeField37.roundFloor((-1L));
        long long42 = dividedDateTimeField37.set(1701289161914L, (int) (byte) 0);
        int int45 = dividedDateTimeField37.getDifference((-97L), 35L);
        long long48 = dividedDateTimeField37.getDifferenceAsLong(315532800000L, (-1454470839259L));
        // The following exception was thrown during execution in test generation
        try {
            long long51 = dividedDateTimeField37.add((long) 202, 1641255540000L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 16412555400000");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(readableInterval27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 4L + "'", long34 == 4L);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-315619200000L) + "'", long39 == (-315619200000L));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-62043766838086L) + "'", long42 == (-62043766838086L));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 5L + "'", long48 == 5L);
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2283");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        long long24 = remainderDateTimeField22.roundHalfFloor(3600000L);
        org.joda.time.DurationField durationField25 = remainderDateTimeField22.getRangeDurationField();
        org.joda.time.DurationField durationField26 = remainderDateTimeField22.iRangeField;
        long long29 = remainderDateTimeField22.getDifferenceAsLong(222926773380171L, 28757962108L);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField31 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long34 = durationField31.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long36 = durationField31.getValueAsLong((long) 10);
        int int38 = durationField31.getValue((long) (byte) 10);
        boolean boolean39 = partial30.equals((java.lang.Object) durationField31);
        org.joda.time.Chronology chronology40 = partial30.getChronology();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        boolean boolean42 = partial30.isBefore((org.joda.time.ReadablePartial) partial41);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray43 = partial30.getFieldTypes();
        boolean boolean45 = partial30.equals((java.lang.Object) 1702281558665L);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType47 = dateTimeFieldType46.getDurationType();
        boolean boolean48 = partial30.isSupported(dateTimeFieldType46);
        java.util.Locale locale50 = null;
        java.lang.String str51 = remainderDateTimeField22.getAsText((org.joda.time.ReadablePartial) partial30, 3, locale50);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 7063L + "'", long29 == 7063L);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 10L + "'", long36 == 10L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "3" + "'", str51, "3");
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0229");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        org.joda.time.DurationField durationField7 = unsupportedDateTimeField6.getDurationField();
        boolean boolean8 = unsupportedDateTimeField6.isLenient();
        long long11 = unsupportedDateTimeField6.getDifferenceAsLong(1701289170393L, 946684800000L);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField13 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long16 = durationField13.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long18 = durationField13.getValueAsLong((long) 10);
        int int20 = durationField13.getValue((long) (byte) 10);
        boolean boolean21 = partial12.equals((java.lang.Object) durationField13);
        org.joda.time.Chronology chronology22 = partial12.getChronology();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        boolean boolean24 = partial12.isBefore((org.joda.time.ReadablePartial) partial23);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = partial12.getFieldTypes();
        org.joda.time.chrono.ISOChronology iSOChronology26 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField27 = iSOChronology26.minutes();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology26.millisOfDay();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology26.halfdayOfDay();
        org.joda.time.DurationField durationField30 = iSOChronology26.seconds();
        org.joda.time.Chronology chronology31 = iSOChronology26.withUTC();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology26.dayOfYear();
        org.joda.time.DurationField durationField33 = iSOChronology26.millis();
        org.joda.time.DurationField durationField34 = iSOChronology26.halfdays();
        org.joda.time.ReadableInterval readableInterval35 = null;
        org.joda.time.ReadableInterval readableInterval36 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval35);
        org.joda.time.ReadableInterval readableInterval37 = null;
        boolean boolean38 = readableInterval36.contains(readableInterval37);
        org.joda.time.Duration duration39 = readableInterval36.toDuration();
        org.joda.time.DateTime dateTime40 = readableInterval36.getEnd();
        org.joda.time.Period period41 = readableInterval36.toPeriod();
        int[] intArray43 = iSOChronology26.get((org.joda.time.ReadablePeriod) period41, (long) 10);
        // The following exception was thrown during execution in test generation
        try {
            int int44 = unsupportedDateTimeField6.getMinimumValue((org.joda.time.ReadablePartial) partial12, intArray43);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 754604370393L + "'", long11 == 754604370393L);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10L + "'", long18 == 10L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertNotNull(iSOChronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(readableInterval36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[0, 0, 0, 0, 0, 0, 0, 10]");
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2756");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = zonedChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField6 = zonedChronology4.monthOfYear();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField8 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long11 = durationField8.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long13 = durationField8.getValueAsLong((long) 10);
        int int15 = durationField8.getValue((long) (byte) 10);
        boolean boolean16 = partial7.equals((java.lang.Object) durationField8);
        org.joda.time.Chronology chronology17 = partial7.getChronology();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial7.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial7.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.ReadableInterval readableInterval22 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval21);
        long long23 = readableInterval22.getStartMillis();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.ReadableInterval readableInterval26 = null;
        boolean boolean27 = readableInterval25.contains(readableInterval26);
        org.joda.time.Duration duration28 = readableInterval25.toDuration();
        org.joda.time.DateTime dateTime29 = readableInterval25.getEnd();
        boolean boolean30 = readableInterval22.contains((org.joda.time.ReadableInstant) dateTime29);
        boolean boolean31 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime29);
        int[] intArray33 = zonedChronology4.get((org.joda.time.ReadablePartial) partial7, 60035L);
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology4.centuryOfEra();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField36 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long39 = durationField36.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long41 = durationField36.getValueAsLong((long) 10);
        int int43 = durationField36.getValue((long) (byte) 10);
        boolean boolean44 = partial35.equals((java.lang.Object) durationField36);
        org.joda.time.Chronology chronology45 = partial35.getChronology();
        int[] intArray47 = zonedChronology4.get((org.joda.time.ReadablePartial) partial35, 291L);
        org.joda.time.Chronology chronology48 = partial35.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = partial35.getFormatter();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(readableInterval22);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-29855590305819L) + "'", long23 == (-29855590305819L));
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 10L + "'", long41 == 10L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNull(dateTimeFormatter49);
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1982");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval3);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DurationField durationField7 = chronology5.millis();
        org.joda.time.DurationField durationField8 = chronology5.centuries();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval9);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology11.millis();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.ReadableInterval readableInterval16 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval15);
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.ReadableInterval readableInterval21 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval20);
        org.joda.time.ReadableInterval readableInterval22 = null;
        boolean boolean23 = readableInterval21.contains(readableInterval22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = readableInterval21.toPeriod(periodType24);
        int[] intArray27 = chronology17.get((org.joda.time.ReadablePeriod) period25, (-210866846400000L));
        int[] intArray30 = chronology11.get((org.joda.time.ReadablePeriod) period25, 2173795348453L, (long) 1439);
        int[] intArray33 = chronology5.get((org.joda.time.ReadablePeriod) period25, 291L, 2580171L);
        int[] intArray36 = iSOChronology0.get((org.joda.time.ReadablePeriod) period25, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField37 = iSOChronology0.months();
        java.lang.String str38 = iSOChronology0.toString();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = iSOChronology0.equals((java.lang.Object) partial39);
        java.lang.String str41 = iSOChronology0.toString();
        org.joda.time.Chronology chronology42 = iSOChronology0.withUTC();
        org.joda.time.Partial partial43 = new org.joda.time.Partial((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = partial43.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial46 = partial43.minus(readablePeriod45);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(readableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(readableInterval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(readableInterval21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(durationField37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[UTC]" + "'", str38, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ISOChronology[UTC]" + "'", str41, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(partial46);
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1318");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval3);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DurationField durationField7 = chronology5.millis();
        org.joda.time.DurationField durationField8 = chronology5.centuries();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval9);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology11.millis();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.ReadableInterval readableInterval16 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval15);
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.ReadableInterval readableInterval21 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval20);
        org.joda.time.ReadableInterval readableInterval22 = null;
        boolean boolean23 = readableInterval21.contains(readableInterval22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = readableInterval21.toPeriod(periodType24);
        int[] intArray27 = chronology17.get((org.joda.time.ReadablePeriod) period25, (-210866846400000L));
        int[] intArray30 = chronology11.get((org.joda.time.ReadablePeriod) period25, 2173795348453L, (long) 1439);
        int[] intArray33 = chronology5.get((org.joda.time.ReadablePeriod) period25, 291L, 2580171L);
        int[] intArray36 = iSOChronology0.get((org.joda.time.ReadablePeriod) period25, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField37 = iSOChronology0.months();
        java.lang.String str38 = iSOChronology0.toString();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = iSOChronology0.equals((java.lang.Object) partial39);
        java.lang.String str41 = iSOChronology0.toString();
        org.joda.time.Chronology chronology42 = iSOChronology0.withUTC();
        org.joda.time.ReadablePartial readablePartial43 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long45 = iSOChronology0.set(readablePartial43, 41807691080148292L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(readableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(readableInterval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(readableInterval21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(durationField37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[UTC]" + "'", str38, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ISOChronology[UTC]" + "'", str41, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(chronology42);
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2972");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        long long24 = remainderDateTimeField22.roundHalfFloor(3600000L);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval26 = null;
        org.joda.time.ReadableInterval readableInterval27 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval26);
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval26);
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfCentury();
        org.joda.time.DurationField durationField30 = chronology28.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField31 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType25, durationField30);
        long long34 = unsupportedDateTimeField31.add((-31L), (long) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = unsupportedDateTimeField31.getType();
        org.joda.time.DurationFieldType durationFieldType36 = dateTimeFieldType35.getRangeDurationType();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField37 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField22, dateTimeFieldType35);
        long long39 = dividedDateTimeField37.roundFloor((-1L));
        long long42 = dividedDateTimeField37.addWrapField(1701289188819L, 1439);
        long long44 = dividedDateTimeField37.roundFloor(28757979647L);
        org.joda.time.DurationField durationField45 = dividedDateTimeField37.getDurationField();
        long long47 = dividedDateTimeField37.remainder((-7935578L));
        java.util.Locale locale49 = null;
        java.lang.String str50 = dividedDateTimeField37.getAsText((-63139559828401014L), locale49);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(readableInterval27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 4L + "'", long34 == 4L);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-315619200000L) + "'", long39 == (-315619200000L));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 455805865188819L + "'", long42 == 455805865188819L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 315524864422L + "'", long47 == 315524864422L);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "199884" + "'", str50, "199884");
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2493");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        long long24 = remainderDateTimeField22.roundHalfFloor(3600000L);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval26 = null;
        org.joda.time.ReadableInterval readableInterval27 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval26);
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval26);
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfCentury();
        org.joda.time.DurationField durationField30 = chronology28.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField31 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType25, durationField30);
        long long34 = unsupportedDateTimeField31.add((-31L), (long) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = unsupportedDateTimeField31.getType();
        org.joda.time.DurationFieldType durationFieldType36 = dateTimeFieldType35.getRangeDurationType();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField37 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField22, dateTimeFieldType35);
        org.joda.time.DurationField durationField38 = remainderDateTimeField22.iDurationField;
        long long40 = remainderDateTimeField22.roundFloor(1701289161428L);
        int int42 = remainderDateTimeField22.get(2102400001L);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = remainderDateTimeField22.getType();
        // The following exception was thrown during execution in test generation
        try {
            long long46 = remainderDateTimeField22.set(894727630297270142L, (-17272053));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -17272053 for dayOfYear must be in the range [0,9]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(readableInterval27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 4L + "'", long34 == 4L);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1672531200000L + "'", long40 == 1672531200000L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1178");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = zonedChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField6 = zonedChronology4.monthOfYear();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField8 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long11 = durationField8.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long13 = durationField8.getValueAsLong((long) 10);
        int int15 = durationField8.getValue((long) (byte) 10);
        boolean boolean16 = partial7.equals((java.lang.Object) durationField8);
        org.joda.time.Chronology chronology17 = partial7.getChronology();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial7.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial7.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.ReadableInterval readableInterval22 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval21);
        long long23 = readableInterval22.getStartMillis();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.ReadableInterval readableInterval26 = null;
        boolean boolean27 = readableInterval25.contains(readableInterval26);
        org.joda.time.Duration duration28 = readableInterval25.toDuration();
        org.joda.time.DateTime dateTime29 = readableInterval25.getEnd();
        boolean boolean30 = readableInterval22.contains((org.joda.time.ReadableInstant) dateTime29);
        boolean boolean31 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime29);
        int[] intArray33 = zonedChronology4.get((org.joda.time.ReadablePartial) partial7, 60035L);
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology4.secondOfMinute();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone39 = new org.joda.time.tz.FixedDateTimeZone("UTC", "", 0, 4);
        java.util.TimeZone timeZone40 = fixedDateTimeZone39.toTimeZone();
        java.lang.String str42 = fixedDateTimeZone39.getName(97L);
        int int44 = fixedDateTimeZone39.getOffsetFromLocal((-210858120000000L));
        long long46 = fixedDateTimeZone39.nextTransition(0L);
        int int48 = fixedDateTimeZone39.getOffset(2580171L);
        org.joda.time.chrono.ZonedChronology zonedChronology49 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) zonedChronology4, (org.joda.time.DateTimeZone) fixedDateTimeZone39);
        org.joda.time.DateTimeField dateTimeField50 = zonedChronology4.secondOfMinute();
        org.joda.time.DurationField durationField51 = zonedChronology4.weekyears();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(readableInterval22);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 315639019277L + "'", long23 == 315639019277L);
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00" + "'", str42, "+00:00");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(zonedChronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3109");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = zonedChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField6 = zonedChronology4.monthOfYear();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField8 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long11 = durationField8.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long13 = durationField8.getValueAsLong((long) 10);
        int int15 = durationField8.getValue((long) (byte) 10);
        boolean boolean16 = partial7.equals((java.lang.Object) durationField8);
        org.joda.time.Chronology chronology17 = partial7.getChronology();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial7.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial7.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.ReadableInterval readableInterval22 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval21);
        long long23 = readableInterval22.getStartMillis();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.ReadableInterval readableInterval26 = null;
        boolean boolean27 = readableInterval25.contains(readableInterval26);
        org.joda.time.Duration duration28 = readableInterval25.toDuration();
        org.joda.time.DateTime dateTime29 = readableInterval25.getEnd();
        boolean boolean30 = readableInterval22.contains((org.joda.time.ReadableInstant) dateTime29);
        boolean boolean31 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime29);
        int[] intArray33 = zonedChronology4.get((org.joda.time.ReadablePartial) partial7, 60035L);
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology4.secondOfMinute();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone39 = new org.joda.time.tz.FixedDateTimeZone("UTC", "", 0, 4);
        java.util.TimeZone timeZone40 = fixedDateTimeZone39.toTimeZone();
        java.lang.String str42 = fixedDateTimeZone39.getName(97L);
        int int44 = fixedDateTimeZone39.getOffsetFromLocal((-210858120000000L));
        long long46 = fixedDateTimeZone39.nextTransition(0L);
        int int48 = fixedDateTimeZone39.getOffset(2580171L);
        org.joda.time.chrono.ZonedChronology zonedChronology49 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) zonedChronology4, (org.joda.time.DateTimeZone) fixedDateTimeZone39);
        org.joda.time.DateTimeField dateTimeField50 = zonedChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField51 = zonedChronology4.hourOfHalfday();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(readableInterval22);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-296907L) + "'", long23 == (-296907L));
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00" + "'", str42, "+00:00");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(zonedChronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0126");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = durationField5.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval11 = null;
        org.joda.time.ReadableInterval readableInterval12 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval11);
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval11);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfCentury();
        boolean boolean15 = durationFieldType10.isSupported(chronology13);
        org.joda.time.field.ScaledDurationField scaledDurationField17 = new org.joda.time.field.ScaledDurationField(durationField5, durationFieldType10, (int) 'a');
        org.joda.time.DurationField durationField18 = scaledDurationField17.getWrappedField();
        int int21 = scaledDurationField17.getDifference((long) (byte) -1, (long) (short) 0);
        long long24 = scaledDurationField17.getMillis((int) (short) 100, (long) 4);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval26 = null;
        org.joda.time.ReadableInterval readableInterval27 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval26);
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval26);
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfCentury();
        org.joda.time.DurationField durationField30 = chronology28.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField31 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType25, durationField30);
        long long34 = durationField30.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType35 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval36 = null;
        org.joda.time.ReadableInterval readableInterval37 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval36);
        org.joda.time.Chronology chronology38 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval36);
        org.joda.time.DateTimeField dateTimeField39 = chronology38.yearOfCentury();
        boolean boolean40 = durationFieldType35.isSupported(chronology38);
        org.joda.time.field.ScaledDurationField scaledDurationField42 = new org.joda.time.field.ScaledDurationField(durationField30, durationFieldType35, (int) 'a');
        int int44 = scaledDurationField42.getValue((long) (short) -1);
        long long47 = scaledDurationField42.add((long) (-1), 10);
        boolean boolean48 = scaledDurationField17.equals((java.lang.Object) 10);
        long long51 = scaledDurationField17.getValueAsLong(3600000L, 1701289172565L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-210866846400000L) + "'", long9 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(readableInterval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 9700L + "'", long24 == 9700L);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(readableInterval27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-210866846400000L) + "'", long34 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertNotNull(readableInterval37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 969L + "'", long47 == 969L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 37113L + "'", long51 == 37113L);
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test2000");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        boolean boolean15 = partial0.equals((java.lang.Object) 1702281558665L);
        java.lang.String str16 = partial0.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = partial0.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.Partial partial19 = partial0.plus(readablePeriod18);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField21 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long24 = durationField21.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long26 = durationField21.getValueAsLong((long) 10);
        int int28 = durationField21.getValue((long) (byte) 10);
        boolean boolean29 = partial20.equals((java.lang.Object) durationField21);
        org.joda.time.chrono.ISOChronology iSOChronology30 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField31 = iSOChronology30.minutes();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology30.millisOfDay();
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology30.halfdayOfDay();
        org.joda.time.ReadableInterval readableInterval34 = null;
        org.joda.time.ReadableInterval readableInterval35 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval34);
        org.joda.time.ReadableInterval readableInterval36 = null;
        boolean boolean37 = readableInterval35.contains(readableInterval36);
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Period period39 = readableInterval35.toPeriod(periodType38);
        int[] intArray42 = iSOChronology30.get((org.joda.time.ReadablePeriod) period39, 4L, (long) '#');
        org.joda.time.Partial partial43 = partial20.plus((org.joda.time.ReadablePeriod) period39);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Partial partial45 = partial43.without(dateTimeFieldType44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = partial43.getFormatter();
        boolean boolean47 = partial19.isAfter((org.joda.time.ReadablePartial) partial43);
        java.lang.String str49 = partial43.toString("53460006");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType51 = partial43.getFieldType(196);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 196");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[]" + "'", str16, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10L + "'", long26 == 10L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(iSOChronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(readableInterval35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 0, 0, 0, 0, 0, 0, 31]");
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertNull(dateTimeFormatter46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "53460006" + "'", str49, "53460006");
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0489");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = zonedChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField6 = zonedChronology4.monthOfYear();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField8 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long11 = durationField8.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long13 = durationField8.getValueAsLong((long) 10);
        int int15 = durationField8.getValue((long) (byte) 10);
        boolean boolean16 = partial7.equals((java.lang.Object) durationField8);
        org.joda.time.Chronology chronology17 = partial7.getChronology();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial7.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial7.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.ReadableInterval readableInterval22 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval21);
        long long23 = readableInterval22.getStartMillis();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.ReadableInterval readableInterval26 = null;
        boolean boolean27 = readableInterval25.contains(readableInterval26);
        org.joda.time.Duration duration28 = readableInterval25.toDuration();
        org.joda.time.DateTime dateTime29 = readableInterval25.getEnd();
        boolean boolean30 = readableInterval22.contains((org.joda.time.ReadableInstant) dateTime29);
        boolean boolean31 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime29);
        int[] intArray33 = zonedChronology4.get((org.joda.time.ReadablePartial) partial7, 60035L);
        int[] intArray34 = partial7.getValues();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.IllegalFieldValueException illegalFieldValueException38 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType35, (java.lang.Number) 60035L, "");
        boolean boolean39 = org.joda.time.IllegalInstantException.isIllegalInstant((java.lang.Throwable) illegalFieldValueException38);
        java.lang.Number number40 = illegalFieldValueException38.getUpperBound();
        java.lang.String str41 = illegalFieldValueException38.getFieldName();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = illegalFieldValueException38.getDateTimeFieldType();
        // The following exception was thrown during execution in test generation
        try {
            int int43 = partial7.get(dateTimeFieldType42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'hourOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(readableInterval22);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-476134743922L) + "'", long23 == (-476134743922L));
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(number40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hourOfDay" + "'", str41, "hourOfDay");
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0523");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str1 = dateTimeZone0.toString();
        java.lang.String str3 = dateTimeZone0.getShortName((-210866846400000L));
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeUtils.getZone(dateTimeZone0);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone5 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone4);
        boolean boolean7 = cachedDateTimeZone5.equals((java.lang.Object) 432000032L);
        long long10 = cachedDateTimeZone5.convertLocalToUTC(432000032L, false);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone15 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology16 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone17 = gregorianChronology16.getZone();
        long long21 = gregorianChronology16.add(0L, (long) (byte) 1, (int) (byte) 0);
        org.joda.time.Chronology chronology22 = gregorianChronology16.withUTC();
        boolean boolean23 = cachedDateTimeZone5.equals((java.lang.Object) gregorianChronology16);
        org.joda.time.chrono.ISOChronology iSOChronology24 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField25 = iSOChronology24.minutes();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str27 = dateTimeZone26.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology24, dateTimeZone26);
        java.lang.String str29 = zonedChronology28.toString();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfDay();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone35 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        int int37 = fixedDateTimeZone35.getStandardOffset((long) 1439);
        boolean boolean38 = fixedDateTimeZone35.isFixed();
        long long40 = fixedDateTimeZone35.nextTransition((long) 24);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        long long44 = dateTimeZone41.adjustOffset((long) 100, true);
        long long46 = fixedDateTimeZone35.getMillisKeepLocal(dateTimeZone41, 10L);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        int int49 = dateTimeZone47.getStandardOffset((long) 1);
        long long51 = dateTimeZone41.getMillisKeepLocal(dateTimeZone47, 5L);
        org.joda.time.Chronology chronology52 = zonedChronology28.withZone(dateTimeZone41);
        org.joda.time.Chronology chronology53 = gregorianChronology16.withZone(dateTimeZone41);
        // The following exception was thrown during execution in test generation
        try {
            long long61 = gregorianChronology16.getDateTimeMillis(59, (-5), 970, 12, 0, 10, 6691);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 6691 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "UTC" + "'", str1, "UTC");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(cachedDateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 432000032L + "'", long10 == 432000032L);
        org.junit.Assert.assertNotNull(gregorianChronology16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(iSOChronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTC" + "'", str27, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str29, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 24L + "'", long40 == 24L);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 100L + "'", long44 == 100L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 28800010L + "'", long46 == 28800010L);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-28799995L) + "'", long51 == (-28799995L));
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(chronology53);
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3092");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfWeek();
        java.lang.String str1 = dateTimeFieldType0.getName();
        org.joda.time.IllegalFieldValueException illegalFieldValueException3 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType0, "-08:00");
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval5 = null;
        org.joda.time.ReadableInterval readableInterval6 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval5);
        org.joda.time.Chronology chronology7 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval5);
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfCentury();
        org.joda.time.DurationField durationField9 = chronology7.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField10 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType4, durationField9);
        long long13 = durationField9.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.ReadableInterval readableInterval16 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval15);
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        boolean boolean19 = durationFieldType14.isSupported(chronology17);
        org.joda.time.field.ScaledDurationField scaledDurationField21 = new org.joda.time.field.ScaledDurationField(durationField9, durationFieldType14, (int) 'a');
        int int23 = scaledDurationField21.getValue((long) (short) -1);
        boolean boolean24 = scaledDurationField21.isSupported();
        long long27 = scaledDurationField21.getDifferenceAsLong(28800001L, (-210858120000000L));
        java.lang.String str28 = scaledDurationField21.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType30 = dateTimeFieldType29.getDurationType();
        org.joda.time.field.PreciseDurationField preciseDurationField32 = new org.joda.time.field.PreciseDurationField(durationFieldType30, 28354819L);
        long long33 = preciseDurationField32.getUnitMillis();
        boolean boolean34 = preciseDurationField32.isPrecise();
        long long37 = preciseDurationField32.getValueAsLong((long) 719, 306607L);
        org.joda.time.field.PreciseDateTimeField preciseDateTimeField38 = new org.joda.time.field.PreciseDateTimeField(dateTimeFieldType0, (org.joda.time.DurationField) scaledDurationField21, (org.joda.time.DurationField) preciseDurationField32);
        boolean boolean39 = preciseDateTimeField38.isLenient();
        int int40 = preciseDateTimeField38.getRange();
        long long43 = preciseDateTimeField38.set((-80816423676523L), 53324);
        int int46 = preciseDateTimeField38.getMaximumValueForSet(1758458159332803L, (-256));
        long long49 = preciseDateTimeField38.set(59169243L, 109);
        int int50 = preciseDateTimeField38.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "dayOfWeek" + "'", str1, "dayOfWeek");
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(readableInterval6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-210866846400000L) + "'", long13 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(readableInterval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 2173795348453L + "'", long27 == 2173795348453L);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "DurationField[hours]" + "'", str28, "DurationField[hours]");
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 28354819L + "'", long33 == 28354819L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 292317 + "'", int40 == 292317);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-80816445234579L) + "'", long43 == (-80816445234579L));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 292316 + "'", int46 == 292316);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 56720090L + "'", long49 == 56720090L);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2892");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        long long24 = remainderDateTimeField22.roundHalfFloor(3600000L);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval26 = null;
        org.joda.time.ReadableInterval readableInterval27 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval26);
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval26);
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfCentury();
        org.joda.time.DurationField durationField30 = chronology28.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField31 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType25, durationField30);
        long long34 = unsupportedDateTimeField31.add((-31L), (long) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = unsupportedDateTimeField31.getType();
        org.joda.time.DurationFieldType durationFieldType36 = dateTimeFieldType35.getRangeDurationType();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField37 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField22, dateTimeFieldType35);
        org.joda.time.DurationField durationField38 = remainderDateTimeField22.iDurationField;
        org.joda.time.DurationField durationField39 = remainderDateTimeField22.iDurationField;
        int int40 = remainderDateTimeField22.iDivisor;
        java.lang.String str42 = remainderDateTimeField22.getAsText(183661330465L);
        int int43 = remainderDateTimeField22.iDivisor;
        long long45 = remainderDateTimeField22.roundHalfFloor(1701289168550L);
        int int47 = remainderDateTimeField22.get(83462400024L);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(readableInterval27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 4L + "'", long34 == 4L);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "5" + "'", str42, "5");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1704067200000L + "'", long45 == 1704067200000L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1687");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval3);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DurationField durationField7 = chronology5.millis();
        org.joda.time.DurationField durationField8 = chronology5.centuries();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval9);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology11.millis();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.ReadableInterval readableInterval16 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval15);
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.ReadableInterval readableInterval21 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval20);
        org.joda.time.ReadableInterval readableInterval22 = null;
        boolean boolean23 = readableInterval21.contains(readableInterval22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = readableInterval21.toPeriod(periodType24);
        int[] intArray27 = chronology17.get((org.joda.time.ReadablePeriod) period25, (-210866846400000L));
        int[] intArray30 = chronology11.get((org.joda.time.ReadablePeriod) period25, 2173795348453L, (long) 1439);
        int[] intArray33 = chronology5.get((org.joda.time.ReadablePeriod) period25, 291L, 2580171L);
        int[] intArray36 = iSOChronology0.get((org.joda.time.ReadablePeriod) period25, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField37 = iSOChronology0.months();
        java.lang.String str38 = iSOChronology0.toString();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = iSOChronology0.equals((java.lang.Object) partial39);
        org.joda.time.DateTimeField dateTimeField41 = iSOChronology0.monthOfYear();
        org.joda.time.DurationField durationField42 = iSOChronology0.minutes();
        // The following exception was thrown during execution in test generation
        try {
            long long46 = iSOChronology0.add(5103867420000000L, 243995573972564L, 196222);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 243995573972564 * 196222");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(readableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(readableInterval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(readableInterval21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(intArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(durationField37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[100]" + "'", str38, "ISOChronology[100]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2317");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = zonedChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField6 = zonedChronology4.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = zonedChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField8 = zonedChronology4.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField9 = zonedChronology4.weekOfWeekyear();
        org.joda.time.DurationField durationField10 = zonedChronology4.days();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone15 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology16 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone17 = gregorianChronology16.getZone();
        long long22 = gregorianChronology16.getDateTimeMillis((int) '4', 8, 24, 24);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField24 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long27 = durationField24.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long29 = durationField24.getValueAsLong((long) 10);
        int int31 = durationField24.getValue((long) (byte) 10);
        boolean boolean32 = partial23.equals((java.lang.Object) durationField24);
        org.joda.time.Chronology chronology33 = partial23.getChronology();
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        boolean boolean35 = partial23.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray36 = partial23.getFieldTypes();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField38 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long41 = durationField38.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long43 = durationField38.getValueAsLong((long) 10);
        int int45 = durationField38.getValue((long) (byte) 10);
        boolean boolean46 = partial37.equals((java.lang.Object) durationField38);
        boolean boolean47 = partial23.equals((java.lang.Object) durationField38);
        int[] intArray49 = gregorianChronology16.get((org.joda.time.ReadablePartial) partial23, 0L);
        org.joda.time.DateTimeField dateTimeField50 = gregorianChronology16.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone51 = gregorianChronology16.getZone();
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone52 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone51);
        org.joda.time.Chronology chronology53 = zonedChronology4.withZone(dateTimeZone51);
        org.joda.time.DateTimeField dateTimeField54 = zonedChronology4.year();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(gregorianChronology16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-60505833599976L) + "'", long22 == (-60505833599976L));
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10L + "'", long29 == 10L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray36);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 10L + "'", long43 == 10L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(cachedDateTimeZone52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2410");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = zonedChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField6 = zonedChronology4.monthOfYear();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField8 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long11 = durationField8.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long13 = durationField8.getValueAsLong((long) 10);
        int int15 = durationField8.getValue((long) (byte) 10);
        boolean boolean16 = partial7.equals((java.lang.Object) durationField8);
        org.joda.time.Chronology chronology17 = partial7.getChronology();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial7.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial7.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.ReadableInterval readableInterval22 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval21);
        long long23 = readableInterval22.getStartMillis();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.ReadableInterval readableInterval26 = null;
        boolean boolean27 = readableInterval25.contains(readableInterval26);
        org.joda.time.Duration duration28 = readableInterval25.toDuration();
        org.joda.time.DateTime dateTime29 = readableInterval25.getEnd();
        boolean boolean30 = readableInterval22.contains((org.joda.time.ReadableInstant) dateTime29);
        boolean boolean31 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime29);
        int[] intArray33 = zonedChronology4.get((org.joda.time.ReadablePartial) partial7, 60035L);
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology4.secondOfMinute();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone39 = new org.joda.time.tz.FixedDateTimeZone("UTC", "", 0, 4);
        java.util.TimeZone timeZone40 = fixedDateTimeZone39.toTimeZone();
        java.lang.String str42 = fixedDateTimeZone39.getName(97L);
        int int44 = fixedDateTimeZone39.getOffsetFromLocal((-210858120000000L));
        long long46 = fixedDateTimeZone39.nextTransition(0L);
        int int48 = fixedDateTimeZone39.getOffset(2580171L);
        org.joda.time.chrono.ZonedChronology zonedChronology49 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) zonedChronology4, (org.joda.time.DateTimeZone) fixedDateTimeZone39);
        org.joda.time.Chronology chronology50 = zonedChronology4.withUTC();
        org.joda.time.Chronology chronology51 = zonedChronology4.withUTC();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(readableInterval22);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 16707983010251L + "'", long23 == 16707983010251L);
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00" + "'", str42, "+00:00");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(zonedChronology49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(chronology51);
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2216");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval3);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DurationField durationField7 = chronology5.millis();
        org.joda.time.DurationField durationField8 = chronology5.centuries();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval9);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology11.millis();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.ReadableInterval readableInterval16 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval15);
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.ReadableInterval readableInterval21 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval20);
        org.joda.time.ReadableInterval readableInterval22 = null;
        boolean boolean23 = readableInterval21.contains(readableInterval22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = readableInterval21.toPeriod(periodType24);
        int[] intArray27 = chronology17.get((org.joda.time.ReadablePeriod) period25, (-210866846400000L));
        int[] intArray30 = chronology11.get((org.joda.time.ReadablePeriod) period25, 2173795348453L, (long) 1439);
        int[] intArray33 = chronology5.get((org.joda.time.ReadablePeriod) period25, 291L, 2580171L);
        int[] intArray36 = iSOChronology0.get((org.joda.time.ReadablePeriod) period25, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField37 = iSOChronology0.months();
        java.lang.String str38 = iSOChronology0.toString();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = iSOChronology0.equals((java.lang.Object) partial39);
        org.joda.time.DateTimeField dateTimeField41 = iSOChronology0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology0.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone43 = iSOChronology0.getZone();
        org.joda.time.DurationField durationField44 = iSOChronology0.weekyears();
        long long46 = durationField44.getMillis((-18000000));
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(readableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(readableInterval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(readableInterval21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[UTC]" + "'", str38, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-568025136000000000L) + "'", long46 == (-568025136000000000L));
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2459");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfWeek();
        java.lang.String str1 = dateTimeFieldType0.getName();
        org.joda.time.IllegalFieldValueException illegalFieldValueException3 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType0, "-08:00");
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval5 = null;
        org.joda.time.ReadableInterval readableInterval6 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval5);
        org.joda.time.Chronology chronology7 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval5);
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfCentury();
        org.joda.time.DurationField durationField9 = chronology7.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField10 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType4, durationField9);
        long long13 = durationField9.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.ReadableInterval readableInterval16 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval15);
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        boolean boolean19 = durationFieldType14.isSupported(chronology17);
        org.joda.time.field.ScaledDurationField scaledDurationField21 = new org.joda.time.field.ScaledDurationField(durationField9, durationFieldType14, (int) 'a');
        int int23 = scaledDurationField21.getValue((long) (short) -1);
        boolean boolean24 = scaledDurationField21.isSupported();
        long long27 = scaledDurationField21.getDifferenceAsLong(28800001L, (-210858120000000L));
        java.lang.String str28 = scaledDurationField21.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType30 = dateTimeFieldType29.getDurationType();
        org.joda.time.field.PreciseDurationField preciseDurationField32 = new org.joda.time.field.PreciseDurationField(durationFieldType30, 28354819L);
        long long33 = preciseDurationField32.getUnitMillis();
        boolean boolean34 = preciseDurationField32.isPrecise();
        long long37 = preciseDurationField32.getValueAsLong((long) 719, 306607L);
        org.joda.time.field.PreciseDateTimeField preciseDateTimeField38 = new org.joda.time.field.PreciseDateTimeField(dateTimeFieldType0, (org.joda.time.DurationField) scaledDurationField21, (org.joda.time.DurationField) preciseDurationField32);
        org.joda.time.DurationField durationField39 = preciseDateTimeField38.getDurationField();
        long long41 = preciseDateTimeField38.roundHalfCeiling(31080860457366L);
        int int43 = preciseDateTimeField38.get((-45757612800000L));
        long long44 = preciseDateTimeField38.getUnitMillis();
        long long46 = preciseDateTimeField38.roundFloor((-16792L));
        long long48 = preciseDateTimeField38.remainder(1704067199993L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "dayOfWeek" + "'", str1, "dayOfWeek");
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(readableInterval6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-210866846400000L) + "'", long13 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(readableInterval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 2173795348453L + "'", long27 == 2173795348453L);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "DurationField[hours]" + "'", str28, "DurationField[hours]");
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 28354819L + "'", long33 == 28354819L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 31080860457413L + "'", long41 == 31080860457413L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 53324 + "'", int43 == 53324);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 97L + "'", long44 == 97L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-16878L) + "'", long46 == (-16878L));
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 69L + "'", long48 == 69L);
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1870");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfWeek();
        java.lang.String str1 = dateTimeFieldType0.getName();
        org.joda.time.IllegalFieldValueException illegalFieldValueException3 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType0, "-08:00");
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval5 = null;
        org.joda.time.ReadableInterval readableInterval6 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval5);
        org.joda.time.Chronology chronology7 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval5);
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfCentury();
        org.joda.time.DurationField durationField9 = chronology7.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField10 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType4, durationField9);
        long long13 = durationField9.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.ReadableInterval readableInterval16 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval15);
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        boolean boolean19 = durationFieldType14.isSupported(chronology17);
        org.joda.time.field.ScaledDurationField scaledDurationField21 = new org.joda.time.field.ScaledDurationField(durationField9, durationFieldType14, (int) 'a');
        int int23 = scaledDurationField21.getValue((long) (short) -1);
        boolean boolean24 = scaledDurationField21.isSupported();
        long long27 = scaledDurationField21.getDifferenceAsLong(28800001L, (-210858120000000L));
        java.lang.String str28 = scaledDurationField21.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType30 = dateTimeFieldType29.getDurationType();
        org.joda.time.field.PreciseDurationField preciseDurationField32 = new org.joda.time.field.PreciseDurationField(durationFieldType30, 28354819L);
        long long33 = preciseDurationField32.getUnitMillis();
        boolean boolean34 = preciseDurationField32.isPrecise();
        long long37 = preciseDurationField32.getValueAsLong((long) 719, 306607L);
        org.joda.time.field.PreciseDateTimeField preciseDateTimeField38 = new org.joda.time.field.PreciseDateTimeField(dateTimeFieldType0, (org.joda.time.DurationField) scaledDurationField21, (org.joda.time.DurationField) preciseDurationField32);
        boolean boolean39 = preciseDateTimeField38.isLenient();
        int int40 = preciseDateTimeField38.getRange();
        long long43 = preciseDateTimeField38.set((-80816423676523L), 53324);
        int int46 = preciseDateTimeField38.getMaximumValueForSet(1758458159332803L, (-256));
        int int47 = preciseDateTimeField38.getMinimumValue();
        long long48 = preciseDateTimeField38.iUnitMillis;
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "dayOfWeek" + "'", str1, "dayOfWeek");
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(readableInterval6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-210866846400000L) + "'", long13 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(readableInterval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 2173795348453L + "'", long27 == 2173795348453L);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "DurationField[hours]" + "'", str28, "DurationField[hours]");
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 28354819L + "'", long33 == 28354819L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 292317 + "'", int40 == 292317);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-80816445234579L) + "'", long43 == (-80816445234579L));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 292316 + "'", int46 == 292316);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 97L + "'", long48 == 97L);
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1110");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        java.lang.String str13 = partial0.toString();
        org.joda.time.Chronology chronology14 = partial0.getChronology();
        org.joda.time.chrono.ISOChronology iSOChronology15 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField16 = iSOChronology15.minutes();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology15.millisOfDay();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology15.halfdayOfDay();
        org.joda.time.DurationField durationField19 = iSOChronology15.seconds();
        org.joda.time.DurationField durationField20 = iSOChronology15.days();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology15.dayOfYear();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology15.hourOfHalfday();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField24 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long27 = durationField24.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long29 = durationField24.getValueAsLong((long) 10);
        int int31 = durationField24.getValue((long) (byte) 10);
        boolean boolean32 = partial23.equals((java.lang.Object) durationField24);
        org.joda.time.ReadableInterval readableInterval33 = null;
        org.joda.time.ReadableInterval readableInterval34 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval33);
        org.joda.time.ReadableInterval readableInterval35 = null;
        boolean boolean36 = readableInterval34.contains(readableInterval35);
        org.joda.time.ReadableInterval readableInterval37 = null;
        boolean boolean38 = readableInterval34.isBefore(readableInterval37);
        org.joda.time.Interval interval39 = readableInterval34.toInterval();
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.PeriodType periodType41 = org.joda.time.DateTimeUtils.getPeriodType(periodType40);
        org.joda.time.PeriodType periodType42 = org.joda.time.DateTimeUtils.getPeriodType(periodType40);
        org.joda.time.Period period43 = readableInterval34.toPeriod(periodType42);
        org.joda.time.Partial partial44 = partial23.plus((org.joda.time.ReadablePeriod) period43);
        java.lang.String str45 = partial44.toStringList();
        int[] intArray47 = iSOChronology15.get((org.joda.time.ReadablePartial) partial44, (long) (-7));
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = partial44.toDateTime(readableInstant48);
        org.joda.time.DateTime dateTime50 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime49);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(iSOChronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10L + "'", long29 == 10L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(readableInterval34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[]" + "'", str45, "[]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0945");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        long long16 = dividedDateTimeField11.roundFloor(291L);
        long long18 = dividedDateTimeField11.roundFloor((long) (short) 100);
        org.joda.time.DurationField durationField19 = dividedDateTimeField11.iDurationField;
        int int21 = dividedDateTimeField11.getLeapAmount(432000032L);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField23 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long26 = durationField23.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long28 = durationField23.getValueAsLong((long) 10);
        int int30 = durationField23.getValue((long) (byte) 10);
        boolean boolean31 = partial22.equals((java.lang.Object) durationField23);
        org.joda.time.Chronology chronology32 = partial22.getChronology();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        boolean boolean34 = partial22.isBefore((org.joda.time.ReadablePartial) partial33);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray35 = partial22.getFieldTypes();
        boolean boolean37 = partial22.equals((java.lang.Object) 1702281558665L);
        java.lang.String str38 = partial22.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray39 = partial22.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType41 = dateTimeFieldType40.getRangeDurationType();
        int int42 = partial22.indexOf(dateTimeFieldType40);
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField43 = new org.joda.time.field.ZeroIsMaxDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField11, dateTimeFieldType40);
        long long45 = zeroIsMaxDateTimeField43.roundFloor(53459998L);
        long long47 = zeroIsMaxDateTimeField43.roundHalfEven(2835481900L);
        int int50 = zeroIsMaxDateTimeField43.getDifference((long) 471, (-476134722111L));
        int int53 = zeroIsMaxDateTimeField43.getDifference(1669781969458L, (-952269336002L));
        int int54 = zeroIsMaxDateTimeField43.getMaximumValue();
        int int55 = zeroIsMaxDateTimeField43.getMinimumValue();
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10L + "'", long28 == 10L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[]" + "'", str38, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 8 + "'", int53 == 8);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 29227900 + "'", int54 == 29227900);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0814");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = partial0.getFormatter();
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField16 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long19 = durationField16.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long21 = durationField16.getValueAsLong((long) 10);
        int int23 = durationField16.getValue((long) (byte) 10);
        boolean boolean24 = partial15.equals((java.lang.Object) durationField16);
        org.joda.time.Chronology chronology25 = partial15.getChronology();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial15.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = partial15.getFieldTypes();
        boolean boolean30 = partial15.equals((java.lang.Object) 1702281558665L);
        java.lang.String str31 = partial15.toString();
        org.joda.time.Chronology chronology32 = partial15.getChronology();
        int int33 = partial0.compareTo((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField35 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long38 = durationField35.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long40 = durationField35.getValueAsLong((long) 10);
        int int42 = durationField35.getValue((long) (byte) 10);
        boolean boolean43 = partial34.equals((java.lang.Object) durationField35);
        org.joda.time.Chronology chronology44 = partial34.getChronology();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        boolean boolean46 = partial34.isBefore((org.joda.time.ReadablePartial) partial45);
        java.lang.String str47 = partial34.toString();
        java.lang.String str48 = partial34.toString();
        boolean boolean49 = partial0.isMatch((org.joda.time.ReadablePartial) partial34);
        org.joda.time.ReadablePartial readablePartial50 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean51 = partial34.isBefore(readablePartial50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Partial cannot be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10L + "'", long21 == 10L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10L + "'", long40 == 10L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[]" + "'", str47, "[]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[]" + "'", str48, "[]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2389");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        long long24 = dividedDateTimeField11.roundFloor((long) (short) 1);
        java.util.Locale locale26 = null;
        java.lang.String str27 = dividedDateTimeField11.getAsShortText(28354819, locale26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.IllegalFieldValueException illegalFieldValueException31 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType28, (java.lang.Number) 60035L, "");
        boolean boolean32 = org.joda.time.IllegalInstantException.isIllegalInstant((java.lang.Throwable) illegalFieldValueException31);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.IllegalFieldValueException illegalFieldValueException36 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType33, (java.lang.Number) 10L, "hourOfDay");
        java.lang.Number number37 = illegalFieldValueException36.getIllegalNumberValue();
        illegalFieldValueException31.addSuppressed((java.lang.Throwable) illegalFieldValueException36);
        java.lang.String str39 = illegalFieldValueException31.getFieldName();
        java.lang.String str40 = illegalFieldValueException31.getFieldName();
        java.lang.String str41 = illegalFieldValueException31.getFieldName();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = illegalFieldValueException31.getDateTimeFieldType();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField43 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType42);
        int int44 = dividedDateTimeField11.getMaximumValue();
        int int45 = dividedDateTimeField11.getMaximumValue();
        org.joda.time.DurationField durationField46 = dividedDateTimeField11.iDurationField;
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "28354819" + "'", str27, "28354819");
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertEquals("'" + number37 + "' != '" + 10L + "'", number37, 10L);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hourOfDay" + "'", str39, "hourOfDay");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hourOfDay" + "'", str40, "hourOfDay");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hourOfDay" + "'", str41, "hourOfDay");
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 29227899 + "'", int44 == 29227899);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 29227899 + "'", int45 == 29227899);
        org.junit.Assert.assertNotNull(durationField46);
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1277");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = zonedChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField6 = zonedChronology4.monthOfYear();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField8 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long11 = durationField8.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long13 = durationField8.getValueAsLong((long) 10);
        int int15 = durationField8.getValue((long) (byte) 10);
        boolean boolean16 = partial7.equals((java.lang.Object) durationField8);
        org.joda.time.Chronology chronology17 = partial7.getChronology();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial7.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial7.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.ReadableInterval readableInterval22 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval21);
        long long23 = readableInterval22.getStartMillis();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.ReadableInterval readableInterval26 = null;
        boolean boolean27 = readableInterval25.contains(readableInterval26);
        org.joda.time.Duration duration28 = readableInterval25.toDuration();
        org.joda.time.DateTime dateTime29 = readableInterval25.getEnd();
        boolean boolean30 = readableInterval22.contains((org.joda.time.ReadableInstant) dateTime29);
        boolean boolean31 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime29);
        int[] intArray33 = zonedChronology4.get((org.joda.time.ReadablePartial) partial7, 60035L);
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology4.secondOfMinute();
        org.joda.time.DurationField durationField35 = zonedChronology4.hours();
        org.joda.time.chrono.ISOChronology iSOChronology36 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField37 = iSOChronology36.minutes();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology36.millisOfDay();
        org.joda.time.DateTimeField dateTimeField39 = iSOChronology36.halfdayOfDay();
        org.joda.time.DurationField durationField40 = iSOChronology36.seconds();
        org.joda.time.Chronology chronology41 = iSOChronology36.withUTC();
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology36.monthOfYear();
        java.lang.String str43 = dateTimeField42.getName();
        boolean boolean44 = zonedChronology4.equals((java.lang.Object) str43);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(readableInterval22);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 315639019277L + "'", long23 == 315639019277L);
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(iSOChronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "monthOfYear" + "'", str43, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1216");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = durationField5.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval11 = null;
        org.joda.time.ReadableInterval readableInterval12 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval11);
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval11);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfCentury();
        boolean boolean15 = durationFieldType10.isSupported(chronology13);
        org.joda.time.field.ScaledDurationField scaledDurationField17 = new org.joda.time.field.ScaledDurationField(durationField5, durationFieldType10, (int) 'a');
        org.joda.time.DurationField durationField18 = scaledDurationField17.getWrappedField();
        int int21 = scaledDurationField17.getDifference((long) (byte) -1, (long) (short) 0);
        long long24 = scaledDurationField17.getMillis((int) (short) 100, (long) 4);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval26 = null;
        org.joda.time.ReadableInterval readableInterval27 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval26);
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval26);
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfCentury();
        org.joda.time.DurationField durationField30 = chronology28.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField31 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType25, durationField30);
        long long34 = durationField30.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType35 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval36 = null;
        org.joda.time.ReadableInterval readableInterval37 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval36);
        org.joda.time.Chronology chronology38 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval36);
        org.joda.time.DateTimeField dateTimeField39 = chronology38.yearOfCentury();
        boolean boolean40 = durationFieldType35.isSupported(chronology38);
        org.joda.time.field.ScaledDurationField scaledDurationField42 = new org.joda.time.field.ScaledDurationField(durationField30, durationFieldType35, (int) 'a');
        int int44 = scaledDurationField42.getValue((long) (short) -1);
        long long47 = scaledDurationField42.add((long) (-1), 10);
        boolean boolean48 = scaledDurationField17.equals((java.lang.Object) 10);
        int int50 = scaledDurationField17.getValue(1966L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-210866846400000L) + "'", long9 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(readableInterval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 9700L + "'", long24 == 9700L);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(readableInterval27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-210866846400000L) + "'", long34 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertNotNull(readableInterval37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 969L + "'", long47 == 969L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 20 + "'", int50 == 20);
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2509");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str1 = dateTimeZone0.toString();
        java.lang.String str3 = dateTimeZone0.getShortName((-210866846400000L));
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeUtils.getZone(dateTimeZone0);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone5 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone4);
        boolean boolean7 = cachedDateTimeZone5.equals((java.lang.Object) 432000032L);
        org.joda.time.LocalDateTime localDateTime8 = null;
        boolean boolean9 = cachedDateTimeZone5.isLocalDateTimeGap(localDateTime8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.ReadableInterval readableInterval11 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval10);
        org.joda.time.Chronology chronology12 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval10);
        org.joda.time.DateTimeField dateTimeField13 = chronology12.yearOfCentury();
        org.joda.time.DurationField durationField14 = chronology12.millis();
        org.joda.time.DurationField durationField15 = chronology12.centuries();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval22 = null;
        org.joda.time.ReadableInterval readableInterval23 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval22);
        org.joda.time.Chronology chronology24 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval22);
        org.joda.time.DateTimeField dateTimeField25 = chronology24.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval27 = null;
        org.joda.time.ReadableInterval readableInterval28 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval27);
        org.joda.time.ReadableInterval readableInterval29 = null;
        boolean boolean30 = readableInterval28.contains(readableInterval29);
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Period period32 = readableInterval28.toPeriod(periodType31);
        int[] intArray34 = chronology24.get((org.joda.time.ReadablePeriod) period32, (-210866846400000L));
        int[] intArray37 = chronology18.get((org.joda.time.ReadablePeriod) period32, 2173795348453L, (long) 1439);
        int[] intArray40 = chronology12.get((org.joda.time.ReadablePeriod) period32, 291L, 2580171L);
        org.joda.time.DurationField durationField41 = chronology12.halfdays();
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology12);
        boolean boolean43 = cachedDateTimeZone5.equals((java.lang.Object) chronology12);
        long long46 = cachedDateTimeZone5.convertLocalToUTC(1892133289161428L, false);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "UTC" + "'", str1, "UTC");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(cachedDateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(readableInterval11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(readableInterval23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(readableInterval28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(intArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1892133289161428L + "'", long46 == 1892133289161428L);
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0905");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        long long24 = remainderDateTimeField22.roundHalfFloor(3600000L);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval26 = null;
        org.joda.time.ReadableInterval readableInterval27 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval26);
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval26);
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfCentury();
        org.joda.time.DurationField durationField30 = chronology28.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField31 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType25, durationField30);
        long long34 = unsupportedDateTimeField31.add((-31L), (long) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = unsupportedDateTimeField31.getType();
        org.joda.time.DurationFieldType durationFieldType36 = dateTimeFieldType35.getRangeDurationType();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField37 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField22, dateTimeFieldType35);
        org.joda.time.DurationField durationField38 = remainderDateTimeField22.iDurationField;
        org.joda.time.DurationField durationField39 = remainderDateTimeField22.iDurationField;
        int int40 = remainderDateTimeField22.iDivisor;
        java.lang.String str42 = remainderDateTimeField22.getAsText(183661330465L);
        int int43 = remainderDateTimeField22.getMinimumValue();
        int int44 = remainderDateTimeField22.getDivisor();
        org.joda.time.DurationField durationField45 = remainderDateTimeField22.getLeapDurationField();
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(readableInterval27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 4L + "'", long34 == 4L);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "5" + "'", str42, "5");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertNull(durationField45);
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1635");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        long long24 = remainderDateTimeField22.roundHalfFloor(3600000L);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval26 = null;
        org.joda.time.ReadableInterval readableInterval27 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval26);
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval26);
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfCentury();
        org.joda.time.DurationField durationField30 = chronology28.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField31 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType25, durationField30);
        long long34 = unsupportedDateTimeField31.add((-31L), (long) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = unsupportedDateTimeField31.getType();
        org.joda.time.DurationFieldType durationFieldType36 = dateTimeFieldType35.getRangeDurationType();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField37 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField22, dateTimeFieldType35);
        long long39 = dividedDateTimeField37.roundFloor((-1L));
        long long41 = dividedDateTimeField37.roundFloor(1701289162973L);
        java.lang.String str42 = dividedDateTimeField37.getName();
        long long45 = dividedDateTimeField37.getDifferenceAsLong((-59028998263764L), 1672531200000L);
        org.joda.time.ReadablePartial readablePartial46 = null;
        java.util.Locale locale48 = null;
        java.lang.String str49 = dividedDateTimeField37.getAsText(readablePartial46, 2117409001, locale48);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(readableInterval27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 4L + "'", long34 == 4L);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-315619200000L) + "'", long39 == (-315619200000L));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1577836800000L + "'", long41 == 1577836800000L);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "dayOfYear" + "'", str42, "dayOfYear");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-192L) + "'", long45 == (-192L));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "2117409001" + "'", str49, "2117409001");
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0751");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        long long24 = remainderDateTimeField22.roundHalfFloor(3600000L);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval26 = null;
        org.joda.time.ReadableInterval readableInterval27 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval26);
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval26);
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfCentury();
        org.joda.time.DurationField durationField30 = chronology28.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField31 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType25, durationField30);
        long long34 = unsupportedDateTimeField31.add((-31L), (long) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = unsupportedDateTimeField31.getType();
        org.joda.time.DurationFieldType durationFieldType36 = dateTimeFieldType35.getRangeDurationType();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField37 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField22, dateTimeFieldType35);
        org.joda.time.DurationField durationField38 = remainderDateTimeField22.iDurationField;
        org.joda.time.DurationField durationField39 = remainderDateTimeField22.iDurationField;
        int int40 = remainderDateTimeField22.iDivisor;
        java.lang.String str42 = remainderDateTimeField22.getAsText(183661330465L);
        int int43 = remainderDateTimeField22.getMinimumValue();
        int int44 = remainderDateTimeField22.getDivisor();
        int int45 = remainderDateTimeField22.getMaximumValue();
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(readableInterval27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 4L + "'", long34 == 4L);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "5" + "'", str42, "5");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0486");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.IllegalFieldValueException illegalFieldValueException3 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType0, (java.lang.Number) 60035L, "");
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType0.getDurationType();
        org.joda.time.IllegalFieldValueException illegalFieldValueException6 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType0, "weeks");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone12 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology13 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone12);
        org.joda.time.DurationField durationField14 = gregorianChronology13.days();
        org.joda.time.DateTimeField dateTimeField15 = gregorianChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gregorianChronology13.era();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone21 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology22 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone23 = gregorianChronology22.getZone();
        long long28 = gregorianChronology22.getDateTimeMillis((int) '4', 8, 24, 24);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField30 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long33 = durationField30.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long35 = durationField30.getValueAsLong((long) 10);
        int int37 = durationField30.getValue((long) (byte) 10);
        boolean boolean38 = partial29.equals((java.lang.Object) durationField30);
        org.joda.time.Chronology chronology39 = partial29.getChronology();
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        boolean boolean41 = partial29.isBefore((org.joda.time.ReadablePartial) partial40);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray42 = partial29.getFieldTypes();
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField44 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long47 = durationField44.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long49 = durationField44.getValueAsLong((long) 10);
        int int51 = durationField44.getValue((long) (byte) 10);
        boolean boolean52 = partial43.equals((java.lang.Object) durationField44);
        boolean boolean53 = partial29.equals((java.lang.Object) durationField44);
        int[] intArray55 = gregorianChronology22.get((org.joda.time.ReadablePartial) partial29, 0L);
        int[] intArray57 = gregorianChronology13.get((org.joda.time.ReadablePartial) partial29, 53459998L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial58 = new org.joda.time.Partial(dateTimeFieldType0, (-5), (org.joda.time.Chronology) gregorianChronology13);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -5 for hourOfDay must not be smaller than 0");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(gregorianChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(gregorianChronology22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-60505833599976L) + "'", long28 == (-60505833599976L));
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10L + "'", long35 == 10L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray42);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 10L + "'", long49 == 10L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2566");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        long long24 = remainderDateTimeField22.roundHalfFloor(3600000L);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval26 = null;
        org.joda.time.ReadableInterval readableInterval27 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval26);
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval26);
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfCentury();
        org.joda.time.DurationField durationField30 = chronology28.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField31 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType25, durationField30);
        long long34 = unsupportedDateTimeField31.add((-31L), (long) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = unsupportedDateTimeField31.getType();
        org.joda.time.DurationFieldType durationFieldType36 = dateTimeFieldType35.getRangeDurationType();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField37 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField22, dateTimeFieldType35);
        long long39 = dividedDateTimeField37.roundFloor((-1L));
        long long42 = dividedDateTimeField37.set(1701289161914L, (int) (byte) 0);
        int int45 = dividedDateTimeField37.getDifference((-97L), 35L);
        long long48 = dividedDateTimeField37.getDifferenceAsLong(315532800000L, (-1454470839259L));
        org.joda.time.DurationField durationField49 = dividedDateTimeField37.iRangeDurationField;
        long long51 = dividedDateTimeField37.remainder(41506203L);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(readableInterval27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 4L + "'", long34 == 4L);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-315619200000L) + "'", long39 == (-315619200000L));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-62043766838086L) + "'", long42 == (-62043766838086L));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 5L + "'", long48 == 5L);
        org.junit.Assert.assertNull(durationField49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 41506203L + "'", long51 == 41506203L);
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2792");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField11 = iSOChronology10.minutes();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology10.halfdayOfDay();
        org.joda.time.ReadableInterval readableInterval14 = null;
        org.joda.time.ReadableInterval readableInterval15 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval14);
        org.joda.time.ReadableInterval readableInterval16 = null;
        boolean boolean17 = readableInterval15.contains(readableInterval16);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = readableInterval15.toPeriod(periodType18);
        int[] intArray22 = iSOChronology10.get((org.joda.time.ReadablePeriod) period19, 4L, (long) '#');
        org.joda.time.Partial partial23 = partial0.plus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Partial partial25 = partial23.without(dateTimeFieldType24);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str27 = dateTimeZone26.toString();
        java.lang.String str29 = dateTimeZone26.getShortName((-210866846400000L));
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeUtils.getZone(dateTimeZone26);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone31 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone30);
        java.lang.String str32 = cachedDateTimeZone31.toString();
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.hours();
        java.lang.String str34 = durationFieldType33.toString();
        boolean boolean35 = cachedDateTimeZone31.equals((java.lang.Object) durationFieldType33);
        org.joda.time.IllegalFieldValueException illegalFieldValueException37 = new org.joda.time.IllegalFieldValueException(durationFieldType33, "1954-11-29T20:20:54.730-08:00/1954-11-29T20:20:54.730-08:00");
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.IllegalFieldValueException illegalFieldValueException41 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType38, (java.lang.Number) 10L, "hourOfDay");
        illegalFieldValueException41.prependMessage("org.joda.time.IllegalFieldValueException: Value 10 for dayOfYear is not supported: hourOfDay");
        illegalFieldValueException37.addSuppressed((java.lang.Throwable) illegalFieldValueException41);
        org.joda.time.DurationFieldType durationFieldType45 = illegalFieldValueException37.getDurationFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial47 = partial23.withFieldAddWrapped(durationFieldType45, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'hours' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(iSOChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(readableInterval15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 0, 0, 0, 0, 0, 0, 31]");
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTC" + "'", str27, "UTC");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(cachedDateTimeZone31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hours" + "'", str34, "hours");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(durationFieldType45);
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1558");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = zonedChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField6 = zonedChronology4.monthOfYear();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField8 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long11 = durationField8.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long13 = durationField8.getValueAsLong((long) 10);
        int int15 = durationField8.getValue((long) (byte) 10);
        boolean boolean16 = partial7.equals((java.lang.Object) durationField8);
        org.joda.time.Chronology chronology17 = partial7.getChronology();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial7.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial7.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.ReadableInterval readableInterval22 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval21);
        long long23 = readableInterval22.getStartMillis();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.ReadableInterval readableInterval26 = null;
        boolean boolean27 = readableInterval25.contains(readableInterval26);
        org.joda.time.Duration duration28 = readableInterval25.toDuration();
        org.joda.time.DateTime dateTime29 = readableInterval25.getEnd();
        boolean boolean30 = readableInterval22.contains((org.joda.time.ReadableInstant) dateTime29);
        boolean boolean31 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime29);
        int[] intArray33 = zonedChronology4.get((org.joda.time.ReadablePartial) partial7, 60035L);
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology4.centuryOfEra();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField36 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long39 = durationField36.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long41 = durationField36.getValueAsLong((long) 10);
        int int43 = durationField36.getValue((long) (byte) 10);
        boolean boolean44 = partial35.equals((java.lang.Object) durationField36);
        org.joda.time.Chronology chronology45 = partial35.getChronology();
        int[] intArray47 = zonedChronology4.get((org.joda.time.ReadablePartial) partial35, 291L);
        java.lang.Object obj48 = null;
        boolean boolean49 = zonedChronology4.equals(obj48);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(readableInterval22);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1225226733463L + "'", long23 == 1225226733463L);
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 10L + "'", long41 == 10L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0824");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        long long2 = readableInterval1.getStartMillis();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        long long5 = readableInterval4.getEndMillis();
        boolean boolean6 = readableInterval1.overlaps(readableInterval4);
        org.joda.time.MutableInterval mutableInterval7 = readableInterval1.toMutableInterval();
        org.joda.time.ReadableInterval readableInterval8 = null;
        org.joda.time.ReadableInterval readableInterval9 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval8);
        long long10 = readableInterval9.getStartMillis();
        org.joda.time.ReadableInterval readableInterval11 = null;
        org.joda.time.ReadableInterval readableInterval12 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval11);
        long long13 = readableInterval12.getEndMillis();
        boolean boolean14 = readableInterval9.overlaps(readableInterval12);
        org.joda.time.MutableInterval mutableInterval15 = readableInterval9.toMutableInterval();
        org.joda.time.Duration duration16 = mutableInterval15.toDuration();
        org.joda.time.ReadableInterval readableInterval17 = null;
        org.joda.time.ReadableInterval readableInterval18 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval17);
        long long19 = readableInterval18.getStartMillis();
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.ReadableInterval readableInterval21 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval20);
        long long22 = readableInterval21.getEndMillis();
        boolean boolean23 = readableInterval18.overlaps(readableInterval21);
        org.joda.time.MutableInterval mutableInterval24 = readableInterval18.toMutableInterval();
        org.joda.time.Duration duration25 = mutableInterval24.toDuration();
        boolean boolean26 = mutableInterval15.isAfter((org.joda.time.ReadableInterval) mutableInterval24);
        boolean boolean27 = mutableInterval7.isAfter((org.joda.time.ReadableInterval) mutableInterval15);
        org.joda.time.ReadableInterval readableInterval28 = null;
        org.joda.time.ReadableInterval readableInterval29 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval28);
        org.joda.time.ReadableInterval readableInterval30 = null;
        boolean boolean31 = readableInterval29.contains(readableInterval30);
        org.joda.time.Duration duration32 = readableInterval29.toDuration();
        org.joda.time.MutableInterval mutableInterval33 = readableInterval29.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval34 = mutableInterval33.toMutableInterval();
        org.joda.time.Chronology chronology35 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInterval) mutableInterval33);
        org.joda.time.MutableInterval mutableInterval36 = mutableInterval33.toMutableInterval();
        boolean boolean37 = mutableInterval15.isAfter((org.joda.time.ReadableInterval) mutableInterval33);
        org.junit.Assert.assertNotNull(readableInterval1);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1701260531873L + "'", long2 == 1701260531873L);
        org.junit.Assert.assertNotNull(readableInterval4);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1701260531873L + "'", long5 == 1701260531873L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(readableInterval9);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1701260531873L + "'", long10 == 1701260531873L);
        org.junit.Assert.assertNotNull(readableInterval12);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1701260531873L + "'", long13 == 1701260531873L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(readableInterval18);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1701260531873L + "'", long19 == 1701260531873L);
        org.junit.Assert.assertNotNull(readableInterval21);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1701260531873L + "'", long22 == 1701260531873L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(mutableInterval24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(readableInterval29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(mutableInterval33);
        org.junit.Assert.assertNotNull(mutableInterval34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(mutableInterval36);
// flaky:         org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1724");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        boolean boolean5 = durationFieldType0.isSupported(chronology3);
        org.joda.time.DurationField durationField6 = chronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.weekyearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField12 = new org.joda.time.field.OffsetDateTimeField(dateTimeField7, dateTimeFieldType8, 4, (int) ' ', (int) (short) -1);
        long long14 = offsetDateTimeField12.roundCeiling(2102400001L);
        int int15 = offsetDateTimeField12.getMinimumValue();
        long long17 = offsetDateTimeField12.roundHalfFloor(53459998L);
        long long19 = offsetDateTimeField12.roundFloor(1701289188819L);
        org.joda.time.ReadablePartial readablePartial20 = null;
        java.util.Locale locale22 = null;
        java.lang.String str23 = offsetDateTimeField12.getAsText(readablePartial20, (int) (short) 0, locale22);
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField25 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long28 = durationField25.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long30 = durationField25.getValueAsLong((long) 10);
        int int32 = durationField25.getValue((long) (byte) 10);
        boolean boolean33 = partial24.equals((java.lang.Object) durationField25);
        org.joda.time.Chronology chronology34 = partial24.getChronology();
        java.lang.String str35 = partial24.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray36 = partial24.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval37 = null;
        org.joda.time.ReadableInterval readableInterval38 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval37);
        org.joda.time.ReadableInterval readableInterval39 = null;
        boolean boolean40 = readableInterval38.contains(readableInterval39);
        org.joda.time.ReadableInterval readableInterval41 = null;
        boolean boolean42 = readableInterval38.isBefore(readableInterval41);
        org.joda.time.Interval interval43 = readableInterval38.toInterval();
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.PeriodType periodType45 = org.joda.time.DateTimeUtils.getPeriodType(periodType44);
        org.joda.time.PeriodType periodType46 = org.joda.time.DateTimeUtils.getPeriodType(periodType44);
        org.joda.time.Period period47 = readableInterval38.toPeriod(periodType46);
        org.joda.time.Partial partial48 = partial24.plus((org.joda.time.ReadablePeriod) period47);
        int int49 = offsetDateTimeField12.getMaximumValue((org.joda.time.ReadablePartial) partial48);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.DateTime dateTime51 = partial48.toDateTime(readableInstant50);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 31536000000L + "'", long14 == 31536000000L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 32 + "'", int15 == 32);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1672531200000L + "'", long19 == 1672531200000L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0" + "'", str23, "0");
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10L + "'", long30 == 10L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[]" + "'", str35, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray36);
        org.junit.Assert.assertNotNull(readableInterval38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(dateTime51);
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0568");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        long long24 = remainderDateTimeField22.roundHalfFloor(3600000L);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval26 = null;
        org.joda.time.ReadableInterval readableInterval27 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval26);
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval26);
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfCentury();
        org.joda.time.DurationField durationField30 = chronology28.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField31 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType25, durationField30);
        long long34 = unsupportedDateTimeField31.add((-31L), (long) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = unsupportedDateTimeField31.getType();
        org.joda.time.DurationFieldType durationFieldType36 = dateTimeFieldType35.getRangeDurationType();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField37 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField22, dateTimeFieldType35);
        long long39 = dividedDateTimeField37.roundFloor((-1L));
        long long42 = dividedDateTimeField37.set(1701289161914L, (int) (byte) 0);
        int int45 = dividedDateTimeField37.getDifference((-97L), 35L);
        long long48 = dividedDateTimeField37.getDifferenceAsLong(315532800000L, (-1454470839259L));
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField49 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField37);
        int int50 = dividedDateTimeField37.getMinimumValue();
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(readableInterval27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 4L + "'", long34 == 4L);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-315619200000L) + "'", long39 == (-315619200000L));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-62043766838086L) + "'", long42 == (-62043766838086L));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 5L + "'", long48 == 5L);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0281");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = partial0.getFormatter();
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField16 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long19 = durationField16.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long21 = durationField16.getValueAsLong((long) 10);
        int int23 = durationField16.getValue((long) (byte) 10);
        boolean boolean24 = partial15.equals((java.lang.Object) durationField16);
        org.joda.time.Chronology chronology25 = partial15.getChronology();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial15.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = partial15.getFieldTypes();
        boolean boolean30 = partial15.equals((java.lang.Object) 1702281558665L);
        java.lang.String str31 = partial15.toString();
        org.joda.time.Chronology chronology32 = partial15.getChronology();
        int int33 = partial0.compareTo((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField35 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long38 = durationField35.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long40 = durationField35.getValueAsLong((long) 10);
        int int42 = durationField35.getValue((long) (byte) 10);
        boolean boolean43 = partial34.equals((java.lang.Object) durationField35);
        org.joda.time.Chronology chronology44 = partial34.getChronology();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        boolean boolean46 = partial34.isBefore((org.joda.time.ReadablePartial) partial45);
        java.lang.String str47 = partial34.toString();
        java.lang.String str48 = partial34.toString();
        boolean boolean49 = partial0.isMatch((org.joda.time.ReadablePartial) partial34);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType51 = partial34.getFieldType(4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10L + "'", long21 == 10L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10L + "'", long40 == 10L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[]" + "'", str47, "[]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[]" + "'", str48, "[]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0200");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.halfdayOfDay();
        org.joda.time.DurationField durationField4 = iSOChronology0.seconds();
        org.joda.time.DurationField durationField5 = iSOChronology0.days();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.yearOfCentury();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField8 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long11 = durationField8.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long13 = durationField8.getValueAsLong((long) 10);
        int int15 = durationField8.getValue((long) (byte) 10);
        boolean boolean16 = partial7.equals((java.lang.Object) durationField8);
        org.joda.time.Chronology chronology17 = partial7.getChronology();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial7.isBefore((org.joda.time.ReadablePartial) partial18);
        java.lang.String str20 = partial7.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType22 = dateTimeFieldType21.getDurationType();
        org.joda.time.Partial partial23 = partial7.without(dateTimeFieldType21);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone28 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology29 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone28);
        org.joda.time.ReadableInterval readableInterval30 = null;
        org.joda.time.ReadableInterval readableInterval31 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval30);
        org.joda.time.Chronology chronology32 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval30);
        org.joda.time.DateTimeField dateTimeField33 = chronology32.yearOfCentury();
        org.joda.time.DurationField durationField34 = chronology32.minutes();
        org.joda.time.DurationField durationField35 = chronology32.halfdays();
        org.joda.time.DurationField durationField36 = chronology32.weeks();
        org.joda.time.DateTimeField dateTimeField37 = chronology32.millisOfDay();
        boolean boolean38 = gregorianChronology29.equals((java.lang.Object) chronology32);
        boolean boolean39 = partial7.equals((java.lang.Object) boolean38);
        java.util.Locale locale41 = null;
        java.lang.String str42 = dateTimeField6.getAsShortText((org.joda.time.ReadablePartial) partial7, (int) ' ', locale41);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType44 = dateTimeFieldType43.getRangeDurationType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property45 = partial7.property(dateTimeFieldType43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'centuryOfEra' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(gregorianChronology29);
        org.junit.Assert.assertNotNull(readableInterval31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "32" + "'", str42, "32");
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(durationFieldType44);
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1769");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = zonedChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField6 = zonedChronology4.monthOfYear();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField8 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long11 = durationField8.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long13 = durationField8.getValueAsLong((long) 10);
        int int15 = durationField8.getValue((long) (byte) 10);
        boolean boolean16 = partial7.equals((java.lang.Object) durationField8);
        org.joda.time.Chronology chronology17 = partial7.getChronology();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial7.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial7.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.ReadableInterval readableInterval22 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval21);
        long long23 = readableInterval22.getStartMillis();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.ReadableInterval readableInterval26 = null;
        boolean boolean27 = readableInterval25.contains(readableInterval26);
        org.joda.time.Duration duration28 = readableInterval25.toDuration();
        org.joda.time.DateTime dateTime29 = readableInterval25.getEnd();
        boolean boolean30 = readableInterval22.contains((org.joda.time.ReadableInstant) dateTime29);
        boolean boolean31 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime29);
        int[] intArray33 = zonedChronology4.get((org.joda.time.ReadablePartial) partial7, 60035L);
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology4.secondOfMinute();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone39 = new org.joda.time.tz.FixedDateTimeZone("UTC", "", 0, 4);
        java.util.TimeZone timeZone40 = fixedDateTimeZone39.toTimeZone();
        java.lang.String str42 = fixedDateTimeZone39.getName(97L);
        int int44 = fixedDateTimeZone39.getOffsetFromLocal((-210858120000000L));
        long long46 = fixedDateTimeZone39.nextTransition(0L);
        int int48 = fixedDateTimeZone39.getOffset(2580171L);
        org.joda.time.chrono.ZonedChronology zonedChronology49 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) zonedChronology4, (org.joda.time.DateTimeZone) fixedDateTimeZone39);
        org.joda.time.Chronology chronology50 = org.joda.time.DateTimeUtils.getChronology((org.joda.time.Chronology) zonedChronology49);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(readableInterval22);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-476134762239L) + "'", long23 == (-476134762239L));
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00" + "'", str42, "+00:00");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(zonedChronology49);
        org.junit.Assert.assertNotNull(chronology50);
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1617");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        long long24 = remainderDateTimeField22.roundHalfFloor(3600000L);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval26 = null;
        org.joda.time.ReadableInterval readableInterval27 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval26);
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval26);
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfCentury();
        org.joda.time.DurationField durationField30 = chronology28.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField31 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType25, durationField30);
        long long34 = unsupportedDateTimeField31.add((-31L), (long) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = unsupportedDateTimeField31.getType();
        org.joda.time.DurationFieldType durationFieldType36 = dateTimeFieldType35.getRangeDurationType();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField37 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField22, dateTimeFieldType35);
        long long39 = dividedDateTimeField37.roundFloor((-1L));
        long long41 = dividedDateTimeField37.roundCeiling(28354819L);
        long long43 = dividedDateTimeField37.roundFloor((long) 7);
        java.lang.String str45 = dividedDateTimeField37.getAsText((-252460798562L));
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField46 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField37);
        int int47 = dividedDateTimeField37.getMaximumValue();
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(readableInterval27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 4L + "'", long34 == 4L);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-315619200000L) + "'", long39 == (-315619200000L));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 315532800000L + "'", long41 == 315532800000L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "196" + "'", str45, "196");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 29227899 + "'", int47 == 29227899);
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1089");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        boolean boolean15 = partial0.equals((java.lang.Object) 1702281558665L);
        java.lang.String str16 = partial0.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = partial0.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.Partial partial19 = partial0.plus(readablePeriod18);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField21 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long24 = durationField21.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long26 = durationField21.getValueAsLong((long) 10);
        int int28 = durationField21.getValue((long) (byte) 10);
        boolean boolean29 = partial20.equals((java.lang.Object) durationField21);
        org.joda.time.Chronology chronology30 = partial20.getChronology();
        java.lang.String str31 = partial20.toString();
        boolean boolean32 = partial19.isAfter((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Partial partial33 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField35 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long38 = durationField35.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long40 = durationField35.getValueAsLong((long) 10);
        int int42 = durationField35.getValue((long) (byte) 10);
        boolean boolean43 = partial34.equals((java.lang.Object) durationField35);
        org.joda.time.Chronology chronology44 = partial34.getChronology();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        boolean boolean46 = partial34.isBefore((org.joda.time.ReadablePartial) partial45);
        org.joda.time.DateTimeField[] dateTimeFieldArray47 = partial45.getFields();
        org.joda.time.Chronology chronology48 = partial45.getChronology();
        boolean boolean49 = partial20.isEqual((org.joda.time.ReadablePartial) partial45);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property51 = partial45.property(dateTimeFieldType50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[]" + "'", str16, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10L + "'", long26 == 10L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10L + "'", long40 == 10L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2145");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval3);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DurationField durationField7 = chronology5.millis();
        org.joda.time.DurationField durationField8 = chronology5.centuries();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval9);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology11.millis();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.ReadableInterval readableInterval16 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval15);
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.ReadableInterval readableInterval21 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval20);
        org.joda.time.ReadableInterval readableInterval22 = null;
        boolean boolean23 = readableInterval21.contains(readableInterval22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = readableInterval21.toPeriod(periodType24);
        int[] intArray27 = chronology17.get((org.joda.time.ReadablePeriod) period25, (-210866846400000L));
        int[] intArray30 = chronology11.get((org.joda.time.ReadablePeriod) period25, 2173795348453L, (long) 1439);
        int[] intArray33 = chronology5.get((org.joda.time.ReadablePeriod) period25, 291L, 2580171L);
        int[] intArray36 = iSOChronology0.get((org.joda.time.ReadablePeriod) period25, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField37 = iSOChronology0.months();
        java.lang.String str38 = iSOChronology0.toString();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = iSOChronology0.equals((java.lang.Object) partial39);
        java.lang.String str41 = iSOChronology0.toString();
        org.joda.time.DurationField durationField42 = iSOChronology0.weekyears();
        org.joda.time.DateTimeField dateTimeField43 = iSOChronology0.era();
        org.joda.time.DateTimeField dateTimeField44 = iSOChronology0.yearOfEra();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(readableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(readableInterval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(readableInterval21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(intArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(durationField37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[hourOfDay]" + "'", str38, "ISOChronology[hourOfDay]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ISOChronology[hourOfDay]" + "'", str41, "ISOChronology[hourOfDay]");
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2424");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology5 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone6 = gregorianChronology5.getZone();
        org.joda.time.DateTimeField dateTimeField7 = gregorianChronology5.minuteOfHour();
        org.joda.time.DurationField durationField8 = gregorianChronology5.years();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology9.secondOfDay();
        org.joda.time.ReadableInterval readableInterval11 = null;
        org.joda.time.ReadableInterval readableInterval12 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval11);
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval11);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfCentury();
        org.joda.time.DurationField durationField15 = chronology13.millis();
        org.joda.time.DurationField durationField16 = chronology13.centuries();
        org.joda.time.ReadableInterval readableInterval17 = null;
        org.joda.time.ReadableInterval readableInterval18 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval17);
        org.joda.time.Chronology chronology19 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval17);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfCentury();
        org.joda.time.DurationField durationField21 = chronology19.millis();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval23 = null;
        org.joda.time.ReadableInterval readableInterval24 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval23);
        org.joda.time.Chronology chronology25 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval23);
        org.joda.time.DateTimeField dateTimeField26 = chronology25.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval28 = null;
        org.joda.time.ReadableInterval readableInterval29 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval28);
        org.joda.time.ReadableInterval readableInterval30 = null;
        boolean boolean31 = readableInterval29.contains(readableInterval30);
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Period period33 = readableInterval29.toPeriod(periodType32);
        int[] intArray35 = chronology25.get((org.joda.time.ReadablePeriod) period33, (-210866846400000L));
        int[] intArray38 = chronology19.get((org.joda.time.ReadablePeriod) period33, 2173795348453L, (long) 1439);
        int[] intArray41 = chronology13.get((org.joda.time.ReadablePeriod) period33, 291L, 2580171L);
        int[] intArray43 = iSOChronology9.get((org.joda.time.ReadablePeriod) period33, 29227899L);
        int[] intArray46 = gregorianChronology5.get((org.joda.time.ReadablePeriod) period33, 1704096000000L, (long) (short) 100);
        java.lang.Class<?> wildcardClass47 = intArray46.getClass();
        org.junit.Assert.assertNotNull(gregorianChronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(readableInterval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(readableInterval18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(readableInterval24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(readableInterval29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[0, 0, 0, 0, 8, 7, 7, 899]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-54, 0, 0, 0, -7, -59, -59, -900]");
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3091");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        java.lang.String str11 = partial0.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = partial0.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        boolean boolean14 = partial0.isSupported(dateTimeFieldType13);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone19 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology20 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone21 = gregorianChronology20.getZone();
        long long26 = gregorianChronology20.getDateTimeMillis((int) '4', 8, 24, 24);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField28 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long31 = durationField28.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long33 = durationField28.getValueAsLong((long) 10);
        int int35 = durationField28.getValue((long) (byte) 10);
        boolean boolean36 = partial27.equals((java.lang.Object) durationField28);
        org.joda.time.Chronology chronology37 = partial27.getChronology();
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        boolean boolean39 = partial27.isBefore((org.joda.time.ReadablePartial) partial38);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray40 = partial27.getFieldTypes();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField42 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long45 = durationField42.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long47 = durationField42.getValueAsLong((long) 10);
        int int49 = durationField42.getValue((long) (byte) 10);
        boolean boolean50 = partial41.equals((java.lang.Object) durationField42);
        boolean boolean51 = partial27.equals((java.lang.Object) durationField42);
        int[] intArray53 = gregorianChronology20.get((org.joda.time.ReadablePartial) partial27, 0L);
        org.joda.time.DurationField durationField54 = gregorianChronology20.millis();
        long long57 = durationField54.getValueAsLong((-124568580134000L), (long) '4');
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField58 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType13, durationField54);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(gregorianChronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-60505833599976L) + "'", long26 == (-60505833599976L));
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10L + "'", long33 == 10L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray40);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 10L + "'", long47 == 10L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-124568580134000L) + "'", long57 == (-124568580134000L));
        org.junit.Assert.assertNotNull(unsupportedDateTimeField58);
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0327");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.hourOfHalfday();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField3, dateTimeFieldType4, 53460006);
        org.joda.time.IllegalFieldValueException illegalFieldValueException8 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType4, "seconds");
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.ReadableInterval readableInterval11 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval10);
        org.joda.time.Chronology chronology12 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval10);
        org.joda.time.DateTimeField dateTimeField13 = chronology12.yearOfCentury();
        org.joda.time.DurationField durationField14 = chronology12.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField15 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType9, durationField14);
        long long18 = durationField14.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.ReadableInterval readableInterval21 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval20);
        org.joda.time.Chronology chronology22 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval20);
        org.joda.time.DateTimeField dateTimeField23 = chronology22.yearOfCentury();
        boolean boolean24 = durationFieldType19.isSupported(chronology22);
        org.joda.time.field.ScaledDurationField scaledDurationField26 = new org.joda.time.field.ScaledDurationField(durationField14, durationFieldType19, (int) 'a');
        int int28 = scaledDurationField26.getValue((long) (short) -1);
        long long31 = scaledDurationField26.getMillis((long) 100, 0L);
        boolean boolean32 = scaledDurationField26.isPrecise();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval34 = null;
        org.joda.time.ReadableInterval readableInterval35 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval34);
        org.joda.time.Chronology chronology36 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval34);
        org.joda.time.DateTimeField dateTimeField37 = chronology36.yearOfCentury();
        org.joda.time.DurationField durationField38 = chronology36.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField39 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType33, durationField38);
        org.joda.time.DurationField durationField40 = unsupportedDateTimeField39.getDurationField();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.field.PreciseDateTimeField preciseDateTimeField41 = new org.joda.time.field.PreciseDateTimeField(dateTimeFieldType4, (org.joda.time.DurationField) scaledDurationField26, durationField40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The effective range must be at least 2");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(readableInterval11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-210866846400000L) + "'", long18 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertNotNull(readableInterval21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 9700L + "'", long31 == 9700L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(readableInterval35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2864");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.ReadableInterval readableInterval11 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval10);
        org.joda.time.ReadableInterval readableInterval12 = null;
        boolean boolean13 = readableInterval11.contains(readableInterval12);
        org.joda.time.ReadableInterval readableInterval14 = null;
        boolean boolean15 = readableInterval11.isBefore(readableInterval14);
        org.joda.time.Interval interval16 = readableInterval11.toInterval();
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.PeriodType periodType18 = org.joda.time.DateTimeUtils.getPeriodType(periodType17);
        org.joda.time.PeriodType periodType19 = org.joda.time.DateTimeUtils.getPeriodType(periodType17);
        org.joda.time.Period period20 = readableInterval11.toPeriod(periodType19);
        org.joda.time.Partial partial21 = partial0.plus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField23 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long26 = durationField23.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long28 = durationField23.getValueAsLong((long) 10);
        int int30 = durationField23.getValue((long) (byte) 10);
        boolean boolean31 = partial22.equals((java.lang.Object) durationField23);
        org.joda.time.chrono.ISOChronology iSOChronology32 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField33 = iSOChronology32.minutes();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology32.millisOfDay();
        org.joda.time.DateTimeField dateTimeField35 = iSOChronology32.halfdayOfDay();
        org.joda.time.ReadableInterval readableInterval36 = null;
        org.joda.time.ReadableInterval readableInterval37 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval36);
        org.joda.time.ReadableInterval readableInterval38 = null;
        boolean boolean39 = readableInterval37.contains(readableInterval38);
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.Period period41 = readableInterval37.toPeriod(periodType40);
        int[] intArray44 = iSOChronology32.get((org.joda.time.ReadablePeriod) period41, 4L, (long) '#');
        org.joda.time.Partial partial45 = partial22.plus((org.joda.time.ReadablePeriod) period41);
        org.joda.time.Partial partial46 = partial21.minus((org.joda.time.ReadablePeriod) period41);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = partial21.toDateTime(readableInstant47);
        org.joda.time.ReadablePartial readablePartial49 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int50 = partial21.compareTo(readablePartial49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(readableInterval11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10L + "'", long28 == 10L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(iSOChronology32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(readableInterval37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, 0, 0, 0, 0, 0, 0, 31]");
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNotNull(dateTime48);
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2897");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = null;
        boolean boolean3 = readableInterval1.contains(readableInterval2);
        org.joda.time.ReadableInterval readableInterval4 = null;
        boolean boolean5 = readableInterval1.isBefore(readableInterval4);
        org.joda.time.Interval interval6 = readableInterval1.toInterval();
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.PeriodType periodType8 = org.joda.time.DateTimeUtils.getPeriodType(periodType7);
        org.joda.time.PeriodType periodType9 = org.joda.time.DateTimeUtils.getPeriodType(periodType7);
        org.joda.time.Period period10 = readableInterval1.toPeriod(periodType9);
        org.joda.time.ReadableInterval readableInterval11 = null;
        org.joda.time.ReadableInterval readableInterval12 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval11);
        org.joda.time.ReadableInterval readableInterval13 = null;
        boolean boolean14 = readableInterval12.contains(readableInterval13);
        org.joda.time.ReadableInterval readableInterval15 = null;
        boolean boolean16 = readableInterval12.isBefore(readableInterval15);
        org.joda.time.Interval interval17 = readableInterval12.toInterval();
        boolean boolean18 = readableInterval1.overlaps(readableInterval12);
        org.joda.time.chrono.ISOChronology iSOChronology19 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField20 = iSOChronology19.minutes();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str22 = dateTimeZone21.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology23 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology19, dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone24 = zonedChronology23.getZone();
        boolean boolean26 = zonedChronology23.equals((java.lang.Object) 4L);
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology23.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology23.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone29 = zonedChronology23.getZone();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology23.minuteOfHour();
        org.joda.time.DurationField durationField31 = zonedChronology23.years();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        long long35 = dateTimeZone32.getMillisKeepLocal(dateTimeZone33, 2580171L);
        long long39 = dateTimeZone32.convertLocalToUTC((-1L), false, 946713600000L);
        org.joda.time.Chronology chronology40 = zonedChronology23.withZone(dateTimeZone32);
        org.joda.time.DurationField durationField41 = chronology40.weeks();
        boolean boolean42 = readableInterval1.equals((java.lang.Object) durationField41);
        // The following exception was thrown during execution in test generation
        try {
            long long45 = durationField41.getMillis(1701302400000L, 1672531199930L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1701302400000 * 604800000");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(readableInterval12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(iSOChronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + 2580162L + "'", long35 == 2580162L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-1L) + "'", long39 == (-1L));
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0210");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.clockhourOfHalfday();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.Partial partial8 = new org.joda.time.Partial(dateTimeFieldType6, 100);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeField5.getAsShortText((org.joda.time.ReadablePartial) partial8, (int) ' ', locale10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.Partial partial14 = new org.joda.time.Partial(dateTimeFieldType12, 100);
        int int16 = partial14.getValue(0);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone22 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology23 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone24 = gregorianChronology23.getZone();
        long long29 = gregorianChronology23.getDateTimeMillis((int) '4', 8, 24, 24);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField31 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long34 = durationField31.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long36 = durationField31.getValueAsLong((long) 10);
        int int38 = durationField31.getValue((long) (byte) 10);
        boolean boolean39 = partial30.equals((java.lang.Object) durationField31);
        org.joda.time.Chronology chronology40 = partial30.getChronology();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        boolean boolean42 = partial30.isBefore((org.joda.time.ReadablePartial) partial41);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray43 = partial30.getFieldTypes();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField45 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long48 = durationField45.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long50 = durationField45.getValueAsLong((long) 10);
        int int52 = durationField45.getValue((long) (byte) 10);
        boolean boolean53 = partial44.equals((java.lang.Object) durationField45);
        boolean boolean54 = partial30.equals((java.lang.Object) durationField45);
        int[] intArray56 = gregorianChronology23.get((org.joda.time.ReadablePartial) partial30, 0L);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray58 = dateTimeField5.addWrapField((org.joda.time.ReadablePartial) partial14, (-7), intArray56, 13);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -7");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "32" + "'", str11, "32");
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertNotNull(gregorianChronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-60505833599976L) + "'", long29 == (-60505833599976L));
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 10L + "'", long36 == 10L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray43);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1L + "'", long48 == 1L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 10L + "'", long50 == 10L);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2571");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval3);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DurationField durationField7 = chronology5.millis();
        org.joda.time.DurationField durationField8 = chronology5.centuries();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval9);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology11.millis();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.ReadableInterval readableInterval16 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval15);
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.ReadableInterval readableInterval21 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval20);
        org.joda.time.ReadableInterval readableInterval22 = null;
        boolean boolean23 = readableInterval21.contains(readableInterval22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = readableInterval21.toPeriod(periodType24);
        int[] intArray27 = chronology17.get((org.joda.time.ReadablePeriod) period25, (-210866846400000L));
        int[] intArray30 = chronology11.get((org.joda.time.ReadablePeriod) period25, 2173795348453L, (long) 1439);
        int[] intArray33 = chronology5.get((org.joda.time.ReadablePeriod) period25, 291L, 2580171L);
        int[] intArray36 = iSOChronology0.get((org.joda.time.ReadablePeriod) period25, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField37 = iSOChronology0.months();
        java.lang.String str38 = iSOChronology0.toString();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = iSOChronology0.equals((java.lang.Object) partial39);
        java.lang.String str41 = iSOChronology0.toString();
        org.joda.time.Chronology chronology42 = iSOChronology0.withUTC();
        org.joda.time.Chronology chronology43 = chronology42.withUTC();
        org.joda.time.Chronology chronology44 = org.joda.time.DateTimeUtils.getChronology(chronology43);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(readableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(readableInterval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(readableInterval21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(intArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(durationField37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[UTC]" + "'", str38, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ISOChronology[UTC]" + "'", str41, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(chronology44);
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2586");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        boolean boolean5 = durationFieldType0.isSupported(chronology3);
        org.joda.time.DurationField durationField6 = chronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.weekyearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField12 = new org.joda.time.field.OffsetDateTimeField(dateTimeField7, dateTimeFieldType8, 4, (int) ' ', (int) (short) -1);
        long long14 = offsetDateTimeField12.roundCeiling(2102400001L);
        boolean boolean15 = offsetDateTimeField12.isSupported();
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField17 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long20 = durationField17.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long22 = durationField17.getValueAsLong((long) 10);
        int int24 = durationField17.getValue((long) (byte) 10);
        boolean boolean25 = partial16.equals((java.lang.Object) durationField17);
        org.joda.time.Chronology chronology26 = partial16.getChronology();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        boolean boolean28 = partial16.isBefore((org.joda.time.ReadablePartial) partial27);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = partial16.getFieldTypes();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField31 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long34 = durationField31.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long36 = durationField31.getValueAsLong((long) 10);
        int int38 = durationField31.getValue((long) (byte) 10);
        boolean boolean39 = partial30.equals((java.lang.Object) durationField31);
        org.joda.time.Chronology chronology40 = partial30.getChronology();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        boolean boolean42 = partial30.isBefore((org.joda.time.ReadablePartial) partial41);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray43 = partial30.getFieldTypes();
        boolean boolean45 = partial30.equals((java.lang.Object) 1702281558665L);
        int int46 = partial16.compareTo((org.joda.time.ReadablePartial) partial30);
        java.util.Locale locale48 = null;
        java.lang.String str49 = offsetDateTimeField12.getAsShortText((org.joda.time.ReadablePartial) partial30, 9, locale48);
        int int51 = offsetDateTimeField12.getLeapAmount(33258197981048L);
        long long53 = offsetDateTimeField12.roundHalfFloor((-476134761954L));
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 31536000000L + "'", long14 == 31536000000L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10L + "'", long22 == 10L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 10L + "'", long36 == 10L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "9" + "'", str49, "9");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-473385600000L) + "'", long53 == (-473385600000L));
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0672");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        long long24 = remainderDateTimeField22.roundHalfFloor(3600000L);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval26 = null;
        org.joda.time.ReadableInterval readableInterval27 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval26);
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval26);
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfCentury();
        org.joda.time.DurationField durationField30 = chronology28.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField31 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType25, durationField30);
        long long34 = unsupportedDateTimeField31.add((-31L), (long) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = unsupportedDateTimeField31.getType();
        org.joda.time.DurationFieldType durationFieldType36 = dateTimeFieldType35.getRangeDurationType();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField37 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField22, dateTimeFieldType35);
        org.joda.time.DurationField durationField38 = remainderDateTimeField22.iDurationField;
        long long40 = remainderDateTimeField22.roundFloor(1701289161428L);
        int int42 = remainderDateTimeField22.get(2102400001L);
        long long44 = remainderDateTimeField22.remainder((-9088402176000000000L));
        int int46 = remainderDateTimeField22.getLeapAmount(1704067200000L);
        org.joda.time.DurationField durationField47 = remainderDateTimeField22.getDurationField();
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(readableInterval27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 4L + "'", long34 == 4L);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1672531200000L + "'", long40 == 1672531200000L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(durationField47);
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2729");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval3);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DurationField durationField7 = chronology5.millis();
        org.joda.time.DurationField durationField8 = chronology5.centuries();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval9);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology11.millis();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.ReadableInterval readableInterval16 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval15);
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.ReadableInterval readableInterval21 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval20);
        org.joda.time.ReadableInterval readableInterval22 = null;
        boolean boolean23 = readableInterval21.contains(readableInterval22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = readableInterval21.toPeriod(periodType24);
        int[] intArray27 = chronology17.get((org.joda.time.ReadablePeriod) period25, (-210866846400000L));
        int[] intArray30 = chronology11.get((org.joda.time.ReadablePeriod) period25, 2173795348453L, (long) 1439);
        int[] intArray33 = chronology5.get((org.joda.time.ReadablePeriod) period25, 291L, 2580171L);
        int[] intArray36 = iSOChronology0.get((org.joda.time.ReadablePeriod) period25, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField37 = iSOChronology0.months();
        java.lang.String str38 = iSOChronology0.toString();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = iSOChronology0.equals((java.lang.Object) partial39);
        org.joda.time.Chronology chronology41 = org.joda.time.DateTimeUtils.getChronology((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.DateTimeField dateTimeField42 = chronology41.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField43 = chronology41.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField44 = chronology41.weekyearOfCentury();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(readableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(readableInterval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(readableInterval21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[hourOfDay]" + "'", str38, "ISOChronology[hourOfDay]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1275");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = zonedChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField6 = zonedChronology4.monthOfYear();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField8 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long11 = durationField8.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long13 = durationField8.getValueAsLong((long) 10);
        int int15 = durationField8.getValue((long) (byte) 10);
        boolean boolean16 = partial7.equals((java.lang.Object) durationField8);
        org.joda.time.Chronology chronology17 = partial7.getChronology();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial7.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial7.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.ReadableInterval readableInterval22 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval21);
        long long23 = readableInterval22.getStartMillis();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.ReadableInterval readableInterval26 = null;
        boolean boolean27 = readableInterval25.contains(readableInterval26);
        org.joda.time.Duration duration28 = readableInterval25.toDuration();
        org.joda.time.DateTime dateTime29 = readableInterval25.getEnd();
        boolean boolean30 = readableInterval22.contains((org.joda.time.ReadableInstant) dateTime29);
        boolean boolean31 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime29);
        int[] intArray33 = zonedChronology4.get((org.joda.time.ReadablePartial) partial7, 60035L);
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology4.secondOfMinute();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone39 = new org.joda.time.tz.FixedDateTimeZone("UTC", "", 0, 4);
        java.util.TimeZone timeZone40 = fixedDateTimeZone39.toTimeZone();
        java.lang.String str42 = fixedDateTimeZone39.getName(97L);
        int int44 = fixedDateTimeZone39.getOffsetFromLocal((-210858120000000L));
        long long46 = fixedDateTimeZone39.nextTransition(0L);
        int int48 = fixedDateTimeZone39.getOffset(2580171L);
        org.joda.time.chrono.ZonedChronology zonedChronology49 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) zonedChronology4, (org.joda.time.DateTimeZone) fixedDateTimeZone39);
        org.joda.time.DateTimeField dateTimeField50 = zonedChronology49.hourOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(readableInterval22);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 315639019277L + "'", long23 == 315639019277L);
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00" + "'", str42, "+00:00");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(zonedChronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1365");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval3);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DurationField durationField7 = chronology5.millis();
        org.joda.time.DurationField durationField8 = chronology5.centuries();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval9);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology11.millis();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.ReadableInterval readableInterval16 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval15);
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.ReadableInterval readableInterval21 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval20);
        org.joda.time.ReadableInterval readableInterval22 = null;
        boolean boolean23 = readableInterval21.contains(readableInterval22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = readableInterval21.toPeriod(periodType24);
        int[] intArray27 = chronology17.get((org.joda.time.ReadablePeriod) period25, (-210866846400000L));
        int[] intArray30 = chronology11.get((org.joda.time.ReadablePeriod) period25, 2173795348453L, (long) 1439);
        int[] intArray33 = chronology5.get((org.joda.time.ReadablePeriod) period25, 291L, 2580171L);
        int[] intArray36 = iSOChronology0.get((org.joda.time.ReadablePeriod) period25, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField37 = iSOChronology0.months();
        java.lang.String str38 = iSOChronology0.toString();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = iSOChronology0.equals((java.lang.Object) partial39);
        java.lang.String str41 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField43 = iSOChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField44 = iSOChronology0.weekyear();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(readableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(readableInterval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(readableInterval21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(durationField37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[UTC]" + "'", str38, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ISOChronology[UTC]" + "'", str41, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1531");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = zonedChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField6 = zonedChronology4.monthOfYear();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField8 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long11 = durationField8.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long13 = durationField8.getValueAsLong((long) 10);
        int int15 = durationField8.getValue((long) (byte) 10);
        boolean boolean16 = partial7.equals((java.lang.Object) durationField8);
        org.joda.time.Chronology chronology17 = partial7.getChronology();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial7.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial7.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.ReadableInterval readableInterval22 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval21);
        long long23 = readableInterval22.getStartMillis();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.ReadableInterval readableInterval26 = null;
        boolean boolean27 = readableInterval25.contains(readableInterval26);
        org.joda.time.Duration duration28 = readableInterval25.toDuration();
        org.joda.time.DateTime dateTime29 = readableInterval25.getEnd();
        boolean boolean30 = readableInterval22.contains((org.joda.time.ReadableInstant) dateTime29);
        boolean boolean31 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime29);
        int[] intArray33 = zonedChronology4.get((org.joda.time.ReadablePartial) partial7, 60035L);
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology4.secondOfMinute();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone39 = new org.joda.time.tz.FixedDateTimeZone("UTC", "", 0, 4);
        java.util.TimeZone timeZone40 = fixedDateTimeZone39.toTimeZone();
        java.lang.String str42 = fixedDateTimeZone39.getName(97L);
        int int44 = fixedDateTimeZone39.getOffsetFromLocal((-210858120000000L));
        long long46 = fixedDateTimeZone39.nextTransition(0L);
        int int48 = fixedDateTimeZone39.getOffset(2580171L);
        org.joda.time.chrono.ZonedChronology zonedChronology49 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) zonedChronology4, (org.joda.time.DateTimeZone) fixedDateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone50 = zonedChronology4.getZone();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(readableInterval22);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1225226728711L + "'", long23 == 1225226728711L);
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00" + "'", str42, "+00:00");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(zonedChronology49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1908");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval3);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DurationField durationField7 = chronology5.millis();
        org.joda.time.DurationField durationField8 = chronology5.centuries();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval9);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology11.millis();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.ReadableInterval readableInterval16 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval15);
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.ReadableInterval readableInterval21 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval20);
        org.joda.time.ReadableInterval readableInterval22 = null;
        boolean boolean23 = readableInterval21.contains(readableInterval22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = readableInterval21.toPeriod(periodType24);
        int[] intArray27 = chronology17.get((org.joda.time.ReadablePeriod) period25, (-210866846400000L));
        int[] intArray30 = chronology11.get((org.joda.time.ReadablePeriod) period25, 2173795348453L, (long) 1439);
        int[] intArray33 = chronology5.get((org.joda.time.ReadablePeriod) period25, 291L, 2580171L);
        int[] intArray36 = iSOChronology0.get((org.joda.time.ReadablePeriod) period25, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField37 = iSOChronology0.weekyears();
        org.joda.time.Chronology chronology38 = iSOChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField39 = iSOChronology0.hourOfDay();
        org.joda.time.DurationField durationField40 = iSOChronology0.weekyears();
        org.joda.time.DateTimeField dateTimeField41 = iSOChronology0.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            long long47 = iSOChronology0.getDateTimeMillis((-105220796399972L), 17127628, (int) (byte) 10, 6, 29227899);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 17127628 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(readableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(readableInterval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(readableInterval21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0767");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = partial0.getFormatter();
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField16 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long19 = durationField16.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long21 = durationField16.getValueAsLong((long) 10);
        int int23 = durationField16.getValue((long) (byte) 10);
        boolean boolean24 = partial15.equals((java.lang.Object) durationField16);
        org.joda.time.Chronology chronology25 = partial15.getChronology();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial15.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = partial15.getFieldTypes();
        boolean boolean30 = partial15.equals((java.lang.Object) 1702281558665L);
        java.lang.String str31 = partial15.toString();
        org.joda.time.Chronology chronology32 = partial15.getChronology();
        int int33 = partial0.compareTo((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField35 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long38 = durationField35.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long40 = durationField35.getValueAsLong((long) 10);
        int int42 = durationField35.getValue((long) (byte) 10);
        boolean boolean43 = partial34.equals((java.lang.Object) durationField35);
        org.joda.time.Chronology chronology44 = partial34.getChronology();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        boolean boolean46 = partial34.isBefore((org.joda.time.ReadablePartial) partial45);
        java.lang.String str47 = partial34.toString();
        java.lang.String str48 = partial34.toString();
        boolean boolean49 = partial0.isMatch((org.joda.time.ReadablePartial) partial34);
        int int50 = partial34.size();
        java.util.Locale locale52 = null;
        java.lang.String str53 = partial34.toString("-08:00", locale52);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10L + "'", long21 == 10L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10L + "'", long40 == 10L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[]" + "'", str47, "[]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[]" + "'", str48, "[]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "-08:00" + "'", str53, "-08:00");
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0279");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = durationField5.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval11 = null;
        org.joda.time.ReadableInterval readableInterval12 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval11);
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval11);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfCentury();
        boolean boolean15 = durationFieldType10.isSupported(chronology13);
        org.joda.time.field.ScaledDurationField scaledDurationField17 = new org.joda.time.field.ScaledDurationField(durationField5, durationFieldType10, (int) 'a');
        org.joda.time.DurationField durationField18 = scaledDurationField17.getWrappedField();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.ReadableInterval readableInterval21 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval20);
        org.joda.time.Chronology chronology22 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval20);
        org.joda.time.DateTimeField dateTimeField23 = chronology22.yearOfCentury();
        org.joda.time.DurationField durationField24 = chronology22.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField25 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType19, durationField24);
        long long28 = durationField24.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval30 = null;
        org.joda.time.ReadableInterval readableInterval31 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval30);
        org.joda.time.Chronology chronology32 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval30);
        org.joda.time.DateTimeField dateTimeField33 = chronology32.yearOfCentury();
        boolean boolean34 = durationFieldType29.isSupported(chronology32);
        org.joda.time.field.ScaledDurationField scaledDurationField36 = new org.joda.time.field.ScaledDurationField(durationField24, durationFieldType29, (int) 'a');
        int int38 = scaledDurationField36.getValue((long) (short) -1);
        boolean boolean39 = scaledDurationField36.isSupported();
        boolean boolean40 = scaledDurationField17.equals((java.lang.Object) scaledDurationField36);
        long long41 = scaledDurationField17.getUnitMillis();
        long long44 = scaledDurationField17.getMillis(180000000L, 1641274285996L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-210866846400000L) + "'", long9 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(readableInterval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(readableInterval21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-210866846400000L) + "'", long28 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertNotNull(readableInterval31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 97L + "'", long41 == 97L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 17460000000L + "'", long44 == 17460000000L);
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1017");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval3);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DurationField durationField7 = chronology5.millis();
        org.joda.time.DurationField durationField8 = chronology5.centuries();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval9);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology11.millis();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.ReadableInterval readableInterval16 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval15);
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.ReadableInterval readableInterval21 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval20);
        org.joda.time.ReadableInterval readableInterval22 = null;
        boolean boolean23 = readableInterval21.contains(readableInterval22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = readableInterval21.toPeriod(periodType24);
        int[] intArray27 = chronology17.get((org.joda.time.ReadablePeriod) period25, (-210866846400000L));
        int[] intArray30 = chronology11.get((org.joda.time.ReadablePeriod) period25, 2173795348453L, (long) 1439);
        int[] intArray33 = chronology5.get((org.joda.time.ReadablePeriod) period25, 291L, 2580171L);
        int[] intArray36 = iSOChronology0.get((org.joda.time.ReadablePeriod) period25, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField37 = iSOChronology0.months();
        java.lang.String str38 = iSOChronology0.toString();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = iSOChronology0.equals((java.lang.Object) partial39);
        org.joda.time.DateTimeField dateTimeField41 = iSOChronology0.monthOfYear();
        org.joda.time.DurationField durationField42 = iSOChronology0.days();
        org.joda.time.DurationField durationField43 = iSOChronology0.months();
        long long46 = durationField43.subtract(69L, 0);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(readableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(readableInterval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(readableInterval21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(intArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(durationField37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[hourOfDay]" + "'", str38, "ISOChronology[hourOfDay]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 69L + "'", long46 == 69L);
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1579");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add((-31L), (long) '#');
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField11 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long14 = durationField11.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long16 = durationField11.getValueAsLong((long) 10);
        int int18 = durationField11.getValue((long) (byte) 10);
        boolean boolean19 = partial10.equals((java.lang.Object) durationField11);
        org.joda.time.Chronology chronology20 = partial10.getChronology();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        boolean boolean22 = partial10.isBefore((org.joda.time.ReadablePartial) partial21);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = partial10.getFieldTypes();
        boolean boolean25 = partial10.equals((java.lang.Object) 1702281558665L);
        java.lang.String str26 = partial10.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = partial10.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial10.plus(readablePeriod28);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField31 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long34 = durationField31.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long36 = durationField31.getValueAsLong((long) 10);
        int int38 = durationField31.getValue((long) (byte) 10);
        boolean boolean39 = partial30.equals((java.lang.Object) durationField31);
        org.joda.time.Chronology chronology40 = partial30.getChronology();
        java.lang.String str41 = partial30.toString();
        boolean boolean42 = partial29.isAfter((org.joda.time.ReadablePartial) partial30);
        java.lang.String str43 = partial29.toString();
        int[] intArray44 = partial29.getValues();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = null;
        java.lang.String str46 = partial29.toString(dateTimeFormatter45);
        // The following exception was thrown during execution in test generation
        try {
            int int47 = unsupportedDateTimeField6.getMaximumValue((org.joda.time.ReadablePartial) partial29);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10L + "'", long16 == 10L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 10L + "'", long36 == 10L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[]" + "'", str41, "[]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[]" + "'", str43, "[]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[]" + "'", str46, "[]");
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2272");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology5 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone6 = gregorianChronology5.getZone();
        long long11 = gregorianChronology5.getDateTimeMillis((int) '4', 8, 24, 24);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField13 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long16 = durationField13.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long18 = durationField13.getValueAsLong((long) 10);
        int int20 = durationField13.getValue((long) (byte) 10);
        boolean boolean21 = partial12.equals((java.lang.Object) durationField13);
        org.joda.time.Chronology chronology22 = partial12.getChronology();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        boolean boolean24 = partial12.isBefore((org.joda.time.ReadablePartial) partial23);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = partial12.getFieldTypes();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField27 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long30 = durationField27.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long32 = durationField27.getValueAsLong((long) 10);
        int int34 = durationField27.getValue((long) (byte) 10);
        boolean boolean35 = partial26.equals((java.lang.Object) durationField27);
        boolean boolean36 = partial12.equals((java.lang.Object) durationField27);
        int[] intArray38 = gregorianChronology5.get((org.joda.time.ReadablePartial) partial12, 0L);
        org.joda.time.DateTimeField dateTimeField39 = gregorianChronology5.hourOfDay();
        org.joda.time.ReadableInterval readableInterval40 = null;
        org.joda.time.ReadableInterval readableInterval41 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval40);
        long long42 = readableInterval41.getStartMillis();
        org.joda.time.ReadableInterval readableInterval43 = null;
        org.joda.time.ReadableInterval readableInterval44 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval43);
        long long45 = readableInterval44.getEndMillis();
        boolean boolean46 = readableInterval41.overlaps(readableInterval44);
        org.joda.time.MutableInterval mutableInterval47 = readableInterval41.toMutableInterval();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        boolean boolean49 = mutableInterval47.equals((java.lang.Object) dateTimeFieldType48);
        long long50 = mutableInterval47.toDurationMillis();
        org.joda.time.Period period51 = mutableInterval47.toPeriod();
        long long54 = gregorianChronology5.add((org.joda.time.ReadablePeriod) period51, 3160L, (int) (byte) 0);
        org.junit.Assert.assertNotNull(gregorianChronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505833599976L) + "'", long11 == (-60505833599976L));
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10L + "'", long18 == 10L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10L + "'", long32 == 10L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(readableInterval41);
// flaky:         org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1701289610492L + "'", long42 == 1701289610492L);
        org.junit.Assert.assertNotNull(readableInterval44);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1701289610492L + "'", long45 == 1701289610492L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(mutableInterval47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 3160L + "'", long54 == 3160L);
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1925");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval3);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DurationField durationField7 = chronology5.millis();
        org.joda.time.DurationField durationField8 = chronology5.centuries();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval9);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology11.millis();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.ReadableInterval readableInterval16 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval15);
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.ReadableInterval readableInterval21 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval20);
        org.joda.time.ReadableInterval readableInterval22 = null;
        boolean boolean23 = readableInterval21.contains(readableInterval22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = readableInterval21.toPeriod(periodType24);
        int[] intArray27 = chronology17.get((org.joda.time.ReadablePeriod) period25, (-210866846400000L));
        int[] intArray30 = chronology11.get((org.joda.time.ReadablePeriod) period25, 2173795348453L, (long) 1439);
        int[] intArray33 = chronology5.get((org.joda.time.ReadablePeriod) period25, 291L, 2580171L);
        int[] intArray36 = iSOChronology0.get((org.joda.time.ReadablePeriod) period25, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField37 = iSOChronology0.months();
        java.lang.String str38 = iSOChronology0.toString();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = iSOChronology0.equals((java.lang.Object) partial39);
        java.lang.String str41 = iSOChronology0.toString();
        org.joda.time.Chronology chronology42 = iSOChronology0.withUTC();
        org.joda.time.Chronology chronology43 = chronology42.withUTC();
        org.joda.time.DateTimeField dateTimeField44 = chronology42.minuteOfHour();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(readableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(readableInterval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(readableInterval21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(durationField37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[100]" + "'", str38, "ISOChronology[100]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ISOChronology[100]" + "'", str41, "ISOChronology[100]");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2258");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfWeek();
        java.lang.String str1 = dateTimeFieldType0.getName();
        org.joda.time.IllegalFieldValueException illegalFieldValueException3 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType0, "-08:00");
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval5 = null;
        org.joda.time.ReadableInterval readableInterval6 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval5);
        org.joda.time.Chronology chronology7 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval5);
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfCentury();
        org.joda.time.DurationField durationField9 = chronology7.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField10 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType4, durationField9);
        long long13 = durationField9.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.ReadableInterval readableInterval16 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval15);
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        boolean boolean19 = durationFieldType14.isSupported(chronology17);
        org.joda.time.field.ScaledDurationField scaledDurationField21 = new org.joda.time.field.ScaledDurationField(durationField9, durationFieldType14, (int) 'a');
        int int23 = scaledDurationField21.getValue((long) (short) -1);
        boolean boolean24 = scaledDurationField21.isSupported();
        long long27 = scaledDurationField21.getDifferenceAsLong(28800001L, (-210858120000000L));
        java.lang.String str28 = scaledDurationField21.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType30 = dateTimeFieldType29.getDurationType();
        org.joda.time.field.PreciseDurationField preciseDurationField32 = new org.joda.time.field.PreciseDurationField(durationFieldType30, 28354819L);
        long long33 = preciseDurationField32.getUnitMillis();
        boolean boolean34 = preciseDurationField32.isPrecise();
        long long37 = preciseDurationField32.getValueAsLong((long) 719, 306607L);
        org.joda.time.field.PreciseDateTimeField preciseDateTimeField38 = new org.joda.time.field.PreciseDateTimeField(dateTimeFieldType0, (org.joda.time.DurationField) scaledDurationField21, (org.joda.time.DurationField) preciseDurationField32);
        org.joda.time.DurationField durationField39 = preciseDateTimeField38.getDurationField();
        org.joda.time.DurationField durationField40 = preciseDateTimeField38.getRangeDurationField();
        long long41 = preciseDateTimeField38.iUnitMillis;
        long long44 = preciseDateTimeField38.addWrapField((-28739965L), (int) 'a');
        int int47 = preciseDateTimeField38.getMaximumValueForSet(93696500804059106L, 197);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "dayOfWeek" + "'", str1, "dayOfWeek");
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(readableInterval6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-210866846400000L) + "'", long13 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(readableInterval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 2173795348453L + "'", long27 == 2173795348453L);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "DurationField[hours]" + "'", str28, "DurationField[hours]");
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 28354819L + "'", long33 == 28354819L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 97L + "'", long41 == 97L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-28730556L) + "'", long44 == (-28730556L));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 292316 + "'", int47 == 292316);
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1228");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval3);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DurationField durationField7 = chronology5.millis();
        org.joda.time.DurationField durationField8 = chronology5.centuries();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval9);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology11.millis();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.ReadableInterval readableInterval16 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval15);
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.ReadableInterval readableInterval21 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval20);
        org.joda.time.ReadableInterval readableInterval22 = null;
        boolean boolean23 = readableInterval21.contains(readableInterval22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = readableInterval21.toPeriod(periodType24);
        int[] intArray27 = chronology17.get((org.joda.time.ReadablePeriod) period25, (-210866846400000L));
        int[] intArray30 = chronology11.get((org.joda.time.ReadablePeriod) period25, 2173795348453L, (long) 1439);
        int[] intArray33 = chronology5.get((org.joda.time.ReadablePeriod) period25, 291L, 2580171L);
        int[] intArray36 = iSOChronology0.get((org.joda.time.ReadablePeriod) period25, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField37 = iSOChronology0.months();
        java.lang.String str38 = iSOChronology0.toString();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = iSOChronology0.equals((java.lang.Object) partial39);
        java.lang.String str41 = iSOChronology0.toString();
        org.joda.time.Chronology chronology42 = iSOChronology0.withUTC();
        org.joda.time.Chronology chronology43 = chronology42.withUTC();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.secondOfMinute();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(readableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(readableInterval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(readableInterval21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[100]" + "'", str38, "ISOChronology[100]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ISOChronology[100]" + "'", str41, "ISOChronology[100]");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2917");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfWeek();
        java.lang.String str1 = dateTimeFieldType0.getName();
        org.joda.time.IllegalFieldValueException illegalFieldValueException3 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType0, "-08:00");
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval5 = null;
        org.joda.time.ReadableInterval readableInterval6 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval5);
        org.joda.time.Chronology chronology7 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval5);
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfCentury();
        org.joda.time.DurationField durationField9 = chronology7.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField10 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType4, durationField9);
        long long13 = durationField9.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.ReadableInterval readableInterval16 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval15);
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        boolean boolean19 = durationFieldType14.isSupported(chronology17);
        org.joda.time.field.ScaledDurationField scaledDurationField21 = new org.joda.time.field.ScaledDurationField(durationField9, durationFieldType14, (int) 'a');
        int int23 = scaledDurationField21.getValue((long) (short) -1);
        boolean boolean24 = scaledDurationField21.isSupported();
        long long27 = scaledDurationField21.getDifferenceAsLong(28800001L, (-210858120000000L));
        java.lang.String str28 = scaledDurationField21.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType30 = dateTimeFieldType29.getDurationType();
        org.joda.time.field.PreciseDurationField preciseDurationField32 = new org.joda.time.field.PreciseDurationField(durationFieldType30, 28354819L);
        long long33 = preciseDurationField32.getUnitMillis();
        boolean boolean34 = preciseDurationField32.isPrecise();
        long long37 = preciseDurationField32.getValueAsLong((long) 719, 306607L);
        org.joda.time.field.PreciseDateTimeField preciseDateTimeField38 = new org.joda.time.field.PreciseDateTimeField(dateTimeFieldType0, (org.joda.time.DurationField) scaledDurationField21, (org.joda.time.DurationField) preciseDurationField32);
        boolean boolean39 = preciseDateTimeField38.isLenient();
        int int40 = preciseDateTimeField38.getRange();
        int int43 = preciseDateTimeField38.getMaximumValueForSet(9409L, 6691);
        java.lang.String str45 = preciseDateTimeField38.getAsShortText(102077350290960006L);
        long long46 = preciseDateTimeField38.getUnitMillis();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "dayOfWeek" + "'", str1, "dayOfWeek");
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(readableInterval6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-210866846400000L) + "'", long13 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(readableInterval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 2173795348453L + "'", long27 == 2173795348453L);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "DurationField[hours]" + "'", str28, "DurationField[hours]");
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 28354819L + "'", long33 == 28354819L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 292317 + "'", int40 == 292317);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 292316 + "'", int43 == 292316);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "26159" + "'", str45, "26159");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 97L + "'", long46 == 97L);
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1980");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = durationField5.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval11 = null;
        org.joda.time.ReadableInterval readableInterval12 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval11);
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval11);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfCentury();
        boolean boolean15 = durationFieldType10.isSupported(chronology13);
        org.joda.time.field.ScaledDurationField scaledDurationField17 = new org.joda.time.field.ScaledDurationField(durationField5, durationFieldType10, (int) 'a');
        org.joda.time.DurationField durationField18 = scaledDurationField17.getWrappedField();
        long long21 = scaledDurationField17.add(2440588L, 1439);
        long long24 = scaledDurationField17.getMillis(1439, 1L);
        long long27 = scaledDurationField17.getMillis((-28799995L), (-1811819829L));
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField29 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long32 = durationField29.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long34 = durationField29.getValueAsLong((long) 10);
        int int36 = durationField29.getValue((long) (byte) 10);
        boolean boolean37 = partial28.equals((java.lang.Object) durationField29);
        org.joda.time.Chronology chronology38 = partial28.getChronology();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = partial28.isBefore((org.joda.time.ReadablePartial) partial39);
        java.lang.String str41 = partial28.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType43 = dateTimeFieldType42.getDurationType();
        org.joda.time.Partial partial44 = partial28.without(dateTimeFieldType42);
        org.joda.time.DurationFieldType durationFieldType45 = dateTimeFieldType42.getRangeDurationType();
        org.joda.time.field.ScaledDurationField scaledDurationField47 = new org.joda.time.field.ScaledDurationField((org.joda.time.DurationField) scaledDurationField17, durationFieldType45, 10);
        // The following exception was thrown during execution in test generation
        try {
            int int50 = scaledDurationField17.getDifference((-3061493494715019L), (-80340288961132L));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -2981153205753887");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-210866846400000L) + "'", long9 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(readableInterval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 2580171L + "'", long21 == 2580171L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 139583L + "'", long24 == 139583L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-2793599515L) + "'", long27 == (-2793599515L));
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10L + "'", long34 == 10L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[]" + "'", str41, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(durationFieldType45);
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2941");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        java.lang.String str11 = partial0.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int13 = partial0.indexOf(dateTimeFieldType12);
        org.joda.time.ReadableInterval readableInterval14 = null;
        org.joda.time.ReadableInterval readableInterval15 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval14);
        long long16 = readableInterval15.getStartMillis();
        org.joda.time.ReadableInterval readableInterval17 = null;
        org.joda.time.ReadableInterval readableInterval18 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval17);
        long long19 = readableInterval18.getEndMillis();
        boolean boolean20 = readableInterval15.overlaps(readableInterval18);
        org.joda.time.MutableInterval mutableInterval21 = readableInterval15.toMutableInterval();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        boolean boolean23 = mutableInterval21.equals((java.lang.Object) dateTimeFieldType22);
        boolean boolean24 = partial0.isSupported(dateTimeFieldType22);
        org.joda.time.DurationFieldType durationFieldType25 = dateTimeFieldType22.getRangeDurationType();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone30 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology31 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone30);
        org.joda.time.chrono.ISOChronology iSOChronology32 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField33 = iSOChronology32.minutes();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str35 = dateTimeZone34.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology36 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology32, dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone37 = zonedChronology36.getZone();
        boolean boolean38 = fixedDateTimeZone30.equals((java.lang.Object) zonedChronology36);
        org.joda.time.DurationField durationField39 = zonedChronology36.weeks();
        org.joda.time.DateTimeField dateTimeField40 = zonedChronology36.millisOfSecond();
        org.joda.time.DurationField durationField41 = zonedChronology36.years();
        org.joda.time.DateTimeField dateTimeField42 = zonedChronology36.dayOfMonth();
        org.joda.time.DurationField durationField43 = durationFieldType25.getField((org.joda.time.Chronology) zonedChronology36);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(readableInterval15);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-296907L) + "'", long16 == (-296907L));
        org.junit.Assert.assertNotNull(readableInterval18);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-296907L) + "'", long19 == (-296907L));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(mutableInterval21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(gregorianChronology31);
        org.junit.Assert.assertNotNull(iSOChronology32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "UTC" + "'", str35, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2091");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField11 = new org.joda.time.field.OffsetDateTimeField(dateTimeField8, dateTimeFieldType9, (int) (short) 1);
        long long14 = offsetDateTimeField11.addWrapField((long) 0, (int) (short) 0);
        long long17 = offsetDateTimeField11.add((long) (short) 0, 1439);
        long long19 = offsetDateTimeField11.roundHalfFloor(1701289168550L);
        int int21 = offsetDateTimeField11.get(1701289162973L);
        long long24 = offsetDateTimeField11.getDifferenceAsLong(315590460035L, 1672560000000L);
        java.util.Locale locale26 = null;
        java.lang.String str27 = offsetDateTimeField11.getAsText(94696980268L, locale26);
        int int28 = offsetDateTimeField11.getMinimumValue();
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField30 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long33 = durationField30.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long35 = durationField30.getValueAsLong((long) 10);
        int int37 = durationField30.getValue((long) (byte) 10);
        boolean boolean38 = partial29.equals((java.lang.Object) durationField30);
        org.joda.time.Chronology chronology39 = partial29.getChronology();
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        boolean boolean41 = partial29.isBefore((org.joda.time.ReadablePartial) partial40);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray42 = partial29.getFieldTypes();
        boolean boolean44 = partial29.equals((java.lang.Object) 1702281558665L);
        int[] intArray45 = partial29.getValues();
        org.joda.time.DateTimeField[] dateTimeFieldArray46 = partial29.getFields();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = partial29.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = partial29.getFormatter();
        org.joda.time.Partial partial49 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial29);
        java.util.Locale locale50 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str51 = offsetDateTimeField11.getAsText((org.joda.time.ReadablePartial) partial49, locale50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'millisOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 5180400000L + "'", long17 == 5180400000L);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1701287999993L + "'", long19 == 1701287999993L);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 21 + "'", int21 == 21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-376935L) + "'", long24 == (-376935L));
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1" + "'", str27, "1");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10L + "'", long35 == 10L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray46);
        org.junit.Assert.assertNull(dateTimeFormatter47);
        org.junit.Assert.assertNull(dateTimeFormatter48);
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2752");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval3);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DurationField durationField7 = chronology5.millis();
        org.joda.time.DurationField durationField8 = chronology5.centuries();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval9);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology11.millis();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.ReadableInterval readableInterval16 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval15);
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.ReadableInterval readableInterval21 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval20);
        org.joda.time.ReadableInterval readableInterval22 = null;
        boolean boolean23 = readableInterval21.contains(readableInterval22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = readableInterval21.toPeriod(periodType24);
        int[] intArray27 = chronology17.get((org.joda.time.ReadablePeriod) period25, (-210866846400000L));
        int[] intArray30 = chronology11.get((org.joda.time.ReadablePeriod) period25, 2173795348453L, (long) 1439);
        int[] intArray33 = chronology5.get((org.joda.time.ReadablePeriod) period25, 291L, 2580171L);
        int[] intArray36 = iSOChronology0.get((org.joda.time.ReadablePeriod) period25, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField37 = iSOChronology0.months();
        java.lang.String str38 = iSOChronology0.toString();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = iSOChronology0.equals((java.lang.Object) partial39);
        org.joda.time.DateTimeField dateTimeField41 = iSOChronology0.monthOfYear();
        org.joda.time.DurationField durationField42 = iSOChronology0.minutes();
        org.joda.time.DurationField durationField43 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField44 = iSOChronology0.year();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(readableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(readableInterval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(readableInterval21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(durationField37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[UTC]" + "'", str38, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1729");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        long long24 = remainderDateTimeField22.roundHalfFloor(3600000L);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval26 = null;
        org.joda.time.ReadableInterval readableInterval27 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval26);
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval26);
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfCentury();
        org.joda.time.DurationField durationField30 = chronology28.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField31 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType25, durationField30);
        long long34 = unsupportedDateTimeField31.add((-31L), (long) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = unsupportedDateTimeField31.getType();
        org.joda.time.DurationFieldType durationFieldType36 = dateTimeFieldType35.getRangeDurationType();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField37 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField22, dateTimeFieldType35);
        long long39 = dividedDateTimeField37.roundFloor((-1L));
        long long42 = dividedDateTimeField37.addWrapField(1701289188819L, 1439);
        long long44 = dividedDateTimeField37.roundFloor(28757979647L);
        org.joda.time.DurationField durationField45 = dividedDateTimeField37.getDurationField();
        long long48 = dividedDateTimeField37.add((-476134743462L), 28800004L);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(readableInterval27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 4L + "'", long34 == 4L);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-315619200000L) + "'", long39 == (-315619200000L));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 455805865188819L + "'", long42 == 455805865188819L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 9088402962169256538L + "'", long48 == 9088402962169256538L);
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1436");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = durationField5.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval11 = null;
        org.joda.time.ReadableInterval readableInterval12 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval11);
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval11);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfCentury();
        boolean boolean15 = durationFieldType10.isSupported(chronology13);
        org.joda.time.field.ScaledDurationField scaledDurationField17 = new org.joda.time.field.ScaledDurationField(durationField5, durationFieldType10, (int) 'a');
        org.joda.time.DurationField durationField18 = scaledDurationField17.getWrappedField();
        int int21 = scaledDurationField17.getDifference((long) (byte) -1, (long) (short) 0);
        long long24 = scaledDurationField17.getMillis((int) (short) 100, (long) 4);
        long long27 = scaledDurationField17.getMillis((-62135568421900L), 0L);
        boolean boolean28 = scaledDurationField17.isPrecise();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType30 = dateTimeFieldType29.getDurationType();
        org.joda.time.field.PreciseDurationField preciseDurationField32 = new org.joda.time.field.PreciseDurationField(durationFieldType30, 0L);
        org.joda.time.ReadableInterval readableInterval33 = null;
        org.joda.time.ReadableInterval readableInterval34 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval33);
        org.joda.time.Chronology chronology35 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval33);
        org.joda.time.DateTimeField dateTimeField36 = chronology35.yearOfCentury();
        org.joda.time.DurationField durationField37 = chronology35.minutes();
        org.joda.time.DurationField durationField38 = chronology35.halfdays();
        org.joda.time.DurationField durationField39 = chronology35.weeks();
        org.joda.time.DateTimeField dateTimeField40 = chronology35.millisOfDay();
        org.joda.time.DateTimeField dateTimeField41 = chronology35.dayOfWeek();
        boolean boolean42 = preciseDurationField32.equals((java.lang.Object) chronology35);
        int int43 = scaledDurationField17.compareTo((org.joda.time.DurationField) preciseDurationField32);
        // The following exception was thrown during execution in test generation
        try {
            long long46 = preciseDurationField32.getValueAsLong(35L, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: / by zero");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-210866846400000L) + "'", long9 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(readableInterval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 9700L + "'", long24 == 9700L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-6027150136924300L) + "'", long27 == (-6027150136924300L));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertNotNull(readableInterval34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0970");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.chrono.ISOChronology iSOChronology2 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField3 = iSOChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology2.millisOfDay();
        org.joda.time.ReadableInterval readableInterval5 = null;
        org.joda.time.ReadableInterval readableInterval6 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval5);
        org.joda.time.Chronology chronology7 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval5);
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfCentury();
        org.joda.time.DurationField durationField9 = chronology7.millis();
        org.joda.time.DurationField durationField10 = chronology7.centuries();
        org.joda.time.ReadableInterval readableInterval11 = null;
        org.joda.time.ReadableInterval readableInterval12 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval11);
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval11);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfCentury();
        org.joda.time.DurationField durationField15 = chronology13.millis();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval17 = null;
        org.joda.time.ReadableInterval readableInterval18 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval17);
        org.joda.time.Chronology chronology19 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval17);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval22 = null;
        org.joda.time.ReadableInterval readableInterval23 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval22);
        org.joda.time.ReadableInterval readableInterval24 = null;
        boolean boolean25 = readableInterval23.contains(readableInterval24);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Period period27 = readableInterval23.toPeriod(periodType26);
        int[] intArray29 = chronology19.get((org.joda.time.ReadablePeriod) period27, (-210866846400000L));
        int[] intArray32 = chronology13.get((org.joda.time.ReadablePeriod) period27, 2173795348453L, (long) 1439);
        int[] intArray35 = chronology7.get((org.joda.time.ReadablePeriod) period27, 291L, 2580171L);
        int[] intArray38 = iSOChronology2.get((org.joda.time.ReadablePeriod) period27, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField39 = iSOChronology2.months();
        org.joda.time.DateTimeField dateTimeField40 = iSOChronology2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField41 = iSOChronology2.clockhourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial42 = new org.joda.time.Partial(dateTimeFieldType0, 0, (org.joda.time.Chronology) iSOChronology2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(readableInterval6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(readableInterval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(readableInterval18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(readableInterval23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1399");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        long long16 = dividedDateTimeField11.roundFloor(291L);
        long long18 = dividedDateTimeField11.roundFloor((long) (short) 100);
        org.joda.time.DurationField durationField19 = dividedDateTimeField11.iDurationField;
        int int21 = dividedDateTimeField11.getLeapAmount(432000032L);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField23 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long26 = durationField23.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long28 = durationField23.getValueAsLong((long) 10);
        int int30 = durationField23.getValue((long) (byte) 10);
        boolean boolean31 = partial22.equals((java.lang.Object) durationField23);
        org.joda.time.Chronology chronology32 = partial22.getChronology();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        boolean boolean34 = partial22.isBefore((org.joda.time.ReadablePartial) partial33);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray35 = partial22.getFieldTypes();
        boolean boolean37 = partial22.equals((java.lang.Object) 1702281558665L);
        java.lang.String str38 = partial22.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray39 = partial22.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType41 = dateTimeFieldType40.getRangeDurationType();
        int int42 = partial22.indexOf(dateTimeFieldType40);
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField43 = new org.joda.time.field.ZeroIsMaxDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField11, dateTimeFieldType40);
        long long45 = zeroIsMaxDateTimeField43.roundFloor((-376935L));
        long long48 = zeroIsMaxDateTimeField43.getDifferenceAsLong(0L, (-4453608L));
        // The following exception was thrown during execution in test generation
        try {
            long long51 = zeroIsMaxDateTimeField43.add(28800004L, (-124568580134000L));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -1245685801340000");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10L + "'", long28 == 10L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[]" + "'", str38, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-315619200000L) + "'", long45 == (-315619200000L));
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2105");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval3);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DurationField durationField7 = chronology5.millis();
        org.joda.time.DurationField durationField8 = chronology5.centuries();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval9);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology11.millis();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.ReadableInterval readableInterval16 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval15);
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.ReadableInterval readableInterval21 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval20);
        org.joda.time.ReadableInterval readableInterval22 = null;
        boolean boolean23 = readableInterval21.contains(readableInterval22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = readableInterval21.toPeriod(periodType24);
        int[] intArray27 = chronology17.get((org.joda.time.ReadablePeriod) period25, (-210866846400000L));
        int[] intArray30 = chronology11.get((org.joda.time.ReadablePeriod) period25, 2173795348453L, (long) 1439);
        int[] intArray33 = chronology5.get((org.joda.time.ReadablePeriod) period25, 291L, 2580171L);
        int[] intArray36 = iSOChronology0.get((org.joda.time.ReadablePeriod) period25, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField37 = iSOChronology0.months();
        java.lang.String str38 = iSOChronology0.toString();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = iSOChronology0.equals((java.lang.Object) partial39);
        org.joda.time.Chronology chronology41 = org.joda.time.DateTimeUtils.getChronology((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology0.hourOfHalfday();
        java.lang.String str44 = dateTimeField42.getAsShortText(0L);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(readableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(readableInterval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(readableInterval21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(intArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(durationField37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[hourOfDay]" + "'", str38, "ISOChronology[hourOfDay]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "0" + "'", str44, "0");
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0410");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = partial0.getFormatter();
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField16 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long19 = durationField16.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long21 = durationField16.getValueAsLong((long) 10);
        int int23 = durationField16.getValue((long) (byte) 10);
        boolean boolean24 = partial15.equals((java.lang.Object) durationField16);
        org.joda.time.Chronology chronology25 = partial15.getChronology();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial15.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = partial15.getFieldTypes();
        boolean boolean30 = partial15.equals((java.lang.Object) 1702281558665L);
        java.lang.String str31 = partial15.toString();
        org.joda.time.Chronology chronology32 = partial15.getChronology();
        int int33 = partial0.compareTo((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField35 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long38 = durationField35.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long40 = durationField35.getValueAsLong((long) 10);
        int int42 = durationField35.getValue((long) (byte) 10);
        boolean boolean43 = partial34.equals((java.lang.Object) durationField35);
        org.joda.time.Chronology chronology44 = partial34.getChronology();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        boolean boolean46 = partial34.isBefore((org.joda.time.ReadablePartial) partial45);
        java.lang.String str47 = partial34.toString();
        java.lang.String str48 = partial34.toString();
        boolean boolean49 = partial0.isMatch((org.joda.time.ReadablePartial) partial34);
        int int50 = partial34.size();
        java.lang.String str51 = partial34.toString();
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10L + "'", long21 == 10L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10L + "'", long40 == 10L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[]" + "'", str47, "[]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[]" + "'", str48, "[]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[]" + "'", str51, "[]");
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0842");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = partial0.getFormatter();
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField16 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long19 = durationField16.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long21 = durationField16.getValueAsLong((long) 10);
        int int23 = durationField16.getValue((long) (byte) 10);
        boolean boolean24 = partial15.equals((java.lang.Object) durationField16);
        org.joda.time.Chronology chronology25 = partial15.getChronology();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial15.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = partial15.getFieldTypes();
        boolean boolean30 = partial15.equals((java.lang.Object) 1702281558665L);
        java.lang.String str31 = partial15.toString();
        org.joda.time.Chronology chronology32 = partial15.getChronology();
        int int33 = partial0.compareTo((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField35 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long38 = durationField35.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long40 = durationField35.getValueAsLong((long) 10);
        int int42 = durationField35.getValue((long) (byte) 10);
        boolean boolean43 = partial34.equals((java.lang.Object) durationField35);
        org.joda.time.Chronology chronology44 = partial34.getChronology();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        boolean boolean46 = partial34.isBefore((org.joda.time.ReadablePartial) partial45);
        java.lang.String str47 = partial34.toString();
        java.lang.String str48 = partial34.toString();
        boolean boolean49 = partial0.isMatch((org.joda.time.ReadablePartial) partial34);
        int int50 = partial34.size();
        java.lang.String str51 = partial34.toString();
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10L + "'", long21 == 10L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10L + "'", long40 == 10L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[]" + "'", str47, "[]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[]" + "'", str48, "[]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[]" + "'", str51, "[]");
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2439");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.Partial partial2 = new org.joda.time.Partial(dateTimeFieldType0, 100);
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField4 = iSOChronology3.minutes();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology3.yearOfEra();
        org.joda.time.DurationField durationField7 = iSOChronology3.halfdays();
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval9);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology11.millis();
        org.joda.time.DurationField durationField14 = chronology11.centuries();
        org.joda.time.Chronology chronology15 = chronology11.withUTC();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        long long19 = chronology15.add(readablePeriod16, 0L, (int) (short) 10);
        org.joda.time.DateTimeField dateTimeField20 = chronology15.minuteOfHour();
        boolean boolean21 = durationFieldType8.isSupported(chronology15);
        org.joda.time.field.ScaledDurationField scaledDurationField23 = new org.joda.time.field.ScaledDurationField(durationField7, durationFieldType8, (-28800000));
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField24 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, (org.joda.time.DurationField) scaledDurationField23);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField26 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long29 = durationField26.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long31 = durationField26.getValueAsLong((long) 10);
        int int33 = durationField26.getValue((long) (byte) 10);
        boolean boolean34 = partial25.equals((java.lang.Object) durationField26);
        org.joda.time.Chronology chronology35 = partial25.getChronology();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        boolean boolean37 = partial25.isBefore((org.joda.time.ReadablePartial) partial36);
        org.joda.time.DateTimeField[] dateTimeFieldArray38 = partial36.getFields();
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial40 = partial36.plus(readablePeriod39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Chronology chronology42 = org.joda.time.DateTimeUtils.getChronology(chronology41);
        org.joda.time.Partial partial43 = partial36.withChronologyRetainFields(chronology41);
        java.util.Locale locale44 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str45 = unsupportedDateTimeField24.getAsShortText((org.joda.time.ReadablePartial) partial36, locale44);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(readableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField24);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 10L + "'", long31 == 10L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray38);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(partial43);
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2124");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        java.lang.String str11 = partial0.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = partial0.getFieldTypes();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField14 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long17 = durationField14.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long19 = durationField14.getValueAsLong((long) 10);
        int int21 = durationField14.getValue((long) (byte) 10);
        boolean boolean22 = partial13.equals((java.lang.Object) durationField14);
        org.joda.time.Chronology chronology23 = partial13.getChronology();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial13.isBefore((org.joda.time.ReadablePartial) partial24);
        java.lang.String str26 = partial13.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType28 = dateTimeFieldType27.getDurationType();
        org.joda.time.Partial partial29 = partial13.without(dateTimeFieldType27);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone34 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology35 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone34);
        org.joda.time.ReadableInterval readableInterval36 = null;
        org.joda.time.ReadableInterval readableInterval37 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval36);
        org.joda.time.Chronology chronology38 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval36);
        org.joda.time.DateTimeField dateTimeField39 = chronology38.yearOfCentury();
        org.joda.time.DurationField durationField40 = chronology38.minutes();
        org.joda.time.DurationField durationField41 = chronology38.halfdays();
        org.joda.time.DurationField durationField42 = chronology38.weeks();
        org.joda.time.DateTimeField dateTimeField43 = chronology38.millisOfDay();
        boolean boolean44 = gregorianChronology35.equals((java.lang.Object) chronology38);
        boolean boolean45 = partial13.equals((java.lang.Object) boolean44);
        boolean boolean46 = partial0.isMatch((org.joda.time.ReadablePartial) partial13);
        // The following exception was thrown during execution in test generation
        try {
            int int48 = partial0.getValue((-14));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -14");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(gregorianChronology35);
        org.junit.Assert.assertNotNull(readableInterval37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0566");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        java.lang.String str13 = partial0.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType15 = dateTimeFieldType14.getDurationType();
        org.joda.time.Partial partial16 = partial0.without(dateTimeFieldType14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.IllegalFieldValueException illegalFieldValueException20 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType17, (java.lang.Number) 1701289167159L, "");
        org.joda.time.Partial partial21 = partial0.without(dateTimeFieldType17);
        org.joda.time.ReadableInterval readableInterval22 = null;
        org.joda.time.ReadableInterval readableInterval23 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval22);
        org.joda.time.Chronology chronology24 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval22);
        org.joda.time.DateTimeField dateTimeField25 = chronology24.yearOfCentury();
        org.joda.time.ReadablePartial readablePartial26 = null;
        int int27 = dateTimeField25.getMinimumValue(readablePartial26);
        org.joda.time.ReadablePartial readablePartial28 = null;
        org.joda.time.ReadableInterval readableInterval29 = null;
        org.joda.time.ReadableInterval readableInterval30 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval29);
        org.joda.time.Chronology chronology31 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval29);
        org.joda.time.DateTimeField dateTimeField32 = chronology31.yearOfCentury();
        org.joda.time.DurationField durationField33 = chronology31.millis();
        org.joda.time.DateTimeField dateTimeField34 = chronology31.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField35 = chronology31.clockhourOfDay();
        org.joda.time.ReadablePartial readablePartial36 = null;
        int[] intArray43 = new int[] { '#', (-1), 0, (byte) 1, (short) 1, (byte) 1 };
        int int44 = dateTimeField35.getMaximumValue(readablePartial36, intArray43);
        int int45 = dateTimeField25.getMinimumValue(readablePartial28, intArray43);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField48 = new org.joda.time.field.RemainderDateTimeField(dateTimeField25, dateTimeFieldType46, 10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial50 = partial21.with(dateTimeFieldType46, (int) '4');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for hourOfHalfday must not be larger than 11");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(readableInterval23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(readableInterval30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[35, -1, 0, 1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 24 + "'", int44 == 24);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2019");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        boolean boolean15 = partial0.equals((java.lang.Object) 1702281558665L);
        java.lang.String str16 = partial0.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = partial0.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.Partial partial19 = partial0.plus(readablePeriod18);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField21 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long24 = durationField21.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long26 = durationField21.getValueAsLong((long) 10);
        int int28 = durationField21.getValue((long) (byte) 10);
        boolean boolean29 = partial20.equals((java.lang.Object) durationField21);
        org.joda.time.Chronology chronology30 = partial20.getChronology();
        java.lang.String str31 = partial20.toString();
        boolean boolean32 = partial19.isAfter((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Partial partial33 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField35 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long38 = durationField35.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long40 = durationField35.getValueAsLong((long) 10);
        int int42 = durationField35.getValue((long) (byte) 10);
        boolean boolean43 = partial34.equals((java.lang.Object) durationField35);
        org.joda.time.Chronology chronology44 = partial34.getChronology();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        boolean boolean46 = partial34.isBefore((org.joda.time.ReadablePartial) partial45);
        org.joda.time.DateTimeField[] dateTimeFieldArray47 = partial45.getFields();
        org.joda.time.Chronology chronology48 = partial45.getChronology();
        boolean boolean49 = partial20.isEqual((org.joda.time.ReadablePartial) partial45);
        // The following exception was thrown during execution in test generation
        try {
            int int51 = partial45.getValue(38);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 38");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[]" + "'", str16, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10L + "'", long26 == 10L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10L + "'", long40 == 10L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1568");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfWeek();
        java.lang.String str1 = dateTimeFieldType0.getName();
        org.joda.time.IllegalFieldValueException illegalFieldValueException3 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType0, "-08:00");
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval5 = null;
        org.joda.time.ReadableInterval readableInterval6 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval5);
        org.joda.time.Chronology chronology7 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval5);
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfCentury();
        org.joda.time.DurationField durationField9 = chronology7.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField10 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType4, durationField9);
        long long13 = durationField9.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.ReadableInterval readableInterval16 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval15);
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        boolean boolean19 = durationFieldType14.isSupported(chronology17);
        org.joda.time.field.ScaledDurationField scaledDurationField21 = new org.joda.time.field.ScaledDurationField(durationField9, durationFieldType14, (int) 'a');
        int int23 = scaledDurationField21.getValue((long) (short) -1);
        boolean boolean24 = scaledDurationField21.isSupported();
        long long27 = scaledDurationField21.getDifferenceAsLong(28800001L, (-210858120000000L));
        java.lang.String str28 = scaledDurationField21.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType30 = dateTimeFieldType29.getDurationType();
        org.joda.time.field.PreciseDurationField preciseDurationField32 = new org.joda.time.field.PreciseDurationField(durationFieldType30, 28354819L);
        long long33 = preciseDurationField32.getUnitMillis();
        boolean boolean34 = preciseDurationField32.isPrecise();
        long long37 = preciseDurationField32.getValueAsLong((long) 719, 306607L);
        org.joda.time.field.PreciseDateTimeField preciseDateTimeField38 = new org.joda.time.field.PreciseDateTimeField(dateTimeFieldType0, (org.joda.time.DurationField) scaledDurationField21, (org.joda.time.DurationField) preciseDurationField32);
        org.joda.time.DurationField durationField39 = preciseDateTimeField38.getDurationField();
        org.joda.time.DurationField durationField40 = preciseDateTimeField38.getRangeDurationField();
        int int41 = preciseDateTimeField38.getMinimumValue();
        org.joda.time.DurationField durationField42 = preciseDateTimeField38.getRangeDurationField();
        int int43 = preciseDateTimeField38.getMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "dayOfWeek" + "'", str1, "dayOfWeek");
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(readableInterval6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-210866846400000L) + "'", long13 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(readableInterval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 2173795348453L + "'", long27 == 2173795348453L);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "DurationField[hours]" + "'", str28, "DurationField[hours]");
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 28354819L + "'", long33 == 28354819L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 292316 + "'", int43 == 292316);
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2148");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval3);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DurationField durationField7 = chronology5.millis();
        org.joda.time.DurationField durationField8 = chronology5.centuries();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval9);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology11.millis();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.ReadableInterval readableInterval16 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval15);
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.ReadableInterval readableInterval21 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval20);
        org.joda.time.ReadableInterval readableInterval22 = null;
        boolean boolean23 = readableInterval21.contains(readableInterval22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = readableInterval21.toPeriod(periodType24);
        int[] intArray27 = chronology17.get((org.joda.time.ReadablePeriod) period25, (-210866846400000L));
        int[] intArray30 = chronology11.get((org.joda.time.ReadablePeriod) period25, 2173795348453L, (long) 1439);
        int[] intArray33 = chronology5.get((org.joda.time.ReadablePeriod) period25, 291L, 2580171L);
        int[] intArray36 = iSOChronology0.get((org.joda.time.ReadablePeriod) period25, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField37 = iSOChronology0.weekyears();
        org.joda.time.Chronology chronology38 = iSOChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField39 = iSOChronology0.hourOfDay();
        org.joda.time.DurationField durationField40 = iSOChronology0.centuries();
        org.joda.time.Partial partial41 = new org.joda.time.Partial((org.joda.time.Chronology) iSOChronology0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType43 = partial41.getFieldType(74);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 74");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(readableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(readableInterval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(readableInterval21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(intArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1580");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval3);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DurationField durationField7 = chronology5.millis();
        org.joda.time.DurationField durationField8 = chronology5.centuries();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval9);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology11.millis();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.ReadableInterval readableInterval16 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval15);
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.ReadableInterval readableInterval21 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval20);
        org.joda.time.ReadableInterval readableInterval22 = null;
        boolean boolean23 = readableInterval21.contains(readableInterval22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = readableInterval21.toPeriod(periodType24);
        int[] intArray27 = chronology17.get((org.joda.time.ReadablePeriod) period25, (-210866846400000L));
        int[] intArray30 = chronology11.get((org.joda.time.ReadablePeriod) period25, 2173795348453L, (long) 1439);
        int[] intArray33 = chronology5.get((org.joda.time.ReadablePeriod) period25, 291L, 2580171L);
        int[] intArray36 = iSOChronology0.get((org.joda.time.ReadablePeriod) period25, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField37 = iSOChronology0.months();
        java.lang.String str38 = iSOChronology0.toString();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = iSOChronology0.equals((java.lang.Object) partial39);
        java.lang.String str41 = iSOChronology0.toString();
        org.joda.time.DurationField durationField42 = iSOChronology0.weekyears();
        int int45 = durationField42.getValue((long) 53460005, (long) 3600000);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(readableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(readableInterval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(readableInterval21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(intArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(durationField37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[100]" + "'", str38, "ISOChronology[100]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ISOChronology[100]" + "'", str41, "ISOChronology[100]");
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1051");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        org.joda.time.ReadablePartial readablePartial23 = null;
        java.util.Locale locale25 = null;
        java.lang.String str26 = dividedDateTimeField11.getAsShortText(readablePartial23, (int) ' ', locale25);
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField28 = new org.joda.time.field.OffsetDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField11, 100);
        org.joda.time.DurationField durationField29 = offsetDateTimeField28.getLeapDurationField();
        boolean boolean30 = offsetDateTimeField28.isSupported();
        boolean boolean32 = offsetDateTimeField28.isLeap((long) 10);
        long long35 = offsetDateTimeField28.add(1701289168550L, (long) '4');
        int int38 = offsetDateTimeField28.getDifference((-17538766619L), 0L);
        java.util.Locale locale40 = null;
        java.lang.String str41 = offsetDateTimeField28.getAsShortText(73, locale40);
        java.util.Locale locale43 = null;
        java.lang.String str44 = offsetDateTimeField28.getAsText((int) (short) 1, locale43);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField47 = new org.joda.time.field.RemainderDateTimeField((org.joda.time.DateTimeField) offsetDateTimeField28, dateTimeFieldType45, 28354759);
        long long49 = offsetDateTimeField28.roundCeiling((-476134770032L));
        // The following exception was thrown during execution in test generation
        try {
            long long52 = offsetDateTimeField28.set((long) 278753760, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for centuryOfEra must be in the range [100,29227999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "32" + "'", str26, "32");
        org.junit.Assert.assertNull(durationField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 18110895568550L + "'", long35 == 18110895568550L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "73" + "'", str41, "73");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1" + "'", str44, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-315619200000L) + "'", long49 == (-315619200000L));
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0055");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        org.joda.time.DurationField durationField7 = unsupportedDateTimeField6.getDurationField();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField9 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long12 = durationField9.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long14 = durationField9.getValueAsLong((long) 10);
        int int16 = durationField9.getValue((long) (byte) 10);
        boolean boolean17 = partial8.equals((java.lang.Object) durationField9);
        org.joda.time.Chronology chronology18 = partial8.getChronology();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        boolean boolean20 = partial8.isBefore((org.joda.time.ReadablePartial) partial19);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray21 = partial8.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval23 = null;
        org.joda.time.ReadableInterval readableInterval24 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval23);
        org.joda.time.Chronology chronology25 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval23);
        org.joda.time.DateTimeField dateTimeField26 = chronology25.yearOfCentury();
        org.joda.time.ReadablePartial readablePartial27 = null;
        int int28 = dateTimeField26.getMinimumValue(readablePartial27);
        org.joda.time.ReadablePartial readablePartial29 = null;
        org.joda.time.ReadableInterval readableInterval30 = null;
        org.joda.time.ReadableInterval readableInterval31 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval30);
        org.joda.time.Chronology chronology32 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval30);
        org.joda.time.DateTimeField dateTimeField33 = chronology32.yearOfCentury();
        org.joda.time.DurationField durationField34 = chronology32.millis();
        org.joda.time.DateTimeField dateTimeField35 = chronology32.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField36 = chronology32.clockhourOfDay();
        org.joda.time.ReadablePartial readablePartial37 = null;
        int[] intArray44 = new int[] { '#', (-1), 0, (byte) 1, (short) 1, (byte) 1 };
        int int45 = dateTimeField36.getMaximumValue(readablePartial37, intArray44);
        int int46 = dateTimeField26.getMinimumValue(readablePartial29, intArray44);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray48 = unsupportedDateTimeField6.set((org.joda.time.ReadablePartial) partial8, (int) 'a', intArray44, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray21);
        org.junit.Assert.assertNotNull(readableInterval24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(readableInterval31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[35, -1, 0, 1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 24 + "'", int45 == 24);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0040");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        org.joda.time.ReadablePartial readablePartial23 = null;
        java.util.Locale locale25 = null;
        java.lang.String str26 = dividedDateTimeField11.getAsShortText(readablePartial23, (int) ' ', locale25);
        org.joda.time.ReadablePartial readablePartial27 = null;
        java.util.Locale locale29 = null;
        java.lang.String str30 = dividedDateTimeField11.getAsText(readablePartial27, (int) (byte) 10, locale29);
        long long32 = dividedDateTimeField11.roundHalfFloor((long) 100);
        long long35 = dividedDateTimeField11.getDifferenceAsLong((-30610224000000L), (long) 24);
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField37 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long40 = durationField37.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long42 = durationField37.getValueAsLong((long) 10);
        int int44 = durationField37.getValue((long) (byte) 10);
        boolean boolean45 = partial36.equals((java.lang.Object) durationField37);
        org.joda.time.Chronology chronology46 = partial36.getChronology();
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        boolean boolean48 = partial36.isBefore((org.joda.time.ReadablePartial) partial47);
        java.util.Locale locale49 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str50 = dividedDateTimeField11.getAsShortText((org.joda.time.ReadablePartial) partial36, locale49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'centuryOfEra' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "32" + "'", str26, "32");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "10" + "'", str30, "10");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-97L) + "'", long35 == (-97L));
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 10L + "'", long42 == 10L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0993");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add((-31L), (long) '#');
        org.joda.time.DurationField durationField10 = unsupportedDateTimeField6.getLeapDurationField();
        org.joda.time.DurationField durationField11 = unsupportedDateTimeField6.getRangeDurationField();
        org.joda.time.DurationField durationField12 = unsupportedDateTimeField6.getRangeDurationField();
        long long15 = unsupportedDateTimeField6.add((long) 1439, 1701289178158L);
        long long18 = unsupportedDateTimeField6.add(17460000000L, (-62196854399996L));
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField20 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long23 = durationField20.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long25 = durationField20.getValueAsLong((long) 10);
        int int27 = durationField20.getValue((long) (byte) 10);
        boolean boolean28 = partial19.equals((java.lang.Object) durationField20);
        org.joda.time.Chronology chronology29 = partial19.getChronology();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        boolean boolean31 = partial19.isBefore((org.joda.time.ReadablePartial) partial30);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray32 = partial19.getFieldTypes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = partial19.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray34 = partial19.getFieldTypes();
        int[] intArray35 = partial19.getValues();
        org.joda.time.chrono.ISOChronology iSOChronology36 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField37 = iSOChronology36.minutes();
        org.joda.time.DurationField durationField38 = iSOChronology36.months();
        org.joda.time.DurationField durationField39 = iSOChronology36.years();
        org.joda.time.DateTimeField dateTimeField40 = iSOChronology36.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField41 = iSOChronology36.halfdayOfDay();
        boolean boolean42 = partial19.equals((java.lang.Object) iSOChronology36);
        java.util.Locale locale44 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str45 = unsupportedDateTimeField6.getAsText((org.joda.time.ReadablePartial) partial19, (int) (byte) 0, locale44);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertNull(durationField11);
        org.junit.Assert.assertNull(durationField12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1701289179597L + "'", long15 == 1701289179597L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-62179394399996L) + "'", long18 == (-62179394399996L));
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10L + "'", long25 == 10L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray32);
        org.junit.Assert.assertNull(dateTimeFormatter33);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[]");
        org.junit.Assert.assertNotNull(iSOChronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0995");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval3);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DurationField durationField7 = chronology5.millis();
        org.joda.time.DurationField durationField8 = chronology5.centuries();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval9);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology11.millis();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.ReadableInterval readableInterval16 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval15);
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.ReadableInterval readableInterval21 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval20);
        org.joda.time.ReadableInterval readableInterval22 = null;
        boolean boolean23 = readableInterval21.contains(readableInterval22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = readableInterval21.toPeriod(periodType24);
        int[] intArray27 = chronology17.get((org.joda.time.ReadablePeriod) period25, (-210866846400000L));
        int[] intArray30 = chronology11.get((org.joda.time.ReadablePeriod) period25, 2173795348453L, (long) 1439);
        int[] intArray33 = chronology5.get((org.joda.time.ReadablePeriod) period25, 291L, 2580171L);
        int[] intArray36 = iSOChronology0.get((org.joda.time.ReadablePeriod) period25, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField37 = iSOChronology0.months();
        java.lang.String str38 = iSOChronology0.toString();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = iSOChronology0.equals((java.lang.Object) partial39);
        java.lang.String str41 = iSOChronology0.toString();
        org.joda.time.Chronology chronology42 = iSOChronology0.withUTC();
        org.joda.time.DurationField durationField43 = iSOChronology0.weekyears();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(readableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(readableInterval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(readableInterval21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(durationField37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[hourOfDay]" + "'", str38, "ISOChronology[hourOfDay]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ISOChronology[hourOfDay]" + "'", str41, "ISOChronology[hourOfDay]");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField43);
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1703");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval3);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DurationField durationField7 = chronology5.millis();
        org.joda.time.DurationField durationField8 = chronology5.centuries();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval9);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology11.millis();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.ReadableInterval readableInterval16 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval15);
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.ReadableInterval readableInterval21 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval20);
        org.joda.time.ReadableInterval readableInterval22 = null;
        boolean boolean23 = readableInterval21.contains(readableInterval22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = readableInterval21.toPeriod(periodType24);
        int[] intArray27 = chronology17.get((org.joda.time.ReadablePeriod) period25, (-210866846400000L));
        int[] intArray30 = chronology11.get((org.joda.time.ReadablePeriod) period25, 2173795348453L, (long) 1439);
        int[] intArray33 = chronology5.get((org.joda.time.ReadablePeriod) period25, 291L, 2580171L);
        int[] intArray36 = iSOChronology0.get((org.joda.time.ReadablePeriod) period25, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField37 = iSOChronology0.months();
        java.lang.String str38 = iSOChronology0.toString();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = iSOChronology0.equals((java.lang.Object) partial39);
        java.lang.String str41 = iSOChronology0.toString();
        org.joda.time.Chronology chronology42 = iSOChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField43 = iSOChronology0.hourOfHalfday();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(readableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(readableInterval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(readableInterval21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(intArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(durationField37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[100]" + "'", str38, "ISOChronology[100]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ISOChronology[100]" + "'", str41, "ISOChronology[100]");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0702");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval3);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DurationField durationField7 = chronology5.millis();
        org.joda.time.DurationField durationField8 = chronology5.centuries();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval9);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology11.millis();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.ReadableInterval readableInterval16 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval15);
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.ReadableInterval readableInterval21 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval20);
        org.joda.time.ReadableInterval readableInterval22 = null;
        boolean boolean23 = readableInterval21.contains(readableInterval22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = readableInterval21.toPeriod(periodType24);
        int[] intArray27 = chronology17.get((org.joda.time.ReadablePeriod) period25, (-210866846400000L));
        int[] intArray30 = chronology11.get((org.joda.time.ReadablePeriod) period25, 2173795348453L, (long) 1439);
        int[] intArray33 = chronology5.get((org.joda.time.ReadablePeriod) period25, 291L, 2580171L);
        int[] intArray36 = iSOChronology0.get((org.joda.time.ReadablePeriod) period25, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField37 = iSOChronology0.months();
        java.lang.String str38 = iSOChronology0.toString();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = iSOChronology0.equals((java.lang.Object) partial39);
        java.lang.String str41 = iSOChronology0.toString();
        org.joda.time.Chronology chronology42 = iSOChronology0.withUTC();
        java.lang.String str43 = iSOChronology0.toString();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(readableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(readableInterval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(readableInterval21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[UTC]" + "'", str38, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ISOChronology[UTC]" + "'", str41, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ISOChronology[UTC]" + "'", str43, "ISOChronology[UTC]");
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0852");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        long long24 = remainderDateTimeField22.roundHalfFloor(3600000L);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval26 = null;
        org.joda.time.ReadableInterval readableInterval27 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval26);
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval26);
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfCentury();
        org.joda.time.DurationField durationField30 = chronology28.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField31 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType25, durationField30);
        long long34 = unsupportedDateTimeField31.add((-31L), (long) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = unsupportedDateTimeField31.getType();
        org.joda.time.DurationFieldType durationFieldType36 = dateTimeFieldType35.getRangeDurationType();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField37 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField22, dateTimeFieldType35);
        org.joda.time.DurationField durationField38 = remainderDateTimeField22.iDurationField;
        long long40 = remainderDateTimeField22.roundFloor(1701289161428L);
        int int42 = remainderDateTimeField22.get(2102400001L);
        long long44 = remainderDateTimeField22.roundCeiling(2750411623L);
        org.joda.time.DurationField durationField45 = remainderDateTimeField22.getRangeDurationField();
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(readableInterval27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 4L + "'", long34 == 4L);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1672531200000L + "'", long40 == 1672531200000L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 31536000000L + "'", long44 == 31536000000L);
        org.junit.Assert.assertNotNull(durationField45);
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0607");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval3);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DurationField durationField7 = chronology5.millis();
        org.joda.time.DurationField durationField8 = chronology5.centuries();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval9);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology11.millis();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.ReadableInterval readableInterval16 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval15);
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.ReadableInterval readableInterval21 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval20);
        org.joda.time.ReadableInterval readableInterval22 = null;
        boolean boolean23 = readableInterval21.contains(readableInterval22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = readableInterval21.toPeriod(periodType24);
        int[] intArray27 = chronology17.get((org.joda.time.ReadablePeriod) period25, (-210866846400000L));
        int[] intArray30 = chronology11.get((org.joda.time.ReadablePeriod) period25, 2173795348453L, (long) 1439);
        int[] intArray33 = chronology5.get((org.joda.time.ReadablePeriod) period25, 291L, 2580171L);
        int[] intArray36 = iSOChronology0.get((org.joda.time.ReadablePeriod) period25, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField37 = iSOChronology0.months();
        java.lang.String str38 = iSOChronology0.toString();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = iSOChronology0.equals((java.lang.Object) partial39);
        org.joda.time.Chronology chronology41 = org.joda.time.DateTimeUtils.getChronology((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.DateTimeField dateTimeField42 = chronology41.yearOfCentury();
        org.joda.time.DurationField durationField43 = dateTimeField42.getRangeDurationField();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(readableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(readableInterval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(readableInterval21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[UTC]" + "'", str38, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2300");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        long long24 = remainderDateTimeField22.roundHalfFloor(3600000L);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval26 = null;
        org.joda.time.ReadableInterval readableInterval27 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval26);
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval26);
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfCentury();
        org.joda.time.DurationField durationField30 = chronology28.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField31 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType25, durationField30);
        long long34 = unsupportedDateTimeField31.add((-31L), (long) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = unsupportedDateTimeField31.getType();
        org.joda.time.DurationFieldType durationFieldType36 = dateTimeFieldType35.getRangeDurationType();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField37 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField22, dateTimeFieldType35);
        org.joda.time.DurationField durationField38 = remainderDateTimeField22.iDurationField;
        long long40 = remainderDateTimeField22.roundFloor(1701289161428L);
        long long42 = remainderDateTimeField22.roundHalfCeiling((long) (byte) 0);
        org.joda.time.DurationField durationField43 = remainderDateTimeField22.getDurationField();
        int int44 = remainderDateTimeField22.getMinimumValue();
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(readableInterval27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 4L + "'", long34 == 4L);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1672531200000L + "'", long40 == 1672531200000L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1200");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval3);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DurationField durationField7 = chronology5.millis();
        org.joda.time.DurationField durationField8 = chronology5.centuries();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval9);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology11.millis();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.ReadableInterval readableInterval16 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval15);
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.ReadableInterval readableInterval21 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval20);
        org.joda.time.ReadableInterval readableInterval22 = null;
        boolean boolean23 = readableInterval21.contains(readableInterval22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = readableInterval21.toPeriod(periodType24);
        int[] intArray27 = chronology17.get((org.joda.time.ReadablePeriod) period25, (-210866846400000L));
        int[] intArray30 = chronology11.get((org.joda.time.ReadablePeriod) period25, 2173795348453L, (long) 1439);
        int[] intArray33 = chronology5.get((org.joda.time.ReadablePeriod) period25, 291L, 2580171L);
        int[] intArray36 = iSOChronology0.get((org.joda.time.ReadablePeriod) period25, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField37 = iSOChronology0.months();
        java.lang.String str38 = iSOChronology0.toString();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = iSOChronology0.equals((java.lang.Object) partial39);
        org.joda.time.DateTimeField dateTimeField41 = iSOChronology0.monthOfYear();
        org.joda.time.DurationField durationField42 = iSOChronology0.days();
        long long45 = durationField42.subtract((long) 196, (-305809805L));
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(readableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(readableInterval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(readableInterval21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[100]" + "'", str38, "ISOChronology[100]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 26421967152000196L + "'", long45 == 26421967152000196L);
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1543");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval3);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DurationField durationField7 = chronology5.millis();
        org.joda.time.DurationField durationField8 = chronology5.centuries();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval9);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology11.millis();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.ReadableInterval readableInterval16 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval15);
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.ReadableInterval readableInterval21 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval20);
        org.joda.time.ReadableInterval readableInterval22 = null;
        boolean boolean23 = readableInterval21.contains(readableInterval22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = readableInterval21.toPeriod(periodType24);
        int[] intArray27 = chronology17.get((org.joda.time.ReadablePeriod) period25, (-210866846400000L));
        int[] intArray30 = chronology11.get((org.joda.time.ReadablePeriod) period25, 2173795348453L, (long) 1439);
        int[] intArray33 = chronology5.get((org.joda.time.ReadablePeriod) period25, 291L, 2580171L);
        int[] intArray36 = iSOChronology0.get((org.joda.time.ReadablePeriod) period25, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField37 = iSOChronology0.months();
        java.lang.String str38 = iSOChronology0.toString();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = iSOChronology0.equals((java.lang.Object) partial39);
        org.joda.time.DateTimeField dateTimeField41 = iSOChronology0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField43 = iSOChronology0.yearOfCentury();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(readableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(readableInterval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(readableInterval21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(intArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(durationField37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[hourOfDay]" + "'", str38, "ISOChronology[hourOfDay]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0217");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add((-31L), (long) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = unsupportedDateTimeField6.getType();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField12 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long15 = durationField12.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long17 = durationField12.getValueAsLong((long) 10);
        int int19 = durationField12.getValue((long) (byte) 10);
        boolean boolean20 = partial11.equals((java.lang.Object) durationField12);
        org.joda.time.Chronology chronology21 = partial11.getChronology();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial11.isBefore((org.joda.time.ReadablePartial) partial22);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = partial11.getFieldTypes();
        boolean boolean26 = partial11.equals((java.lang.Object) 1702281558665L);
        java.lang.String str27 = partial11.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = partial11.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Partial partial30 = partial11.plus(readablePeriod29);
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField32 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long35 = durationField32.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long37 = durationField32.getValueAsLong((long) 10);
        int int39 = durationField32.getValue((long) (byte) 10);
        boolean boolean40 = partial31.equals((java.lang.Object) durationField32);
        org.joda.time.Chronology chronology41 = partial31.getChronology();
        java.lang.String str42 = partial31.toString();
        boolean boolean43 = partial30.isAfter((org.joda.time.ReadablePartial) partial31);
        int[] intArray47 = new int[] { 2, (-593102) };
        java.util.Locale locale49 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray50 = unsupportedDateTimeField6.set((org.joda.time.ReadablePartial) partial30, (int) ' ', intArray47, "UTC", locale49);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[]" + "'", str27, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 10L + "'", long37 == 10L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[]" + "'", str42, "[]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[2, -593102]");
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0205");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        org.joda.time.DurationField durationField7 = unsupportedDateTimeField6.getDurationField();
        long long10 = unsupportedDateTimeField6.add((-53459996L), (int) (short) 0);
        boolean boolean11 = unsupportedDateTimeField6.isLenient();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField13 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long16 = durationField13.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long18 = durationField13.getValueAsLong((long) 10);
        int int20 = durationField13.getValue((long) (byte) 10);
        boolean boolean21 = partial12.equals((java.lang.Object) durationField13);
        org.joda.time.Chronology chronology22 = partial12.getChronology();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        boolean boolean24 = partial12.isBefore((org.joda.time.ReadablePartial) partial23);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = partial12.getFieldTypes();
        boolean boolean27 = partial12.equals((java.lang.Object) 1702281558665L);
        java.lang.String str28 = partial12.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = partial12.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial12.plus(readablePeriod30);
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField33 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long36 = durationField33.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long38 = durationField33.getValueAsLong((long) 10);
        int int40 = durationField33.getValue((long) (byte) 10);
        boolean boolean41 = partial32.equals((java.lang.Object) durationField33);
        org.joda.time.Chronology chronology42 = partial32.getChronology();
        java.lang.String str43 = partial32.toString();
        boolean boolean44 = partial31.isAfter((org.joda.time.ReadablePartial) partial32);
        java.util.Locale locale46 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str47 = unsupportedDateTimeField6.getAsShortText((org.joda.time.ReadablePartial) partial31, 32, locale46);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-53459996L) + "'", long10 == (-53459996L));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10L + "'", long18 == 10L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[]" + "'", str28, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 10L + "'", long38 == 10L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[]" + "'", str43, "[]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0651");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        long long24 = remainderDateTimeField22.roundHalfFloor(3600000L);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval26 = null;
        org.joda.time.ReadableInterval readableInterval27 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval26);
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval26);
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfCentury();
        org.joda.time.DurationField durationField30 = chronology28.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField31 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType25, durationField30);
        long long34 = unsupportedDateTimeField31.add((-31L), (long) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = unsupportedDateTimeField31.getType();
        org.joda.time.DurationFieldType durationFieldType36 = dateTimeFieldType35.getRangeDurationType();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField37 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField22, dateTimeFieldType35);
        org.joda.time.DurationField durationField38 = remainderDateTimeField22.iDurationField;
        org.joda.time.DurationField durationField39 = remainderDateTimeField22.iDurationField;
        int int40 = remainderDateTimeField22.iDivisor;
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField42 = new org.joda.time.field.OffsetDateTimeField((org.joda.time.DateTimeField) remainderDateTimeField22, (int) (short) 1);
        org.joda.time.DurationField durationField43 = offsetDateTimeField42.getRangeDurationField();
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(readableInterval27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 4L + "'", long34 == 4L);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertNotNull(durationField43);
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2499");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add((-31L), (long) '#');
        org.joda.time.DurationField durationField10 = unsupportedDateTimeField6.getLeapDurationField();
        int int13 = unsupportedDateTimeField6.getDifference((long) (byte) 10, 10L);
        long long16 = unsupportedDateTimeField6.add((long) 1439, (int) (byte) -1);
        org.joda.time.DurationField durationField17 = unsupportedDateTimeField6.getLeapDurationField();
        org.joda.time.DurationField durationField18 = unsupportedDateTimeField6.getDurationField();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField20 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long23 = durationField20.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long25 = durationField20.getValueAsLong((long) 10);
        int int27 = durationField20.getValue((long) (byte) 10);
        boolean boolean28 = partial19.equals((java.lang.Object) durationField20);
        org.joda.time.Chronology chronology29 = partial19.getChronology();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        boolean boolean31 = partial19.isBefore((org.joda.time.ReadablePartial) partial30);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray32 = partial19.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval33 = null;
        org.joda.time.ReadableInterval readableInterval34 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval33);
        long long35 = readableInterval34.getStartMillis();
        org.joda.time.ReadableInterval readableInterval36 = null;
        org.joda.time.ReadableInterval readableInterval37 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval36);
        org.joda.time.ReadableInterval readableInterval38 = null;
        boolean boolean39 = readableInterval37.contains(readableInterval38);
        org.joda.time.Duration duration40 = readableInterval37.toDuration();
        org.joda.time.DateTime dateTime41 = readableInterval37.getEnd();
        boolean boolean42 = readableInterval34.contains((org.joda.time.ReadableInstant) dateTime41);
        boolean boolean43 = partial19.isMatch((org.joda.time.ReadableInstant) dateTime41);
        int[] intArray45 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray47 = unsupportedDateTimeField6.addWrapField((org.joda.time.ReadablePartial) partial19, 0, intArray45, (-1669753266));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1438L + "'", long16 == 1438L);
        org.junit.Assert.assertNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10L + "'", long25 == 10L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray32);
        org.junit.Assert.assertNotNull(readableInterval34);
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + 16707983010251L + "'", long35 == 16707983010251L);
        org.junit.Assert.assertNotNull(readableInterval37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2271");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfWeek();
        java.lang.String str1 = dateTimeFieldType0.getName();
        org.joda.time.IllegalFieldValueException illegalFieldValueException3 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType0, "-08:00");
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval5 = null;
        org.joda.time.ReadableInterval readableInterval6 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval5);
        org.joda.time.Chronology chronology7 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval5);
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfCentury();
        org.joda.time.DurationField durationField9 = chronology7.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField10 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType4, durationField9);
        long long13 = durationField9.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.ReadableInterval readableInterval16 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval15);
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        boolean boolean19 = durationFieldType14.isSupported(chronology17);
        org.joda.time.field.ScaledDurationField scaledDurationField21 = new org.joda.time.field.ScaledDurationField(durationField9, durationFieldType14, (int) 'a');
        int int23 = scaledDurationField21.getValue((long) (short) -1);
        boolean boolean24 = scaledDurationField21.isSupported();
        long long27 = scaledDurationField21.getDifferenceAsLong(28800001L, (-210858120000000L));
        java.lang.String str28 = scaledDurationField21.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType30 = dateTimeFieldType29.getDurationType();
        org.joda.time.field.PreciseDurationField preciseDurationField32 = new org.joda.time.field.PreciseDurationField(durationFieldType30, 28354819L);
        long long33 = preciseDurationField32.getUnitMillis();
        boolean boolean34 = preciseDurationField32.isPrecise();
        long long37 = preciseDurationField32.getValueAsLong((long) 719, 306607L);
        org.joda.time.field.PreciseDateTimeField preciseDateTimeField38 = new org.joda.time.field.PreciseDateTimeField(dateTimeFieldType0, (org.joda.time.DurationField) scaledDurationField21, (org.joda.time.DurationField) preciseDurationField32);
        org.joda.time.DurationField durationField39 = preciseDateTimeField38.getDurationField();
        org.joda.time.DurationField durationField40 = preciseDateTimeField38.getRangeDurationField();
        long long42 = preciseDateTimeField38.roundFloor((-4438453708800000L));
        long long45 = preciseDateTimeField38.set(157766401455L, 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "dayOfWeek" + "'", str1, "dayOfWeek");
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(readableInterval6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-210866846400000L) + "'", long13 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(readableInterval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 2173795348453L + "'", long27 == 2173795348453L);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "DurationField[hours]" + "'", str28, "DurationField[hours]");
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 28354819L + "'", long33 == 28354819L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-4438453708800009L) + "'", long42 == (-4438453708800009L));
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 157765823529L + "'", long45 == 157765823529L);
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0671");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.ReadableInterval readableInterval11 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval10);
        org.joda.time.ReadableInterval readableInterval12 = null;
        boolean boolean13 = readableInterval11.contains(readableInterval12);
        org.joda.time.ReadableInterval readableInterval14 = null;
        boolean boolean15 = readableInterval11.isBefore(readableInterval14);
        org.joda.time.Interval interval16 = readableInterval11.toInterval();
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.PeriodType periodType18 = org.joda.time.DateTimeUtils.getPeriodType(periodType17);
        org.joda.time.PeriodType periodType19 = org.joda.time.DateTimeUtils.getPeriodType(periodType17);
        org.joda.time.Period period20 = readableInterval11.toPeriod(periodType19);
        org.joda.time.Partial partial21 = partial0.plus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField23 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long26 = durationField23.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long28 = durationField23.getValueAsLong((long) 10);
        int int30 = durationField23.getValue((long) (byte) 10);
        boolean boolean31 = partial22.equals((java.lang.Object) durationField23);
        org.joda.time.chrono.ISOChronology iSOChronology32 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField33 = iSOChronology32.minutes();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology32.millisOfDay();
        org.joda.time.DateTimeField dateTimeField35 = iSOChronology32.halfdayOfDay();
        org.joda.time.ReadableInterval readableInterval36 = null;
        org.joda.time.ReadableInterval readableInterval37 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval36);
        org.joda.time.ReadableInterval readableInterval38 = null;
        boolean boolean39 = readableInterval37.contains(readableInterval38);
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.Period period41 = readableInterval37.toPeriod(periodType40);
        int[] intArray44 = iSOChronology32.get((org.joda.time.ReadablePeriod) period41, 4L, (long) '#');
        org.joda.time.Partial partial45 = partial22.plus((org.joda.time.ReadablePeriod) period41);
        org.joda.time.Partial partial46 = partial21.minus((org.joda.time.ReadablePeriod) period41);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType48 = partial46.getFieldType(29227899);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 29227899");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(readableInterval11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10L + "'", long28 == 10L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(iSOChronology32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(readableInterval37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, 0, 0, 0, 0, 0, 0, 31]");
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertNotNull(partial46);
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1013");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add((-31L), (long) '#');
        org.joda.time.DurationField durationField10 = unsupportedDateTimeField6.getLeapDurationField();
        int int13 = unsupportedDateTimeField6.getDifference((long) (byte) 10, 10L);
        long long16 = unsupportedDateTimeField6.add((long) 1439, (int) (byte) -1);
        java.lang.String str17 = unsupportedDateTimeField6.toString();
        boolean boolean18 = unsupportedDateTimeField6.isSupported();
        long long21 = unsupportedDateTimeField6.getDifferenceAsLong((-28739965L), (-315619200000L));
        java.lang.String str22 = unsupportedDateTimeField6.getName();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField24 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long27 = durationField24.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long29 = durationField24.getValueAsLong((long) 10);
        int int31 = durationField24.getValue((long) (byte) 10);
        boolean boolean32 = partial23.equals((java.lang.Object) durationField24);
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField34 = iSOChronology33.minutes();
        org.joda.time.DateTimeField dateTimeField35 = iSOChronology33.millisOfDay();
        org.joda.time.DateTimeField dateTimeField36 = iSOChronology33.halfdayOfDay();
        org.joda.time.ReadableInterval readableInterval37 = null;
        org.joda.time.ReadableInterval readableInterval38 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval37);
        org.joda.time.ReadableInterval readableInterval39 = null;
        boolean boolean40 = readableInterval38.contains(readableInterval39);
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Period period42 = readableInterval38.toPeriod(periodType41);
        int[] intArray45 = iSOChronology33.get((org.joda.time.ReadablePeriod) period42, 4L, (long) '#');
        org.joda.time.Partial partial46 = partial23.plus((org.joda.time.ReadablePeriod) period42);
        java.util.Locale locale48 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str49 = unsupportedDateTimeField6.getAsText((org.joda.time.ReadablePartial) partial23, 10, locale48);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1438L + "'", long16 == 1438L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UnsupportedDateTimeField" + "'", str17, "UnsupportedDateTimeField");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 315590460035L + "'", long21 == 315590460035L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "dayOfYear" + "'", str22, "dayOfYear");
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10L + "'", long29 == 10L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(readableInterval38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[0, 0, 0, 0, 0, 0, 0, 31]");
        org.junit.Assert.assertNotNull(partial46);
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0252");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField11 = new org.joda.time.field.OffsetDateTimeField(dateTimeField8, dateTimeFieldType9, (int) (short) 1);
        long long13 = offsetDateTimeField11.roundHalfCeiling(29227899L);
        org.joda.time.DurationField durationField14 = offsetDateTimeField11.getLeapDurationField();
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField16 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long19 = durationField16.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long21 = durationField16.getValueAsLong((long) 10);
        int int23 = durationField16.getValue((long) (byte) 10);
        boolean boolean24 = partial15.equals((java.lang.Object) durationField16);
        org.joda.time.Chronology chronology25 = partial15.getChronology();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial15.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = partial15.getFieldTypes();
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField30 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long33 = durationField30.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long35 = durationField30.getValueAsLong((long) 10);
        int int37 = durationField30.getValue((long) (byte) 10);
        boolean boolean38 = partial29.equals((java.lang.Object) durationField30);
        org.joda.time.Chronology chronology39 = partial29.getChronology();
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        boolean boolean41 = partial29.isBefore((org.joda.time.ReadablePartial) partial40);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray42 = partial29.getFieldTypes();
        boolean boolean44 = partial29.equals((java.lang.Object) 1702281558665L);
        int int45 = partial15.compareTo((org.joda.time.ReadablePartial) partial29);
        int[] intArray47 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray49 = offsetDateTimeField11.addWrapPartial((org.joda.time.ReadablePartial) partial15, 28, intArray47, 719);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 28800000L + "'", long13 == 28800000L);
        org.junit.Assert.assertNull(durationField14);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10L + "'", long21 == 10L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10L + "'", long35 == 10L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2004");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        long long24 = remainderDateTimeField22.roundHalfFloor(3600000L);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval26 = null;
        org.joda.time.ReadableInterval readableInterval27 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval26);
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval26);
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfCentury();
        org.joda.time.DurationField durationField30 = chronology28.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField31 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType25, durationField30);
        long long34 = unsupportedDateTimeField31.add((-31L), (long) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = unsupportedDateTimeField31.getType();
        org.joda.time.DurationFieldType durationFieldType36 = dateTimeFieldType35.getRangeDurationType();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField37 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField22, dateTimeFieldType35);
        org.joda.time.DurationField durationField38 = remainderDateTimeField22.iDurationField;
        int int39 = remainderDateTimeField22.getMaximumValue();
        org.joda.time.DurationField durationField40 = remainderDateTimeField22.getRangeDurationField();
        boolean boolean41 = remainderDateTimeField22.isSupported();
        org.joda.time.DurationField durationField42 = remainderDateTimeField22.getDurationField();
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(readableInterval27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 4L + "'", long34 == 4L);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 9 + "'", int39 == 9);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(durationField42);
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2307");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeField[] dateTimeFieldArray13 = partial11.getFields();
        org.joda.time.Chronology chronology14 = partial11.getChronology();
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField16 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long19 = durationField16.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long21 = durationField16.getValueAsLong((long) 10);
        int int23 = durationField16.getValue((long) (byte) 10);
        boolean boolean24 = partial15.equals((java.lang.Object) durationField16);
        org.joda.time.Chronology chronology25 = partial15.getChronology();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial15.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = partial15.getFieldTypes();
        boolean boolean30 = partial15.equals((java.lang.Object) 1702281558665L);
        java.lang.String str31 = partial15.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = partial15.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.Partial partial34 = partial15.plus(readablePeriod33);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField36 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long39 = durationField36.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long41 = durationField36.getValueAsLong((long) 10);
        int int43 = durationField36.getValue((long) (byte) 10);
        boolean boolean44 = partial35.equals((java.lang.Object) durationField36);
        org.joda.time.Chronology chronology45 = partial35.getChronology();
        java.lang.String str46 = partial35.toString();
        boolean boolean47 = partial34.isAfter((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Partial partial48 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial35);
        java.lang.String str49 = partial35.toString();
        int int50 = partial11.compareTo((org.joda.time.ReadablePartial) partial35);
        int int51 = partial35.size();
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10L + "'", long21 == 10L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter32);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 10L + "'", long41 == 10L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[]" + "'", str46, "[]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[]" + "'", str49, "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2014");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = durationField5.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval11 = null;
        org.joda.time.ReadableInterval readableInterval12 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval11);
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval11);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfCentury();
        boolean boolean15 = durationFieldType10.isSupported(chronology13);
        org.joda.time.field.ScaledDurationField scaledDurationField17 = new org.joda.time.field.ScaledDurationField(durationField5, durationFieldType10, (int) 'a');
        org.joda.time.DurationField durationField18 = scaledDurationField17.getWrappedField();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.ReadableInterval readableInterval21 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval20);
        org.joda.time.Chronology chronology22 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval20);
        org.joda.time.DateTimeField dateTimeField23 = chronology22.yearOfCentury();
        org.joda.time.DurationField durationField24 = chronology22.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField25 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType19, durationField24);
        long long28 = durationField24.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval30 = null;
        org.joda.time.ReadableInterval readableInterval31 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval30);
        org.joda.time.Chronology chronology32 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval30);
        org.joda.time.DateTimeField dateTimeField33 = chronology32.yearOfCentury();
        boolean boolean34 = durationFieldType29.isSupported(chronology32);
        org.joda.time.field.ScaledDurationField scaledDurationField36 = new org.joda.time.field.ScaledDurationField(durationField24, durationFieldType29, (int) 'a');
        int int38 = scaledDurationField36.getValue((long) (short) -1);
        boolean boolean39 = scaledDurationField36.isSupported();
        boolean boolean40 = scaledDurationField17.equals((java.lang.Object) scaledDurationField36);
        long long43 = scaledDurationField36.getMillis((long) 296, 166726225165018L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-210866846400000L) + "'", long9 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(readableInterval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(readableInterval21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-210866846400000L) + "'", long28 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertNotNull(readableInterval31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 28712L + "'", long43 == 28712L);
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1359");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfWeek();
        java.lang.String str1 = dateTimeFieldType0.getName();
        org.joda.time.IllegalFieldValueException illegalFieldValueException3 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType0, "-08:00");
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval5 = null;
        org.joda.time.ReadableInterval readableInterval6 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval5);
        org.joda.time.Chronology chronology7 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval5);
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfCentury();
        org.joda.time.DurationField durationField9 = chronology7.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField10 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType4, durationField9);
        long long13 = durationField9.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.ReadableInterval readableInterval16 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval15);
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        boolean boolean19 = durationFieldType14.isSupported(chronology17);
        org.joda.time.field.ScaledDurationField scaledDurationField21 = new org.joda.time.field.ScaledDurationField(durationField9, durationFieldType14, (int) 'a');
        int int23 = scaledDurationField21.getValue((long) (short) -1);
        boolean boolean24 = scaledDurationField21.isSupported();
        long long27 = scaledDurationField21.getDifferenceAsLong(28800001L, (-210858120000000L));
        java.lang.String str28 = scaledDurationField21.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType30 = dateTimeFieldType29.getDurationType();
        org.joda.time.field.PreciseDurationField preciseDurationField32 = new org.joda.time.field.PreciseDurationField(durationFieldType30, 28354819L);
        long long33 = preciseDurationField32.getUnitMillis();
        boolean boolean34 = preciseDurationField32.isPrecise();
        long long37 = preciseDurationField32.getValueAsLong((long) 719, 306607L);
        org.joda.time.field.PreciseDateTimeField preciseDateTimeField38 = new org.joda.time.field.PreciseDateTimeField(dateTimeFieldType0, (org.joda.time.DurationField) scaledDurationField21, (org.joda.time.DurationField) preciseDurationField32);
        boolean boolean39 = preciseDateTimeField38.isLenient();
        int int42 = preciseDateTimeField38.getMaximumValueForSet(1701288000000L, 21);
        int int43 = preciseDateTimeField38.getMaximumValue();
        long long46 = preciseDateTimeField38.addWrapField(28800000L, 60000);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "dayOfWeek" + "'", str1, "dayOfWeek");
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(readableInterval6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-210866846400000L) + "'", long13 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(readableInterval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 2173795348453L + "'", long27 == 2173795348453L);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "DurationField[hours]" + "'", str28, "DurationField[hours]");
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 28354819L + "'", long33 == 28354819L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 292316 + "'", int42 == 292316);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 292316 + "'", int43 == 292316);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 34620000L + "'", long46 == 34620000L);
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1296");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add((-31L), (long) '#');
        org.joda.time.DurationField durationField10 = unsupportedDateTimeField6.getLeapDurationField();
        int int13 = unsupportedDateTimeField6.getDifference((long) (byte) 10, 10L);
        long long16 = unsupportedDateTimeField6.add(3600000L, 9);
        long long19 = unsupportedDateTimeField6.add(24L, 29227899);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField21 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long24 = durationField21.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long26 = durationField21.getValueAsLong((long) 10);
        int int28 = durationField21.getValue((long) (byte) 10);
        boolean boolean29 = partial20.equals((java.lang.Object) durationField21);
        org.joda.time.Chronology chronology30 = partial20.getChronology();
        java.lang.String str31 = partial20.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray32 = partial20.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval33 = null;
        org.joda.time.ReadableInterval readableInterval34 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval33);
        org.joda.time.ReadableInterval readableInterval35 = null;
        boolean boolean36 = readableInterval34.contains(readableInterval35);
        org.joda.time.ReadableInterval readableInterval37 = null;
        boolean boolean38 = readableInterval34.isBefore(readableInterval37);
        org.joda.time.Interval interval39 = readableInterval34.toInterval();
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.PeriodType periodType41 = org.joda.time.DateTimeUtils.getPeriodType(periodType40);
        org.joda.time.PeriodType periodType42 = org.joda.time.DateTimeUtils.getPeriodType(periodType40);
        org.joda.time.Period period43 = readableInterval34.toPeriod(periodType42);
        org.joda.time.Partial partial44 = partial20.plus((org.joda.time.ReadablePeriod) period43);
        java.lang.String str45 = partial44.toStringList();
        java.lang.String str46 = partial44.toStringList();
        java.util.Locale locale48 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str49 = unsupportedDateTimeField6.getAsText((org.joda.time.ReadablePartial) partial44, (-1893415679), locale48);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 3600009L + "'", long16 == 3600009L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 29227923L + "'", long19 == 29227923L);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10L + "'", long26 == 10L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray32);
        org.junit.Assert.assertNotNull(readableInterval34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[]" + "'", str45, "[]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[]" + "'", str46, "[]");
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0924");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        long long16 = dividedDateTimeField11.roundFloor(291L);
        long long18 = dividedDateTimeField11.roundFloor((long) (short) 100);
        org.joda.time.DurationField durationField19 = dividedDateTimeField11.iDurationField;
        int int21 = dividedDateTimeField11.getLeapAmount(432000032L);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField23 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long26 = durationField23.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long28 = durationField23.getValueAsLong((long) 10);
        int int30 = durationField23.getValue((long) (byte) 10);
        boolean boolean31 = partial22.equals((java.lang.Object) durationField23);
        org.joda.time.Chronology chronology32 = partial22.getChronology();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        boolean boolean34 = partial22.isBefore((org.joda.time.ReadablePartial) partial33);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray35 = partial22.getFieldTypes();
        boolean boolean37 = partial22.equals((java.lang.Object) 1702281558665L);
        java.lang.String str38 = partial22.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray39 = partial22.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType41 = dateTimeFieldType40.getRangeDurationType();
        int int42 = partial22.indexOf(dateTimeFieldType40);
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField43 = new org.joda.time.field.ZeroIsMaxDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField11, dateTimeFieldType40);
        long long45 = zeroIsMaxDateTimeField43.roundFloor(53459998L);
        long long47 = zeroIsMaxDateTimeField43.roundHalfEven(2835481900L);
        long long50 = zeroIsMaxDateTimeField43.addWrapField((-476134564980L), 23);
        long long52 = zeroIsMaxDateTimeField43.remainder(0L);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10L + "'", long28 == 10L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[]" + "'", str38, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 6782070235020L + "'", long50 == 6782070235020L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2380");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str1 = durationFieldType0.toString();
        org.joda.time.chrono.ISOChronology iSOChronology2 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField3 = iSOChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology2.millisOfDay();
        org.joda.time.ReadableInterval readableInterval5 = null;
        org.joda.time.ReadableInterval readableInterval6 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval5);
        org.joda.time.Chronology chronology7 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval5);
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfCentury();
        org.joda.time.DurationField durationField9 = chronology7.millis();
        org.joda.time.DurationField durationField10 = chronology7.centuries();
        org.joda.time.ReadableInterval readableInterval11 = null;
        org.joda.time.ReadableInterval readableInterval12 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval11);
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval11);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfCentury();
        org.joda.time.DurationField durationField15 = chronology13.millis();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval17 = null;
        org.joda.time.ReadableInterval readableInterval18 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval17);
        org.joda.time.Chronology chronology19 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval17);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval22 = null;
        org.joda.time.ReadableInterval readableInterval23 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval22);
        org.joda.time.ReadableInterval readableInterval24 = null;
        boolean boolean25 = readableInterval23.contains(readableInterval24);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Period period27 = readableInterval23.toPeriod(periodType26);
        int[] intArray29 = chronology19.get((org.joda.time.ReadablePeriod) period27, (-210866846400000L));
        int[] intArray32 = chronology13.get((org.joda.time.ReadablePeriod) period27, 2173795348453L, (long) 1439);
        int[] intArray35 = chronology7.get((org.joda.time.ReadablePeriod) period27, 291L, 2580171L);
        int[] intArray38 = iSOChronology2.get((org.joda.time.ReadablePeriod) period27, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField39 = iSOChronology2.months();
        java.lang.String str40 = iSOChronology2.toString();
        boolean boolean41 = durationFieldType0.isSupported((org.joda.time.Chronology) iSOChronology2);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "seconds" + "'", str1, "seconds");
        org.junit.Assert.assertNotNull(iSOChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(readableInterval6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(readableInterval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(readableInterval18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(readableInterval23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(durationField39);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "ISOChronology[100]" + "'", str40, "ISOChronology[100]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2314");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str1 = dateTimeZone0.toString();
        java.lang.String str3 = dateTimeZone0.getShortName((-210866846400000L));
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeUtils.getZone(dateTimeZone0);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone5 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone4);
        boolean boolean7 = cachedDateTimeZone5.equals((java.lang.Object) 432000032L);
        long long10 = cachedDateTimeZone5.convertLocalToUTC(432000032L, false);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone15 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology16 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone17 = gregorianChronology16.getZone();
        long long21 = gregorianChronology16.add(0L, (long) (byte) 1, (int) (byte) 0);
        org.joda.time.Chronology chronology22 = gregorianChronology16.withUTC();
        boolean boolean23 = cachedDateTimeZone5.equals((java.lang.Object) gregorianChronology16);
        org.joda.time.chrono.ISOChronology iSOChronology24 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField25 = iSOChronology24.minutes();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str27 = dateTimeZone26.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology24, dateTimeZone26);
        java.lang.String str29 = zonedChronology28.toString();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfDay();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone35 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        int int37 = fixedDateTimeZone35.getStandardOffset((long) 1439);
        boolean boolean38 = fixedDateTimeZone35.isFixed();
        long long40 = fixedDateTimeZone35.nextTransition((long) 24);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        long long44 = dateTimeZone41.adjustOffset((long) 100, true);
        long long46 = fixedDateTimeZone35.getMillisKeepLocal(dateTimeZone41, 10L);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        int int49 = dateTimeZone47.getStandardOffset((long) 1);
        long long51 = dateTimeZone41.getMillisKeepLocal(dateTimeZone47, 5L);
        org.joda.time.Chronology chronology52 = zonedChronology28.withZone(dateTimeZone41);
        org.joda.time.Chronology chronology53 = gregorianChronology16.withZone(dateTimeZone41);
        int int54 = gregorianChronology16.getMinimumDaysInFirstWeek();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "UTC" + "'", str1, "UTC");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(cachedDateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 432000032L + "'", long10 == 432000032L);
        org.junit.Assert.assertNotNull(gregorianChronology16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(iSOChronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTC" + "'", str27, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str29, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 24L + "'", long40 == 24L);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 100L + "'", long44 == 100L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10L + "'", long46 == 10L);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 5L + "'", long51 == 5L);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 4 + "'", int54 == 4);
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0772");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        long long16 = dividedDateTimeField11.roundFloor(291L);
        long long18 = dividedDateTimeField11.roundFloor((long) (short) 100);
        org.joda.time.DurationField durationField19 = dividedDateTimeField11.iDurationField;
        int int21 = dividedDateTimeField11.getLeapAmount(432000032L);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField23 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long26 = durationField23.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long28 = durationField23.getValueAsLong((long) 10);
        int int30 = durationField23.getValue((long) (byte) 10);
        boolean boolean31 = partial22.equals((java.lang.Object) durationField23);
        org.joda.time.Chronology chronology32 = partial22.getChronology();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        boolean boolean34 = partial22.isBefore((org.joda.time.ReadablePartial) partial33);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray35 = partial22.getFieldTypes();
        boolean boolean37 = partial22.equals((java.lang.Object) 1702281558665L);
        java.lang.String str38 = partial22.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray39 = partial22.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType41 = dateTimeFieldType40.getRangeDurationType();
        int int42 = partial22.indexOf(dateTimeFieldType40);
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField43 = new org.joda.time.field.ZeroIsMaxDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField11, dateTimeFieldType40);
        long long46 = zeroIsMaxDateTimeField43.add(113419277L, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            long long49 = zeroIsMaxDateTimeField43.add((-476134719389L), 29227900);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292280954 for year must be in the range [-292275054,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10L + "'", long28 == 10L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[]" + "'", str38, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 315646219277L + "'", long46 == 315646219277L);
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1462");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.ReadableInterval readableInterval11 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval10);
        org.joda.time.ReadableInterval readableInterval12 = null;
        boolean boolean13 = readableInterval11.contains(readableInterval12);
        org.joda.time.ReadableInterval readableInterval14 = null;
        boolean boolean15 = readableInterval11.isBefore(readableInterval14);
        org.joda.time.Interval interval16 = readableInterval11.toInterval();
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.PeriodType periodType18 = org.joda.time.DateTimeUtils.getPeriodType(periodType17);
        org.joda.time.PeriodType periodType19 = org.joda.time.DateTimeUtils.getPeriodType(periodType17);
        org.joda.time.Period period20 = readableInterval11.toPeriod(periodType19);
        org.joda.time.Partial partial21 = partial0.plus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField23 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long26 = durationField23.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long28 = durationField23.getValueAsLong((long) 10);
        int int30 = durationField23.getValue((long) (byte) 10);
        boolean boolean31 = partial22.equals((java.lang.Object) durationField23);
        org.joda.time.chrono.ISOChronology iSOChronology32 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField33 = iSOChronology32.minutes();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology32.millisOfDay();
        org.joda.time.DateTimeField dateTimeField35 = iSOChronology32.halfdayOfDay();
        org.joda.time.ReadableInterval readableInterval36 = null;
        org.joda.time.ReadableInterval readableInterval37 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval36);
        org.joda.time.ReadableInterval readableInterval38 = null;
        boolean boolean39 = readableInterval37.contains(readableInterval38);
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.Period period41 = readableInterval37.toPeriod(periodType40);
        int[] intArray44 = iSOChronology32.get((org.joda.time.ReadablePeriod) period41, 4L, (long) '#');
        org.joda.time.Partial partial45 = partial22.plus((org.joda.time.ReadablePeriod) period41);
        org.joda.time.Partial partial46 = partial21.minus((org.joda.time.ReadablePeriod) period41);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = partial21.toDateTime(readableInstant47);
        long long49 = org.joda.time.DateTimeUtils.getInstantMillis(readableInstant47);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(readableInterval11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10L + "'", long28 == 10L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(iSOChronology32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(readableInterval37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, 0, 0, 0, 0, 0, 0, 31]");
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNotNull(dateTime48);
// flaky:         org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0494");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        boolean boolean5 = durationFieldType0.isSupported(chronology3);
        org.joda.time.DurationField durationField6 = chronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.weekyearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField12 = new org.joda.time.field.OffsetDateTimeField(dateTimeField7, dateTimeFieldType8, 4, (int) ' ', (int) (short) -1);
        long long14 = offsetDateTimeField12.roundCeiling(2102400001L);
        boolean boolean15 = offsetDateTimeField12.isSupported();
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField17 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long20 = durationField17.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long22 = durationField17.getValueAsLong((long) 10);
        int int24 = durationField17.getValue((long) (byte) 10);
        boolean boolean25 = partial16.equals((java.lang.Object) durationField17);
        org.joda.time.Chronology chronology26 = partial16.getChronology();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        boolean boolean28 = partial16.isBefore((org.joda.time.ReadablePartial) partial27);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = partial16.getFieldTypes();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField31 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long34 = durationField31.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long36 = durationField31.getValueAsLong((long) 10);
        int int38 = durationField31.getValue((long) (byte) 10);
        boolean boolean39 = partial30.equals((java.lang.Object) durationField31);
        org.joda.time.Chronology chronology40 = partial30.getChronology();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        boolean boolean42 = partial30.isBefore((org.joda.time.ReadablePartial) partial41);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray43 = partial30.getFieldTypes();
        boolean boolean45 = partial30.equals((java.lang.Object) 1702281558665L);
        int int46 = partial16.compareTo((org.joda.time.ReadablePartial) partial30);
        java.util.Locale locale48 = null;
        java.lang.String str49 = offsetDateTimeField12.getAsShortText((org.joda.time.ReadablePartial) partial30, 9, locale48);
        int int50 = partial30.size();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 31564800000L + "'", long14 == 31564800000L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10L + "'", long22 == 10L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 10L + "'", long36 == 10L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "9" + "'", str49, "9");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2604");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        org.joda.time.ReadablePartial readablePartial23 = null;
        java.util.Locale locale25 = null;
        java.lang.String str26 = dividedDateTimeField11.getAsShortText(readablePartial23, (int) ' ', locale25);
        org.joda.time.ReadablePartial readablePartial27 = null;
        java.util.Locale locale29 = null;
        java.lang.String str30 = dividedDateTimeField11.getAsText(readablePartial27, (int) (byte) 10, locale29);
        long long32 = dividedDateTimeField11.roundHalfFloor((long) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField37 = new org.joda.time.field.OffsetDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField11, dateTimeFieldType33, (int) (byte) 10, (int) '#', 3);
        org.joda.time.ReadableInterval readableInterval38 = null;
        org.joda.time.ReadableInterval readableInterval39 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval38);
        org.joda.time.Chronology chronology40 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval38);
        org.joda.time.DateTimeField dateTimeField41 = chronology40.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField42 = chronology40.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField43 = chronology40.yearOfCentury();
        boolean boolean44 = dateTimeFieldType33.isSupported(chronology40);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial46 = new org.joda.time.Partial(dateTimeFieldType33, (-5));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -5 for dayOfWeek must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "32" + "'", str26, "32");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "10" + "'", str30, "10");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(readableInterval39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1236");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = partial0.getFormatter();
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField16 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long19 = durationField16.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long21 = durationField16.getValueAsLong((long) 10);
        int int23 = durationField16.getValue((long) (byte) 10);
        boolean boolean24 = partial15.equals((java.lang.Object) durationField16);
        org.joda.time.Chronology chronology25 = partial15.getChronology();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial15.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = partial15.getFieldTypes();
        boolean boolean30 = partial15.equals((java.lang.Object) 1702281558665L);
        int int31 = partial0.compareTo((org.joda.time.ReadablePartial) partial15);
        org.joda.time.ReadableInterval readableInterval32 = null;
        org.joda.time.ReadableInterval readableInterval33 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval32);
        long long34 = readableInterval33.getStartMillis();
        org.joda.time.ReadableInterval readableInterval35 = null;
        org.joda.time.ReadableInterval readableInterval36 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval35);
        long long37 = readableInterval36.getEndMillis();
        boolean boolean38 = readableInterval33.overlaps(readableInterval36);
        org.joda.time.MutableInterval mutableInterval39 = readableInterval33.toMutableInterval();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        boolean boolean41 = mutableInterval39.equals((java.lang.Object) dateTimeFieldType40);
        java.lang.String str42 = dateTimeFieldType40.getName();
        // The following exception was thrown during execution in test generation
        try {
            int int43 = partial0.get(dateTimeFieldType40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekOfWeekyear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10L + "'", long21 == 10L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(readableInterval33);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 315639019277L + "'", long34 == 315639019277L);
        org.junit.Assert.assertNotNull(readableInterval36);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + 315639019277L + "'", long37 == 315639019277L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(mutableInterval39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "weekOfWeekyear" + "'", str42, "weekOfWeekyear");
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0292");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add((-31L), (long) '#');
        org.joda.time.DurationField durationField10 = unsupportedDateTimeField6.getLeapDurationField();
        int int13 = unsupportedDateTimeField6.getDifference((long) (byte) 10, 10L);
        java.lang.String str14 = unsupportedDateTimeField6.toString();
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.ReadableInterval readableInterval16 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval15);
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        org.joda.time.DurationField durationField19 = chronology17.millis();
        org.joda.time.DurationField durationField20 = chronology17.centuries();
        org.joda.time.Chronology chronology21 = chronology17.withUTC();
        org.joda.time.DurationField durationField22 = chronology21.halfdays();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField26 = new org.joda.time.field.DividedDateTimeField(dateTimeField23, dateTimeFieldType24, 10);
        long long29 = dividedDateTimeField26.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval31 = null;
        org.joda.time.ReadableInterval readableInterval32 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval31);
        org.joda.time.Chronology chronology33 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval31);
        org.joda.time.DateTimeField dateTimeField34 = chronology33.yearOfCentury();
        org.joda.time.DurationField durationField35 = chronology33.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField36 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType30, durationField35);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField37 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField26, dateTimeFieldType30);
        java.lang.String str38 = dateTimeFieldType30.getName();
        org.joda.time.Partial partial40 = new org.joda.time.Partial(dateTimeFieldType30, 9);
        // The following exception was thrown during execution in test generation
        try {
            int int41 = unsupportedDateTimeField6.getMinimumValue((org.joda.time.ReadablePartial) partial40);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UnsupportedDateTimeField" + "'", str14, "UnsupportedDateTimeField");
        org.junit.Assert.assertNotNull(readableInterval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-30610224000000L) + "'", long29 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(readableInterval32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "dayOfYear" + "'", str38, "dayOfYear");
    }
}
