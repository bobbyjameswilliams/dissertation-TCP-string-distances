package org.apache.commons.cli;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1197");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken("[ option: 4  :: null ::  ]", true);
        posixParser0.burstToken("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", false);
        org.apache.commons.cli.PosixParser posixParser42 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        option45.setDescription("");
        org.apache.commons.cli.Options options48 = options43.addOption(option45);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        option52.setDescription("");
        org.apache.commons.cli.Options options55 = options50.addOption(option52);
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray58 = commandLine56.getOptionValues("hi!");
        java.lang.String[] strArray59 = commandLine56.getArgs();
        java.util.Properties properties60 = null;
        org.apache.commons.cli.CommandLine commandLine61 = posixParser49.parse(options50, strArray59, properties60);
        org.apache.commons.cli.CommandLine commandLine63 = posixParser42.parse(options48, strArray59, false);
        java.util.Collection collection64 = options48.getOptionGroups();
        org.apache.commons.cli.PosixParser posixParser65 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options66 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option68 = org.apache.commons.cli.OptionBuilder.create('4');
        option68.setDescription("");
        org.apache.commons.cli.Options options71 = options66.addOption(option68);
        org.apache.commons.cli.CommandLine commandLine72 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray74 = commandLine72.getOptionValues("hi!");
        java.lang.String str77 = commandLine72.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str79 = commandLine72.getOptionValue("arg");
        java.lang.String[] strArray80 = commandLine72.getArgs();
        java.lang.String[] strArray82 = posixParser65.flatten(options71, strArray80, false);
        org.apache.commons.cli.CommandLine commandLine84 = posixParser0.parse(options48, strArray80, false);
        java.lang.Object obj86 = commandLine84.getOptionObject("[ option: 4  ::  ]");
        java.lang.Object obj88 = commandLine84.getOptionObject('#');
        java.util.Iterator iterator89 = commandLine84.iterator();
        java.lang.String[] strArray90 = commandLine84.getArgs();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNull(strArray58);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(commandLine61);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(collection64);
        org.junit.Assert.assertNotNull(option68);
        org.junit.Assert.assertNotNull(options71);
        org.junit.Assert.assertNull(strArray74);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str77, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(commandLine84);
        org.junit.Assert.assertNull(obj86);
        org.junit.Assert.assertNull(obj88);
        org.junit.Assert.assertNotNull(iterator89);
        org.junit.Assert.assertNotNull(strArray90);
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0298");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken("org.apache.commons.cli.MissingOptionException: hi!", false);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create('4');
        option41.setDescription("");
        org.apache.commons.cli.Options options44 = options39.addOption(option41);
        java.util.Collection collection45 = options39.getOptions();
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option48 = org.apache.commons.cli.OptionBuilder.create('4');
        char char49 = option48.getValueSeparator();
        org.apache.commons.cli.Option option51 = org.apache.commons.cli.OptionBuilder.create('4');
        option51.setDescription("");
        option48.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup55 = options46.getOptionGroup(option48);
        option48.setOptionalArg(true);
        int int58 = option48.getId();
        org.apache.commons.cli.Options options59 = options39.addOption(option48);
        java.util.List list60 = options39.helpOptions();
        java.lang.String[] strArray61 = null;
        org.apache.commons.cli.CommandLine commandLine63 = posixParser0.parse(options39, strArray61, false);
        org.apache.commons.cli.PosixParser posixParser64 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option67 = org.apache.commons.cli.OptionBuilder.create('4');
        option67.setDescription("");
        org.apache.commons.cli.Options options70 = options65.addOption(option67);
        org.apache.commons.cli.CommandLine commandLine71 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray73 = commandLine71.getOptionValues("hi!");
        java.lang.String[] strArray74 = commandLine71.getArgs();
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser64.parse(options65, strArray74, properties75);
        boolean boolean78 = options65.hasOption(" ");
        java.util.Collection collection79 = options65.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine80 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray82 = commandLine80.getOptionValues("hi!");
        java.lang.String[] strArray83 = commandLine80.getArgs();
        java.util.Iterator iterator84 = commandLine80.iterator();
        java.lang.String str87 = commandLine80.getOptionValue("[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]", "arg");
        boolean boolean89 = commandLine80.hasOption("[ option: 4  :: null ]");
        java.lang.String[] strArray91 = commandLine80.getOptionValues("");
        java.lang.String str94 = commandLine80.getOptionValue('=', "[ option: 4  :: null ::  ]");
        org.apache.commons.cli.Option[] optionArray95 = commandLine80.getOptions();
        java.util.Iterator iterator96 = commandLine80.iterator();
        java.lang.String[] strArray97 = commandLine80.getArgs();
        java.util.Properties properties98 = null;
        org.apache.commons.cli.CommandLine commandLine99 = posixParser0.parse(options65, strArray97, properties98);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertNotNull(collection45);
        org.junit.Assert.assertNotNull(option48);
        org.junit.Assert.assertTrue("'" + char49 + "' != '" + '\000' + "'", char49 == '\000');
        org.junit.Assert.assertNotNull(option51);
        org.junit.Assert.assertNull(optionGroup55);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 52 + "'", int58 == 52);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNotNull(list60);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(option67);
        org.junit.Assert.assertNotNull(options70);
        org.junit.Assert.assertNull(strArray73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(collection79);
        org.junit.Assert.assertNull(strArray82);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(iterator84);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "arg" + "'", str87, "arg");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNull(strArray91);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "[ option: 4  :: null ::  ]" + "'", str94, "[ option: 4  :: null ::  ]");
        org.junit.Assert.assertNotNull(optionArray95);
        org.junit.Assert.assertNotNull(iterator96);
        org.junit.Assert.assertNotNull(strArray97);
        org.junit.Assert.assertNotNull(commandLine99);
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1386");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create('4');
        boolean boolean2 = option1.hasArgs();
        java.lang.Object obj3 = option1.getType();
        char char4 = option1.getValueSeparator();
        java.lang.String[] strArray5 = option1.getValues();
        org.apache.commons.cli.PosixParser posixParser6 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options7 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        org.apache.commons.cli.Options options12 = options7.addOption(option9);
        org.apache.commons.cli.PosixParser posixParser13 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = org.apache.commons.cli.OptionBuilder.create('4');
        option16.setDescription("");
        org.apache.commons.cli.Options options19 = options14.addOption(option16);
        org.apache.commons.cli.CommandLine commandLine20 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray22 = commandLine20.getOptionValues("hi!");
        java.lang.String[] strArray23 = commandLine20.getArgs();
        java.util.Properties properties24 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser13.parse(options14, strArray23, properties24);
        org.apache.commons.cli.CommandLine commandLine27 = posixParser6.parse(options12, strArray23, false);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup31 = options28.getOptionGroup(option30);
        org.apache.commons.cli.Option option33 = org.apache.commons.cli.OptionBuilder.create('4');
        char char34 = option33.getValueSeparator();
        org.apache.commons.cli.Option option36 = org.apache.commons.cli.OptionBuilder.create('4');
        option36.setDescription("");
        option33.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup40 = options28.getOptionGroup(option33);
        boolean boolean42 = options28.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser43 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options44 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option46 = org.apache.commons.cli.OptionBuilder.create('4');
        option46.setDescription("");
        org.apache.commons.cli.Options options49 = options44.addOption(option46);
        org.apache.commons.cli.CommandLine commandLine50 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray52 = commandLine50.getOptionValues("hi!");
        java.lang.String[] strArray53 = commandLine50.getArgs();
        java.util.Properties properties54 = null;
        org.apache.commons.cli.CommandLine commandLine55 = posixParser43.parse(options44, strArray53, properties54);
        java.util.Properties properties56 = null;
        org.apache.commons.cli.CommandLine commandLine58 = posixParser6.parse(options28, strArray53, properties56, true);
        org.apache.commons.cli.Options options59 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option61 = org.apache.commons.cli.OptionBuilder.create('4');
        option61.setDescription("");
        org.apache.commons.cli.Options options64 = options59.addOption(option61);
        java.util.Collection collection65 = options59.getOptions();
        java.lang.String[] strArray66 = null;
        org.apache.commons.cli.CommandLine commandLine68 = posixParser6.parse(options59, strArray66, true);
        org.apache.commons.cli.PosixParser posixParser69 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options70 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option72 = org.apache.commons.cli.OptionBuilder.create('4');
        option72.setDescription("");
        org.apache.commons.cli.Options options75 = options70.addOption(option72);
        org.apache.commons.cli.CommandLine commandLine76 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray78 = commandLine76.getOptionValues("hi!");
        java.lang.String[] strArray79 = commandLine76.getArgs();
        java.util.Properties properties80 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser69.parse(options70, strArray79, properties80);
        java.lang.String[] strArray84 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]", "hi!" };
        java.util.Properties properties85 = null;
        org.apache.commons.cli.CommandLine commandLine87 = posixParser6.parse(options70, strArray84, properties85, true);
        java.util.List list88 = commandLine87.getArgList();
        java.lang.String str91 = commandLine87.getOptionValue('#', "[ option: 4  :: null ]");
        java.lang.String[] strArray92 = commandLine87.getArgs();
        option1.setType((java.lang.Object) strArray92);
        boolean boolean94 = option1.hasOptionalArg();
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + '\000' + "'", char4 == '\000');
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(option16);
        org.junit.Assert.assertNotNull(options19);
        org.junit.Assert.assertNull(strArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup31);
        org.junit.Assert.assertNotNull(option33);
        org.junit.Assert.assertTrue("'" + char34 + "' != '" + '\000' + "'", char34 == '\000');
        org.junit.Assert.assertNotNull(option36);
        org.junit.Assert.assertNull(optionGroup40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(option46);
        org.junit.Assert.assertNotNull(options49);
        org.junit.Assert.assertNull(strArray52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertNotNull(option61);
        org.junit.Assert.assertNotNull(options64);
        org.junit.Assert.assertNotNull(collection65);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertNotNull(option72);
        org.junit.Assert.assertNotNull(options75);
        org.junit.Assert.assertNull(strArray78);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(commandLine87);
        org.junit.Assert.assertNotNull(list88);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "[ option: 4  :: null ]" + "'", str91, "[ option: 4  :: null ]");
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1059");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        java.util.List list40 = commandLine39.getArgList();
        java.util.List list41 = commandLine39.getArgList();
        java.lang.String[] strArray43 = commandLine39.getOptionValues('=');
        boolean boolean45 = commandLine39.hasOption(' ');
        java.lang.String str47 = commandLine39.getOptionValue('a');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(list40);
        org.junit.Assert.assertNotNull(list41);
        org.junit.Assert.assertNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(str47);
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1681");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken("[ option: 4  :: null ::  ]", true);
        posixParser0.burstToken("[ Options: [ short {} ] [ long {} ]", true);
        org.apache.commons.cli.PosixParser posixParser42 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        option45.setDescription("");
        org.apache.commons.cli.Options options48 = options43.addOption(option45);
        org.apache.commons.cli.CommandLine commandLine49 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray51 = commandLine49.getOptionValues("hi!");
        java.lang.String str54 = commandLine49.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str56 = commandLine49.getOptionValue("arg");
        java.lang.String[] strArray57 = commandLine49.getArgs();
        java.lang.String[] strArray59 = posixParser42.flatten(options48, strArray57, false);
        boolean boolean61 = options48.hasOption("arg");
        java.util.Collection collection62 = options48.getOptions();
        org.apache.commons.cli.CommandLine commandLine63 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray65 = commandLine63.getOptionValues("hi!");
        java.lang.String[] strArray66 = commandLine63.getArgs();
        java.util.Iterator iterator67 = commandLine63.iterator();
        boolean boolean69 = commandLine63.hasOption("[ option: 4  :: null ]");
        java.lang.String str72 = commandLine63.getOptionValue("[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        java.lang.String[] strArray73 = commandLine63.getArgs();
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options48, strArray73, properties74, true);
        java.lang.String[] strArray78 = commandLine76.getOptionValues('=');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNull(strArray51);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str54, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(collection62);
        org.junit.Assert.assertNull(strArray65);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(iterator67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" + "'", str72, "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertNull(strArray78);
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0404");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.util.Iterator iterator3 = commandLine0.iterator();
        java.lang.String[] strArray5 = commandLine0.getOptionValues('a');
        java.lang.Object obj7 = commandLine0.getOptionObject('a');
        java.lang.Object obj9 = commandLine0.getOptionObject("org.apache.commons.cli.MissingOptionException: hi!");
        java.lang.String str12 = commandLine0.getOptionValue("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]", "[ option: 4  :: null ]");
        java.lang.String[] strArray14 = commandLine0.getOptionValues('=');
        java.lang.String[] strArray16 = commandLine0.getOptionValues("");
        java.util.Iterator iterator17 = commandLine0.iterator();
        java.lang.String str20 = commandLine0.getOptionValue('a', "4");
        org.apache.commons.cli.Option[] optionArray21 = commandLine0.getOptions();
        commandLine0.addArg("[ option:  +ARG ::  :: [] ]");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(iterator3);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ option: 4  :: null ]" + "'", str12, "[ option: 4  :: null ]");
        org.junit.Assert.assertNull(strArray14);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(iterator17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "4" + "'", str20, "4");
        org.junit.Assert.assertNotNull(optionArray21);
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1537");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.util.Iterator iterator4 = commandLine0.iterator();
        java.lang.String str7 = commandLine0.getOptionValue("[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]", "arg");
        java.lang.String str9 = commandLine0.getOptionValue("[ option:  +ARG ::  ]");
        org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option12 = org.apache.commons.cli.OptionBuilder.create('4');
        option12.setDescription("");
        org.apache.commons.cli.Options options15 = options10.addOption(option12);
        java.util.List list16 = option12.getValuesList();
        boolean boolean17 = option12.hasArgs();
        commandLine0.addOption(option12);
        option12.setArgs((int) (byte) 1);
        option12.setDescription("[ option:    :: null :: arg ]");
        boolean boolean23 = option12.isRequired();
        org.apache.commons.cli.Option option27 = new org.apache.commons.cli.Option("arg", false, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str29 = option27.getValue("");
        java.lang.String str30 = option27.getValue();
        option12.setType((java.lang.Object) option27);
        java.lang.String str33 = option12.getValue(0);
        boolean boolean34 = option12.hasValueSeparator();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(iterator4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(option12);
        org.junit.Assert.assertNotNull(options15);
        org.junit.Assert.assertNotNull(list16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0817");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.util.Iterator iterator3 = commandLine0.iterator();
        boolean boolean5 = commandLine0.hasOption('#');
        java.lang.String[] strArray7 = commandLine0.getOptionValues("org.apache.commons.cli.ParseException: [ option: 4  :: null ::  ]");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(iterator3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strArray7);
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0910");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String str5 = commandLine0.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str7 = commandLine0.getOptionValue("arg");
        org.apache.commons.cli.Option[] optionArray8 = commandLine0.getOptions();
        java.lang.String[] strArray10 = commandLine0.getOptionValues('4');
        java.util.List list11 = commandLine0.getArgList();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str5, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(optionArray8);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertNotNull(list11);
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1668");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.util.Iterator iterator4 = commandLine0.iterator();
        java.lang.Object obj6 = commandLine0.getOptionObject('#');
        java.lang.String str9 = commandLine0.getOptionValue('a', "[ Options: [ short {} ] [ long {} ]");
        java.util.List list10 = commandLine0.getArgList();
        java.lang.String str12 = commandLine0.getOptionValue('4');
        org.apache.commons.cli.Option option14 = org.apache.commons.cli.OptionBuilder.create('4');
        char char15 = option14.getValueSeparator();
        boolean boolean16 = option14.hasArg();
        boolean boolean17 = option14.hasOptionalArg();
        java.lang.String str19 = option14.getValue(0);
        java.lang.String[] strArray20 = option14.getValues();
        int int21 = option14.getId();
        org.apache.commons.cli.CommandLine commandLine22 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray24 = commandLine22.getOptionValues("hi!");
        java.lang.String[] strArray25 = commandLine22.getArgs();
        java.util.Iterator iterator26 = commandLine22.iterator();
        java.lang.String str29 = commandLine22.getOptionValue("[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]", "arg");
        java.lang.Object obj31 = commandLine22.getOptionObject("[ option: 4  :: null ]");
        option14.setType((java.lang.Object) "[ option: 4  :: null ]");
        commandLine0.addOption(option14);
        java.lang.String[] strArray35 = commandLine0.getOptionValues('a');
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(iterator4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str9, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(list10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(option14);
        org.junit.Assert.assertTrue("'" + char15 + "' != '" + '\000' + "'", char15 == '\000');
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(strArray20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(iterator26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "arg" + "'", str29, "arg");
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNull(strArray35);
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0304");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        java.util.Collection collection46 = options40.getOptionGroups();
        org.apache.commons.cli.Options options50 = options40.addOption("", false, "arg");
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup54 = options51.getOptionGroup(option53);
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        char char57 = option56.getValueSeparator();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create('4');
        option59.setDescription("");
        option56.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup63 = options51.getOptionGroup(option56);
        boolean boolean64 = option56.hasArgName();
        org.apache.commons.cli.Options options65 = options40.addOption(option56);
        org.apache.commons.cli.CommandLine commandLine66 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray68 = commandLine66.getOptionValues("hi!");
        java.lang.String str71 = commandLine66.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str73 = commandLine66.getOptionValue("arg");
        java.lang.String[] strArray74 = commandLine66.getArgs();
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options40, strArray74, properties75);
        org.apache.commons.cli.Options options77 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option79 = org.apache.commons.cli.OptionBuilder.create('4');
        char char80 = option79.getValueSeparator();
        org.apache.commons.cli.Option option82 = org.apache.commons.cli.OptionBuilder.create('4');
        option82.setDescription("");
        option79.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup86 = options77.getOptionGroup(option79);
        java.lang.String[] strArray89 = new java.lang.String[] { "4", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" };
        java.util.Properties properties90 = null;
        org.apache.commons.cli.CommandLine commandLine91 = posixParser0.parse(options77, strArray89, properties90);
        posixParser0.burstToken("org.apache.commons.cli.UnrecognizedOptionException: hi!", true);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertNotNull(options50);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertTrue("'" + char57 + "' != '" + '\000' + "'", char57 == '\000');
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertNull(optionGroup63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(options65);
        org.junit.Assert.assertNull(strArray68);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str71, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertNotNull(option79);
        org.junit.Assert.assertTrue("'" + char80 + "' != '" + '\000' + "'", char80 == '\000');
        org.junit.Assert.assertNotNull(option82);
        org.junit.Assert.assertNull(optionGroup86);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(commandLine91);
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0357");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Option[] optionArray40 = commandLine39.getOptions();
        java.util.Iterator iterator41 = commandLine39.iterator();
        java.lang.String str43 = commandLine39.getOptionValue('a');
        boolean boolean45 = commandLine39.hasOption('4');
        java.lang.String str47 = commandLine39.getOptionValue('4');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(optionArray40);
        org.junit.Assert.assertNotNull(iterator41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(str47);
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0696");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options53, strArray60, true);
        posixParser0.burstToken("[ option:    :: null ]", false);
        org.apache.commons.cli.Option option67 = org.apache.commons.cli.OptionBuilder.create('4');
        char char68 = option67.getValueSeparator();
        boolean boolean69 = option67.hasArg();
        boolean boolean70 = option67.hasOptionalArg();
        java.lang.String str72 = option67.getValue(0);
        java.lang.String[] strArray73 = option67.getValues();
        java.lang.Object obj74 = null;
        boolean boolean75 = option67.equals(obj74);
        java.lang.String str76 = option67.getLongOpt();
        java.util.ListIterator listIterator77 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option67, listIterator77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(option67);
        org.junit.Assert.assertTrue("'" + char68 + "' != '" + '\000' + "'", char68 == '\000');
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(str76);
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0441");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue("hi!");
        boolean boolean7 = commandLine0.hasOption("");
        java.lang.String str10 = commandLine0.getOptionValue("[ option: 4  :: null ]", "org.apache.commons.cli.MissingOptionException: hi!");
        java.lang.String[] strArray12 = commandLine0.getOptionValues('4');
        java.lang.String[] strArray14 = commandLine0.getOptionValues('a');
        org.apache.commons.cli.Option option16 = org.apache.commons.cli.OptionBuilder.create(' ');
        boolean boolean17 = option16.hasArgName();
        boolean boolean18 = option16.hasArgName();
        commandLine0.addOption(option16);
        java.lang.String str20 = option16.getLongOpt();
        boolean boolean21 = option16.hasArg();
        // The following exception was thrown during execution in test generation
        try {
            option16.addValue("org.apache.commons.cli.MissingOptionException: [ option: 4  :: null ]");
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: NO_ARGS_ALLOWED");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "org.apache.commons.cli.MissingOptionException: hi!" + "'", str10, "org.apache.commons.cli.MissingOptionException: hi!");
        org.junit.Assert.assertNull(strArray12);
        org.junit.Assert.assertNull(strArray14);
        org.junit.Assert.assertNotNull(option16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0391");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.PosixParser posixParser53 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        option56.setDescription("");
        org.apache.commons.cli.Options options59 = options54.addOption(option56);
        org.apache.commons.cli.CommandLine commandLine60 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray62 = commandLine60.getOptionValues("hi!");
        java.lang.String str65 = commandLine60.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str67 = commandLine60.getOptionValue("arg");
        java.lang.String[] strArray68 = commandLine60.getArgs();
        java.lang.String[] strArray70 = posixParser53.flatten(options59, strArray68, false);
        org.apache.commons.cli.PosixParser posixParser71 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options72 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option74 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup75 = options72.getOptionGroup(option74);
        org.apache.commons.cli.CommandLine commandLine76 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray78 = commandLine76.getOptionValues("hi!");
        java.lang.String str81 = commandLine76.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str83 = commandLine76.getOptionValue("arg");
        java.lang.String[] strArray84 = commandLine76.getArgs();
        java.lang.String[] strArray86 = posixParser71.flatten(options72, strArray84, true);
        org.apache.commons.cli.CommandLine commandLine88 = posixParser0.parse(options59, strArray84, false);
        java.lang.String[] strArray89 = commandLine88.getArgs();
        java.lang.String str91 = commandLine88.getOptionValue("org.apache.commons.cli.MissingArgumentException: [ option:    :: null ]");
        java.util.List list92 = commandLine88.getArgList();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNull(strArray62);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str65, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(option74);
        org.junit.Assert.assertNull(optionGroup75);
        org.junit.Assert.assertNull(strArray78);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str81, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(commandLine88);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNull(str91);
        org.junit.Assert.assertNotNull(list92);
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0877");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        java.lang.String str23 = commandLine21.getOptionValue("[ option:  +ARG ::  ]");
        java.lang.Object obj25 = commandLine21.getOptionObject("");
        java.util.Iterator iterator26 = commandLine21.iterator();
        java.lang.Object obj28 = commandLine21.getOptionObject("[ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]");
        boolean boolean30 = commandLine21.hasOption("[ option: arg [ option: 4  :: null ] +ARG :: 4 ]");
        java.lang.String[] strArray31 = commandLine21.getArgs();
        java.util.Iterator iterator32 = commandLine21.iterator();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(iterator26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(iterator32);
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0964");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        java.util.List list36 = commandLine35.getArgList();
        java.lang.String[] strArray37 = commandLine35.getArgs();
        java.lang.String[] strArray38 = commandLine35.getArgs();
        java.lang.String[] strArray40 = commandLine35.getOptionValues("org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        java.lang.String[] strArray41 = commandLine35.getArgs();
        java.lang.String str43 = commandLine35.getOptionValue("[ option: 4 [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4 org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!  ::  ]} ] [ long {org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!=[ option: 4 org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!  ::  ]} ]  :: null ]");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(list36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNull(strArray40);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNull(str43);
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0376");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken("[ option: 4  :: null ::  ]", true);
        posixParser0.burstToken("[ Options: [ short {} ] [ long {} ]", true);
        org.apache.commons.cli.PosixParser posixParser42 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        option45.setDescription("");
        org.apache.commons.cli.Options options48 = options43.addOption(option45);
        org.apache.commons.cli.CommandLine commandLine49 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray51 = commandLine49.getOptionValues("hi!");
        java.lang.String str54 = commandLine49.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str56 = commandLine49.getOptionValue("arg");
        java.lang.String[] strArray57 = commandLine49.getArgs();
        java.lang.String[] strArray59 = posixParser42.flatten(options48, strArray57, false);
        boolean boolean61 = options48.hasOption("arg");
        java.util.Collection collection62 = options48.getOptions();
        org.apache.commons.cli.CommandLine commandLine63 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray65 = commandLine63.getOptionValues("hi!");
        java.lang.String[] strArray66 = commandLine63.getArgs();
        java.util.Iterator iterator67 = commandLine63.iterator();
        boolean boolean69 = commandLine63.hasOption("[ option: 4  :: null ]");
        java.lang.String str72 = commandLine63.getOptionValue("[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        java.lang.String[] strArray73 = commandLine63.getArgs();
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options48, strArray73, properties74, true);
        org.apache.commons.cli.Option option78 = org.apache.commons.cli.OptionBuilder.create('4');
        option78.setOptionalArg(false);
        int int81 = option78.getArgs();
        char char82 = option78.getValueSeparator();
        java.util.ListIterator listIterator83 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option78, listIterator83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNull(strArray51);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str54, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(collection62);
        org.junit.Assert.assertNull(strArray65);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(iterator67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" + "'", str72, "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertNotNull(option78);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertTrue("'" + char82 + "' != '" + '\000' + "'", char82 == '\000');
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0553");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.util.Iterator iterator3 = commandLine0.iterator();
        java.lang.String[] strArray5 = commandLine0.getOptionValues('a');
        java.lang.String str7 = commandLine0.getOptionValue('a');
        java.lang.String str9 = commandLine0.getOptionValue('4');
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(iterator3);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0411");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue("hi!");
        boolean boolean7 = commandLine0.hasOption("");
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        boolean boolean14 = option10.hasValueSeparator();
        boolean boolean15 = option10.hasOptionalArg();
        java.lang.String str16 = option10.getOpt();
        commandLine0.addOption(option10);
        java.lang.String str19 = commandLine0.getOptionValue("org.apache.commons.cli.MissingArgumentException: [ option:    :: null ]");
        java.util.List list20 = commandLine0.getArgList();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "4" + "'", str16, "4");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(list20);
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1525");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        java.lang.String[] strArray37 = commandLine35.getOptionValues("org.apache.commons.cli.MissingOptionException: hi!");
        java.lang.String str40 = commandLine35.getOptionValue("[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]", "org.apache.commons.cli.MissingOptionException: ");
        java.lang.Object obj42 = commandLine35.getOptionObject("org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNull(strArray37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "org.apache.commons.cli.MissingOptionException: " + "'", str40, "org.apache.commons.cli.MissingOptionException: ");
        org.junit.Assert.assertNull(obj42);
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1653");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue("hi!");
        org.apache.commons.cli.Option option7 = org.apache.commons.cli.OptionBuilder.create(' ');
        commandLine0.addOption(option7);
        java.lang.String[] strArray10 = commandLine0.getOptionValues("[ option: 4  :: null ]");
        java.lang.Object obj12 = commandLine0.getOptionObject("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.Object obj14 = commandLine0.getOptionObject("[ Options: [ short {4=[ option: 4  :: null ::  ]} ] [ long {} ]");
        java.lang.Object obj16 = commandLine0.getOptionObject('4');
        java.util.List list17 = commandLine0.getArgList();
        java.lang.String[] strArray19 = commandLine0.getOptionValues("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.ParseException: [ option:    :: null ]");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(option7);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(list17);
        org.junit.Assert.assertNull(strArray19);
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0494");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Option[] optionArray40 = commandLine39.getOptions();
        java.util.Iterator iterator41 = commandLine39.iterator();
        java.lang.String str43 = commandLine39.getOptionValue('a');
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        char char46 = option45.getValueSeparator();
        boolean boolean47 = option45.hasArg();
        boolean boolean48 = option45.hasOptionalArg();
        java.lang.Object obj49 = option45.getType();
        option45.setValueSeparator('#');
        java.lang.String str53 = option45.getValue("[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]");
        int int54 = option45.getId();
        org.apache.commons.cli.OptionBuilder optionBuilder55 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) option45);
        commandLine39.addOption(option45);
        java.lang.String str58 = option45.getValue(32);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(optionArray40);
        org.junit.Assert.assertNotNull(iterator41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertTrue("'" + char46 + "' != '" + '\000' + "'", char46 == '\000');
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]" + "'", str53, "[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 52 + "'", int54 == 52);
        org.junit.Assert.assertNotNull(optionBuilder55);
        org.junit.Assert.assertNull(str58);
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0458");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue('\000');
        java.lang.Object obj7 = commandLine0.getOptionObject("");
        java.lang.Object obj9 = commandLine0.getOptionObject("[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]");
        java.util.Iterator iterator10 = commandLine0.iterator();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(iterator10);
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1765");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        java.util.List list36 = commandLine35.getArgList();
        java.lang.String[] strArray37 = commandLine35.getArgs();
        java.lang.String[] strArray38 = commandLine35.getArgs();
        commandLine35.addArg("");
        boolean boolean42 = commandLine35.hasOption("");
        java.util.Iterator iterator43 = commandLine35.iterator();
        java.lang.String str45 = commandLine35.getOptionValue('a');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(list36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(iterator43);
        org.junit.Assert.assertNull(str45);
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0731");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        java.util.List list53 = options22.getRequiredOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(list53);
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1528");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create('4');
        java.lang.String str3 = option1.getValue("arg");
        org.apache.commons.cli.MissingOptionException missingOptionException5 = new org.apache.commons.cli.MissingOptionException("hi!");
        boolean boolean6 = option1.equals((java.lang.Object) "hi!");
        java.lang.String str7 = option1.toString();
        boolean boolean8 = option1.isRequired();
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray11 = commandLine9.getOptionValues("hi!");
        java.lang.String[] strArray12 = commandLine9.getArgs();
        java.lang.String str14 = commandLine9.getOptionValue('\000');
        java.lang.Object obj16 = commandLine9.getOptionObject("");
        java.lang.String[] strArray18 = commandLine9.getOptionValues('\000');
        java.lang.String str20 = commandLine9.getOptionValue('\000');
        java.lang.String str23 = commandLine9.getOptionValue('=', "[ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]");
        boolean boolean25 = commandLine9.hasOption('=');
        option1.setType((java.lang.Object) boolean25);
        option1.setArgs((int) '=');
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "arg" + "'", str3, "arg");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[ option: 4  :: null ]" + "'", str7, "[ option: 4  :: null ]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(strArray18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]" + "'", str23, "[ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0830");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue("hi!");
        boolean boolean7 = commandLine0.hasOption("");
        java.lang.String str10 = commandLine0.getOptionValue("[ option: 4  :: null ]", "org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.Option[] optionArray11 = commandLine0.getOptions();
        java.lang.Object obj13 = commandLine0.getOptionObject('=');
        java.lang.String str16 = commandLine0.getOptionValue(' ', "");
        java.lang.Object obj18 = commandLine0.getOptionObject('4');
        java.lang.String str20 = commandLine0.getOptionValue('a');
        java.util.Iterator iterator21 = commandLine0.iterator();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "org.apache.commons.cli.MissingOptionException: hi!" + "'", str10, "org.apache.commons.cli.MissingOptionException: hi!");
        org.junit.Assert.assertNotNull(optionArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(iterator21);
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0398");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create('4');
        option1.setDescription("");
        boolean boolean4 = option1.hasValueSeparator();
        java.util.List list5 = option1.getValuesList();
        int int6 = option1.getArgs();
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        option1.setType((java.lang.Object) commandLine7);
        char char11 = option1.getValueSeparator();
        option1.setArgName("[ option: 4  :: null ::  ]");
        java.lang.String str14 = option1.getOpt();
        java.lang.Object obj15 = null;
        option1.setType(obj15);
        option1.setRequired(true);
        org.apache.commons.cli.OptionBuilder optionBuilder20 = org.apache.commons.cli.OptionBuilder.withDescription("[ option: 4  ::  :: [] ]");
        option1.setType((java.lang.Object) optionBuilder20);
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(list5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertTrue("'" + char11 + "' != '" + '\000' + "'", char11 == '\000');
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "4" + "'", str14, "4");
        org.junit.Assert.assertNotNull(optionBuilder20);
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0195");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        boolean boolean19 = options6.hasOption("arg");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options23 = options6.addOption("org.apache.commons.cli.MissingOptionException: [ option: 4  :: null ]", true, "[ option:  +ARG ::  ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '.'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0222");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken("[ option: 4  :: null ::  ]", true);
        posixParser0.burstToken("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", false);
        org.apache.commons.cli.PosixParser posixParser42 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        option45.setDescription("");
        org.apache.commons.cli.Options options48 = options43.addOption(option45);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        option52.setDescription("");
        org.apache.commons.cli.Options options55 = options50.addOption(option52);
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray58 = commandLine56.getOptionValues("hi!");
        java.lang.String[] strArray59 = commandLine56.getArgs();
        java.util.Properties properties60 = null;
        org.apache.commons.cli.CommandLine commandLine61 = posixParser49.parse(options50, strArray59, properties60);
        org.apache.commons.cli.CommandLine commandLine63 = posixParser42.parse(options48, strArray59, false);
        java.util.Collection collection64 = options48.getOptionGroups();
        org.apache.commons.cli.PosixParser posixParser65 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options66 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option68 = org.apache.commons.cli.OptionBuilder.create('4');
        option68.setDescription("");
        org.apache.commons.cli.Options options71 = options66.addOption(option68);
        org.apache.commons.cli.CommandLine commandLine72 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray74 = commandLine72.getOptionValues("hi!");
        java.lang.String str77 = commandLine72.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str79 = commandLine72.getOptionValue("arg");
        java.lang.String[] strArray80 = commandLine72.getArgs();
        java.lang.String[] strArray82 = posixParser65.flatten(options71, strArray80, false);
        org.apache.commons.cli.CommandLine commandLine84 = posixParser0.parse(options48, strArray80, false);
        org.apache.commons.cli.Option[] optionArray85 = commandLine84.getOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNull(strArray58);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(commandLine61);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(collection64);
        org.junit.Assert.assertNotNull(option68);
        org.junit.Assert.assertNotNull(options71);
        org.junit.Assert.assertNull(strArray74);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str77, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(commandLine84);
        org.junit.Assert.assertNotNull(optionArray85);
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1247");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        java.util.Collection collection46 = options40.getOptionGroups();
        org.apache.commons.cli.Options options50 = options40.addOption("", false, "arg");
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup54 = options51.getOptionGroup(option53);
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        char char57 = option56.getValueSeparator();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create('4');
        option59.setDescription("");
        option56.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup63 = options51.getOptionGroup(option56);
        boolean boolean64 = option56.hasArgName();
        org.apache.commons.cli.Options options65 = options40.addOption(option56);
        org.apache.commons.cli.CommandLine commandLine66 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray68 = commandLine66.getOptionValues("hi!");
        java.lang.String str71 = commandLine66.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str73 = commandLine66.getOptionValue("arg");
        java.lang.String[] strArray74 = commandLine66.getArgs();
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options40, strArray74, properties75);
        java.util.List list77 = options40.helpOptions();
        java.util.Collection collection78 = options40.getOptionGroups();
        java.util.Collection collection79 = options40.getOptionGroups();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertNotNull(options50);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertTrue("'" + char57 + "' != '" + '\000' + "'", char57 == '\000');
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertNull(optionGroup63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(options65);
        org.junit.Assert.assertNull(strArray68);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str71, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertNotNull(list77);
        org.junit.Assert.assertNotNull(collection78);
        org.junit.Assert.assertNotNull(collection79);
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0684");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        boolean boolean37 = commandLine35.hasOption('4');
        boolean boolean39 = commandLine35.hasOption("[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.Object obj41 = commandLine35.getOptionObject("");
        boolean boolean43 = commandLine35.hasOption(' ');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1403");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine8 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine8.getOptionValues("hi!");
        java.lang.String str13 = commandLine8.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str15 = commandLine8.getOptionValue("arg");
        java.lang.String[] strArray16 = commandLine8.getArgs();
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser0.parse(options1, strArray16, properties17);
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option22 = org.apache.commons.cli.OptionBuilder.create('4');
        option22.setDescription("");
        org.apache.commons.cli.Options options25 = options20.addOption(option22);
        org.apache.commons.cli.CommandLine commandLine26 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray28 = commandLine26.getOptionValues("hi!");
        java.lang.String[] strArray29 = commandLine26.getArgs();
        java.util.Properties properties30 = null;
        org.apache.commons.cli.CommandLine commandLine31 = posixParser19.parse(options20, strArray29, properties30);
        org.apache.commons.cli.PosixParser posixParser32 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options33 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option35 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup36 = options33.getOptionGroup(option35);
        org.apache.commons.cli.Option option38 = org.apache.commons.cli.OptionBuilder.create('4');
        char char39 = option38.getValueSeparator();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create('4');
        option41.setDescription("");
        option38.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup45 = options33.getOptionGroup(option38);
        boolean boolean47 = options33.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser48 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option51 = org.apache.commons.cli.OptionBuilder.create('4');
        option51.setDescription("");
        org.apache.commons.cli.Options options54 = options49.addOption(option51);
        org.apache.commons.cli.CommandLine commandLine55 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray57 = commandLine55.getOptionValues("hi!");
        java.lang.String str60 = commandLine55.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str62 = commandLine55.getOptionValue("arg");
        java.lang.String[] strArray63 = commandLine55.getArgs();
        java.lang.String[] strArray65 = posixParser48.flatten(options54, strArray63, false);
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser32.parse(options33, strArray65, properties66);
        java.util.List list68 = commandLine67.getArgList();
        java.lang.String[] strArray69 = commandLine67.getArgs();
        java.lang.String[] strArray71 = posixParser0.flatten(options20, strArray69, false);
        org.apache.commons.cli.Options options76 = options20.addOption("", "[ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ]", true, "org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]");
        java.util.List list77 = options76.getRequiredOptions();
        java.lang.String str78 = options76.toString();
        org.apache.commons.cli.OptionGroup optionGroup79 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options80 = options76.addOptionGroup(optionGroup79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str13, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNotNull(option22);
        org.junit.Assert.assertNotNull(options25);
        org.junit.Assert.assertNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(option35);
        org.junit.Assert.assertNull(optionGroup36);
        org.junit.Assert.assertNotNull(option38);
        org.junit.Assert.assertTrue("'" + char39 + "' != '" + '\000' + "'", char39 == '\000');
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(option51);
        org.junit.Assert.assertNotNull(options54);
        org.junit.Assert.assertNull(strArray57);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str60, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNotNull(list68);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(options76);
        org.junit.Assert.assertNotNull(list77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "[ Options: [ short {=[ option:  [ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ] +ARG :: org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ] ], 4=[ option: 4  ::  ]} ] [ long {[ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ]=[ option:  [ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ] +ARG :: org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ] ]} ]" + "'", str78, "[ Options: [ short {=[ option:  [ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ] +ARG :: org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ] ], 4=[ option: 4  ::  ]} ] [ long {[ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ]=[ option:  [ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ] +ARG :: org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ] ]} ]");
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1322");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue('\000');
        boolean boolean7 = commandLine0.hasOption('#');
        java.lang.String str9 = commandLine0.getOptionValue("[ Options: [ short {} ] [ long {} ]");
        java.lang.String str11 = commandLine0.getOptionValue("org.apache.commons.cli.MissingOptionException: [ option: 4  :: hi! ]");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0806");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.util.Iterator iterator1 = commandLine0.iterator();
        java.util.Iterator iterator2 = commandLine0.iterator();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = org.apache.commons.cli.OptionBuilder.create('4');
        option5.setDescription("");
        org.apache.commons.cli.Options options8 = options3.addOption(option5);
        char char9 = option5.getValueSeparator();
        boolean boolean10 = option5.hasArg();
        java.lang.String str11 = option5.getLongOpt();
        int int12 = option5.getId();
        java.lang.String[] strArray13 = option5.getValues();
        commandLine0.addOption(option5);
        java.util.Iterator iterator15 = commandLine0.iterator();
        java.lang.String str17 = commandLine0.getOptionValue("");
        java.lang.String str19 = commandLine0.getOptionValue('=');
        org.junit.Assert.assertNotNull(iterator1);
        org.junit.Assert.assertNotNull(iterator2);
        org.junit.Assert.assertNotNull(option5);
        org.junit.Assert.assertNotNull(options8);
        org.junit.Assert.assertTrue("'" + char9 + "' != '" + '\000' + "'", char9 == '\000');
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNull(strArray13);
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0420");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine8 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine8.getOptionValues("hi!");
        java.lang.String str13 = commandLine8.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str15 = commandLine8.getOptionValue("arg");
        java.lang.String[] strArray16 = commandLine8.getArgs();
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser0.parse(options1, strArray16, properties17);
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option21 = org.apache.commons.cli.OptionBuilder.create('4');
        option21.setDescription("");
        org.apache.commons.cli.Options options24 = options19.addOption(option21);
        char char25 = option21.getValueSeparator();
        option21.setArgName("[ option: 4 hi!  ::  ]");
        java.util.ListIterator listIterator28 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option21, listIterator28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str13, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNotNull(option21);
        org.junit.Assert.assertNotNull(options24);
        org.junit.Assert.assertTrue("'" + char25 + "' != '" + '\000' + "'", char25 == '\000');
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0653");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String str5 = commandLine0.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        commandLine0.addArg("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]");
        java.lang.String[] strArray9 = commandLine0.getOptionValues('4');
        java.lang.String[] strArray10 = commandLine0.getArgs();
        java.lang.String str13 = commandLine0.getOptionValue("[ option: 4  :: null :: [ option: 4  :: null ] ]", "[ option: arg [ option: 4  :: null ] +ARG :: 4 ]");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str5, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[ option: arg [ option: 4  :: null ] +ARG :: 4 ]" + "'", str13, "[ option: arg [ option: 4  :: null ] +ARG :: 4 ]");
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0907");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create('4');
        option1.setArgs((int) (short) 100);
        option1.setArgName("[ option: 4  :: null ]");
        option1.setArgs(10);
        org.apache.commons.cli.CommandLine commandLine8 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine8.getOptionValues("hi!");
        java.lang.String[] strArray11 = commandLine8.getArgs();
        java.lang.String str13 = commandLine8.getOptionValue("hi!");
        boolean boolean15 = commandLine8.hasOption("");
        commandLine8.addArg("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        boolean boolean19 = commandLine8.hasOption("[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
        org.apache.commons.cli.Option option21 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str23 = option21.getValue("");
        commandLine8.addOption(option21);
        java.util.List list25 = commandLine8.getArgList();
        java.lang.String[] strArray27 = commandLine8.getOptionValues("[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]");
        option1.setType((java.lang.Object) commandLine8);
        boolean boolean29 = option1.hasArgs();
        option1.setArgName("[ Options: [ short {=[ option:  [ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ] +ARG :: org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ] ], 4=[ option: 4  ::  ]} ] [ long {[ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ]=[ option:  [ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ] +ARG :: org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ] ]} ]");
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(option21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1733");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Option[] optionArray40 = commandLine39.getOptions();
        java.lang.String[] strArray42 = commandLine39.getOptionValues('a');
        org.apache.commons.cli.Option[] optionArray43 = commandLine39.getOptions();
        java.lang.String str46 = commandLine39.getOptionValue('=', "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4 org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!  ::  ]} ] [ long {org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!=[ option: 4 org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!  ::  ]} ]");
        java.lang.String str48 = commandLine39.getOptionValue('#');
        org.apache.commons.cli.CommandLine commandLine49 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray51 = commandLine49.getOptionValues("hi!");
        java.lang.String[] strArray52 = commandLine49.getArgs();
        java.lang.String str54 = commandLine49.getOptionValue("hi!");
        boolean boolean56 = commandLine49.hasOption("");
        java.lang.String str59 = commandLine49.getOptionValue("[ option: 4  :: null ]", "org.apache.commons.cli.MissingOptionException: hi!");
        java.lang.String[] strArray61 = commandLine49.getOptionValues('4');
        java.lang.String[] strArray63 = commandLine49.getOptionValues('a');
        org.apache.commons.cli.Option option65 = org.apache.commons.cli.OptionBuilder.create(' ');
        boolean boolean66 = option65.hasArgName();
        boolean boolean67 = option65.hasArgName();
        commandLine49.addOption(option65);
        boolean boolean69 = option65.hasArgName();
        char char70 = option65.getValueSeparator();
        java.lang.String str71 = option65.getValue();
        commandLine39.addOption(option65);
        java.lang.String str73 = option65.toString();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(optionArray40);
        org.junit.Assert.assertNull(strArray42);
        org.junit.Assert.assertNotNull(optionArray43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4 org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!  ::  ]} ] [ long {org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!=[ option: 4 org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!  ::  ]} ]" + "'", str46, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4 org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!  ::  ]} ] [ long {org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!=[ option: 4 org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!  ::  ]} ]");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(strArray51);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "org.apache.commons.cli.MissingOptionException: hi!" + "'", str59, "org.apache.commons.cli.MissingOptionException: hi!");
        org.junit.Assert.assertNull(strArray61);
        org.junit.Assert.assertNull(strArray63);
        org.junit.Assert.assertNotNull(option65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + char70 + "' != '" + '\000' + "'", char70 == '\000');
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "[ option:    :: null ]" + "'", str73, "[ option:    :: null ]");
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0823");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.util.Iterator iterator3 = commandLine0.iterator();
        java.lang.String[] strArray5 = commandLine0.getOptionValues('a');
        java.util.Iterator iterator6 = commandLine0.iterator();
        boolean boolean8 = commandLine0.hasOption("");
        boolean boolean10 = commandLine0.hasOption('4');
        org.apache.commons.cli.Option[] optionArray11 = commandLine0.getOptions();
        java.lang.String str13 = commandLine0.getOptionValue('4');
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(iterator3);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(optionArray11);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0875");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        java.util.Collection collection22 = options6.getOptions();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create('4');
        char char25 = option24.getValueSeparator();
        org.apache.commons.cli.Options options26 = options6.addOption(option24);
        org.apache.commons.cli.Option option28 = org.apache.commons.cli.OptionBuilder.create('4');
        option28.setArgs((int) (short) 100);
        option28.setArgName("[ option: 4  :: null ]");
        java.lang.String str33 = option28.getLongOpt();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option36 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup37 = options34.getOptionGroup(option36);
        org.apache.commons.cli.Option option39 = org.apache.commons.cli.OptionBuilder.create('4');
        org.apache.commons.cli.OptionGroup optionGroup40 = options34.getOptionGroup(option39);
        option28.setType((java.lang.Object) options34);
        org.apache.commons.cli.Options options42 = options6.addOption(option28);
        org.apache.commons.cli.Option option44 = options42.getOption("[ option: 4  :: null ::  ]");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options48 = options42.addOption("[ option: a  :: null ]", true, "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(collection22);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertTrue("'" + char25 + "' != '" + '\000' + "'", char25 == '\000');
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(option28);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(option36);
        org.junit.Assert.assertNull(optionGroup37);
        org.junit.Assert.assertNotNull(option39);
        org.junit.Assert.assertNull(optionGroup40);
        org.junit.Assert.assertNotNull(options42);
        org.junit.Assert.assertNull(option44);
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0301");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.util.Iterator iterator4 = commandLine0.iterator();
        boolean boolean6 = commandLine0.hasOption("[ option: 4  :: null ]");
        boolean boolean8 = commandLine0.hasOption('=');
        java.util.List list9 = commandLine0.getArgList();
        java.lang.String str12 = commandLine0.getOptionValue(' ', "[ option:    :: null :: arg ]");
        java.util.Iterator iterator13 = commandLine0.iterator();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(iterator4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ option:    :: null :: arg ]" + "'", str12, "[ option:    :: null :: arg ]");
        org.junit.Assert.assertNotNull(iterator13);
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1241");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue("hi!");
        boolean boolean7 = commandLine0.hasOption("");
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        boolean boolean14 = option10.hasValueSeparator();
        boolean boolean15 = option10.hasOptionalArg();
        java.lang.String str16 = option10.getOpt();
        commandLine0.addOption(option10);
        java.lang.String str18 = option10.getArgName();
        int int19 = option10.getId();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "4" + "'", str16, "4");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "arg" + "'", str18, "arg");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0729");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        java.util.Collection collection22 = options6.getOptionGroups();
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create('4');
        option25.setDescription("");
        org.apache.commons.cli.Options options28 = options23.addOption(option25);
        java.util.Collection collection29 = options23.getOptionGroups();
        org.apache.commons.cli.Options options33 = options23.addOption("", false, "arg");
        java.util.Collection collection34 = options23.getOptionGroups();
        org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option37 = org.apache.commons.cli.OptionBuilder.create('4');
        option37.setDescription("");
        org.apache.commons.cli.Options options40 = options35.addOption(option37);
        option37.setValueSeparator(' ');
        org.apache.commons.cli.OptionGroup optionGroup43 = options23.getOptionGroup(option37);
        option37.setRequired(false);
        org.apache.commons.cli.CommandLine commandLine46 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray48 = commandLine46.getOptionValues("hi!");
        java.lang.String[] strArray49 = commandLine46.getArgs();
        boolean boolean50 = option37.equals((java.lang.Object) strArray49);
        org.apache.commons.cli.OptionGroup optionGroup51 = options6.getOptionGroup(option37);
        org.apache.commons.cli.Options options56 = options6.addOption("arg", "org.apache.commons.cli.UnrecognizedOptionException: hi!", false, "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.Options options60 = options6.addOption(" ", false, "hi!");
        java.util.List list61 = options6.getRequiredOptions();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options66 = options6.addOption("[ option: 4 arg  :: null ]", "org.apache.commons.cli.MissingArgumentException: [ option: 4  ::  ]", false, "[ option: 4  :: null :: [ option:   [ option: 4  ::  ]  :: null ] ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(collection22);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(collection29);
        org.junit.Assert.assertNotNull(options33);
        org.junit.Assert.assertNotNull(collection34);
        org.junit.Assert.assertNotNull(option37);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNull(strArray48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(options56);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(list61);
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0674");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create('4');
        char char2 = option1.getValueSeparator();
        boolean boolean3 = option1.hasArg();
        org.apache.commons.cli.PosixParser posixParser4 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options5 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option7 = org.apache.commons.cli.OptionBuilder.create('4');
        option7.setDescription("");
        org.apache.commons.cli.Options options10 = options5.addOption(option7);
        org.apache.commons.cli.PosixParser posixParser11 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option14 = org.apache.commons.cli.OptionBuilder.create('4');
        option14.setDescription("");
        org.apache.commons.cli.Options options17 = options12.addOption(option14);
        org.apache.commons.cli.CommandLine commandLine18 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray20 = commandLine18.getOptionValues("hi!");
        java.lang.String[] strArray21 = commandLine18.getArgs();
        java.util.Properties properties22 = null;
        org.apache.commons.cli.CommandLine commandLine23 = posixParser11.parse(options12, strArray21, properties22);
        org.apache.commons.cli.CommandLine commandLine25 = posixParser4.parse(options10, strArray21, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option28 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup29 = options26.getOptionGroup(option28);
        org.apache.commons.cli.Option option31 = org.apache.commons.cli.OptionBuilder.create('4');
        char char32 = option31.getValueSeparator();
        org.apache.commons.cli.Option option34 = org.apache.commons.cli.OptionBuilder.create('4');
        option34.setDescription("");
        option31.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup38 = options26.getOptionGroup(option31);
        boolean boolean40 = options26.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser41 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options42 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create('4');
        option44.setDescription("");
        org.apache.commons.cli.Options options47 = options42.addOption(option44);
        org.apache.commons.cli.CommandLine commandLine48 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray50 = commandLine48.getOptionValues("hi!");
        java.lang.String[] strArray51 = commandLine48.getArgs();
        java.util.Properties properties52 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser41.parse(options42, strArray51, properties52);
        java.util.Properties properties54 = null;
        org.apache.commons.cli.CommandLine commandLine56 = posixParser4.parse(options26, strArray51, properties54, true);
        org.apache.commons.cli.PosixParser posixParser57 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options58 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option60 = org.apache.commons.cli.OptionBuilder.create('4');
        option60.setDescription("");
        org.apache.commons.cli.Options options63 = options58.addOption(option60);
        org.apache.commons.cli.CommandLine commandLine64 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray66 = commandLine64.getOptionValues("hi!");
        java.lang.String str69 = commandLine64.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str71 = commandLine64.getOptionValue("arg");
        java.lang.String[] strArray72 = commandLine64.getArgs();
        java.lang.String[] strArray74 = posixParser57.flatten(options63, strArray72, false);
        org.apache.commons.cli.PosixParser posixParser75 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options76 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option78 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup79 = options76.getOptionGroup(option78);
        org.apache.commons.cli.CommandLine commandLine80 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray82 = commandLine80.getOptionValues("hi!");
        java.lang.String str85 = commandLine80.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str87 = commandLine80.getOptionValue("arg");
        java.lang.String[] strArray88 = commandLine80.getArgs();
        java.lang.String[] strArray90 = posixParser75.flatten(options76, strArray88, true);
        org.apache.commons.cli.CommandLine commandLine92 = posixParser4.parse(options63, strArray88, false);
        boolean boolean93 = option1.equals((java.lang.Object) commandLine92);
        java.util.List list94 = option1.getValuesList();
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertTrue("'" + char2 + "' != '" + '\000' + "'", char2 == '\000');
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(option7);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(option14);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(commandLine23);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(option28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(option31);
        org.junit.Assert.assertTrue("'" + char32 + "' != '" + '\000' + "'", char32 == '\000');
        org.junit.Assert.assertNotNull(option34);
        org.junit.Assert.assertNull(optionGroup38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertNotNull(options47);
        org.junit.Assert.assertNull(strArray50);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(commandLine56);
        org.junit.Assert.assertNotNull(option60);
        org.junit.Assert.assertNotNull(options63);
        org.junit.Assert.assertNull(strArray66);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str69, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(option78);
        org.junit.Assert.assertNull(optionGroup79);
        org.junit.Assert.assertNull(strArray82);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str85, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertNotNull(commandLine92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(list94);
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0162");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken("[ option: 4  :: null ::  ]", true);
        posixParser0.burstToken("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", false);
        org.apache.commons.cli.PosixParser posixParser42 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        option45.setDescription("");
        org.apache.commons.cli.Options options48 = options43.addOption(option45);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        option52.setDescription("");
        org.apache.commons.cli.Options options55 = options50.addOption(option52);
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray58 = commandLine56.getOptionValues("hi!");
        java.lang.String[] strArray59 = commandLine56.getArgs();
        java.util.Properties properties60 = null;
        org.apache.commons.cli.CommandLine commandLine61 = posixParser49.parse(options50, strArray59, properties60);
        org.apache.commons.cli.CommandLine commandLine63 = posixParser42.parse(options48, strArray59, false);
        java.util.Collection collection64 = options48.getOptionGroups();
        org.apache.commons.cli.PosixParser posixParser65 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options66 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option68 = org.apache.commons.cli.OptionBuilder.create('4');
        option68.setDescription("");
        org.apache.commons.cli.Options options71 = options66.addOption(option68);
        org.apache.commons.cli.CommandLine commandLine72 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray74 = commandLine72.getOptionValues("hi!");
        java.lang.String str77 = commandLine72.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str79 = commandLine72.getOptionValue("arg");
        java.lang.String[] strArray80 = commandLine72.getArgs();
        java.lang.String[] strArray82 = posixParser65.flatten(options71, strArray80, false);
        org.apache.commons.cli.CommandLine commandLine84 = posixParser0.parse(options48, strArray80, false);
        java.lang.Object obj86 = commandLine84.getOptionObject('4');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNull(strArray58);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(commandLine61);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(collection64);
        org.junit.Assert.assertNotNull(option68);
        org.junit.Assert.assertNotNull(options71);
        org.junit.Assert.assertNull(strArray74);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str77, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(commandLine84);
        org.junit.Assert.assertNull(obj86);
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0949");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        org.apache.commons.cli.Option option36 = org.apache.commons.cli.OptionBuilder.create('4');
        boolean boolean37 = option36.isRequired();
        org.apache.commons.cli.Options options38 = options22.addOption(option36);
        java.util.List list39 = options38.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser40 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options41 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option43 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup44 = options41.getOptionGroup(option43);
        org.apache.commons.cli.Option option46 = org.apache.commons.cli.OptionBuilder.create('4');
        char char47 = option46.getValueSeparator();
        org.apache.commons.cli.Option option49 = org.apache.commons.cli.OptionBuilder.create('4');
        option49.setDescription("");
        option46.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup53 = options41.getOptionGroup(option46);
        boolean boolean55 = options41.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create('4');
        option59.setDescription("");
        org.apache.commons.cli.Options options62 = options57.addOption(option59);
        org.apache.commons.cli.CommandLine commandLine63 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray65 = commandLine63.getOptionValues("hi!");
        java.lang.String str68 = commandLine63.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str70 = commandLine63.getOptionValue("arg");
        java.lang.String[] strArray71 = commandLine63.getArgs();
        java.lang.String[] strArray73 = posixParser56.flatten(options62, strArray71, false);
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine75 = posixParser40.parse(options41, strArray73, properties74);
        java.util.List list76 = commandLine75.getArgList();
        java.lang.String[] strArray77 = commandLine75.getArgs();
        java.util.Properties properties78 = null;
        org.apache.commons.cli.CommandLine commandLine80 = posixParser0.parse(options38, strArray77, properties78, false);
        org.apache.commons.cli.Options options81 = null;
        java.lang.String[] strArray82 = null;
        java.util.Properties properties83 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.CommandLine commandLine84 = posixParser0.parse(options81, strArray82, properties83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertNotNull(option36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(list39);
        org.junit.Assert.assertNotNull(option43);
        org.junit.Assert.assertNull(optionGroup44);
        org.junit.Assert.assertNotNull(option46);
        org.junit.Assert.assertTrue("'" + char47 + "' != '" + '\000' + "'", char47 == '\000');
        org.junit.Assert.assertNotNull(option49);
        org.junit.Assert.assertNull(optionGroup53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertNotNull(options62);
        org.junit.Assert.assertNull(strArray65);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str68, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine75);
        org.junit.Assert.assertNotNull(list76);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(commandLine80);
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0175");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create('4');
        java.lang.String str3 = option1.getValue("arg");
        org.apache.commons.cli.MissingOptionException missingOptionException5 = new org.apache.commons.cli.MissingOptionException("hi!");
        boolean boolean6 = option1.equals((java.lang.Object) "hi!");
        java.lang.String str7 = option1.toString();
        java.lang.String str9 = option1.getValue(100);
        java.lang.String str10 = option1.getKey();
        org.apache.commons.cli.PosixParser posixParser11 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option14 = org.apache.commons.cli.OptionBuilder.create('4');
        option14.setDescription("");
        org.apache.commons.cli.Options options17 = options12.addOption(option14);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option21 = org.apache.commons.cli.OptionBuilder.create('4');
        option21.setDescription("");
        org.apache.commons.cli.Options options24 = options19.addOption(option21);
        org.apache.commons.cli.CommandLine commandLine25 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray27 = commandLine25.getOptionValues("hi!");
        java.lang.String[] strArray28 = commandLine25.getArgs();
        java.util.Properties properties29 = null;
        org.apache.commons.cli.CommandLine commandLine30 = posixParser18.parse(options19, strArray28, properties29);
        org.apache.commons.cli.CommandLine commandLine32 = posixParser11.parse(options17, strArray28, false);
        org.apache.commons.cli.Options options33 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option35 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup36 = options33.getOptionGroup(option35);
        org.apache.commons.cli.Option option38 = org.apache.commons.cli.OptionBuilder.create('4');
        char char39 = option38.getValueSeparator();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create('4');
        option41.setDescription("");
        option38.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup45 = options33.getOptionGroup(option38);
        boolean boolean47 = options33.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser48 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option51 = org.apache.commons.cli.OptionBuilder.create('4');
        option51.setDescription("");
        org.apache.commons.cli.Options options54 = options49.addOption(option51);
        org.apache.commons.cli.CommandLine commandLine55 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray57 = commandLine55.getOptionValues("hi!");
        java.lang.String[] strArray58 = commandLine55.getArgs();
        java.util.Properties properties59 = null;
        org.apache.commons.cli.CommandLine commandLine60 = posixParser48.parse(options49, strArray58, properties59);
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine63 = posixParser11.parse(options33, strArray58, properties61, true);
        org.apache.commons.cli.Options options64 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option66 = org.apache.commons.cli.OptionBuilder.create('4');
        option66.setDescription("");
        org.apache.commons.cli.Options options69 = options64.addOption(option66);
        java.util.Collection collection70 = options64.getOptions();
        java.lang.String[] strArray71 = null;
        org.apache.commons.cli.CommandLine commandLine73 = posixParser11.parse(options64, strArray71, true);
        org.apache.commons.cli.PosixParser posixParser74 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options75 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option77 = org.apache.commons.cli.OptionBuilder.create('4');
        option77.setDescription("");
        org.apache.commons.cli.Options options80 = options75.addOption(option77);
        org.apache.commons.cli.CommandLine commandLine81 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray83 = commandLine81.getOptionValues("hi!");
        java.lang.String[] strArray84 = commandLine81.getArgs();
        java.util.Properties properties85 = null;
        org.apache.commons.cli.CommandLine commandLine86 = posixParser74.parse(options75, strArray84, properties85);
        java.lang.String[] strArray89 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]", "hi!" };
        java.util.Properties properties90 = null;
        org.apache.commons.cli.CommandLine commandLine92 = posixParser11.parse(options75, strArray89, properties90, true);
        option1.setType((java.lang.Object) properties90);
        java.lang.String str94 = option1.getDescription();
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "arg" + "'", str3, "arg");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[ option: 4  :: null ]" + "'", str7, "[ option: 4  :: null ]");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "4" + "'", str10, "4");
        org.junit.Assert.assertNotNull(option14);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(option21);
        org.junit.Assert.assertNotNull(options24);
        org.junit.Assert.assertNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(commandLine30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(option35);
        org.junit.Assert.assertNull(optionGroup36);
        org.junit.Assert.assertNotNull(option38);
        org.junit.Assert.assertTrue("'" + char39 + "' != '" + '\000' + "'", char39 == '\000');
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(option51);
        org.junit.Assert.assertNotNull(options54);
        org.junit.Assert.assertNull(strArray57);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(commandLine60);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(option66);
        org.junit.Assert.assertNotNull(options69);
        org.junit.Assert.assertNotNull(collection70);
        org.junit.Assert.assertNotNull(commandLine73);
        org.junit.Assert.assertNotNull(option77);
        org.junit.Assert.assertNotNull(options80);
        org.junit.Assert.assertNull(strArray83);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(commandLine86);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(commandLine92);
        org.junit.Assert.assertNull(str94);
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1754");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue("hi!");
        boolean boolean7 = commandLine0.hasOption("");
        commandLine0.addArg("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        boolean boolean11 = commandLine0.hasOption("[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create('4');
        option13.setDescription("");
        org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = org.apache.commons.cli.OptionBuilder.create('4');
        option18.setDescription("");
        org.apache.commons.cli.Options options21 = options16.addOption(option18);
        boolean boolean22 = option13.equals((java.lang.Object) option18);
        option18.setDescription("[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
        commandLine0.addOption(option18);
        boolean boolean26 = option18.hasArgs();
        boolean boolean27 = option18.hasArg();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertNotNull(option18);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0506");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create('4');
        option1.setArgs((int) (short) 100);
        option1.setArgName("[ option: 4  :: null ]");
        java.lang.String str6 = option1.getLongOpt();
        boolean boolean7 = option1.hasOptionalArg();
        boolean boolean8 = option1.hasArgs();
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        boolean boolean11 = commandLine9.hasOption('4');
        boolean boolean12 = option1.equals((java.lang.Object) '4');
        java.lang.String[] strArray13 = option1.getValues();
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(strArray13);
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0805");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option38 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup39 = options36.getOptionGroup(option38);
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create('4');
        char char42 = option41.getValueSeparator();
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create('4');
        option44.setDescription("");
        option41.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup48 = options36.getOptionGroup(option41);
        org.apache.commons.cli.Option option50 = org.apache.commons.cli.OptionBuilder.create('4');
        boolean boolean51 = option50.isRequired();
        org.apache.commons.cli.Options options52 = options36.addOption(option50);
        java.util.List list53 = options52.getRequiredOptions();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setArgs((int) (short) 100);
        option55.setArgName("[ option: 4  :: null ]");
        java.lang.String str60 = option55.getLongOpt();
        java.lang.String str62 = option55.getValue((int) (short) -1);
        org.apache.commons.cli.CommandLine commandLine63 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray65 = commandLine63.getOptionValues("hi!");
        java.lang.String str68 = commandLine63.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str70 = commandLine63.getOptionValue("arg");
        java.lang.String[] strArray71 = commandLine63.getArgs();
        option55.setType((java.lang.Object) strArray71);
        java.util.Properties properties73 = null;
        org.apache.commons.cli.CommandLine commandLine74 = posixParser0.parse(options52, strArray71, properties73);
        posixParser0.burstToken("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ], arg=[ option: arg  :: null ]} ] [ long {} ]", false);
        posixParser0.burstToken("[ option: 4  :: [ option: 4  :: null ] ::  ]", true);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option38);
        org.junit.Assert.assertNull(optionGroup39);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertTrue("'" + char42 + "' != '" + '\000' + "'", char42 == '\000');
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertNull(optionGroup48);
        org.junit.Assert.assertNotNull(option50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(list53);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(strArray65);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str68, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(commandLine74);
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0583");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken("[ option: 4  :: null ::  ]", true);
        posixParser0.burstToken("[ Options: [ short {} ] [ long {} ]", true);
        org.apache.commons.cli.PosixParser posixParser42 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        option45.setDescription("");
        org.apache.commons.cli.Options options48 = options43.addOption(option45);
        org.apache.commons.cli.CommandLine commandLine49 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray51 = commandLine49.getOptionValues("hi!");
        java.lang.String str54 = commandLine49.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str56 = commandLine49.getOptionValue("arg");
        java.lang.String[] strArray57 = commandLine49.getArgs();
        java.lang.String[] strArray59 = posixParser42.flatten(options48, strArray57, false);
        boolean boolean61 = options48.hasOption("arg");
        java.util.Collection collection62 = options48.getOptions();
        org.apache.commons.cli.CommandLine commandLine63 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray65 = commandLine63.getOptionValues("hi!");
        java.lang.String[] strArray66 = commandLine63.getArgs();
        java.util.Iterator iterator67 = commandLine63.iterator();
        boolean boolean69 = commandLine63.hasOption("[ option: 4  :: null ]");
        java.lang.String str72 = commandLine63.getOptionValue("[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        java.lang.String[] strArray73 = commandLine63.getArgs();
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options48, strArray73, properties74, true);
        boolean boolean78 = options48.hasOption("[ option: 4 arg  :: null ]");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNull(strArray51);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str54, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(collection62);
        org.junit.Assert.assertNull(strArray65);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(iterator67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" + "'", str72, "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0573");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options53, strArray60, true);
        java.lang.String[] strArray64 = commandLine62.getOptionValues("[ option: 4  ::  ]");
        java.lang.Object obj66 = commandLine62.getOptionObject("hi!");
        java.lang.String[] strArray68 = commandLine62.getOptionValues('4');
        boolean boolean70 = commandLine62.hasOption("[ option: 4  :: null ::  ]");
        boolean boolean72 = commandLine62.hasOption('a');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNull(strArray64);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1236");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        boolean boolean2 = commandLine0.hasOption('4');
        org.apache.commons.cli.Option option4 = org.apache.commons.cli.OptionBuilder.create('4');
        char char5 = option4.getValueSeparator();
        boolean boolean6 = option4.hasArg();
        boolean boolean7 = option4.hasOptionalArg();
        java.lang.String str9 = option4.getValue(0);
        java.lang.String[] strArray10 = option4.getValues();
        int int11 = option4.getId();
        commandLine0.addOption(option4);
        int int13 = option4.getArgs();
        boolean boolean14 = option4.hasValueSeparator();
        java.lang.Class<?> wildcardClass15 = option4.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(option4);
        org.junit.Assert.assertTrue("'" + char5 + "' != '" + '\000' + "'", char5 == '\000');
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0473");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken("4", false);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create('4');
        option41.setDescription("");
        org.apache.commons.cli.Options options44 = options39.addOption(option41);
        java.util.Collection collection45 = options39.getOptions();
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option48 = org.apache.commons.cli.OptionBuilder.create('4');
        char char49 = option48.getValueSeparator();
        org.apache.commons.cli.Option option51 = org.apache.commons.cli.OptionBuilder.create('4');
        option51.setDescription("");
        option48.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup55 = options46.getOptionGroup(option48);
        option48.setOptionalArg(true);
        int int58 = option48.getId();
        org.apache.commons.cli.Options options59 = options39.addOption(option48);
        org.apache.commons.cli.CommandLine commandLine60 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray62 = commandLine60.getOptionValues("hi!");
        java.lang.String[] strArray63 = commandLine60.getArgs();
        java.util.Properties properties64 = null;
        org.apache.commons.cli.CommandLine commandLine66 = posixParser0.parse(options59, strArray63, properties64, true);
        posixParser0.burstToken("[ option:    :: null :: arg ]", true);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertNotNull(collection45);
        org.junit.Assert.assertNotNull(option48);
        org.junit.Assert.assertTrue("'" + char49 + "' != '" + '\000' + "'", char49 == '\000');
        org.junit.Assert.assertNotNull(option51);
        org.junit.Assert.assertNull(optionGroup55);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 52 + "'", int58 == 52);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNull(strArray62);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(commandLine66);
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0198");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue("hi!");
        org.apache.commons.cli.Option option7 = org.apache.commons.cli.OptionBuilder.create(' ');
        commandLine0.addOption(option7);
        java.lang.String[] strArray10 = commandLine0.getOptionValues("[ option: 4  :: null ]");
        java.lang.Object obj12 = commandLine0.getOptionObject("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.apache.commons.cli.Option[] optionArray13 = commandLine0.getOptions();
        java.lang.String str16 = commandLine0.getOptionValue('4', "");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(option7);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(optionArray13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1789");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        boolean boolean23 = options6.hasOption("hi!");
        org.apache.commons.cli.OptionBuilder optionBuilder24 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) "hi!");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(optionBuilder24);
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0280");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.util.Iterator iterator4 = commandLine0.iterator();
        java.lang.String str6 = commandLine0.getOptionValue("[ option:    :: null ]");
        java.lang.Object obj8 = commandLine0.getOptionObject("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4 org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!  ::  ]} ] [ long {org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!=[ option: 4 org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!  ::  ]} ]");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(iterator4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0077");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.util.Iterator iterator3 = commandLine0.iterator();
        java.lang.String[] strArray5 = commandLine0.getOptionValues('a');
        org.apache.commons.cli.Option[] optionArray6 = commandLine0.getOptions();
        java.lang.String[] strArray8 = commandLine0.getOptionValues("[ option:    :: null ]");
        boolean boolean10 = commandLine0.hasOption("arg");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(iterator3);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertNotNull(optionArray6);
        org.junit.Assert.assertNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0084");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken("hi!", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptionGroups();
        org.apache.commons.cli.Options options31 = options21.addOption("", false, "arg");
        java.util.List list32 = options31.getRequiredOptions();
        org.apache.commons.cli.Option option34 = org.apache.commons.cli.OptionBuilder.create("arg");
        org.apache.commons.cli.Options options35 = options31.addOption(option34);
        boolean boolean37 = options31.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        java.util.Collection collection38 = options31.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine39 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray41 = commandLine39.getOptionValues("hi!");
        java.lang.String str44 = commandLine39.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str46 = commandLine39.getOptionValue("arg");
        java.lang.String[] strArray47 = commandLine39.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine50 = posixParser0.parse(options31, strArray47, properties48, true);
        java.util.List list51 = options31.getRequiredOptions();
        org.apache.commons.cli.Option option52 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.OptionGroup optionGroup53 = options31.getOptionGroup(option52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(options31);
        org.junit.Assert.assertNotNull(list32);
        org.junit.Assert.assertNotNull(option34);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertNull(strArray41);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str44, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertNotNull(list51);
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0533");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken("[ option: 4  :: null ::  ]", true);
        posixParser0.burstToken("[ Options: [ short {} ] [ long {} ]", true);
        org.apache.commons.cli.Options options42 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create('4');
        option44.setDescription("");
        org.apache.commons.cli.Options options47 = options42.addOption(option44);
        org.apache.commons.cli.Options options48 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option50 = org.apache.commons.cli.OptionBuilder.create('4');
        char char51 = option50.getValueSeparator();
        org.apache.commons.cli.Option option53 = org.apache.commons.cli.OptionBuilder.create('4');
        option53.setDescription("");
        option50.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup57 = options48.getOptionGroup(option50);
        option50.setOptionalArg(true);
        int int60 = option50.getId();
        org.apache.commons.cli.OptionGroup optionGroup61 = options47.getOptionGroup(option50);
        org.apache.commons.cli.Options options62 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option64 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup65 = options62.getOptionGroup(option64);
        boolean boolean66 = option64.hasLongOpt();
        boolean boolean67 = option64.isRequired();
        org.apache.commons.cli.Options options68 = options47.addOption(option64);
        java.lang.String[] strArray69 = null;
        org.apache.commons.cli.CommandLine commandLine70 = posixParser0.parse(options68, strArray69);
        org.apache.commons.cli.Options options71 = null;
        org.apache.commons.cli.Option option73 = org.apache.commons.cli.OptionBuilder.create(' ');
        boolean boolean74 = option73.hasArgName();
        boolean boolean75 = option73.hasArgName();
        boolean boolean76 = option73.hasOptionalArg();
        java.lang.Object obj77 = option73.getType();
        option73.setLongOpt("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.apache.commons.cli.CommandLine commandLine80 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray82 = commandLine80.getOptionValues("hi!");
        java.lang.String[] strArray83 = commandLine80.getArgs();
        option73.setType((java.lang.Object) strArray83);
        java.lang.String[] strArray86 = posixParser0.flatten(options71, strArray83, true);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertNotNull(options47);
        org.junit.Assert.assertNotNull(option50);
        org.junit.Assert.assertTrue("'" + char51 + "' != '" + '\000' + "'", char51 == '\000');
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNull(optionGroup57);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 52 + "'", int60 == 52);
        org.junit.Assert.assertNull(optionGroup61);
        org.junit.Assert.assertNotNull(option64);
        org.junit.Assert.assertNull(optionGroup65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(options68);
        org.junit.Assert.assertNotNull(commandLine70);
        org.junit.Assert.assertNotNull(option73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertNull(strArray82);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(strArray86);
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0315");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.util.Iterator iterator4 = commandLine0.iterator();
        boolean boolean6 = commandLine0.hasOption("[ option: 4  :: null ]");
        java.lang.String[] strArray8 = commandLine0.getOptionValues("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str11 = commandLine0.getOptionValue('a', "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(iterator4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(strArray8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]" + "'", str11, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]");
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0475");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option4 = org.apache.commons.cli.OptionBuilder.create('4');
        option4.setDescription("");
        org.apache.commons.cli.Options options7 = options2.addOption(option4);
        org.apache.commons.cli.PosixParser posixParser8 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option11 = org.apache.commons.cli.OptionBuilder.create('4');
        option11.setDescription("");
        org.apache.commons.cli.Options options14 = options9.addOption(option11);
        org.apache.commons.cli.CommandLine commandLine15 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray17 = commandLine15.getOptionValues("hi!");
        java.lang.String[] strArray18 = commandLine15.getArgs();
        java.util.Properties properties19 = null;
        org.apache.commons.cli.CommandLine commandLine20 = posixParser8.parse(options9, strArray18, properties19);
        org.apache.commons.cli.CommandLine commandLine22 = posixParser1.parse(options7, strArray18, false);
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup26 = options23.getOptionGroup(option25);
        org.apache.commons.cli.Option option28 = org.apache.commons.cli.OptionBuilder.create('4');
        char char29 = option28.getValueSeparator();
        org.apache.commons.cli.Option option31 = org.apache.commons.cli.OptionBuilder.create('4');
        option31.setDescription("");
        option28.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup35 = options23.getOptionGroup(option28);
        boolean boolean37 = options23.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser38 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create('4');
        option41.setDescription("");
        org.apache.commons.cli.Options options44 = options39.addOption(option41);
        org.apache.commons.cli.CommandLine commandLine45 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray47 = commandLine45.getOptionValues("hi!");
        java.lang.String[] strArray48 = commandLine45.getArgs();
        java.util.Properties properties49 = null;
        org.apache.commons.cli.CommandLine commandLine50 = posixParser38.parse(options39, strArray48, properties49);
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser1.parse(options23, strArray48, properties51, true);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        option56.setDescription("");
        org.apache.commons.cli.Options options59 = options54.addOption(option56);
        java.util.Collection collection60 = options54.getOptionGroups();
        org.apache.commons.cli.Option option62 = org.apache.commons.cli.OptionBuilder.create('4');
        option62.setDescription("");
        option62.setLongOpt("hi!");
        boolean boolean67 = option62.hasArgName();
        org.apache.commons.cli.Options options68 = options54.addOption(option62);
        org.apache.commons.cli.PosixParser posixParser69 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options70 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option72 = org.apache.commons.cli.OptionBuilder.create('4');
        option72.setDescription("");
        org.apache.commons.cli.Options options75 = options70.addOption(option72);
        org.apache.commons.cli.CommandLine commandLine76 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray78 = commandLine76.getOptionValues("hi!");
        java.lang.String str81 = commandLine76.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str83 = commandLine76.getOptionValue("arg");
        java.lang.String[] strArray84 = commandLine76.getArgs();
        java.lang.String[] strArray86 = posixParser69.flatten(options75, strArray84, false);
        org.apache.commons.cli.CommandLine commandLine87 = posixParser1.parse(options54, strArray86);
        java.lang.String[] strArray93 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]", "[ option:  +ARG ::  ]", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!", "[ option:    :: null ]" };
        java.util.Properties properties94 = null;
        org.apache.commons.cli.CommandLine commandLine96 = posixParser0.parse(options54, strArray93, properties94, false);
        java.util.Collection collection97 = options54.getOptionGroups();
        org.apache.commons.cli.OptionGroup optionGroup98 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options99 = options54.addOptionGroup(optionGroup98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option4);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option11);
        org.junit.Assert.assertNotNull(options14);
        org.junit.Assert.assertNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(commandLine20);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertNull(optionGroup26);
        org.junit.Assert.assertNotNull(option28);
        org.junit.Assert.assertTrue("'" + char29 + "' != '" + '\000' + "'", char29 == '\000');
        org.junit.Assert.assertNotNull(option31);
        org.junit.Assert.assertNull(optionGroup35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertNull(strArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNotNull(collection60);
        org.junit.Assert.assertNotNull(option62);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(options68);
        org.junit.Assert.assertNotNull(option72);
        org.junit.Assert.assertNotNull(options75);
        org.junit.Assert.assertNull(strArray78);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str81, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(commandLine87);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertNotNull(commandLine96);
        org.junit.Assert.assertNotNull(collection97);
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1487");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine8 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine8.getOptionValues("hi!");
        java.lang.String str13 = commandLine8.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str15 = commandLine8.getOptionValue("arg");
        java.lang.String[] strArray16 = commandLine8.getArgs();
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser0.parse(options1, strArray16, properties17);
        commandLine18.addArg("org.apache.commons.cli.UnrecognizedOptionException: [ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ]");
        org.apache.commons.cli.Option option22 = org.apache.commons.cli.OptionBuilder.create("arg");
        java.util.List list23 = option22.getValuesList();
        int int24 = option22.getId();
        int int25 = option22.getId();
        java.lang.String str27 = option22.getValue((int) (short) 1);
        option22.setDescription("[ Options: [ short {4=[ option: 4  ::  :: [ option: 4  ::  :: false ] ]} ] [ long {} ]");
        commandLine18.addOption(option22);
        java.lang.String[] strArray32 = commandLine18.getOptionValues("[ Options: [ short { =[ option:    +ARG :: org.apache.commons.cli.UnrecognizedOptionException: hi! ], 4=[ option: 4  ::  ]} ] [ long {=[ option:    +ARG :: org.apache.commons.cli.UnrecognizedOptionException: hi! ]} ]");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str13, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNotNull(option22);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 97 + "'", int24 == 97);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 97 + "'", int25 == 97);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(strArray32);
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1006");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options53, strArray60, true);
        java.lang.String str64 = commandLine62.getOptionValue('\000');
        java.lang.Object obj66 = commandLine62.getOptionObject("[ option:    :: null ]");
        java.lang.String str68 = commandLine62.getOptionValue('=');
        java.lang.String str71 = commandLine62.getOptionValue("arg", "[ option: 4  :: null ]");
        java.lang.String str73 = commandLine62.getOptionValue(' ');
        org.apache.commons.cli.Option option75 = org.apache.commons.cli.OptionBuilder.create('4');
        option75.setArgs((int) (short) 100);
        option75.setArgName("org.apache.commons.cli.MissingOptionException: hi!");
        option75.setLongOpt("arg");
        boolean boolean82 = option75.hasValueSeparator();
        commandLine62.addOption(option75);
        commandLine62.addArg("[ option:  +ARG ::  :: [] ]");
        java.lang.String str87 = commandLine62.getOptionValue('#');
        java.util.Iterator iterator88 = commandLine62.iterator();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[ option: 4  :: null ]" + "'", str71, "[ option: 4  :: null ]");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(option75);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertNotNull(iterator88);
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1607");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptionGroups();
        org.apache.commons.cli.Options options11 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create('4');
        boolean boolean14 = option13.hasOptionalArg();
        org.apache.commons.cli.Options options15 = options1.addOption(option13);
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup20 = options17.getOptionGroup(option19);
        org.apache.commons.cli.CommandLine commandLine21 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray23 = commandLine21.getOptionValues("hi!");
        java.lang.String str26 = commandLine21.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str28 = commandLine21.getOptionValue("arg");
        java.lang.String[] strArray29 = commandLine21.getArgs();
        java.lang.String[] strArray31 = posixParser16.flatten(options17, strArray29, true);
        java.util.Properties properties32 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options15, strArray31, properties32);
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option36 = org.apache.commons.cli.OptionBuilder.create('4');
        option36.setDescription("");
        org.apache.commons.cli.Options options39 = options34.addOption(option36);
        java.util.List list40 = options34.helpOptions();
        org.apache.commons.cli.PosixParser posixParser41 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options42 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup45 = options42.getOptionGroup(option44);
        org.apache.commons.cli.Option option47 = org.apache.commons.cli.OptionBuilder.create('4');
        char char48 = option47.getValueSeparator();
        org.apache.commons.cli.Option option50 = org.apache.commons.cli.OptionBuilder.create('4');
        option50.setDescription("");
        option47.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup54 = options42.getOptionGroup(option47);
        boolean boolean56 = options42.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser57 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options58 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option60 = org.apache.commons.cli.OptionBuilder.create('4');
        option60.setDescription("");
        org.apache.commons.cli.Options options63 = options58.addOption(option60);
        org.apache.commons.cli.CommandLine commandLine64 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray66 = commandLine64.getOptionValues("hi!");
        java.lang.String str69 = commandLine64.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str71 = commandLine64.getOptionValue("arg");
        java.lang.String[] strArray72 = commandLine64.getArgs();
        java.lang.String[] strArray74 = posixParser57.flatten(options63, strArray72, false);
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser41.parse(options42, strArray74, properties75);
        org.apache.commons.cli.CommandLine commandLine77 = posixParser0.parse(options34, strArray74);
        posixParser0.burstToken("[ option: 4 [ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ]  :: null ]", false);
        org.apache.commons.cli.Option option82 = org.apache.commons.cli.OptionBuilder.create(' ');
        boolean boolean83 = option82.hasArgName();
        boolean boolean84 = option82.hasArgName();
        boolean boolean85 = option82.isRequired();
        int int86 = option82.getArgs();
        java.lang.String str87 = option82.getOpt();
        java.util.ListIterator listIterator88 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option82, listIterator88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(options15);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNull(optionGroup20);
        org.junit.Assert.assertNull(strArray23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str26, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(option36);
        org.junit.Assert.assertNotNull(options39);
        org.junit.Assert.assertNotNull(list40);
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertNull(optionGroup45);
        org.junit.Assert.assertNotNull(option47);
        org.junit.Assert.assertTrue("'" + char48 + "' != '" + '\000' + "'", char48 == '\000');
        org.junit.Assert.assertNotNull(option50);
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(option60);
        org.junit.Assert.assertNotNull(options63);
        org.junit.Assert.assertNull(strArray66);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str69, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertNotNull(option82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + " " + "'", str87, " ");
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1038");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        org.apache.commons.cli.Option option36 = org.apache.commons.cli.OptionBuilder.create('4');
        boolean boolean37 = option36.isRequired();
        org.apache.commons.cli.Options options38 = options22.addOption(option36);
        java.util.List list39 = options38.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser40 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options41 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option43 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup44 = options41.getOptionGroup(option43);
        org.apache.commons.cli.Option option46 = org.apache.commons.cli.OptionBuilder.create('4');
        char char47 = option46.getValueSeparator();
        org.apache.commons.cli.Option option49 = org.apache.commons.cli.OptionBuilder.create('4');
        option49.setDescription("");
        option46.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup53 = options41.getOptionGroup(option46);
        boolean boolean55 = options41.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create('4');
        option59.setDescription("");
        org.apache.commons.cli.Options options62 = options57.addOption(option59);
        org.apache.commons.cli.CommandLine commandLine63 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray65 = commandLine63.getOptionValues("hi!");
        java.lang.String str68 = commandLine63.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str70 = commandLine63.getOptionValue("arg");
        java.lang.String[] strArray71 = commandLine63.getArgs();
        java.lang.String[] strArray73 = posixParser56.flatten(options62, strArray71, false);
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine75 = posixParser40.parse(options41, strArray73, properties74);
        java.util.List list76 = commandLine75.getArgList();
        java.lang.String[] strArray77 = commandLine75.getArgs();
        java.util.Properties properties78 = null;
        org.apache.commons.cli.CommandLine commandLine80 = posixParser0.parse(options38, strArray77, properties78, false);
        org.apache.commons.cli.Options options81 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option83 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup84 = options81.getOptionGroup(option83);
        boolean boolean85 = option83.hasLongOpt();
        boolean boolean86 = option83.isRequired();
        java.util.List list87 = option83.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup88 = options38.getOptionGroup(option83);
        java.lang.String str89 = option83.getOpt();
        java.lang.String str90 = option83.getOpt();
        java.lang.String str91 = option83.getKey();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertNotNull(option36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(list39);
        org.junit.Assert.assertNotNull(option43);
        org.junit.Assert.assertNull(optionGroup44);
        org.junit.Assert.assertNotNull(option46);
        org.junit.Assert.assertTrue("'" + char47 + "' != '" + '\000' + "'", char47 == '\000');
        org.junit.Assert.assertNotNull(option49);
        org.junit.Assert.assertNull(optionGroup53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertNotNull(options62);
        org.junit.Assert.assertNull(strArray65);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str68, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine75);
        org.junit.Assert.assertNotNull(list76);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(commandLine80);
        org.junit.Assert.assertNotNull(option83);
        org.junit.Assert.assertNull(optionGroup84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(list87);
        org.junit.Assert.assertNull(optionGroup88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + " " + "'", str89, " ");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + " " + "'", str90, " ");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + " " + "'", str91, " ");
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1147");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option2 = org.apache.commons.cli.OptionBuilder.create('4');
        option2.setDescription("");
        org.apache.commons.cli.Options options5 = options0.addOption(option2);
        char char6 = option2.getValueSeparator();
        java.lang.String str7 = option2.getArgName();
        option2.setRequired(false);
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create('4');
        option13.setDescription("");
        org.apache.commons.cli.Options options16 = options11.addOption(option13);
        org.apache.commons.cli.PosixParser posixParser17 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        org.apache.commons.cli.CommandLine commandLine24 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray26 = commandLine24.getOptionValues("hi!");
        java.lang.String[] strArray27 = commandLine24.getArgs();
        java.util.Properties properties28 = null;
        org.apache.commons.cli.CommandLine commandLine29 = posixParser17.parse(options18, strArray27, properties28);
        org.apache.commons.cli.CommandLine commandLine31 = posixParser10.parse(options16, strArray27, false);
        org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option34 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup35 = options32.getOptionGroup(option34);
        org.apache.commons.cli.Option option37 = org.apache.commons.cli.OptionBuilder.create('4');
        char char38 = option37.getValueSeparator();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        option37.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup44 = options32.getOptionGroup(option37);
        boolean boolean46 = options32.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser47 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options48 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option50 = org.apache.commons.cli.OptionBuilder.create('4');
        option50.setDescription("");
        org.apache.commons.cli.Options options53 = options48.addOption(option50);
        org.apache.commons.cli.CommandLine commandLine54 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray56 = commandLine54.getOptionValues("hi!");
        java.lang.String[] strArray57 = commandLine54.getArgs();
        java.util.Properties properties58 = null;
        org.apache.commons.cli.CommandLine commandLine59 = posixParser47.parse(options48, strArray57, properties58);
        java.util.Properties properties60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser10.parse(options32, strArray57, properties60, true);
        org.apache.commons.cli.Options options63 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option65 = org.apache.commons.cli.OptionBuilder.create('4');
        option65.setDescription("");
        org.apache.commons.cli.Options options68 = options63.addOption(option65);
        java.util.Collection collection69 = options63.getOptions();
        java.lang.String[] strArray70 = null;
        org.apache.commons.cli.CommandLine commandLine72 = posixParser10.parse(options63, strArray70, true);
        java.lang.String str74 = commandLine72.getOptionValue('\000');
        java.lang.Object obj76 = commandLine72.getOptionObject("[ option:    :: null ]");
        org.apache.commons.cli.Option[] optionArray77 = commandLine72.getOptions();
        java.lang.String[] strArray78 = commandLine72.getArgs();
        boolean boolean79 = option2.equals((java.lang.Object) strArray78);
        java.lang.String str80 = option2.getKey();
        int int81 = option2.getArgs();
        org.apache.commons.cli.Option option83 = org.apache.commons.cli.OptionBuilder.create('4');
        char char84 = option83.getValueSeparator();
        boolean boolean85 = option83.hasArg();
        java.lang.String str86 = option83.getValue();
        java.lang.String str87 = option83.getDescription();
        java.lang.String str88 = option83.toString();
        option2.setType((java.lang.Object) str88);
        org.junit.Assert.assertNotNull(option2);
        org.junit.Assert.assertNotNull(options5);
        org.junit.Assert.assertTrue("'" + char6 + "' != '" + '\000' + "'", char6 == '\000');
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg");
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertNotNull(options16);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(option34);
        org.junit.Assert.assertNull(optionGroup35);
        org.junit.Assert.assertNotNull(option37);
        org.junit.Assert.assertTrue("'" + char38 + "' != '" + '\000' + "'", char38 == '\000');
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNull(optionGroup44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(option50);
        org.junit.Assert.assertNotNull(options53);
        org.junit.Assert.assertNull(strArray56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(commandLine59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(option65);
        org.junit.Assert.assertNotNull(options68);
        org.junit.Assert.assertNotNull(collection69);
        org.junit.Assert.assertNotNull(commandLine72);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertNotNull(optionArray77);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "4" + "'", str80, "4");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(option83);
        org.junit.Assert.assertTrue("'" + char84 + "' != '" + '\000' + "'", char84 == '\000');
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "[ option: 4  :: null ]" + "'", str88, "[ option: 4  :: null ]");
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1471");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option2 = org.apache.commons.cli.OptionBuilder.create('4');
        option2.setDescription("");
        org.apache.commons.cli.Options options5 = options0.addOption(option2);
        int int6 = option2.getArgs();
        java.lang.String str8 = option2.getValue(0);
        java.util.List list9 = option2.getValuesList();
        org.apache.commons.cli.CommandLine commandLine10 = new org.apache.commons.cli.CommandLine();
        java.util.Iterator iterator11 = commandLine10.iterator();
        java.util.Iterator iterator12 = commandLine10.iterator();
        java.lang.String str15 = commandLine10.getOptionValue("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", "");
        boolean boolean17 = commandLine10.hasOption("org.apache.commons.cli.UnrecognizedOptionException: [ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ]");
        option2.setType((java.lang.Object) commandLine10);
        option2.setDescription("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  :: [ option: arg [ option: 4  :: null ] +ARG :: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ] ]} ] [ long {} ]");
        org.junit.Assert.assertNotNull(option2);
        org.junit.Assert.assertNotNull(options5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0829");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken("hi!", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptionGroups();
        org.apache.commons.cli.Options options31 = options21.addOption("", false, "arg");
        java.util.List list32 = options31.getRequiredOptions();
        org.apache.commons.cli.Option option34 = org.apache.commons.cli.OptionBuilder.create("arg");
        org.apache.commons.cli.Options options35 = options31.addOption(option34);
        boolean boolean37 = options31.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        java.util.Collection collection38 = options31.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine39 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray41 = commandLine39.getOptionValues("hi!");
        java.lang.String str44 = commandLine39.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str46 = commandLine39.getOptionValue("arg");
        java.lang.String[] strArray47 = commandLine39.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine50 = posixParser0.parse(options31, strArray47, properties48, true);
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = org.apache.commons.cli.OptionBuilder.create('4');
        option53.setDescription("");
        org.apache.commons.cli.Options options56 = options51.addOption(option53);
        java.util.List list57 = options56.helpOptions();
        org.apache.commons.cli.Options options58 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option60 = org.apache.commons.cli.OptionBuilder.create('4');
        option60.setDescription("");
        org.apache.commons.cli.Options options63 = options58.addOption(option60);
        java.util.Collection collection64 = options58.getOptionGroups();
        org.apache.commons.cli.Options options68 = options58.addOption("", false, "arg");
        java.util.Collection collection69 = options58.getOptionGroups();
        org.apache.commons.cli.Options options70 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option72 = org.apache.commons.cli.OptionBuilder.create('4');
        option72.setDescription("");
        org.apache.commons.cli.Options options75 = options70.addOption(option72);
        option72.setValueSeparator(' ');
        org.apache.commons.cli.OptionGroup optionGroup78 = options58.getOptionGroup(option72);
        option72.setRequired(false);
        org.apache.commons.cli.CommandLine commandLine81 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray83 = commandLine81.getOptionValues("hi!");
        java.lang.String[] strArray84 = commandLine81.getArgs();
        boolean boolean85 = option72.equals((java.lang.Object) strArray84);
        java.lang.String[] strArray87 = posixParser0.flatten(options56, strArray84, true);
        posixParser0.burstToken("[ Options: [ short { =[ option:    :: hi! ], 4=[ option: 4  ::  ], arg=[ option: arg org.apache.commons.cli.UnrecognizedOptionException: hi!  :: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ]} ] [ long {org.apache.commons.cli.UnrecognizedOptionException: hi!=[ option: arg org.apache.commons.cli.UnrecognizedOptionException: hi!  :: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ]} ]", false);
        posixParser0.burstToken("[ option:   [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]  :: null ]", false);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(options31);
        org.junit.Assert.assertNotNull(list32);
        org.junit.Assert.assertNotNull(option34);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertNull(strArray41);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str44, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNotNull(options56);
        org.junit.Assert.assertNotNull(list57);
        org.junit.Assert.assertNotNull(option60);
        org.junit.Assert.assertNotNull(options63);
        org.junit.Assert.assertNotNull(collection64);
        org.junit.Assert.assertNotNull(options68);
        org.junit.Assert.assertNotNull(collection69);
        org.junit.Assert.assertNotNull(option72);
        org.junit.Assert.assertNotNull(options75);
        org.junit.Assert.assertNull(optionGroup78);
        org.junit.Assert.assertNull(strArray83);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(strArray87);
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0145");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        java.util.Collection collection22 = options6.getOptionGroups();
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create('4');
        option25.setDescription("");
        org.apache.commons.cli.Options options28 = options23.addOption(option25);
        java.util.Collection collection29 = options23.getOptionGroups();
        org.apache.commons.cli.Options options33 = options23.addOption("", false, "arg");
        java.util.Collection collection34 = options23.getOptionGroups();
        org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option37 = org.apache.commons.cli.OptionBuilder.create('4');
        option37.setDescription("");
        org.apache.commons.cli.Options options40 = options35.addOption(option37);
        option37.setValueSeparator(' ');
        org.apache.commons.cli.OptionGroup optionGroup43 = options23.getOptionGroup(option37);
        option37.setRequired(false);
        org.apache.commons.cli.CommandLine commandLine46 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray48 = commandLine46.getOptionValues("hi!");
        java.lang.String[] strArray49 = commandLine46.getArgs();
        boolean boolean50 = option37.equals((java.lang.Object) strArray49);
        org.apache.commons.cli.OptionGroup optionGroup51 = options6.getOptionGroup(option37);
        org.apache.commons.cli.Options options56 = options6.addOption("arg", "org.apache.commons.cli.UnrecognizedOptionException: hi!", false, "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.Options options60 = options6.addOption(" ", false, "hi!");
        org.apache.commons.cli.Options options61 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option63 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup64 = options61.getOptionGroup(option63);
        org.apache.commons.cli.Option option66 = org.apache.commons.cli.OptionBuilder.create('4');
        char char67 = option66.getValueSeparator();
        org.apache.commons.cli.Option option69 = org.apache.commons.cli.OptionBuilder.create('4');
        option69.setDescription("");
        option66.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup73 = options61.getOptionGroup(option66);
        int int74 = option66.getId();
        org.apache.commons.cli.Option option78 = new org.apache.commons.cli.Option("", false, "");
        org.apache.commons.cli.Option option80 = org.apache.commons.cli.OptionBuilder.create('4');
        option80.setDescription("");
        boolean boolean83 = option80.hasValueSeparator();
        java.util.List list84 = option80.getValuesList();
        int int85 = option80.getArgs();
        option78.setType((java.lang.Object) int85);
        option66.setType((java.lang.Object) int85);
        java.lang.String str89 = option66.getValue(0);
        org.apache.commons.cli.OptionGroup optionGroup90 = options60.getOptionGroup(option66);
        boolean boolean91 = option66.hasOptionalArg();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(collection22);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(collection29);
        org.junit.Assert.assertNotNull(options33);
        org.junit.Assert.assertNotNull(collection34);
        org.junit.Assert.assertNotNull(option37);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNull(strArray48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(options56);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(option63);
        org.junit.Assert.assertNull(optionGroup64);
        org.junit.Assert.assertNotNull(option66);
        org.junit.Assert.assertTrue("'" + char67 + "' != '" + '\000' + "'", char67 == '\000');
        org.junit.Assert.assertNotNull(option69);
        org.junit.Assert.assertNull(optionGroup73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 52 + "'", int74 == 52);
        org.junit.Assert.assertNotNull(option80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(list84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertNull(optionGroup90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0946");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create('4');
        option1.setDescription("");
        java.lang.String str4 = option1.getValue();
        boolean boolean5 = option1.hasOptionalArg();
        java.lang.String str7 = option1.getValue("");
        char char8 = option1.getValueSeparator();
        java.lang.String str9 = option1.getOpt();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create('4');
        option13.setDescription("");
        org.apache.commons.cli.Options options16 = options11.addOption(option13);
        org.apache.commons.cli.PosixParser posixParser17 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        org.apache.commons.cli.CommandLine commandLine24 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray26 = commandLine24.getOptionValues("hi!");
        java.lang.String[] strArray27 = commandLine24.getArgs();
        java.util.Properties properties28 = null;
        org.apache.commons.cli.CommandLine commandLine29 = posixParser17.parse(options18, strArray27, properties28);
        org.apache.commons.cli.CommandLine commandLine31 = posixParser10.parse(options16, strArray27, false);
        java.util.Collection collection32 = options16.getOptionGroups();
        java.util.Collection collection33 = options16.getOptions();
        java.lang.String str34 = options16.toString();
        option1.setType((java.lang.Object) options16);
        org.apache.commons.cli.Option option37 = org.apache.commons.cli.OptionBuilder.create('4');
        java.lang.String str39 = option37.getValue("arg");
        java.lang.String str40 = option37.getLongOpt();
        option37.setLongOpt("");
        option37.setArgName("");
        java.lang.String str45 = option37.getArgName();
        option37.setValueSeparator('\000');
        org.apache.commons.cli.OptionGroup optionGroup48 = options16.getOptionGroup(option37);
        org.apache.commons.cli.Option option50 = options16.getOption("");
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + char8 + "' != '" + '\000' + "'", char8 == '\000');
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "4" + "'", str9, "4");
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertNotNull(options16);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(collection32);
        org.junit.Assert.assertNotNull(collection33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str34, "[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNotNull(option37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "arg" + "'", str39, "arg");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNull(optionGroup48);
        org.junit.Assert.assertNull(option50);
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0815");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue("hi!");
        boolean boolean7 = commandLine0.hasOption("");
        java.lang.String str10 = commandLine0.getOptionValue("[ option: 4  :: null ]", "org.apache.commons.cli.MissingOptionException: hi!");
        java.lang.String[] strArray12 = commandLine0.getOptionValues('4');
        java.lang.String[] strArray14 = commandLine0.getOptionValues('a');
        org.apache.commons.cli.Option option16 = org.apache.commons.cli.OptionBuilder.create(' ');
        boolean boolean17 = option16.hasArgName();
        boolean boolean18 = option16.hasArgName();
        commandLine0.addOption(option16);
        java.lang.String[] strArray21 = commandLine0.getOptionValues("[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]");
        java.lang.String str24 = commandLine0.getOptionValue("org.apache.commons.cli.MissingOptionException: hi!", "");
        org.apache.commons.cli.Option[] optionArray25 = commandLine0.getOptions();
        java.lang.String str27 = commandLine0.getOptionValue('4');
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "org.apache.commons.cli.MissingOptionException: hi!" + "'", str10, "org.apache.commons.cli.MissingOptionException: hi!");
        org.junit.Assert.assertNull(strArray12);
        org.junit.Assert.assertNull(strArray14);
        org.junit.Assert.assertNotNull(option16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(strArray21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(optionArray25);
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0353");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.PosixParser posixParser53 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        option56.setDescription("");
        org.apache.commons.cli.Options options59 = options54.addOption(option56);
        org.apache.commons.cli.CommandLine commandLine60 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray62 = commandLine60.getOptionValues("hi!");
        java.lang.String str65 = commandLine60.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str67 = commandLine60.getOptionValue("arg");
        java.lang.String[] strArray68 = commandLine60.getArgs();
        java.lang.String[] strArray70 = posixParser53.flatten(options59, strArray68, false);
        org.apache.commons.cli.PosixParser posixParser71 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options72 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option74 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup75 = options72.getOptionGroup(option74);
        org.apache.commons.cli.CommandLine commandLine76 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray78 = commandLine76.getOptionValues("hi!");
        java.lang.String str81 = commandLine76.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str83 = commandLine76.getOptionValue("arg");
        java.lang.String[] strArray84 = commandLine76.getArgs();
        java.lang.String[] strArray86 = posixParser71.flatten(options72, strArray84, true);
        org.apache.commons.cli.CommandLine commandLine88 = posixParser0.parse(options59, strArray84, false);
        java.lang.String str90 = commandLine88.getOptionValue("");
        commandLine88.addArg("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.util.Iterator iterator93 = commandLine88.iterator();
        java.lang.Object obj95 = commandLine88.getOptionObject(' ');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNull(strArray62);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str65, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(option74);
        org.junit.Assert.assertNull(optionGroup75);
        org.junit.Assert.assertNull(strArray78);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str81, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(commandLine88);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertNotNull(iterator93);
        org.junit.Assert.assertNull(obj95);
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0539");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine8 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine8.getOptionValues("hi!");
        java.lang.String str13 = commandLine8.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str15 = commandLine8.getOptionValue("arg");
        java.lang.String[] strArray16 = commandLine8.getArgs();
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser0.parse(options1, strArray16, properties17);
        java.lang.String str20 = commandLine18.getOptionValue('#');
        org.apache.commons.cli.Option[] optionArray21 = commandLine18.getOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str13, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(optionArray21);
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1701");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.util.Iterator iterator3 = commandLine0.iterator();
        java.lang.String[] strArray5 = commandLine0.getOptionValues('a');
        java.lang.Object obj7 = commandLine0.getOptionObject('a');
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option9.setLongOpt("hi!");
        commandLine0.addOption(option9);
        java.lang.String str15 = option9.getValue();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(iterator3);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0076");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        java.util.Collection collection46 = options40.getOptionGroups();
        org.apache.commons.cli.Options options50 = options40.addOption("", false, "arg");
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup54 = options51.getOptionGroup(option53);
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        char char57 = option56.getValueSeparator();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create('4');
        option59.setDescription("");
        option56.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup63 = options51.getOptionGroup(option56);
        boolean boolean64 = option56.hasArgName();
        org.apache.commons.cli.Options options65 = options40.addOption(option56);
        org.apache.commons.cli.CommandLine commandLine66 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray68 = commandLine66.getOptionValues("hi!");
        java.lang.String str71 = commandLine66.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str73 = commandLine66.getOptionValue("arg");
        java.lang.String[] strArray74 = commandLine66.getArgs();
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options40, strArray74, properties75);
        java.util.List list77 = options40.helpOptions();
        java.util.Collection collection78 = options40.getOptionGroups();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options83 = options40.addOption("org.apache.commons.cli.UnrecognizedOptionException: hi!", "", true, "org.apache.commons.cli.MissingArgumentException: [ option:    :: null ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '.'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertNotNull(options50);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertTrue("'" + char57 + "' != '" + '\000' + "'", char57 == '\000');
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertNull(optionGroup63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(options65);
        org.junit.Assert.assertNull(strArray68);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str71, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertNotNull(list77);
        org.junit.Assert.assertNotNull(collection78);
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0629");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.util.Iterator iterator1 = commandLine0.iterator();
        java.lang.String str4 = commandLine0.getOptionValue(' ', "org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        java.lang.Object obj6 = commandLine0.getOptionObject('a');
        org.junit.Assert.assertNotNull(iterator1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" + "'", str4, "org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1391");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        java.util.List list40 = commandLine39.getArgList();
        java.util.List list41 = commandLine39.getArgList();
        java.lang.String[] strArray43 = commandLine39.getOptionValues('=');
        boolean boolean45 = commandLine39.hasOption(' ');
        boolean boolean47 = commandLine39.hasOption("[ option: 4 [ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ]  :: null ]");
        java.util.List list48 = commandLine39.getArgList();
        boolean boolean50 = commandLine39.hasOption("[ option:    :: null :: arg ]");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(list40);
        org.junit.Assert.assertNotNull(list41);
        org.junit.Assert.assertNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(list48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0855");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        boolean boolean5 = commandLine0.hasOption("hi!");
        java.util.List list6 = commandLine0.getArgList();
        java.lang.Object obj8 = commandLine0.getOptionObject("[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]");
        java.lang.Object obj10 = commandLine0.getOptionObject(' ');
        org.apache.commons.cli.Option[] optionArray11 = commandLine0.getOptions();
        java.util.Iterator iterator12 = commandLine0.iterator();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(list6);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNotNull(optionArray11);
        org.junit.Assert.assertNotNull(iterator12);
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1499");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue("hi!");
        boolean boolean7 = commandLine0.hasOption("");
        commandLine0.addArg("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        boolean boolean11 = commandLine0.hasOption("[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str15 = option13.getValue("");
        commandLine0.addOption(option13);
        java.lang.String str17 = option13.getDescription();
        boolean boolean18 = option13.isRequired();
        java.lang.String str19 = option13.getDescription();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1330");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptions();
        boolean boolean9 = options1.hasOption("arg");
        java.lang.String[] strArray12 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" };
        org.apache.commons.cli.CommandLine commandLine13 = posixParser0.parse(options1, strArray12);
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = org.apache.commons.cli.OptionBuilder.create('4');
        option16.setDescription("");
        org.apache.commons.cli.Options options19 = options14.addOption(option16);
        java.util.Collection collection20 = options14.getOptionGroups();
        org.apache.commons.cli.Options options24 = options14.addOption("", false, "arg");
        java.util.List list25 = options24.getRequiredOptions();
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create("arg");
        org.apache.commons.cli.Options options28 = options24.addOption(option27);
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setArgs((int) (short) 100);
        option30.setArgName("[ option: 4  :: null ]");
        java.lang.String str35 = option30.getLongOpt();
        java.lang.String str37 = option30.getValue((int) (short) -1);
        org.apache.commons.cli.Options options38 = options28.addOption(option30);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup42 = options39.getOptionGroup(option41);
        boolean boolean43 = option41.hasLongOpt();
        boolean boolean44 = option41.isRequired();
        java.util.List list45 = option41.getValuesList();
        option41.setDescription("[ option: 4  ::  ]");
        org.apache.commons.cli.Options options48 = options38.addOption(option41);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        option52.setDescription("");
        org.apache.commons.cli.Options options55 = options50.addOption(option52);
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray58 = commandLine56.getOptionValues("hi!");
        java.lang.String str61 = commandLine56.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str63 = commandLine56.getOptionValue("arg");
        java.lang.String[] strArray64 = commandLine56.getArgs();
        java.lang.String[] strArray66 = posixParser49.flatten(options55, strArray64, false);
        org.apache.commons.cli.CommandLine commandLine68 = posixParser0.parse(options38, strArray64, true);
        org.apache.commons.cli.OptionBuilder optionBuilder69 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options38);
        java.lang.String str70 = options38.toString();
        org.apache.commons.cli.Option option74 = new org.apache.commons.cli.Option("4", true, "4");
        boolean boolean75 = option74.hasOptionalArg();
        org.apache.commons.cli.Options options76 = options38.addOption(option74);
        org.apache.commons.cli.Option option78 = org.apache.commons.cli.OptionBuilder.create('4');
        char char79 = option78.getValueSeparator();
        org.apache.commons.cli.Option option81 = org.apache.commons.cli.OptionBuilder.create('4');
        option81.setDescription("");
        option78.setType((java.lang.Object) "");
        boolean boolean85 = option78.hasLongOpt();
        int int86 = option78.getArgs();
        int int87 = option78.getId();
        org.apache.commons.cli.Options options88 = options38.addOption(option78);
        // The following exception was thrown during execution in test generation
        try {
            option78.addValue("org.apache.commons.cli.UnrecognizedOptionException: [ option:    :: null ]");
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: NO_ARGS_ALLOWED");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine13);
        org.junit.Assert.assertNotNull(option16);
        org.junit.Assert.assertNotNull(options19);
        org.junit.Assert.assertNotNull(collection20);
        org.junit.Assert.assertNotNull(options24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(list45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNull(strArray58);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str61, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertNotNull(optionBuilder69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "[ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]" + "'", str70, "[ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(options76);
        org.junit.Assert.assertNotNull(option78);
        org.junit.Assert.assertTrue("'" + char79 + "' != '" + '\000' + "'", char79 == '\000');
        org.junit.Assert.assertNotNull(option81);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 52 + "'", int87 == 52);
        org.junit.Assert.assertNotNull(options88);
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1354");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create('4');
        option1.setArgs((int) (short) 100);
        option1.setArgName("[ option: 4  :: null ]");
        java.lang.String str6 = option1.getLongOpt();
        java.lang.String str8 = option1.getValue((int) (short) -1);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray11 = commandLine9.getOptionValues("hi!");
        java.lang.String str14 = commandLine9.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str16 = commandLine9.getOptionValue("arg");
        java.lang.String[] strArray17 = commandLine9.getArgs();
        option1.setType((java.lang.Object) strArray17);
        boolean boolean19 = option1.hasOptionalArg();
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(strArray11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str14, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1641");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options53, strArray60, true);
        java.lang.String str64 = commandLine62.getOptionValue('\000');
        java.lang.Object obj66 = commandLine62.getOptionObject("[ option:    :: null ]");
        org.apache.commons.cli.Option[] optionArray67 = commandLine62.getOptions();
        java.lang.String[] strArray68 = commandLine62.getArgs();
        org.apache.commons.cli.Option[] optionArray69 = commandLine62.getOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNotNull(optionArray67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(optionArray69);
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0858");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create('4');
        boolean boolean2 = option1.hasOptionalArg();
        java.lang.String str4 = option1.getValue("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        option1.setDescription("[ option: 4  ::  ]");
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String[] strArray10 = commandLine7.getArgs();
        java.util.Iterator iterator11 = commandLine7.iterator();
        java.lang.String str14 = commandLine7.getOptionValue("[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]", "arg");
        boolean boolean16 = commandLine7.hasOption("[ option: 4  :: null ]");
        java.lang.String[] strArray18 = commandLine7.getOptionValues("");
        java.lang.String str21 = commandLine7.getOptionValue("[ option: 4  :: null ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        java.lang.String[] strArray23 = commandLine7.getOptionValues("[ Options: [ short {} ] [ long {} ]");
        option1.setType((java.lang.Object) commandLine7);
        // The following exception was thrown during execution in test generation
        try {
            option1.addValue("[ option: 4  :: [ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ] ]");
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: NO_ARGS_ALLOWED");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str4, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(strArray18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" + "'", str21, "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        org.junit.Assert.assertNull(strArray23);
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1113");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine8 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine8.getOptionValues("hi!");
        java.lang.String str13 = commandLine8.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str15 = commandLine8.getOptionValue("arg");
        java.lang.String[] strArray16 = commandLine8.getArgs();
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser0.parse(options1, strArray16, properties17);
        posixParser0.burstToken("[ Options: [ short {4=[ option: 4  :: null ::  ]} ] [ long {} ]", false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create('4');
        option24.setDescription("");
        org.apache.commons.cli.Options options27 = options22.addOption(option24);
        java.util.Collection collection28 = options22.getOptionGroups();
        org.apache.commons.cli.Options options32 = options22.addOption("", false, "arg");
        java.util.List list33 = options32.getRequiredOptions();
        org.apache.commons.cli.Option option35 = org.apache.commons.cli.OptionBuilder.create("arg");
        org.apache.commons.cli.Options options36 = options32.addOption(option35);
        java.util.Collection collection37 = options32.getOptionGroups();
        java.util.List list38 = options32.helpOptions();
        java.util.List list39 = options32.helpOptions();
        java.util.Collection collection40 = options32.getOptions();
        org.apache.commons.cli.Option option42 = options32.getOption("");
        boolean boolean44 = options32.hasOption("[ option: 4 hi!  ::  ]");
        boolean boolean46 = options32.hasOption("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]");
        java.lang.String[] strArray47 = null;
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine50 = posixParser0.parse(options32, strArray47, properties48, false);
        posixParser0.burstToken("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]", false);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        option56.setDescription("");
        org.apache.commons.cli.Options options59 = options54.addOption(option56);
        java.util.Collection collection60 = options54.getOptions();
        java.lang.String str61 = options54.toString();
        java.util.List list62 = options54.getRequiredOptions();
        java.util.Collection collection63 = options54.getOptions();
        org.apache.commons.cli.CommandLine commandLine64 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray66 = commandLine64.getOptionValues("hi!");
        java.lang.String[] strArray67 = commandLine64.getArgs();
        java.util.Iterator iterator68 = commandLine64.iterator();
        boolean boolean70 = commandLine64.hasOption("[ option: 4  :: null ]");
        java.lang.String str73 = commandLine64.getOptionValue("[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        java.lang.String[] strArray74 = commandLine64.getArgs();
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options54, strArray74, false);
        org.apache.commons.cli.Option option80 = new org.apache.commons.cli.Option("4", false, "[ option: 4  ::  ]");
        java.lang.String str81 = option80.getDescription();
        org.apache.commons.cli.Options options82 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option84 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup85 = options82.getOptionGroup(option84);
        org.apache.commons.cli.Option option87 = options82.getOption("org.apache.commons.cli.MissingOptionException: hi!");
        boolean boolean88 = option80.equals((java.lang.Object) options82);
        java.lang.String[] strArray89 = null;
        java.util.Properties properties90 = null;
        org.apache.commons.cli.CommandLine commandLine92 = posixParser0.parse(options82, strArray89, properties90, false);
        org.apache.commons.cli.OptionGroup optionGroup93 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options94 = options82.addOptionGroup(optionGroup93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str13, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNotNull(options27);
        org.junit.Assert.assertNotNull(collection28);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNotNull(list33);
        org.junit.Assert.assertNotNull(option35);
        org.junit.Assert.assertNotNull(options36);
        org.junit.Assert.assertNotNull(collection37);
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertNotNull(list39);
        org.junit.Assert.assertNotNull(collection40);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNotNull(collection60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str61, "[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNotNull(list62);
        org.junit.Assert.assertNotNull(collection63);
        org.junit.Assert.assertNull(strArray66);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(iterator68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" + "'", str73, "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "[ option: 4  ::  ]" + "'", str81, "[ option: 4  ::  ]");
        org.junit.Assert.assertNotNull(option84);
        org.junit.Assert.assertNull(optionGroup85);
        org.junit.Assert.assertNull(option87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(commandLine92);
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1432");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option2 = org.apache.commons.cli.OptionBuilder.create('4');
        option2.setDescription("");
        org.apache.commons.cli.Options options5 = options0.addOption(option2);
        java.util.Collection collection6 = options0.getOptionGroups();
        org.apache.commons.cli.Options options10 = options0.addOption("", false, "arg");
        java.util.Collection collection11 = options0.getOptionGroups();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option14 = org.apache.commons.cli.OptionBuilder.create('4');
        option14.setDescription("");
        org.apache.commons.cli.Options options17 = options12.addOption(option14);
        option14.setValueSeparator(' ');
        org.apache.commons.cli.OptionGroup optionGroup20 = options0.getOptionGroup(option14);
        option14.setRequired(false);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String[] strArray26 = commandLine23.getArgs();
        boolean boolean27 = option14.equals((java.lang.Object) strArray26);
        int int28 = option14.getId();
        boolean boolean29 = option14.isRequired();
        org.junit.Assert.assertNotNull(option2);
        org.junit.Assert.assertNotNull(options5);
        org.junit.Assert.assertNotNull(collection6);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(collection11);
        org.junit.Assert.assertNotNull(option14);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNull(optionGroup20);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0253");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String str5 = commandLine0.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str7 = commandLine0.getOptionValue('a');
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str5, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0514");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptionGroups();
        org.apache.commons.cli.Option option61 = org.apache.commons.cli.OptionBuilder.create('4');
        option61.setDescription("");
        option61.setLongOpt("hi!");
        boolean boolean66 = option61.hasArgName();
        org.apache.commons.cli.Options options67 = options53.addOption(option61);
        org.apache.commons.cli.PosixParser posixParser68 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options69 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option71 = org.apache.commons.cli.OptionBuilder.create('4');
        option71.setDescription("");
        org.apache.commons.cli.Options options74 = options69.addOption(option71);
        org.apache.commons.cli.CommandLine commandLine75 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray77 = commandLine75.getOptionValues("hi!");
        java.lang.String str80 = commandLine75.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str82 = commandLine75.getOptionValue("arg");
        java.lang.String[] strArray83 = commandLine75.getArgs();
        java.lang.String[] strArray85 = posixParser68.flatten(options74, strArray83, false);
        org.apache.commons.cli.CommandLine commandLine86 = posixParser0.parse(options53, strArray85);
        java.util.Iterator iterator87 = commandLine86.iterator();
        java.util.List list88 = commandLine86.getArgList();
        boolean boolean90 = commandLine86.hasOption("org.apache.commons.cli.UnrecognizedOptionException: arg");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(option61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(options67);
        org.junit.Assert.assertNotNull(option71);
        org.junit.Assert.assertNotNull(options74);
        org.junit.Assert.assertNull(strArray77);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str80, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(commandLine86);
        org.junit.Assert.assertNotNull(iterator87);
        org.junit.Assert.assertNotNull(list88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1658");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptionGroups();
        org.apache.commons.cli.Option option61 = org.apache.commons.cli.OptionBuilder.create('4');
        option61.setDescription("");
        option61.setLongOpt("hi!");
        boolean boolean66 = option61.hasArgName();
        org.apache.commons.cli.Options options67 = options53.addOption(option61);
        org.apache.commons.cli.PosixParser posixParser68 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options69 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option71 = org.apache.commons.cli.OptionBuilder.create('4');
        option71.setDescription("");
        org.apache.commons.cli.Options options74 = options69.addOption(option71);
        org.apache.commons.cli.CommandLine commandLine75 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray77 = commandLine75.getOptionValues("hi!");
        java.lang.String str80 = commandLine75.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str82 = commandLine75.getOptionValue("arg");
        java.lang.String[] strArray83 = commandLine75.getArgs();
        java.lang.String[] strArray85 = posixParser68.flatten(options74, strArray83, false);
        org.apache.commons.cli.CommandLine commandLine86 = posixParser0.parse(options53, strArray85);
        java.lang.String str89 = commandLine86.getOptionValue("[ option: 4 hi!  ::  ]", "");
        java.util.List list90 = commandLine86.getArgList();
        java.lang.String[] strArray91 = commandLine86.getArgs();
        java.lang.String str93 = commandLine86.getOptionValue('=');
        java.lang.String str96 = commandLine86.getOptionValue('#', "org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  :: [ option: arg [ option: 4  :: null ] +ARG :: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ] ]} ] [ long {} ]");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(option61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(options67);
        org.junit.Assert.assertNotNull(option71);
        org.junit.Assert.assertNotNull(options74);
        org.junit.Assert.assertNull(strArray77);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str80, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(commandLine86);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertNotNull(list90);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNull(str93);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  :: [ option: arg [ option: 4  :: null ] +ARG :: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ] ]} ] [ long {} ]" + "'", str96, "org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  :: [ option: arg [ option: 4  :: null ] +ARG :: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ] ]} ] [ long {} ]");
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0453");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken("[ option: 4  :: null ::  ]", true);
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        option40.setLongOpt("hi!");
        boolean boolean45 = option40.hasArgName();
        boolean boolean46 = option40.hasArg();
        java.lang.String str48 = option40.getValue("4");
        java.lang.String str50 = option40.getValue(0);
        java.lang.String str51 = option40.getDescription();
        option40.setArgName("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        java.util.ListIterator listIterator54 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option40, listIterator54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "4" + "'", str48, "4");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1184");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String str5 = commandLine0.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str7 = commandLine0.getOptionValue("arg");
        java.lang.String str9 = commandLine0.getOptionValue('a');
        java.lang.String str12 = commandLine0.getOptionValue("[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        java.lang.Object obj14 = commandLine0.getOptionObject(' ');
        boolean boolean16 = commandLine0.hasOption("[ option: 4  :: null ::  ]");
        java.lang.String[] strArray18 = commandLine0.getOptionValues('4');
        java.lang.String str21 = commandLine0.getOptionValue('=', "org.apache.commons.cli.MissingArgumentException: [ option:    :: null ]");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str5, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" + "'", str12, "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(strArray18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "org.apache.commons.cli.MissingArgumentException: [ option:    :: null ]" + "'", str21, "org.apache.commons.cli.MissingArgumentException: [ option:    :: null ]");
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0382");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken("[ option: 4  :: null ::  ]", true);
        posixParser0.burstToken("[ Options: [ short {} ] [ long {} ]", true);
        org.apache.commons.cli.PosixParser posixParser42 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        option45.setDescription("");
        org.apache.commons.cli.Options options48 = options43.addOption(option45);
        org.apache.commons.cli.CommandLine commandLine49 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray51 = commandLine49.getOptionValues("hi!");
        java.lang.String str54 = commandLine49.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str56 = commandLine49.getOptionValue("arg");
        java.lang.String[] strArray57 = commandLine49.getArgs();
        java.lang.String[] strArray59 = posixParser42.flatten(options48, strArray57, false);
        boolean boolean61 = options48.hasOption("arg");
        java.util.Collection collection62 = options48.getOptions();
        org.apache.commons.cli.CommandLine commandLine63 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray65 = commandLine63.getOptionValues("hi!");
        java.lang.String[] strArray66 = commandLine63.getArgs();
        java.util.Iterator iterator67 = commandLine63.iterator();
        boolean boolean69 = commandLine63.hasOption("[ option: 4  :: null ]");
        java.lang.String str72 = commandLine63.getOptionValue("[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        java.lang.String[] strArray73 = commandLine63.getArgs();
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options48, strArray73, properties74, true);
        posixParser0.burstToken("[ option: 4  :: null :: [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ] ]", false);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNull(strArray51);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str54, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(collection62);
        org.junit.Assert.assertNull(strArray65);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(iterator67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" + "'", str72, "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine76);
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0109");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        java.util.Collection collection46 = options40.getOptionGroups();
        org.apache.commons.cli.Options options50 = options40.addOption("", false, "arg");
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup54 = options51.getOptionGroup(option53);
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        char char57 = option56.getValueSeparator();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create('4');
        option59.setDescription("");
        option56.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup63 = options51.getOptionGroup(option56);
        boolean boolean64 = option56.hasArgName();
        org.apache.commons.cli.Options options65 = options40.addOption(option56);
        org.apache.commons.cli.CommandLine commandLine66 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray68 = commandLine66.getOptionValues("hi!");
        java.lang.String str71 = commandLine66.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str73 = commandLine66.getOptionValue("arg");
        java.lang.String[] strArray74 = commandLine66.getArgs();
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options40, strArray74, properties75);
        java.lang.String str77 = options40.toString();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertNotNull(options50);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertTrue("'" + char57 + "' != '" + '\000' + "'", char57 == '\000');
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertNull(optionGroup63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(options65);
        org.junit.Assert.assertNull(strArray68);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str71, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ::  ]} ] [ long {} ]" + "'", str77, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ::  ]} ] [ long {} ]");
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1685");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptions();
        boolean boolean9 = options1.hasOption("arg");
        java.lang.String[] strArray12 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" };
        org.apache.commons.cli.CommandLine commandLine13 = posixParser0.parse(options1, strArray12);
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = org.apache.commons.cli.OptionBuilder.create('4');
        option16.setDescription("");
        org.apache.commons.cli.Options options19 = options14.addOption(option16);
        java.util.Collection collection20 = options14.getOptionGroups();
        org.apache.commons.cli.Options options24 = options14.addOption("", false, "arg");
        java.util.List list25 = options24.getRequiredOptions();
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create("arg");
        org.apache.commons.cli.Options options28 = options24.addOption(option27);
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setArgs((int) (short) 100);
        option30.setArgName("[ option: 4  :: null ]");
        java.lang.String str35 = option30.getLongOpt();
        java.lang.String str37 = option30.getValue((int) (short) -1);
        org.apache.commons.cli.Options options38 = options28.addOption(option30);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup42 = options39.getOptionGroup(option41);
        boolean boolean43 = option41.hasLongOpt();
        boolean boolean44 = option41.isRequired();
        java.util.List list45 = option41.getValuesList();
        option41.setDescription("[ option: 4  ::  ]");
        org.apache.commons.cli.Options options48 = options38.addOption(option41);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        option52.setDescription("");
        org.apache.commons.cli.Options options55 = options50.addOption(option52);
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray58 = commandLine56.getOptionValues("hi!");
        java.lang.String str61 = commandLine56.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str63 = commandLine56.getOptionValue("arg");
        java.lang.String[] strArray64 = commandLine56.getArgs();
        java.lang.String[] strArray66 = posixParser49.flatten(options55, strArray64, false);
        org.apache.commons.cli.CommandLine commandLine68 = posixParser0.parse(options38, strArray64, true);
        commandLine68.addArg("[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]");
        java.lang.String[] strArray72 = commandLine68.getOptionValues("[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
        java.util.Iterator iterator73 = commandLine68.iterator();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine13);
        org.junit.Assert.assertNotNull(option16);
        org.junit.Assert.assertNotNull(options19);
        org.junit.Assert.assertNotNull(collection20);
        org.junit.Assert.assertNotNull(options24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(list45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNull(strArray58);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str61, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertNull(strArray72);
        org.junit.Assert.assertNotNull(iterator73);
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0741");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        java.util.Collection collection22 = options6.getOptions();
        java.util.Collection collection23 = options6.getOptionGroups();
        org.apache.commons.cli.Option option25 = options6.getOption("[ option: 4  :: org.apache.commons.cli.ParseException: arg ]");
        org.apache.commons.cli.OptionGroup optionGroup26 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options27 = options6.addOptionGroup(optionGroup26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(collection22);
        org.junit.Assert.assertNotNull(collection23);
        org.junit.Assert.assertNull(option25);
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1477");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        boolean boolean37 = commandLine35.hasOption('4');
        boolean boolean39 = commandLine35.hasOption("");
        java.lang.String[] strArray41 = commandLine35.getOptionValues("[ option: 4  :: null ::  ]");
        commandLine35.addArg("[ option: 4  :: null ::  ]");
        boolean boolean45 = commandLine35.hasOption("[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1577");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken("hi!", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup24 = options21.getOptionGroup(option23);
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        char char27 = option26.getValueSeparator();
        org.apache.commons.cli.Option option29 = org.apache.commons.cli.OptionBuilder.create('4');
        option29.setDescription("");
        option26.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup33 = options21.getOptionGroup(option26);
        java.lang.String[] strArray34 = null;
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser0.parse(options21, strArray34, properties35);
        org.apache.commons.cli.Option option38 = options21.getOption("[ option:    :: null ]");
        java.util.Collection collection39 = options21.getOptions();
        java.lang.String str40 = options21.toString();
        java.util.Collection collection41 = options21.getOptionGroups();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNull(optionGroup24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + char27 + "' != '" + '\000' + "'", char27 == '\000');
        org.junit.Assert.assertNotNull(option29);
        org.junit.Assert.assertNull(optionGroup33);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNull(option38);
        org.junit.Assert.assertNotNull(collection39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str40, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(collection41);
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0254");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue("hi!");
        boolean boolean7 = commandLine0.hasOption("");
        java.lang.String str10 = commandLine0.getOptionValue("[ option: 4  :: null ]", "org.apache.commons.cli.MissingOptionException: hi!");
        commandLine0.addArg("org.apache.commons.cli.MissingArgumentException: [ option:    :: null ]");
        commandLine0.addArg("org.apache.commons.cli.UnrecognizedOptionException: arg");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "org.apache.commons.cli.MissingOptionException: hi!" + "'", str10, "org.apache.commons.cli.MissingOptionException: hi!");
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1628");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String str5 = commandLine0.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        commandLine0.addArg("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]");
        boolean boolean9 = commandLine0.hasOption("[ option: 4  :: null :: [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ] ]");
        java.lang.String[] strArray10 = commandLine0.getArgs();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str5, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray10);
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1263");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        java.util.Collection collection46 = options40.getOptionGroups();
        org.apache.commons.cli.Options options50 = options40.addOption("", false, "arg");
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup54 = options51.getOptionGroup(option53);
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        char char57 = option56.getValueSeparator();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create('4');
        option59.setDescription("");
        option56.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup63 = options51.getOptionGroup(option56);
        boolean boolean64 = option56.hasArgName();
        org.apache.commons.cli.Options options65 = options40.addOption(option56);
        org.apache.commons.cli.CommandLine commandLine66 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray68 = commandLine66.getOptionValues("hi!");
        java.lang.String str71 = commandLine66.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str73 = commandLine66.getOptionValue("arg");
        java.lang.String[] strArray74 = commandLine66.getArgs();
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options40, strArray74, properties75);
        org.apache.commons.cli.Options options77 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option79 = org.apache.commons.cli.OptionBuilder.create('4');
        char char80 = option79.getValueSeparator();
        org.apache.commons.cli.Option option82 = org.apache.commons.cli.OptionBuilder.create('4');
        option82.setDescription("");
        option79.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup86 = options77.getOptionGroup(option79);
        java.lang.String[] strArray89 = new java.lang.String[] { "4", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" };
        java.util.Properties properties90 = null;
        org.apache.commons.cli.CommandLine commandLine91 = posixParser0.parse(options77, strArray89, properties90);
        java.lang.String str94 = commandLine91.getOptionValue("[ option: 4  ::  ]", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.Object obj96 = commandLine91.getOptionObject('=');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertNotNull(options50);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertTrue("'" + char57 + "' != '" + '\000' + "'", char57 == '\000');
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertNull(optionGroup63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(options65);
        org.junit.Assert.assertNull(strArray68);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str71, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertNotNull(option79);
        org.junit.Assert.assertTrue("'" + char80 + "' != '" + '\000' + "'", char80 == '\000');
        org.junit.Assert.assertNotNull(option82);
        org.junit.Assert.assertNull(optionGroup86);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(commandLine91);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str94, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(obj96);
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1043");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptions();
        boolean boolean9 = options1.hasOption("arg");
        java.lang.String[] strArray12 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" };
        org.apache.commons.cli.CommandLine commandLine13 = posixParser0.parse(options1, strArray12);
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = org.apache.commons.cli.OptionBuilder.create('4');
        option16.setDescription("");
        org.apache.commons.cli.Options options19 = options14.addOption(option16);
        java.util.Collection collection20 = options14.getOptionGroups();
        org.apache.commons.cli.Options options24 = options14.addOption("", false, "arg");
        java.util.List list25 = options24.getRequiredOptions();
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create("arg");
        org.apache.commons.cli.Options options28 = options24.addOption(option27);
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setArgs((int) (short) 100);
        option30.setArgName("[ option: 4  :: null ]");
        java.lang.String str35 = option30.getLongOpt();
        java.lang.String str37 = option30.getValue((int) (short) -1);
        org.apache.commons.cli.Options options38 = options28.addOption(option30);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup42 = options39.getOptionGroup(option41);
        boolean boolean43 = option41.hasLongOpt();
        boolean boolean44 = option41.isRequired();
        java.util.List list45 = option41.getValuesList();
        option41.setDescription("[ option: 4  ::  ]");
        org.apache.commons.cli.Options options48 = options38.addOption(option41);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        option52.setDescription("");
        org.apache.commons.cli.Options options55 = options50.addOption(option52);
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray58 = commandLine56.getOptionValues("hi!");
        java.lang.String str61 = commandLine56.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str63 = commandLine56.getOptionValue("arg");
        java.lang.String[] strArray64 = commandLine56.getArgs();
        java.lang.String[] strArray66 = posixParser49.flatten(options55, strArray64, false);
        org.apache.commons.cli.CommandLine commandLine68 = posixParser0.parse(options38, strArray64, true);
        java.util.List list69 = options38.getRequiredOptions();
        org.apache.commons.cli.Option option73 = new org.apache.commons.cli.Option("arg", false, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str75 = option73.getValue("");
        option73.setArgs(0);
        boolean boolean78 = option73.hasLongOpt();
        option73.setOptionalArg(false);
        java.lang.String str81 = option73.getValue();
        java.util.List list82 = option73.getValuesList();
        org.apache.commons.cli.Options options83 = options38.addOption(option73);
        boolean boolean84 = option73.hasArgs();
        boolean boolean85 = option73.hasValueSeparator();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine13);
        org.junit.Assert.assertNotNull(option16);
        org.junit.Assert.assertNotNull(options19);
        org.junit.Assert.assertNotNull(collection20);
        org.junit.Assert.assertNotNull(options24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(list45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNull(strArray58);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str61, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertNotNull(list69);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNotNull(list82);
        org.junit.Assert.assertNotNull(options83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1187");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine8 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine8.getOptionValues("hi!");
        java.lang.String str13 = commandLine8.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str15 = commandLine8.getOptionValue("arg");
        java.lang.String[] strArray16 = commandLine8.getArgs();
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser0.parse(options1, strArray16, properties17);
        org.apache.commons.cli.Options options23 = options1.addOption(" ", "", true, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.util.Collection collection24 = options1.getOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str13, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0216");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine8 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine8.getOptionValues("hi!");
        java.lang.String str13 = commandLine8.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str15 = commandLine8.getOptionValue("arg");
        java.lang.String[] strArray16 = commandLine8.getArgs();
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser0.parse(options1, strArray16, properties17);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options22 = options1.addOption("[ option: 4  :: null :: [ option:   [ option: 4  ::  ]  :: null ] ]", false, "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str13, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1291");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create('4');
        option1.setDescription("");
        boolean boolean4 = option1.hasValueSeparator();
        java.util.List list5 = option1.getValuesList();
        int int6 = option1.getArgs();
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        option1.setType((java.lang.Object) commandLine7);
        org.apache.commons.cli.Option option12 = org.apache.commons.cli.OptionBuilder.create('\000');
        commandLine7.addOption(option12);
        java.lang.String str16 = commandLine7.getOptionValue("[ option: 4 arg  :: null ]", "[ option: 4 arg +ARG :: [ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ] ]");
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(list5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(option12);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[ option: 4 arg +ARG :: [ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ] ]" + "'", str16, "[ option: 4 arg +ARG :: [ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ] ]");
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1339");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String[] strArray10 = commandLine7.getArgs();
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = posixParser0.parse(options1, strArray10, properties11);
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option15 = org.apache.commons.cli.OptionBuilder.create('4');
        option15.setDescription("");
        org.apache.commons.cli.Options options18 = options13.addOption(option15);
        java.lang.String str19 = options13.toString();
        org.apache.commons.cli.CommandLine commandLine20 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray22 = commandLine20.getOptionValues("hi!");
        java.lang.String str25 = commandLine20.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str27 = commandLine20.getOptionValue("arg");
        java.lang.String[] strArray28 = commandLine20.getArgs();
        java.util.Properties properties29 = null;
        org.apache.commons.cli.CommandLine commandLine31 = posixParser0.parse(options13, strArray28, properties29, false);
        java.lang.String str34 = commandLine31.getOptionValue('4', "org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]");
        boolean boolean36 = commandLine31.hasOption("[ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ]");
        java.lang.String str39 = commandLine31.getOptionValue("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4 org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!  ::  ]} ] [ long {org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!=[ option: 4 org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!  ::  ]} ]", "");
        java.util.Iterator iterator40 = commandLine31.iterator();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
        org.junit.Assert.assertNotNull(option15);
        org.junit.Assert.assertNotNull(options18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str19, "[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(strArray22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str25, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]" + "'", str34, "org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(iterator40);
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0538");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        java.lang.String str23 = commandLine21.getOptionValue("[ option:  +ARG ::  ]");
        java.lang.Object obj25 = commandLine21.getOptionObject("");
        java.util.Iterator iterator26 = commandLine21.iterator();
        java.lang.Object obj28 = commandLine21.getOptionObject("[ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]");
        java.lang.Object obj30 = commandLine21.getOptionObject('=');
        java.util.Iterator iterator31 = commandLine21.iterator();
        org.apache.commons.cli.OptionBuilder optionBuilder32 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) iterator31);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(iterator26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(iterator31);
        org.junit.Assert.assertNotNull(optionBuilder32);
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0290");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        java.lang.String[] strArray37 = commandLine35.getOptionValues("org.apache.commons.cli.MissingOptionException: hi!");
        java.util.List list38 = commandLine35.getArgList();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNull(strArray37);
        org.junit.Assert.assertNotNull(list38);
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0972");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.PosixParser posixParser53 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        option56.setDescription("");
        org.apache.commons.cli.Options options59 = options54.addOption(option56);
        org.apache.commons.cli.CommandLine commandLine60 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray62 = commandLine60.getOptionValues("hi!");
        java.lang.String str65 = commandLine60.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str67 = commandLine60.getOptionValue("arg");
        java.lang.String[] strArray68 = commandLine60.getArgs();
        java.lang.String[] strArray70 = posixParser53.flatten(options59, strArray68, false);
        org.apache.commons.cli.PosixParser posixParser71 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options72 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option74 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup75 = options72.getOptionGroup(option74);
        org.apache.commons.cli.CommandLine commandLine76 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray78 = commandLine76.getOptionValues("hi!");
        java.lang.String str81 = commandLine76.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str83 = commandLine76.getOptionValue("arg");
        java.lang.String[] strArray84 = commandLine76.getArgs();
        java.lang.String[] strArray86 = posixParser71.flatten(options72, strArray84, true);
        org.apache.commons.cli.CommandLine commandLine88 = posixParser0.parse(options59, strArray84, false);
        java.util.List list89 = options59.getRequiredOptions();
        org.apache.commons.cli.Option option91 = options59.getOption("[ option: 4 arg +ARG :: [ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ] ]");
        java.util.Collection collection92 = options59.getOptionGroups();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNull(strArray62);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str65, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(option74);
        org.junit.Assert.assertNull(optionGroup75);
        org.junit.Assert.assertNull(strArray78);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str81, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(commandLine88);
        org.junit.Assert.assertNotNull(list89);
        org.junit.Assert.assertNull(option91);
        org.junit.Assert.assertNotNull(collection92);
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1535");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptions();
        boolean boolean9 = options1.hasOption("arg");
        java.lang.String[] strArray12 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" };
        org.apache.commons.cli.CommandLine commandLine13 = posixParser0.parse(options1, strArray12);
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = org.apache.commons.cli.OptionBuilder.create('4');
        char char17 = option16.getValueSeparator();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        option16.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup23 = options14.getOptionGroup(option16);
        java.util.List list24 = options14.helpOptions();
        java.util.Collection collection25 = options14.getOptionGroups();
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option28 = org.apache.commons.cli.OptionBuilder.create('4');
        option28.setDescription("");
        org.apache.commons.cli.Options options31 = options26.addOption(option28);
        java.util.Collection collection32 = options26.getOptionGroups();
        org.apache.commons.cli.Options options36 = options26.addOption("", false, "arg");
        java.util.Collection collection37 = options26.getOptionGroups();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        option40.setValueSeparator(' ');
        org.apache.commons.cli.OptionGroup optionGroup46 = options26.getOptionGroup(option40);
        option40.setRequired(false);
        org.apache.commons.cli.CommandLine commandLine49 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray51 = commandLine49.getOptionValues("hi!");
        java.lang.String[] strArray52 = commandLine49.getArgs();
        boolean boolean53 = option40.equals((java.lang.Object) strArray52);
        org.apache.commons.cli.CommandLine commandLine55 = posixParser0.parse(options14, strArray52, true);
        org.apache.commons.cli.Options options56 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option58 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup59 = options56.getOptionGroup(option58);
        org.apache.commons.cli.Option option61 = org.apache.commons.cli.OptionBuilder.create('4');
        char char62 = option61.getValueSeparator();
        org.apache.commons.cli.Option option64 = org.apache.commons.cli.OptionBuilder.create('4');
        option64.setDescription("");
        option61.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup68 = options56.getOptionGroup(option61);
        boolean boolean70 = options56.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        boolean boolean72 = options56.hasOption(" ");
        org.apache.commons.cli.PosixParser posixParser73 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options74 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option76 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup77 = options74.getOptionGroup(option76);
        org.apache.commons.cli.CommandLine commandLine78 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray80 = commandLine78.getOptionValues("hi!");
        java.lang.String str83 = commandLine78.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str85 = commandLine78.getOptionValue("arg");
        java.lang.String[] strArray86 = commandLine78.getArgs();
        java.lang.String[] strArray88 = posixParser73.flatten(options74, strArray86, true);
        org.apache.commons.cli.CommandLine commandLine90 = posixParser0.parse(options56, strArray86, false);
        java.lang.String[] strArray92 = commandLine90.getOptionValues(' ');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine13);
        org.junit.Assert.assertNotNull(option16);
        org.junit.Assert.assertTrue("'" + char17 + "' != '" + '\000' + "'", char17 == '\000');
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNull(optionGroup23);
        org.junit.Assert.assertNotNull(list24);
        org.junit.Assert.assertNotNull(collection25);
        org.junit.Assert.assertNotNull(option28);
        org.junit.Assert.assertNotNull(options31);
        org.junit.Assert.assertNotNull(collection32);
        org.junit.Assert.assertNotNull(options36);
        org.junit.Assert.assertNotNull(collection37);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(optionGroup46);
        org.junit.Assert.assertNull(strArray51);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertNotNull(option58);
        org.junit.Assert.assertNull(optionGroup59);
        org.junit.Assert.assertNotNull(option61);
        org.junit.Assert.assertTrue("'" + char62 + "' != '" + '\000' + "'", char62 == '\000');
        org.junit.Assert.assertNotNull(option64);
        org.junit.Assert.assertNull(optionGroup68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(option76);
        org.junit.Assert.assertNull(optionGroup77);
        org.junit.Assert.assertNull(strArray80);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str83, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertNotNull(commandLine90);
        org.junit.Assert.assertNull(strArray92);
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0940");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        org.apache.commons.cli.Options options36 = null;
        org.apache.commons.cli.CommandLine commandLine37 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray39 = commandLine37.getOptionValues("hi!");
        java.lang.String[] strArray40 = commandLine37.getArgs();
        java.lang.String[] strArray42 = posixParser0.flatten(options36, strArray40, false);
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.burstToken("[ option: 4  :: [ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ] ]", false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNull(strArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray42);
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1704");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String[] strArray10 = commandLine7.getArgs();
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = posixParser0.parse(options1, strArray10, properties11);
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option15 = org.apache.commons.cli.OptionBuilder.create('4');
        option15.setDescription("");
        org.apache.commons.cli.Options options18 = options13.addOption(option15);
        java.lang.String str19 = options13.toString();
        org.apache.commons.cli.CommandLine commandLine20 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray22 = commandLine20.getOptionValues("hi!");
        java.lang.String str25 = commandLine20.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str27 = commandLine20.getOptionValue("arg");
        java.lang.String[] strArray28 = commandLine20.getArgs();
        java.util.Properties properties29 = null;
        org.apache.commons.cli.CommandLine commandLine31 = posixParser0.parse(options13, strArray28, properties29, false);
        java.lang.String str33 = commandLine31.getOptionValue("[ option: 4  ::  :: [] ]");
        java.lang.String str36 = commandLine31.getOptionValue(' ', "[ Options: [ short {4=[ option: 4  ::  :: [ option: 4  ::  :: false ] ]} ] [ long {} ]");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
        org.junit.Assert.assertNotNull(option15);
        org.junit.Assert.assertNotNull(options18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str19, "[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(strArray22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str25, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[ Options: [ short {4=[ option: 4  ::  :: [ option: 4  ::  :: false ] ]} ] [ long {} ]" + "'", str36, "[ Options: [ short {4=[ option: 4  ::  :: [ option: 4  ::  :: false ] ]} ] [ long {} ]");
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0172");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken("[ option: 4  :: null ::  ]", true);
        posixParser0.burstToken("[ Options: [ short {} ] [ long {} ]", true);
        org.apache.commons.cli.Options options42 = null;
        java.lang.String[] strArray43 = new java.lang.String[] {};
        java.util.Properties properties44 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.CommandLine commandLine46 = posixParser0.parse(options42, strArray43, properties44, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(strArray43);
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0906");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        java.util.Collection collection53 = options22.getOptionGroups();
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        option56.setDescription("");
        org.apache.commons.cli.Options options59 = options54.addOption(option56);
        java.util.Collection collection60 = options54.getOptionGroups();
        org.apache.commons.cli.Options options64 = options54.addOption("", false, "arg");
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option67 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup68 = options65.getOptionGroup(option67);
        org.apache.commons.cli.Option option70 = org.apache.commons.cli.OptionBuilder.create('4');
        char char71 = option70.getValueSeparator();
        org.apache.commons.cli.Option option73 = org.apache.commons.cli.OptionBuilder.create('4');
        option73.setDescription("");
        option70.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup77 = options65.getOptionGroup(option70);
        boolean boolean78 = option70.hasArgName();
        org.apache.commons.cli.Options options79 = options54.addOption(option70);
        org.apache.commons.cli.Options options80 = options22.addOption(option70);
        org.apache.commons.cli.Option option82 = org.apache.commons.cli.OptionBuilder.create('4');
        char char83 = option82.getValueSeparator();
        boolean boolean84 = option82.hasArg();
        boolean boolean85 = option82.hasOptionalArg();
        org.apache.commons.cli.OptionGroup optionGroup86 = options22.getOptionGroup(option82);
        org.apache.commons.cli.Option option88 = options22.getOption("arg");
        boolean boolean90 = options22.hasOption("[ option: 4  :: null :: [ option:   [ option: 4  ::  ]  :: null ] ]");
        boolean boolean92 = options22.hasOption("[ option: 4  :: null ::  ]");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(collection53);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNotNull(collection60);
        org.junit.Assert.assertNotNull(options64);
        org.junit.Assert.assertNotNull(option67);
        org.junit.Assert.assertNull(optionGroup68);
        org.junit.Assert.assertNotNull(option70);
        org.junit.Assert.assertTrue("'" + char71 + "' != '" + '\000' + "'", char71 == '\000');
        org.junit.Assert.assertNotNull(option73);
        org.junit.Assert.assertNull(optionGroup77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(options79);
        org.junit.Assert.assertNotNull(options80);
        org.junit.Assert.assertNotNull(option82);
        org.junit.Assert.assertTrue("'" + char83 + "' != '" + '\000' + "'", char83 == '\000');
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(optionGroup86);
        org.junit.Assert.assertNull(option88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0032");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken("hi!", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptionGroups();
        org.apache.commons.cli.Options options31 = options21.addOption("", false, "arg");
        java.util.List list32 = options31.getRequiredOptions();
        org.apache.commons.cli.Option option34 = org.apache.commons.cli.OptionBuilder.create("arg");
        org.apache.commons.cli.Options options35 = options31.addOption(option34);
        boolean boolean37 = options31.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        java.util.Collection collection38 = options31.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine39 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray41 = commandLine39.getOptionValues("hi!");
        java.lang.String str44 = commandLine39.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str46 = commandLine39.getOptionValue("arg");
        java.lang.String[] strArray47 = commandLine39.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine50 = posixParser0.parse(options31, strArray47, properties48, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options54 = options31.addOption("[ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]", false, "[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(options31);
        org.junit.Assert.assertNotNull(list32);
        org.junit.Assert.assertNotNull(option34);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertNull(strArray41);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str44, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine50);
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1727");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.CommandLine commandLine5 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray7 = commandLine5.getOptionValues("hi!");
        java.lang.String str10 = commandLine5.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str12 = commandLine5.getOptionValue("arg");
        java.lang.String[] strArray13 = commandLine5.getArgs();
        java.lang.String[] strArray15 = posixParser0.flatten(options1, strArray13, true);
        posixParser0.burstToken("org.apache.commons.cli.ParseException: [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]", false);
        posixParser0.burstToken("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!", true);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = options22.getOption("org.apache.commons.cli.MissingOptionException: hi!");
        java.util.List list28 = options22.helpOptions();
        boolean boolean30 = options22.hasOption("[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.CommandLine commandLine31 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray33 = commandLine31.getOptionValues("hi!");
        java.lang.String[] strArray34 = commandLine31.getArgs();
        java.util.Iterator iterator35 = commandLine31.iterator();
        boolean boolean37 = commandLine31.hasOption("[ option: 4  :: null ]");
        boolean boolean39 = commandLine31.hasOption('=');
        java.lang.String str42 = commandLine31.getOptionValue("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ::  ]} ] [ long {} ]", "[ option: 4 [ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ]  :: null ]");
        java.lang.String[] strArray43 = commandLine31.getArgs();
        org.apache.commons.cli.CommandLine commandLine45 = posixParser0.parse(options22, strArray43, true);
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option48 = org.apache.commons.cli.OptionBuilder.create('4');
        option48.setDescription("");
        org.apache.commons.cli.Options options51 = options46.addOption(option48);
        java.util.Collection collection52 = options46.getOptionGroups();
        org.apache.commons.cli.Options options56 = options46.addOption("", false, "arg");
        java.util.List list57 = options56.getRequiredOptions();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create("arg");
        org.apache.commons.cli.Options options60 = options56.addOption(option59);
        boolean boolean62 = options56.hasOption("");
        java.lang.String[] strArray63 = null;
        org.apache.commons.cli.CommandLine commandLine65 = posixParser0.parse(options56, strArray63, true);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNull(strArray7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str10, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNull(option27);
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(strArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(iterator35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[ option: 4 [ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ]  :: null ]" + "'", str42, "[ option: 4 [ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ]  :: null ]");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(commandLine45);
        org.junit.Assert.assertNotNull(option48);
        org.junit.Assert.assertNotNull(options51);
        org.junit.Assert.assertNotNull(collection52);
        org.junit.Assert.assertNotNull(options56);
        org.junit.Assert.assertNotNull(list57);
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(commandLine65);
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0259");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptions();
        boolean boolean9 = options1.hasOption("arg");
        java.lang.String[] strArray12 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" };
        org.apache.commons.cli.CommandLine commandLine13 = posixParser0.parse(options1, strArray12);
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = org.apache.commons.cli.OptionBuilder.create('4');
        option16.setDescription("");
        org.apache.commons.cli.Options options19 = options14.addOption(option16);
        java.util.Collection collection20 = options14.getOptionGroups();
        org.apache.commons.cli.Options options24 = options14.addOption("", false, "arg");
        java.util.List list25 = options24.getRequiredOptions();
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create("arg");
        org.apache.commons.cli.Options options28 = options24.addOption(option27);
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setArgs((int) (short) 100);
        option30.setArgName("[ option: 4  :: null ]");
        java.lang.String str35 = option30.getLongOpt();
        java.lang.String str37 = option30.getValue((int) (short) -1);
        org.apache.commons.cli.Options options38 = options28.addOption(option30);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup42 = options39.getOptionGroup(option41);
        boolean boolean43 = option41.hasLongOpt();
        boolean boolean44 = option41.isRequired();
        java.util.List list45 = option41.getValuesList();
        option41.setDescription("[ option: 4  ::  ]");
        org.apache.commons.cli.Options options48 = options38.addOption(option41);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        option52.setDescription("");
        org.apache.commons.cli.Options options55 = options50.addOption(option52);
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray58 = commandLine56.getOptionValues("hi!");
        java.lang.String str61 = commandLine56.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str63 = commandLine56.getOptionValue("arg");
        java.lang.String[] strArray64 = commandLine56.getArgs();
        java.lang.String[] strArray66 = posixParser49.flatten(options55, strArray64, false);
        org.apache.commons.cli.CommandLine commandLine68 = posixParser0.parse(options38, strArray64, true);
        org.apache.commons.cli.OptionBuilder optionBuilder69 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options38);
        java.lang.String str70 = options38.toString();
        java.lang.String str71 = options38.toString();
        org.apache.commons.cli.OptionGroup optionGroup72 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options73 = options38.addOptionGroup(optionGroup72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine13);
        org.junit.Assert.assertNotNull(option16);
        org.junit.Assert.assertNotNull(options19);
        org.junit.Assert.assertNotNull(collection20);
        org.junit.Assert.assertNotNull(options24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(list45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNull(strArray58);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str61, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertNotNull(optionBuilder69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "[ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]" + "'", str70, "[ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]" + "'", str71, "[ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]");
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1395");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken("hi!", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptions();
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        char char31 = option30.getValueSeparator();
        org.apache.commons.cli.Option option33 = org.apache.commons.cli.OptionBuilder.create('4');
        option33.setDescription("");
        option30.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup37 = options28.getOptionGroup(option30);
        option30.setOptionalArg(true);
        int int40 = option30.getId();
        org.apache.commons.cli.Options options41 = options21.addOption(option30);
        boolean boolean43 = options41.hasOption("");
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        option45.setArgs((int) (short) 100);
        option45.setArgName("[ option: 4  :: null ]");
        java.lang.String str50 = option45.getLongOpt();
        boolean boolean51 = option45.hasLongOpt();
        org.apache.commons.cli.Options options52 = options41.addOption(option45);
        java.util.Collection collection53 = options41.getOptions();
        org.apache.commons.cli.PosixParser posixParser54 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option57 = org.apache.commons.cli.OptionBuilder.create('4');
        option57.setDescription("");
        org.apache.commons.cli.Options options60 = options55.addOption(option57);
        java.util.Collection collection61 = options55.getOptions();
        boolean boolean63 = options55.hasOption("arg");
        java.lang.String[] strArray66 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" };
        org.apache.commons.cli.CommandLine commandLine67 = posixParser54.parse(options55, strArray66);
        java.lang.String[] strArray69 = posixParser0.flatten(options41, strArray66, false);
        java.util.List list70 = options41.helpOptions();
        java.util.List list71 = options41.getRequiredOptions();
        org.apache.commons.cli.Option option73 = options41.getOption("hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options77 = options41.addOption("[ option: 4  :: [ option: 4  :: null ] ::  ]", true, "org.apache.commons.cli.UnrecognizedOptionException: arg");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertTrue("'" + char31 + "' != '" + '\000' + "'", char31 == '\000');
        org.junit.Assert.assertNotNull(option33);
        org.junit.Assert.assertNull(optionGroup37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(collection53);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(collection61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(list70);
        org.junit.Assert.assertNotNull(list71);
        org.junit.Assert.assertNull(option73);
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0754");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String[] strArray10 = commandLine7.getArgs();
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = posixParser0.parse(options1, strArray10, properties11);
        java.lang.String[] strArray13 = commandLine12.getArgs();
        java.lang.String str15 = commandLine12.getOptionValue('4');
        java.lang.String str18 = commandLine12.getOptionValue("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", "[ option:   [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]  :: null ]");
        java.lang.Object obj20 = commandLine12.getOptionObject("[ option: arg [ option: 4  :: null ] +ARG :: 4 ]");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[ option:   [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]  :: null ]" + "'", str18, "[ option:   [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]  :: null ]");
        org.junit.Assert.assertNull(obj20);
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1439");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup43 = options40.getOptionGroup(option42);
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        org.apache.commons.cli.OptionGroup optionGroup46 = options40.getOptionGroup(option45);
        java.util.List list47 = options40.getRequiredOptions();
        java.util.Collection collection48 = options40.getOptions();
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        option52.setDescription("");
        org.apache.commons.cli.Options options55 = options50.addOption(option52);
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray58 = commandLine56.getOptionValues("hi!");
        java.lang.String str61 = commandLine56.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str63 = commandLine56.getOptionValue("arg");
        java.lang.String[] strArray64 = commandLine56.getArgs();
        java.lang.String[] strArray66 = posixParser49.flatten(options55, strArray64, false);
        java.util.Properties properties67 = null;
        org.apache.commons.cli.CommandLine commandLine69 = posixParser0.parse(options40, strArray64, properties67, true);
        java.lang.String str72 = commandLine69.getOptionValue('4', "");
        java.lang.String str74 = commandLine69.getOptionValue('=');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNull(optionGroup46);
        org.junit.Assert.assertNotNull(list47);
        org.junit.Assert.assertNotNull(collection48);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNull(strArray58);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str61, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine69);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNull(str74);
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1248");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        java.util.Collection collection22 = options6.getOptions();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create('4');
        char char25 = option24.getValueSeparator();
        org.apache.commons.cli.Options options26 = options6.addOption(option24);
        org.apache.commons.cli.Option option28 = org.apache.commons.cli.OptionBuilder.create('4');
        option28.setArgs((int) (short) 100);
        option28.setArgName("[ option: 4  :: null ]");
        java.lang.String str33 = option28.getLongOpt();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option36 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup37 = options34.getOptionGroup(option36);
        org.apache.commons.cli.Option option39 = org.apache.commons.cli.OptionBuilder.create('4');
        org.apache.commons.cli.OptionGroup optionGroup40 = options34.getOptionGroup(option39);
        option28.setType((java.lang.Object) options34);
        org.apache.commons.cli.Options options42 = options6.addOption(option28);
        java.lang.String str43 = options42.toString();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(collection22);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertTrue("'" + char25 + "' != '" + '\000' + "'", char25 == '\000');
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(option28);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(option36);
        org.junit.Assert.assertNull(optionGroup37);
        org.junit.Assert.assertNotNull(option39);
        org.junit.Assert.assertNull(optionGroup40);
        org.junit.Assert.assertNotNull(options42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ Options: [ short {4=[ option: 4  :: null :: [ Options: [ short {} ] [ long {} ] ]} ] [ long {} ]" + "'", str43, "[ Options: [ short {4=[ option: 4  :: null :: [ Options: [ short {} ] [ long {} ] ]} ] [ long {} ]");
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1522");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.util.Iterator iterator4 = commandLine0.iterator();
        boolean boolean6 = commandLine0.hasOption("[ option: 4  :: null ]");
        boolean boolean8 = commandLine0.hasOption('=');
        java.lang.String str11 = commandLine0.getOptionValue('4', "");
        boolean boolean13 = commandLine0.hasOption('=');
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(iterator4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0333");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptions();
        boolean boolean9 = options1.hasOption("arg");
        java.lang.String[] strArray12 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" };
        org.apache.commons.cli.CommandLine commandLine13 = posixParser0.parse(options1, strArray12);
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = org.apache.commons.cli.OptionBuilder.create('4');
        option16.setDescription("");
        org.apache.commons.cli.Options options19 = options14.addOption(option16);
        java.util.Collection collection20 = options14.getOptionGroups();
        org.apache.commons.cli.Options options24 = options14.addOption("", false, "arg");
        java.util.List list25 = options24.getRequiredOptions();
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create("arg");
        org.apache.commons.cli.Options options28 = options24.addOption(option27);
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setArgs((int) (short) 100);
        option30.setArgName("[ option: 4  :: null ]");
        java.lang.String str35 = option30.getLongOpt();
        java.lang.String str37 = option30.getValue((int) (short) -1);
        org.apache.commons.cli.Options options38 = options28.addOption(option30);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup42 = options39.getOptionGroup(option41);
        boolean boolean43 = option41.hasLongOpt();
        boolean boolean44 = option41.isRequired();
        java.util.List list45 = option41.getValuesList();
        option41.setDescription("[ option: 4  ::  ]");
        org.apache.commons.cli.Options options48 = options38.addOption(option41);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        option52.setDescription("");
        org.apache.commons.cli.Options options55 = options50.addOption(option52);
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray58 = commandLine56.getOptionValues("hi!");
        java.lang.String str61 = commandLine56.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str63 = commandLine56.getOptionValue("arg");
        java.lang.String[] strArray64 = commandLine56.getArgs();
        java.lang.String[] strArray66 = posixParser49.flatten(options55, strArray64, false);
        org.apache.commons.cli.CommandLine commandLine68 = posixParser0.parse(options38, strArray64, true);
        org.apache.commons.cli.Option option70 = org.apache.commons.cli.OptionBuilder.create('4');
        char char71 = option70.getValueSeparator();
        org.apache.commons.cli.Option option73 = org.apache.commons.cli.OptionBuilder.create('4');
        option73.setDescription("");
        option70.setType((java.lang.Object) "");
        boolean boolean77 = option70.isRequired();
        option70.setDescription("");
        boolean boolean80 = option70.hasLongOpt();
        org.apache.commons.cli.Options options81 = options38.addOption(option70);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options85 = options38.addOption("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]", false, "org.apache.commons.cli.MissingOptionException: hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine13);
        org.junit.Assert.assertNotNull(option16);
        org.junit.Assert.assertNotNull(options19);
        org.junit.Assert.assertNotNull(collection20);
        org.junit.Assert.assertNotNull(options24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(list45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNull(strArray58);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str61, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertNotNull(option70);
        org.junit.Assert.assertTrue("'" + char71 + "' != '" + '\000' + "'", char71 == '\000');
        org.junit.Assert.assertNotNull(option73);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(options81);
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1475");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.util.Iterator iterator3 = commandLine0.iterator();
        java.lang.String[] strArray5 = commandLine0.getOptionValues('a');
        java.lang.Object obj7 = commandLine0.getOptionObject('a');
        java.lang.Object obj9 = commandLine0.getOptionObject("org.apache.commons.cli.MissingOptionException: hi!");
        java.lang.String str12 = commandLine0.getOptionValue("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]", "[ option: 4  :: null ]");
        java.lang.String[] strArray14 = commandLine0.getOptionValues('a');
        java.lang.Object obj16 = commandLine0.getOptionObject("org.apache.commons.cli.MissingOptionException: hi!");
        java.lang.String[] strArray18 = commandLine0.getOptionValues("org.apache.commons.cli.ParseException: [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(iterator3);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ option: 4  :: null ]" + "'", str12, "[ option: 4  :: null ]");
        org.junit.Assert.assertNull(strArray14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(strArray18);
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0867");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.CommandLine commandLine5 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray7 = commandLine5.getOptionValues("hi!");
        java.lang.String str10 = commandLine5.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str12 = commandLine5.getOptionValue("arg");
        java.lang.String[] strArray13 = commandLine5.getArgs();
        java.lang.String[] strArray15 = posixParser0.flatten(options1, strArray13, true);
        org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = org.apache.commons.cli.OptionBuilder.create('4');
        option18.setDescription("");
        org.apache.commons.cli.Options options21 = options16.addOption(option18);
        java.util.Collection collection22 = options16.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.util.Properties properties32 = null;
        org.apache.commons.cli.CommandLine commandLine34 = posixParser0.parse(options16, strArray31, properties32, false);
        org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option37 = org.apache.commons.cli.OptionBuilder.create('4');
        option37.setDescription("");
        org.apache.commons.cli.Options options40 = options35.addOption(option37);
        java.util.Collection collection41 = options35.getOptionGroups();
        org.apache.commons.cli.Option option43 = org.apache.commons.cli.OptionBuilder.create('4');
        option43.setDescription("");
        option43.setLongOpt("hi!");
        boolean boolean48 = option43.hasArgName();
        org.apache.commons.cli.Options options49 = options35.addOption(option43);
        org.apache.commons.cli.PosixParser posixParser50 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = org.apache.commons.cli.OptionBuilder.create('4');
        option53.setDescription("");
        org.apache.commons.cli.Options options56 = options51.addOption(option53);
        org.apache.commons.cli.CommandLine commandLine57 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray59 = commandLine57.getOptionValues("hi!");
        java.lang.String[] strArray60 = commandLine57.getArgs();
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser50.parse(options51, strArray60, properties61);
        org.apache.commons.cli.CommandLine commandLine63 = posixParser0.parse(options35, strArray60);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options68 = options35.addOption("[ option:  +ARG :: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ]", "org.apache.commons.cli.ParseException: org.apache.commons.cli.UnrecognizedOptionException: hi!", true, "[ option: 4  :: null :: [ option: 4  ::  ] ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNull(strArray7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str10, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(option18);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNotNull(collection22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(option37);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertNotNull(collection41);
        org.junit.Assert.assertNotNull(option43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(options49);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNotNull(options56);
        org.junit.Assert.assertNull(strArray59);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(commandLine63);
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1246");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue("hi!");
        boolean boolean7 = commandLine0.hasOption("");
        java.lang.String str10 = commandLine0.getOptionValue("[ option: 4  :: null ]", "org.apache.commons.cli.MissingOptionException: hi!");
        java.lang.String[] strArray12 = commandLine0.getOptionValues('4');
        java.lang.String[] strArray14 = commandLine0.getOptionValues('a');
        org.apache.commons.cli.Option option16 = org.apache.commons.cli.OptionBuilder.create(' ');
        boolean boolean17 = option16.hasArgName();
        boolean boolean18 = option16.hasArgName();
        commandLine0.addOption(option16);
        java.lang.String str20 = option16.getLongOpt();
        boolean boolean21 = option16.hasArg();
        int int22 = option16.getId();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "org.apache.commons.cli.MissingOptionException: hi!" + "'", str10, "org.apache.commons.cli.MissingOptionException: hi!");
        org.junit.Assert.assertNull(strArray12);
        org.junit.Assert.assertNull(strArray14);
        org.junit.Assert.assertNotNull(option16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 32 + "'", int22 == 32);
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0950");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.util.Iterator iterator3 = commandLine0.iterator();
        java.lang.String[] strArray5 = commandLine0.getOptionValues('a');
        java.util.Iterator iterator6 = commandLine0.iterator();
        java.lang.Object obj8 = commandLine0.getOptionObject("[ option:    :: null ]");
        java.lang.String str11 = commandLine0.getOptionValue('\000', "org.apache.commons.cli.MissingOptionException: [ option: 4  :: null ]");
        java.lang.String str13 = commandLine0.getOptionValue('4');
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(iterator3);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.apache.commons.cli.MissingOptionException: [ option: 4  :: null ]" + "'", str11, "org.apache.commons.cli.MissingOptionException: [ option: 4  :: null ]");
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0756");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option2 = org.apache.commons.cli.OptionBuilder.create('4');
        option2.setDescription("");
        org.apache.commons.cli.Options options5 = options0.addOption(option2);
        java.util.List list6 = option2.getValuesList();
        option2.setValueSeparator(' ');
        java.lang.String str9 = option2.getKey();
        int int10 = option2.getArgs();
        org.apache.commons.cli.CommandLine commandLine11 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray13 = commandLine11.getOptionValues("hi!");
        java.lang.Object obj15 = commandLine11.getOptionObject('a');
        org.apache.commons.cli.Option option17 = org.apache.commons.cli.OptionBuilder.create('4');
        option17.setDescription("");
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option22 = org.apache.commons.cli.OptionBuilder.create('4');
        option22.setDescription("");
        org.apache.commons.cli.Options options25 = options20.addOption(option22);
        boolean boolean26 = option22.hasOptionalArg();
        option17.setType((java.lang.Object) boolean26);
        java.lang.String str28 = option17.getArgName();
        java.lang.Object obj29 = option17.getType();
        java.lang.String[] strArray30 = option17.getValues();
        commandLine11.addOption(option17);
        java.util.Iterator iterator32 = commandLine11.iterator();
        boolean boolean34 = commandLine11.hasOption('=');
        option2.setType((java.lang.Object) commandLine11);
        boolean boolean36 = option2.hasArgs();
        org.junit.Assert.assertNotNull(option2);
        org.junit.Assert.assertNotNull(options5);
        org.junit.Assert.assertNotNull(list6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "4" + "'", str9, "4");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNull(strArray13);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(option17);
        org.junit.Assert.assertNotNull(option22);
        org.junit.Assert.assertNotNull(options25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "arg" + "'", str28, "arg");
        org.junit.Assert.assertEquals("'" + obj29 + "' != '" + false + "'", obj29, false);
        org.junit.Assert.assertNull(strArray30);
        org.junit.Assert.assertNotNull(iterator32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1564");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String[] strArray10 = commandLine7.getArgs();
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = posixParser0.parse(options1, strArray10, properties11);
        org.apache.commons.cli.Option[] optionArray13 = commandLine12.getOptions();
        java.lang.String[] strArray15 = commandLine12.getOptionValues("4");
        boolean boolean17 = commandLine12.hasOption("[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String[] strArray19 = commandLine12.getOptionValues('a');
        org.apache.commons.cli.Option[] optionArray20 = commandLine12.getOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
        org.junit.Assert.assertNotNull(optionArray13);
        org.junit.Assert.assertNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(strArray19);
        org.junit.Assert.assertNotNull(optionArray20);
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1320");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String[] strArray10 = commandLine7.getArgs();
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = posixParser0.parse(options1, strArray10, properties11);
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option15 = org.apache.commons.cli.OptionBuilder.create('4');
        option15.setDescription("");
        org.apache.commons.cli.Options options18 = options13.addOption(option15);
        java.lang.String str19 = options13.toString();
        org.apache.commons.cli.CommandLine commandLine20 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray22 = commandLine20.getOptionValues("hi!");
        java.lang.String str25 = commandLine20.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str27 = commandLine20.getOptionValue("arg");
        java.lang.String[] strArray28 = commandLine20.getArgs();
        java.util.Properties properties29 = null;
        org.apache.commons.cli.CommandLine commandLine31 = posixParser0.parse(options13, strArray28, properties29, false);
        java.lang.String str33 = commandLine31.getOptionValue('#');
        java.util.List list34 = commandLine31.getArgList();
        java.util.Iterator iterator35 = commandLine31.iterator();
        java.util.List list36 = commandLine31.getArgList();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
        org.junit.Assert.assertNotNull(option15);
        org.junit.Assert.assertNotNull(options18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str19, "[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(strArray22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str25, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(list34);
        org.junit.Assert.assertNotNull(iterator35);
        org.junit.Assert.assertNotNull(list36);
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0796");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue('\000');
        java.lang.Object obj7 = commandLine0.getOptionObject("");
        java.lang.String[] strArray9 = commandLine0.getOptionValues('\000');
        java.lang.String str11 = commandLine0.getOptionValue("[ option:    :: null :: arg ]");
        java.lang.String[] strArray12 = commandLine0.getArgs();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strArray12);
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1718");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue("hi!");
        boolean boolean7 = commandLine0.hasOption("");
        java.lang.String str10 = commandLine0.getOptionValue("[ option: 4  :: null ]", "org.apache.commons.cli.MissingOptionException: hi!");
        java.lang.String[] strArray12 = commandLine0.getOptionValues('4');
        java.lang.String[] strArray14 = commandLine0.getOptionValues('a');
        org.apache.commons.cli.Option option16 = org.apache.commons.cli.OptionBuilder.create(' ');
        boolean boolean17 = option16.hasArgName();
        boolean boolean18 = option16.hasArgName();
        commandLine0.addOption(option16);
        option16.setLongOpt("[ option:    :: null :: arg ]");
        java.lang.String[] strArray22 = option16.getValues();
        boolean boolean23 = option16.hasLongOpt();
        java.lang.Object obj24 = option16.getType();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "org.apache.commons.cli.MissingOptionException: hi!" + "'", str10, "org.apache.commons.cli.MissingOptionException: hi!");
        org.junit.Assert.assertNull(strArray12);
        org.junit.Assert.assertNull(strArray14);
        org.junit.Assert.assertNotNull(option16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(obj24);
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1436");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken("hi!", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptions();
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        char char31 = option30.getValueSeparator();
        org.apache.commons.cli.Option option33 = org.apache.commons.cli.OptionBuilder.create('4');
        option33.setDescription("");
        option30.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup37 = options28.getOptionGroup(option30);
        option30.setOptionalArg(true);
        int int40 = option30.getId();
        org.apache.commons.cli.Options options41 = options21.addOption(option30);
        boolean boolean43 = options41.hasOption("");
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        option45.setArgs((int) (short) 100);
        option45.setArgName("[ option: 4  :: null ]");
        java.lang.String str50 = option45.getLongOpt();
        boolean boolean51 = option45.hasLongOpt();
        org.apache.commons.cli.Options options52 = options41.addOption(option45);
        java.util.Collection collection53 = options41.getOptions();
        org.apache.commons.cli.PosixParser posixParser54 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option57 = org.apache.commons.cli.OptionBuilder.create('4');
        option57.setDescription("");
        org.apache.commons.cli.Options options60 = options55.addOption(option57);
        java.util.Collection collection61 = options55.getOptions();
        boolean boolean63 = options55.hasOption("arg");
        java.lang.String[] strArray66 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" };
        org.apache.commons.cli.CommandLine commandLine67 = posixParser54.parse(options55, strArray66);
        java.lang.String[] strArray69 = posixParser0.flatten(options41, strArray66, false);
        java.util.List list70 = options41.helpOptions();
        java.lang.String str71 = options41.toString();
        org.apache.commons.cli.Option option75 = new org.apache.commons.cli.Option("4", false, "[ option: 4  ::  ]");
        java.lang.String str76 = option75.getDescription();
        org.apache.commons.cli.Options options77 = options41.addOption(option75);
        org.apache.commons.cli.Option option79 = org.apache.commons.cli.OptionBuilder.create('4');
        option79.setOptionalArg(false);
        int int82 = option79.getArgs();
        char char83 = option79.getValueSeparator();
        org.apache.commons.cli.Options options84 = options77.addOption(option79);
        java.lang.Class<?> wildcardClass85 = option79.getClass();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertTrue("'" + char31 + "' != '" + '\000' + "'", char31 == '\000');
        org.junit.Assert.assertNotNull(option33);
        org.junit.Assert.assertNull(optionGroup37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(collection53);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(collection61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(list70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]" + "'", str71, "[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "[ option: 4  ::  ]" + "'", str76, "[ option: 4  ::  ]");
        org.junit.Assert.assertNotNull(options77);
        org.junit.Assert.assertNotNull(option79);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + char83 + "' != '" + '\000' + "'", char83 == '\000');
        org.junit.Assert.assertNotNull(options84);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1416");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup43 = options40.getOptionGroup(option42);
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        org.apache.commons.cli.OptionGroup optionGroup46 = options40.getOptionGroup(option45);
        java.util.List list47 = options40.getRequiredOptions();
        java.util.Collection collection48 = options40.getOptions();
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        option52.setDescription("");
        org.apache.commons.cli.Options options55 = options50.addOption(option52);
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray58 = commandLine56.getOptionValues("hi!");
        java.lang.String str61 = commandLine56.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str63 = commandLine56.getOptionValue("arg");
        java.lang.String[] strArray64 = commandLine56.getArgs();
        java.lang.String[] strArray66 = posixParser49.flatten(options55, strArray64, false);
        java.util.Properties properties67 = null;
        org.apache.commons.cli.CommandLine commandLine69 = posixParser0.parse(options40, strArray64, properties67, true);
        org.apache.commons.cli.Option option71 = org.apache.commons.cli.OptionBuilder.create('4');
        char char72 = option71.getValueSeparator();
        boolean boolean73 = option71.hasArg();
        java.lang.String str74 = option71.getArgName();
        java.lang.String str75 = option71.getDescription();
        java.lang.String str76 = option71.toString();
        option71.setRequired(false);
        java.lang.String str79 = option71.getOpt();
        org.apache.commons.cli.OptionGroup optionGroup80 = options40.getOptionGroup(option71);
        boolean boolean81 = option71.hasArgName();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNull(optionGroup46);
        org.junit.Assert.assertNotNull(list47);
        org.junit.Assert.assertNotNull(collection48);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNull(strArray58);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str61, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine69);
        org.junit.Assert.assertNotNull(option71);
        org.junit.Assert.assertTrue("'" + char72 + "' != '" + '\000' + "'", char72 == '\000');
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "arg" + "'", str74, "arg");
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "[ option: 4  :: null ]" + "'", str76, "[ option: 4  :: null ]");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "4" + "'", str79, "4");
        org.junit.Assert.assertNull(optionGroup80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0587");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.util.Iterator iterator4 = commandLine0.iterator();
        java.lang.String str7 = commandLine0.getOptionValue("[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]", "arg");
        java.lang.String str9 = commandLine0.getOptionValue("[ option:  +ARG ::  ]");
        org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option12 = org.apache.commons.cli.OptionBuilder.create('4');
        option12.setDescription("");
        org.apache.commons.cli.Options options15 = options10.addOption(option12);
        java.util.List list16 = option12.getValuesList();
        boolean boolean17 = option12.hasArgs();
        commandLine0.addOption(option12);
        option12.setArgs((int) (byte) 1);
        option12.setRequired(true);
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(iterator4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(option12);
        org.junit.Assert.assertNotNull(options15);
        org.junit.Assert.assertNotNull(list16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1219");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.Object obj4 = commandLine0.getOptionObject('a');
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        option6.setDescription("");
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option11 = org.apache.commons.cli.OptionBuilder.create('4');
        option11.setDescription("");
        org.apache.commons.cli.Options options14 = options9.addOption(option11);
        boolean boolean15 = option11.hasOptionalArg();
        option6.setType((java.lang.Object) boolean15);
        java.lang.String str17 = option6.getArgName();
        java.lang.Object obj18 = option6.getType();
        java.lang.String[] strArray19 = option6.getValues();
        commandLine0.addOption(option6);
        java.util.Iterator iterator21 = commandLine0.iterator();
        boolean boolean23 = commandLine0.hasOption('=');
        java.lang.String str25 = commandLine0.getOptionValue("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray27 = commandLine0.getOptionValues("[ option: 4  :: null :: [ option: arg [ option: 4  :: null ] +ARG :: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ] ]");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertNotNull(option11);
        org.junit.Assert.assertNotNull(options14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "arg" + "'", str17, "arg");
        org.junit.Assert.assertEquals("'" + obj18 + "' != '" + false + "'", obj18, false);
        org.junit.Assert.assertNull(strArray19);
        org.junit.Assert.assertNotNull(iterator21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(strArray27);
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0887");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptions();
        boolean boolean9 = options1.hasOption("arg");
        java.lang.String[] strArray12 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" };
        org.apache.commons.cli.CommandLine commandLine13 = posixParser0.parse(options1, strArray12);
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = org.apache.commons.cli.OptionBuilder.create('4');
        option16.setDescription("");
        org.apache.commons.cli.Options options19 = options14.addOption(option16);
        java.util.Collection collection20 = options14.getOptionGroups();
        org.apache.commons.cli.Options options24 = options14.addOption("", false, "arg");
        java.util.List list25 = options24.getRequiredOptions();
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create("arg");
        org.apache.commons.cli.Options options28 = options24.addOption(option27);
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setArgs((int) (short) 100);
        option30.setArgName("[ option: 4  :: null ]");
        java.lang.String str35 = option30.getLongOpt();
        java.lang.String str37 = option30.getValue((int) (short) -1);
        org.apache.commons.cli.Options options38 = options28.addOption(option30);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup42 = options39.getOptionGroup(option41);
        boolean boolean43 = option41.hasLongOpt();
        boolean boolean44 = option41.isRequired();
        java.util.List list45 = option41.getValuesList();
        option41.setDescription("[ option: 4  ::  ]");
        org.apache.commons.cli.Options options48 = options38.addOption(option41);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        option52.setDescription("");
        org.apache.commons.cli.Options options55 = options50.addOption(option52);
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray58 = commandLine56.getOptionValues("hi!");
        java.lang.String str61 = commandLine56.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str63 = commandLine56.getOptionValue("arg");
        java.lang.String[] strArray64 = commandLine56.getArgs();
        java.lang.String[] strArray66 = posixParser49.flatten(options55, strArray64, false);
        org.apache.commons.cli.CommandLine commandLine68 = posixParser0.parse(options38, strArray64, true);
        java.util.List list69 = options38.getRequiredOptions();
        org.apache.commons.cli.Option option73 = new org.apache.commons.cli.Option("arg", false, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str75 = option73.getValue("");
        option73.setArgs(0);
        boolean boolean78 = option73.hasLongOpt();
        option73.setOptionalArg(false);
        java.lang.String str81 = option73.getValue();
        java.util.List list82 = option73.getValuesList();
        org.apache.commons.cli.Options options83 = options38.addOption(option73);
        option73.addValue("[ option: 4  :: null :: [ option: 4  ::  ] ]");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine13);
        org.junit.Assert.assertNotNull(option16);
        org.junit.Assert.assertNotNull(options19);
        org.junit.Assert.assertNotNull(collection20);
        org.junit.Assert.assertNotNull(options24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(list45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNull(strArray58);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str61, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertNotNull(list69);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNotNull(list82);
        org.junit.Assert.assertNotNull(options83);
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0638");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        java.util.Collection collection46 = options40.getOptionGroups();
        org.apache.commons.cli.Options options50 = options40.addOption("", false, "arg");
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup54 = options51.getOptionGroup(option53);
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        char char57 = option56.getValueSeparator();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create('4');
        option59.setDescription("");
        option56.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup63 = options51.getOptionGroup(option56);
        boolean boolean64 = option56.hasArgName();
        org.apache.commons.cli.Options options65 = options40.addOption(option56);
        org.apache.commons.cli.CommandLine commandLine66 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray68 = commandLine66.getOptionValues("hi!");
        java.lang.String str71 = commandLine66.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str73 = commandLine66.getOptionValue("arg");
        java.lang.String[] strArray74 = commandLine66.getArgs();
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options40, strArray74, properties75);
        posixParser0.burstToken("[ option: 4  :: null ]", true);
        org.apache.commons.cli.Option option81 = org.apache.commons.cli.OptionBuilder.create('4');
        char char82 = option81.getValueSeparator();
        boolean boolean83 = option81.hasArg();
        boolean boolean84 = option81.hasOptionalArg();
        java.lang.String str86 = option81.getValue(0);
        java.util.ListIterator listIterator87 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option81, listIterator87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertNotNull(options50);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertTrue("'" + char57 + "' != '" + '\000' + "'", char57 == '\000');
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertNull(optionGroup63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(options65);
        org.junit.Assert.assertNull(strArray68);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str71, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertNotNull(option81);
        org.junit.Assert.assertTrue("'" + char82 + "' != '" + '\000' + "'", char82 == '\000');
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(str86);
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0176");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        java.util.Collection collection46 = options40.getOptionGroups();
        org.apache.commons.cli.Options options50 = options40.addOption("", false, "arg");
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup54 = options51.getOptionGroup(option53);
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        char char57 = option56.getValueSeparator();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create('4');
        option59.setDescription("");
        option56.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup63 = options51.getOptionGroup(option56);
        boolean boolean64 = option56.hasArgName();
        org.apache.commons.cli.Options options65 = options40.addOption(option56);
        org.apache.commons.cli.CommandLine commandLine66 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray68 = commandLine66.getOptionValues("hi!");
        java.lang.String str71 = commandLine66.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str73 = commandLine66.getOptionValue("arg");
        java.lang.String[] strArray74 = commandLine66.getArgs();
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options40, strArray74, properties75);
        posixParser0.burstToken("[ option: 4  :: null ]", true);
        org.apache.commons.cli.Options options80 = null;
        java.lang.String[] strArray81 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.CommandLine commandLine82 = posixParser0.parse(options80, strArray81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertNotNull(options50);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertTrue("'" + char57 + "' != '" + '\000' + "'", char57 == '\000');
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertNull(optionGroup63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(options65);
        org.junit.Assert.assertNull(strArray68);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str71, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine76);
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0006");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = null;
        org.apache.commons.cli.PosixParser posixParser54 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option57 = org.apache.commons.cli.OptionBuilder.create('4');
        option57.setDescription("");
        org.apache.commons.cli.Options options60 = options55.addOption(option57);
        org.apache.commons.cli.CommandLine commandLine61 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray63 = commandLine61.getOptionValues("hi!");
        java.lang.String str66 = commandLine61.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str68 = commandLine61.getOptionValue("arg");
        java.lang.String[] strArray69 = commandLine61.getArgs();
        java.lang.String[] strArray71 = posixParser54.flatten(options60, strArray69, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.CommandLine commandLine72 = posixParser0.parse(options53, strArray69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNull(strArray63);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str66, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(strArray71);
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0439");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String str3 = commandLine0.getOptionValue('#', "");
        java.lang.Object obj5 = commandLine0.getOptionObject("org.apache.commons.cli.ParseException: [ option: 4  :: null ]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(obj5);
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0743");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.util.Iterator iterator3 = commandLine0.iterator();
        java.lang.String[] strArray5 = commandLine0.getOptionValues('a');
        java.lang.Object obj7 = commandLine0.getOptionObject('a');
        java.lang.Object obj9 = commandLine0.getOptionObject("org.apache.commons.cli.MissingOptionException: hi!");
        java.lang.String str12 = commandLine0.getOptionValue("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]", "[ option: 4  :: null ]");
        java.lang.String[] strArray14 = commandLine0.getOptionValues('=');
        java.lang.String str16 = commandLine0.getOptionValue('a');
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(iterator3);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ option: 4  :: null ]" + "'", str12, "[ option: 4  :: null ]");
        org.junit.Assert.assertNull(strArray14);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1408");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option2 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup3 = options0.getOptionGroup(option2);
        org.apache.commons.cli.Option option5 = org.apache.commons.cli.OptionBuilder.create('4');
        char char6 = option5.getValueSeparator();
        org.apache.commons.cli.Option option8 = org.apache.commons.cli.OptionBuilder.create('4');
        option8.setDescription("");
        option5.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup12 = options0.getOptionGroup(option5);
        boolean boolean13 = option5.hasArgName();
        java.lang.String str14 = option5.getValue();
        option5.setDescription("[ option: 4  :: null ]");
        java.lang.String str17 = option5.toString();
        option5.setArgs((int) '#');
        java.lang.String str21 = option5.getValue(52);
        org.apache.commons.cli.CommandLine commandLine22 = new org.apache.commons.cli.CommandLine();
        boolean boolean24 = commandLine22.hasOption('4');
        org.apache.commons.cli.Option[] optionArray25 = commandLine22.getOptions();
        commandLine22.addArg("[ option:  +ARG ::  ]");
        java.lang.String[] strArray28 = commandLine22.getArgs();
        org.apache.commons.cli.Option[] optionArray29 = commandLine22.getOptions();
        boolean boolean30 = option5.equals((java.lang.Object) optionArray29);
        org.junit.Assert.assertNotNull(option2);
        org.junit.Assert.assertNull(optionGroup3);
        org.junit.Assert.assertNotNull(option5);
        org.junit.Assert.assertTrue("'" + char6 + "' != '" + '\000' + "'", char6 == '\000');
        org.junit.Assert.assertNotNull(option8);
        org.junit.Assert.assertNull(optionGroup12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[ option: 4  :: [ option: 4  :: null ] ::  ]" + "'", str17, "[ option: 4  :: [ option: 4  :: null ] ::  ]");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(optionArray25);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(optionArray29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1109");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue("hi!");
        org.apache.commons.cli.Option option7 = org.apache.commons.cli.OptionBuilder.create(' ');
        commandLine0.addOption(option7);
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option11 = org.apache.commons.cli.OptionBuilder.create('4');
        option11.setDescription("");
        org.apache.commons.cli.Options options14 = options9.addOption(option11);
        java.util.Collection collection15 = options9.getOptionGroups();
        org.apache.commons.cli.Options options19 = options9.addOption("", false, "arg");
        java.util.Collection collection20 = options9.getOptionGroups();
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        option23.setValueSeparator(' ');
        org.apache.commons.cli.OptionGroup optionGroup29 = options9.getOptionGroup(option23);
        option23.setRequired(false);
        java.lang.String str32 = option23.toString();
        java.lang.String str33 = option23.toString();
        int int34 = option23.getId();
        commandLine0.addOption(option23);
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(option7);
        org.junit.Assert.assertNotNull(option11);
        org.junit.Assert.assertNotNull(options14);
        org.junit.Assert.assertNotNull(collection15);
        org.junit.Assert.assertNotNull(options19);
        org.junit.Assert.assertNotNull(collection20);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[ option: 4  ::  ]" + "'", str32, "[ option: 4  ::  ]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ option: 4  ::  ]" + "'", str33, "[ option: 4  ::  ]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0908");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue("hi!");
        boolean boolean7 = commandLine0.hasOption("");
        java.lang.String str10 = commandLine0.getOptionValue("[ option: 4  :: null ]", "org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.Option[] optionArray11 = commandLine0.getOptions();
        java.lang.Object obj13 = commandLine0.getOptionObject('=');
        java.lang.String str16 = commandLine0.getOptionValue("[ option: 4 arg  :: null ]", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4 org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!  ::  ]} ] [ long {org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!=[ option: 4 org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!  ::  ]} ]");
        java.lang.String[] strArray18 = commandLine0.getOptionValues("org.apache.commons.cli.UnrecognizedOptionException: arg");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "org.apache.commons.cli.MissingOptionException: hi!" + "'", str10, "org.apache.commons.cli.MissingOptionException: hi!");
        org.junit.Assert.assertNotNull(optionArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4 org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!  ::  ]} ] [ long {org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!=[ option: 4 org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!  ::  ]} ]" + "'", str16, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4 org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!  ::  ]} ] [ long {org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!=[ option: 4 org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!  ::  ]} ]");
        org.junit.Assert.assertNull(strArray18);
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1666");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option2 = org.apache.commons.cli.OptionBuilder.create('4');
        option2.setDescription("");
        org.apache.commons.cli.Options options5 = options0.addOption(option2);
        java.util.List list6 = options0.helpOptions();
        org.apache.commons.cli.Options options11 = options0.addOption("arg", "org.apache.commons.cli.UnrecognizedOptionException: hi!", false, "");
        org.apache.commons.cli.CommandLine commandLine12 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray14 = commandLine12.getOptionValues("hi!");
        java.lang.String[] strArray15 = commandLine12.getArgs();
        java.util.Iterator iterator16 = commandLine12.iterator();
        java.lang.String str18 = commandLine12.getOptionValue("[ option:    :: null ]");
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        java.lang.String str22 = option20.getValue("arg");
        org.apache.commons.cli.MissingOptionException missingOptionException24 = new org.apache.commons.cli.MissingOptionException("hi!");
        boolean boolean25 = option20.equals((java.lang.Object) "hi!");
        option20.setValueSeparator('=');
        boolean boolean28 = option20.hasValueSeparator();
        java.lang.String str29 = option20.getArgName();
        commandLine12.addOption(option20);
        org.apache.commons.cli.OptionGroup optionGroup31 = options11.getOptionGroup(option20);
        org.apache.commons.cli.PosixParser posixParser32 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options33 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option35 = org.apache.commons.cli.OptionBuilder.create('4');
        option35.setDescription("");
        org.apache.commons.cli.Options options38 = options33.addOption(option35);
        org.apache.commons.cli.CommandLine commandLine39 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray41 = commandLine39.getOptionValues("hi!");
        java.lang.String str44 = commandLine39.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str46 = commandLine39.getOptionValue("arg");
        java.lang.String[] strArray47 = commandLine39.getArgs();
        java.lang.String[] strArray49 = posixParser32.flatten(options38, strArray47, false);
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        option52.setDescription("");
        org.apache.commons.cli.Options options55 = options50.addOption(option52);
        java.util.Collection collection56 = options50.getOptions();
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create('4');
        char char60 = option59.getValueSeparator();
        org.apache.commons.cli.Option option62 = org.apache.commons.cli.OptionBuilder.create('4');
        option62.setDescription("");
        option59.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup66 = options57.getOptionGroup(option59);
        option59.setOptionalArg(true);
        int int69 = option59.getId();
        org.apache.commons.cli.Options options70 = options50.addOption(option59);
        option59.setOptionalArg(false);
        java.lang.String str74 = option59.getValue("[ option: 4  :: null ::  ]");
        java.lang.String[] strArray75 = option59.getValues();
        option59.setValueSeparator('a');
        org.apache.commons.cli.OptionGroup optionGroup78 = options38.getOptionGroup(option59);
        org.apache.commons.cli.Options options79 = options11.addOption(option59);
        java.util.List list80 = options79.getRequiredOptions();
        java.util.List list81 = options79.getRequiredOptions();
        org.junit.Assert.assertNotNull(option2);
        org.junit.Assert.assertNotNull(options5);
        org.junit.Assert.assertNotNull(list6);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "arg" + "'", str22, "arg");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "arg" + "'", str29, "arg");
        org.junit.Assert.assertNull(optionGroup31);
        org.junit.Assert.assertNotNull(option35);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNull(strArray41);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str44, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(collection56);
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertTrue("'" + char60 + "' != '" + '\000' + "'", char60 == '\000');
        org.junit.Assert.assertNotNull(option62);
        org.junit.Assert.assertNull(optionGroup66);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 52 + "'", int69 == 52);
        org.junit.Assert.assertNotNull(options70);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "[ option: 4  :: null ::  ]" + "'", str74, "[ option: 4  :: null ::  ]");
        org.junit.Assert.assertNull(strArray75);
        org.junit.Assert.assertNull(optionGroup78);
        org.junit.Assert.assertNotNull(options79);
        org.junit.Assert.assertNotNull(list80);
        org.junit.Assert.assertNotNull(list81);
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0069");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken("[ option: 4  :: null ::  ]", true);
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        option40.setLongOpt("hi!");
        option40.setArgName("arg");
        org.apache.commons.cli.Options options47 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option49 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup50 = options47.getOptionGroup(option49);
        option40.setType((java.lang.Object) options47);
        java.util.List list52 = options47.getRequiredOptions();
        java.lang.String[] strArray53 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[] strArray55 = posixParser0.flatten(options47, strArray53, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(option49);
        org.junit.Assert.assertNull(optionGroup50);
        org.junit.Assert.assertNotNull(list52);
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1010");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options53, strArray60, true);
        java.lang.String str64 = commandLine62.getOptionValue('\000');
        java.lang.Object obj66 = commandLine62.getOptionObject("[ option:    :: null ]");
        org.apache.commons.cli.Option[] optionArray67 = commandLine62.getOptions();
        java.lang.String[] strArray68 = commandLine62.getArgs();
        java.lang.Object obj70 = commandLine62.getOptionObject("");
        org.apache.commons.cli.Option[] optionArray71 = commandLine62.getOptions();
        commandLine62.addArg("[ option:    :: null :: arg ]");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNotNull(optionArray67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertNotNull(optionArray71);
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1458");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        boolean boolean5 = commandLine0.hasOption("hi!");
        java.util.List list6 = commandLine0.getArgList();
        java.lang.Object obj8 = commandLine0.getOptionObject("[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]");
        java.lang.Object obj10 = commandLine0.getOptionObject(' ');
        java.lang.String str13 = commandLine0.getOptionValue("[ option: 4  :: null :: [ option: 4  ::  ] ]", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  :: [ option: arg [ option: 4  :: null ] +ARG :: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ] ]} ] [ long {} ]");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(list6);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  :: [ option: arg [ option: 4  :: null ] +ARG :: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ] ]} ] [ long {} ]" + "'", str13, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  :: [ option: arg [ option: 4  :: null ] +ARG :: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ] ]} ] [ long {} ]");
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0248");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        boolean boolean19 = options6.hasOption("arg");
        org.apache.commons.cli.OptionGroup optionGroup20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options21 = options6.addOptionGroup(optionGroup20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0677");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        java.util.Collection collection46 = options40.getOptionGroups();
        java.lang.String[] strArray47 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options40, strArray47);
        org.apache.commons.cli.Option option50 = org.apache.commons.cli.OptionBuilder.create(' ');
        char char51 = option50.getValueSeparator();
        org.apache.commons.cli.Options options52 = options40.addOption(option50);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        org.apache.commons.cli.Options options60 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option62 = org.apache.commons.cli.OptionBuilder.create('4');
        char char63 = option62.getValueSeparator();
        org.apache.commons.cli.Option option65 = org.apache.commons.cli.OptionBuilder.create('4');
        option65.setDescription("");
        option62.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup69 = options60.getOptionGroup(option62);
        option62.setOptionalArg(true);
        int int72 = option62.getId();
        org.apache.commons.cli.Options options73 = options53.addOption(option62);
        option62.setOptionalArg(false);
        java.lang.String str77 = option62.getValue("[ option: 4  :: null ::  ]");
        java.lang.String[] strArray78 = option62.getValues();
        option50.setType((java.lang.Object) option62);
        option50.setDescription("");
        option50.setRequired(false);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(option50);
        org.junit.Assert.assertTrue("'" + char51 + "' != '" + '\000' + "'", char51 == '\000');
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(option62);
        org.junit.Assert.assertTrue("'" + char63 + "' != '" + '\000' + "'", char63 == '\000');
        org.junit.Assert.assertNotNull(option65);
        org.junit.Assert.assertNull(optionGroup69);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 52 + "'", int72 == 52);
        org.junit.Assert.assertNotNull(options73);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "[ option: 4  :: null ::  ]" + "'", str77, "[ option: 4  :: null ::  ]");
        org.junit.Assert.assertNull(strArray78);
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0824");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option39 = org.apache.commons.cli.OptionBuilder.create('4');
        option39.setDescription("");
        org.apache.commons.cli.Options options42 = options37.addOption(option39);
        option39.setArgs((int) '\000');
        org.apache.commons.cli.Options options45 = options22.addOption(option39);
        org.apache.commons.cli.PosixParser posixParser46 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options47 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option49 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup50 = options47.getOptionGroup(option49);
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        char char53 = option52.getValueSeparator();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        option52.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup59 = options47.getOptionGroup(option52);
        boolean boolean61 = options47.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser62 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options63 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option65 = org.apache.commons.cli.OptionBuilder.create('4');
        option65.setDescription("");
        org.apache.commons.cli.Options options68 = options63.addOption(option65);
        org.apache.commons.cli.CommandLine commandLine69 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray71 = commandLine69.getOptionValues("hi!");
        java.lang.String str74 = commandLine69.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str76 = commandLine69.getOptionValue("arg");
        java.lang.String[] strArray77 = commandLine69.getArgs();
        java.lang.String[] strArray79 = posixParser62.flatten(options68, strArray77, false);
        java.util.Properties properties80 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser46.parse(options47, strArray79, properties80);
        java.util.List list82 = commandLine81.getArgList();
        java.lang.String[] strArray83 = commandLine81.getArgs();
        java.lang.String[] strArray84 = commandLine81.getArgs();
        java.util.Properties properties85 = null;
        org.apache.commons.cli.CommandLine commandLine86 = posixParser0.parse(options22, strArray84, properties85);
        java.lang.String[] strArray88 = commandLine86.getOptionValues("org.apache.commons.cli.MissingOptionException: [ option: 4  :: null ]");
        java.lang.String[] strArray90 = commandLine86.getOptionValues(' ');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option39);
        org.junit.Assert.assertNotNull(options42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(option49);
        org.junit.Assert.assertNull(optionGroup50);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertTrue("'" + char53 + "' != '" + '\000' + "'", char53 == '\000');
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNull(optionGroup59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(option65);
        org.junit.Assert.assertNotNull(options68);
        org.junit.Assert.assertNull(strArray71);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str74, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(list82);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(commandLine86);
        org.junit.Assert.assertNull(strArray88);
        org.junit.Assert.assertNull(strArray90);
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1646");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        org.apache.commons.cli.Options options36 = null;
        org.apache.commons.cli.CommandLine commandLine37 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray39 = commandLine37.getOptionValues("hi!");
        java.lang.String[] strArray40 = commandLine37.getArgs();
        java.lang.String[] strArray42 = posixParser0.flatten(options36, strArray40, false);
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        option45.setDescription("");
        org.apache.commons.cli.Options options48 = options43.addOption(option45);
        java.util.Collection collection49 = options48.getOptions();
        org.apache.commons.cli.CommandLine commandLine50 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray52 = commandLine50.getOptionValues("hi!");
        java.lang.String[] strArray53 = commandLine50.getArgs();
        java.lang.String str55 = commandLine50.getOptionValue("hi!");
        boolean boolean57 = commandLine50.hasOption("");
        java.lang.String str60 = commandLine50.getOptionValue("[ option: 4  :: null ]", "org.apache.commons.cli.MissingOptionException: hi!");
        java.lang.String[] strArray62 = commandLine50.getOptionValues('4');
        java.lang.String[] strArray63 = commandLine50.getArgs();
        java.lang.Object obj65 = commandLine50.getOptionObject("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String[] strArray66 = commandLine50.getArgs();
        java.util.Properties properties67 = null;
        org.apache.commons.cli.CommandLine commandLine68 = posixParser0.parse(options48, strArray66, properties67);
        posixParser0.burstToken("[ option: 4 [ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]  :: null ]", false);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNull(strArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(collection49);
        org.junit.Assert.assertNull(strArray52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "org.apache.commons.cli.MissingOptionException: hi!" + "'", str60, "org.apache.commons.cli.MissingOptionException: hi!");
        org.junit.Assert.assertNull(strArray62);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine68);
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0140");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken("4", false);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup42 = options39.getOptionGroup(option41);
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create('4');
        char char45 = option44.getValueSeparator();
        org.apache.commons.cli.Option option47 = org.apache.commons.cli.OptionBuilder.create('4');
        option47.setDescription("");
        option44.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup51 = options39.getOptionGroup(option44);
        java.util.Collection collection52 = options39.getOptions();
        java.lang.String[] strArray53 = null;
        org.apache.commons.cli.CommandLine commandLine54 = posixParser0.parse(options39, strArray53);
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option57 = org.apache.commons.cli.OptionBuilder.create('4');
        option57.setDescription("");
        org.apache.commons.cli.Options options60 = options55.addOption(option57);
        java.util.List list61 = option57.getValuesList();
        java.lang.String str62 = option57.getOpt();
        org.apache.commons.cli.Option option64 = org.apache.commons.cli.OptionBuilder.create("arg");
        java.lang.String str65 = option64.getOpt();
        boolean boolean66 = option64.isRequired();
        boolean boolean67 = option57.equals((java.lang.Object) option64);
        org.apache.commons.cli.Options options68 = options39.addOption(option57);
        java.lang.String str69 = option57.getOpt();
        option57.setArgName("");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertTrue("'" + char45 + "' != '" + '\000' + "'", char45 == '\000');
        org.junit.Assert.assertNotNull(option47);
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(collection52);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(list61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "4" + "'", str62, "4");
        org.junit.Assert.assertNotNull(option64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "arg" + "'", str65, "arg");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(options68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "4" + "'", str69, "4");
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1331");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.PosixParser posixParser53 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        option56.setDescription("");
        org.apache.commons.cli.Options options59 = options54.addOption(option56);
        org.apache.commons.cli.CommandLine commandLine60 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray62 = commandLine60.getOptionValues("hi!");
        java.lang.String str65 = commandLine60.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str67 = commandLine60.getOptionValue("arg");
        java.lang.String[] strArray68 = commandLine60.getArgs();
        java.lang.String[] strArray70 = posixParser53.flatten(options59, strArray68, false);
        org.apache.commons.cli.PosixParser posixParser71 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options72 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option74 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup75 = options72.getOptionGroup(option74);
        org.apache.commons.cli.CommandLine commandLine76 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray78 = commandLine76.getOptionValues("hi!");
        java.lang.String str81 = commandLine76.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str83 = commandLine76.getOptionValue("arg");
        java.lang.String[] strArray84 = commandLine76.getArgs();
        java.lang.String[] strArray86 = posixParser71.flatten(options72, strArray84, true);
        org.apache.commons.cli.CommandLine commandLine88 = posixParser0.parse(options59, strArray84, false);
        posixParser0.burstToken("[ option:   :: null ]", false);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNull(strArray62);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str65, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(option74);
        org.junit.Assert.assertNull(optionGroup75);
        org.junit.Assert.assertNull(strArray78);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str81, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(commandLine88);
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0029");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option38 = org.apache.commons.cli.OptionBuilder.create('4');
        option38.setDescription("");
        org.apache.commons.cli.Options options41 = options36.addOption(option38);
        java.util.Collection collection42 = options36.getOptionGroups();
        org.apache.commons.cli.Options options46 = options36.addOption("", false, "arg");
        org.apache.commons.cli.Options options47 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option49 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup50 = options47.getOptionGroup(option49);
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        char char53 = option52.getValueSeparator();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        option52.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup59 = options47.getOptionGroup(option52);
        boolean boolean60 = option52.hasArgName();
        org.apache.commons.cli.Options options61 = options36.addOption(option52);
        java.util.List list62 = options36.helpOptions();
        org.apache.commons.cli.CommandLine commandLine63 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray65 = commandLine63.getOptionValues("hi!");
        java.lang.String str68 = commandLine63.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str70 = commandLine63.getOptionValue("arg");
        java.lang.String[] strArray71 = commandLine63.getArgs();
        java.lang.String[] strArray73 = posixParser0.flatten(options36, strArray71, false);
        org.apache.commons.cli.PosixParser posixParser74 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options75 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option77 = org.apache.commons.cli.OptionBuilder.create('4');
        option77.setDescription("");
        org.apache.commons.cli.Options options80 = options75.addOption(option77);
        java.util.Collection collection81 = options75.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine82 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray84 = commandLine82.getOptionValues("hi!");
        java.lang.String str87 = commandLine82.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str89 = commandLine82.getOptionValue("arg");
        java.lang.String[] strArray90 = commandLine82.getArgs();
        java.util.Properties properties91 = null;
        org.apache.commons.cli.CommandLine commandLine92 = posixParser74.parse(options75, strArray90, properties91);
        java.lang.String[] strArray93 = null;
        org.apache.commons.cli.CommandLine commandLine94 = posixParser0.parse(options75, strArray93);
        java.util.List list95 = options75.getRequiredOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option38);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertNotNull(collection42);
        org.junit.Assert.assertNotNull(options46);
        org.junit.Assert.assertNotNull(option49);
        org.junit.Assert.assertNull(optionGroup50);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertTrue("'" + char53 + "' != '" + '\000' + "'", char53 == '\000');
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNull(optionGroup59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(options61);
        org.junit.Assert.assertNotNull(list62);
        org.junit.Assert.assertNull(strArray65);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str68, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(option77);
        org.junit.Assert.assertNotNull(options80);
        org.junit.Assert.assertNotNull(collection81);
        org.junit.Assert.assertNull(strArray84);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str87, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertNotNull(commandLine92);
        org.junit.Assert.assertNotNull(commandLine94);
        org.junit.Assert.assertNotNull(list95);
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1415");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.util.Iterator iterator4 = commandLine0.iterator();
        java.lang.String str7 = commandLine0.getOptionValue("[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]", "arg");
        boolean boolean9 = commandLine0.hasOption("[ option: 4  :: null ]");
        java.lang.String[] strArray11 = commandLine0.getOptionValues("");
        java.lang.Object obj13 = commandLine0.getOptionObject('a');
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = org.apache.commons.cli.OptionBuilder.create('4');
        option16.setDescription("");
        org.apache.commons.cli.Options options19 = options14.addOption(option16);
        java.util.Collection collection20 = options14.getOptionGroups();
        org.apache.commons.cli.Options options24 = options14.addOption("", false, "arg");
        java.util.List list25 = options24.getRequiredOptions();
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create("arg");
        org.apache.commons.cli.Options options28 = options24.addOption(option27);
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setArgs((int) (short) 100);
        option30.setArgName("[ option: 4  :: null ]");
        java.lang.String str35 = option30.getLongOpt();
        java.lang.String str37 = option30.getValue((int) (short) -1);
        org.apache.commons.cli.Options options38 = options28.addOption(option30);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup42 = options39.getOptionGroup(option41);
        boolean boolean43 = option41.hasLongOpt();
        boolean boolean44 = option41.isRequired();
        java.util.List list45 = option41.getValuesList();
        option41.setDescription("[ option: 4  ::  ]");
        org.apache.commons.cli.Options options48 = options38.addOption(option41);
        option41.setValueSeparator('4');
        commandLine0.addOption(option41);
        java.lang.String[] strArray52 = commandLine0.getArgs();
        org.apache.commons.cli.Option option54 = org.apache.commons.cli.OptionBuilder.create('4');
        char char55 = option54.getValueSeparator();
        boolean boolean56 = option54.hasArg();
        java.lang.String str57 = option54.getArgName();
        java.lang.String str58 = option54.getLongOpt();
        option54.setOptionalArg(true);
        commandLine0.addOption(option54);
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(iterator4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(option16);
        org.junit.Assert.assertNotNull(options19);
        org.junit.Assert.assertNotNull(collection20);
        org.junit.Assert.assertNotNull(options24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(list45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(option54);
        org.junit.Assert.assertTrue("'" + char55 + "' != '" + '\000' + "'", char55 == '\000');
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "arg" + "'", str57, "arg");
        org.junit.Assert.assertNull(str58);
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test1000");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        boolean boolean23 = options6.hasOption("hi!");
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create('4');
        char char26 = option25.getValueSeparator();
        boolean boolean27 = option25.hasArg();
        option25.setValueSeparator('a');
        option25.setArgs(52);
        boolean boolean32 = option25.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup33 = options6.getOptionGroup(option25);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertTrue("'" + char26 + "' != '" + '\000' + "'", char26 == '\000');
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(optionGroup33);
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0820");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptionGroups();
        org.apache.commons.cli.Option option61 = org.apache.commons.cli.OptionBuilder.create('4');
        option61.setDescription("");
        option61.setLongOpt("hi!");
        boolean boolean66 = option61.hasArgName();
        org.apache.commons.cli.Options options67 = options53.addOption(option61);
        org.apache.commons.cli.PosixParser posixParser68 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options69 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option71 = org.apache.commons.cli.OptionBuilder.create('4');
        option71.setDescription("");
        org.apache.commons.cli.Options options74 = options69.addOption(option71);
        org.apache.commons.cli.CommandLine commandLine75 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray77 = commandLine75.getOptionValues("hi!");
        java.lang.String str80 = commandLine75.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str82 = commandLine75.getOptionValue("arg");
        java.lang.String[] strArray83 = commandLine75.getArgs();
        java.lang.String[] strArray85 = posixParser68.flatten(options74, strArray83, false);
        org.apache.commons.cli.CommandLine commandLine86 = posixParser0.parse(options53, strArray85);
        java.util.Iterator iterator87 = commandLine86.iterator();
        java.util.List list88 = commandLine86.getArgList();
        java.lang.String str91 = commandLine86.getOptionValue('=', "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.apache.commons.cli.Option[] optionArray92 = commandLine86.getOptions();
        java.lang.String[] strArray93 = commandLine86.getArgs();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(option61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(options67);
        org.junit.Assert.assertNotNull(option71);
        org.junit.Assert.assertNotNull(options74);
        org.junit.Assert.assertNull(strArray77);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str80, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(commandLine86);
        org.junit.Assert.assertNotNull(iterator87);
        org.junit.Assert.assertNotNull(list88);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str91, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNotNull(optionArray92);
        org.junit.Assert.assertNotNull(strArray93);
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0804");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptionGroups();
        org.apache.commons.cli.Option option61 = org.apache.commons.cli.OptionBuilder.create('4');
        option61.setDescription("");
        option61.setLongOpt("hi!");
        boolean boolean66 = option61.hasArgName();
        org.apache.commons.cli.Options options67 = options53.addOption(option61);
        org.apache.commons.cli.PosixParser posixParser68 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options69 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option71 = org.apache.commons.cli.OptionBuilder.create('4');
        option71.setDescription("");
        org.apache.commons.cli.Options options74 = options69.addOption(option71);
        org.apache.commons.cli.CommandLine commandLine75 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray77 = commandLine75.getOptionValues("hi!");
        java.lang.String str80 = commandLine75.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str82 = commandLine75.getOptionValue("arg");
        java.lang.String[] strArray83 = commandLine75.getArgs();
        java.lang.String[] strArray85 = posixParser68.flatten(options74, strArray83, false);
        org.apache.commons.cli.CommandLine commandLine86 = posixParser0.parse(options53, strArray85);
        java.util.Iterator iterator87 = commandLine86.iterator();
        java.util.List list88 = commandLine86.getArgList();
        java.lang.String[] strArray90 = commandLine86.getOptionValues("[ option: 4  :: null ]");
        java.lang.String[] strArray91 = commandLine86.getArgs();
        boolean boolean93 = commandLine86.hasOption('=');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(option61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(options67);
        org.junit.Assert.assertNotNull(option71);
        org.junit.Assert.assertNotNull(options74);
        org.junit.Assert.assertNull(strArray77);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str80, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(commandLine86);
        org.junit.Assert.assertNotNull(iterator87);
        org.junit.Assert.assertNotNull(list88);
        org.junit.Assert.assertNull(strArray90);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0563");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        java.util.Collection collection35 = options22.getOptions();
        java.lang.String[] strArray36 = null;
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options22, strArray36, properties37, false);
        org.apache.commons.cli.PosixParser posixParser40 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options41 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option43 = org.apache.commons.cli.OptionBuilder.create('4');
        option43.setDescription("");
        org.apache.commons.cli.Options options46 = options41.addOption(option43);
        org.apache.commons.cli.CommandLine commandLine47 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray49 = commandLine47.getOptionValues("hi!");
        java.lang.String[] strArray50 = commandLine47.getArgs();
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser40.parse(options41, strArray50, properties51);
        boolean boolean54 = options41.hasOption(" ");
        java.lang.String[] strArray55 = null;
        java.util.Properties properties56 = null;
        org.apache.commons.cli.CommandLine commandLine57 = posixParser0.parse(options41, strArray55, properties56);
        org.apache.commons.cli.Options options58 = null;
        org.apache.commons.cli.CommandLine commandLine59 = new org.apache.commons.cli.CommandLine();
        boolean boolean61 = commandLine59.hasOption('4');
        org.apache.commons.cli.Option[] optionArray62 = commandLine59.getOptions();
        commandLine59.addArg("[ option:  +ARG ::  ]");
        java.lang.String[] strArray65 = commandLine59.getArgs();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.CommandLine commandLine67 = posixParser0.parse(options58, strArray65, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertNotNull(collection35);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option43);
        org.junit.Assert.assertNotNull(options46);
        org.junit.Assert.assertNull(strArray49);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(commandLine57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(optionArray62);
        org.junit.Assert.assertNotNull(strArray65);
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1156");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        boolean boolean5 = commandLine0.hasOption("hi!");
        org.apache.commons.cli.Options options6 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option8 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup9 = options6.getOptionGroup(option8);
        org.apache.commons.cli.Option option11 = org.apache.commons.cli.OptionBuilder.create('4');
        char char12 = option11.getValueSeparator();
        org.apache.commons.cli.Option option14 = org.apache.commons.cli.OptionBuilder.create('4');
        option14.setDescription("");
        option11.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup18 = options6.getOptionGroup(option11);
        int int19 = option11.getId();
        commandLine0.addOption(option11);
        java.util.Iterator iterator21 = commandLine0.iterator();
        java.lang.String str24 = commandLine0.getOptionValue("", "[ option: 4  :: null ]");
        java.lang.Object obj26 = commandLine0.getOptionObject('4');
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(option8);
        org.junit.Assert.assertNull(optionGroup9);
        org.junit.Assert.assertNotNull(option11);
        org.junit.Assert.assertTrue("'" + char12 + "' != '" + '\000' + "'", char12 == '\000');
        org.junit.Assert.assertNotNull(option14);
        org.junit.Assert.assertNull(optionGroup18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertNotNull(iterator21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[ option: 4  :: null ]" + "'", str24, "[ option: 4  :: null ]");
        org.junit.Assert.assertNull(obj26);
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0331");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options53, strArray60, true);
        java.lang.String str64 = commandLine62.getOptionValue('\000');
        java.lang.Object obj66 = commandLine62.getOptionObject("[ option:    :: null ]");
        org.apache.commons.cli.Option[] optionArray67 = commandLine62.getOptions();
        java.lang.String[] strArray69 = commandLine62.getOptionValues(' ');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNotNull(optionArray67);
        org.junit.Assert.assertNull(strArray69);
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0410");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        java.lang.String[] strArray41 = commandLine39.getOptionValues("");
        java.lang.String[] strArray43 = commandLine39.getOptionValues('a');
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('a');
        boolean boolean46 = option45.hasArgName();
        boolean boolean47 = option45.hasArgs();
        java.lang.String str48 = option45.getLongOpt();
        option45.setLongOpt("hi!");
        commandLine39.addOption(option45);
        org.apache.commons.cli.Option[] optionArray52 = commandLine39.getOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNull(strArray41);
        org.junit.Assert.assertNull(strArray43);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(optionArray52);
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1023");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue('\000');
        java.lang.Object obj7 = commandLine0.getOptionObject("");
        java.lang.String[] strArray9 = commandLine0.getOptionValues("org.apache.commons.cli.MissingOptionException: hi!");
        java.lang.String str11 = commandLine0.getOptionValue('\000');
        java.lang.String[] strArray13 = commandLine0.getOptionValues('a');
        java.lang.String[] strArray15 = commandLine0.getOptionValues("[ Options: [ short {4=[ option: 4  :: null ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(strArray13);
        org.junit.Assert.assertNull(strArray15);
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1761");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptionGroups();
        org.apache.commons.cli.Option option61 = org.apache.commons.cli.OptionBuilder.create('4');
        option61.setDescription("");
        option61.setLongOpt("hi!");
        boolean boolean66 = option61.hasArgName();
        org.apache.commons.cli.Options options67 = options53.addOption(option61);
        org.apache.commons.cli.PosixParser posixParser68 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options69 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option71 = org.apache.commons.cli.OptionBuilder.create('4');
        option71.setDescription("");
        org.apache.commons.cli.Options options74 = options69.addOption(option71);
        org.apache.commons.cli.CommandLine commandLine75 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray77 = commandLine75.getOptionValues("hi!");
        java.lang.String str80 = commandLine75.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str82 = commandLine75.getOptionValue("arg");
        java.lang.String[] strArray83 = commandLine75.getArgs();
        java.lang.String[] strArray85 = posixParser68.flatten(options74, strArray83, false);
        org.apache.commons.cli.CommandLine commandLine86 = posixParser0.parse(options53, strArray85);
        java.lang.Object obj88 = commandLine86.getOptionObject('a');
        java.lang.Object obj90 = commandLine86.getOptionObject("arg");
        org.apache.commons.cli.Option[] optionArray91 = commandLine86.getOptions();
        java.lang.String[] strArray92 = commandLine86.getArgs();
        java.lang.Object obj94 = commandLine86.getOptionObject("[ Options: [ short {4=[ option: 4  ::  :: [ option: arg [ option: 4  :: null ] +ARG :: 4 ] ]} ] [ long {} ]");
        java.lang.Object obj96 = commandLine86.getOptionObject("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(option61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(options67);
        org.junit.Assert.assertNotNull(option71);
        org.junit.Assert.assertNotNull(options74);
        org.junit.Assert.assertNull(strArray77);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str80, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(commandLine86);
        org.junit.Assert.assertNull(obj88);
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertNotNull(optionArray91);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertNull(obj94);
        org.junit.Assert.assertNull(obj96);
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1534");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup43 = options40.getOptionGroup(option42);
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        org.apache.commons.cli.OptionGroup optionGroup46 = options40.getOptionGroup(option45);
        java.util.List list47 = options40.getRequiredOptions();
        java.util.Collection collection48 = options40.getOptions();
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        option52.setDescription("");
        org.apache.commons.cli.Options options55 = options50.addOption(option52);
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray58 = commandLine56.getOptionValues("hi!");
        java.lang.String str61 = commandLine56.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str63 = commandLine56.getOptionValue("arg");
        java.lang.String[] strArray64 = commandLine56.getArgs();
        java.lang.String[] strArray66 = posixParser49.flatten(options55, strArray64, false);
        java.util.Properties properties67 = null;
        org.apache.commons.cli.CommandLine commandLine69 = posixParser0.parse(options40, strArray64, properties67, true);
        org.apache.commons.cli.Option option71 = options40.getOption("org.apache.commons.cli.MissingOptionException: [ option: 4  :: null ::  ]");
        org.apache.commons.cli.Option option73 = org.apache.commons.cli.OptionBuilder.create('4');
        java.lang.String str75 = option73.getValue("arg");
        org.apache.commons.cli.MissingOptionException missingOptionException77 = new org.apache.commons.cli.MissingOptionException("hi!");
        boolean boolean78 = option73.equals((java.lang.Object) "hi!");
        option73.setValueSeparator('=');
        boolean boolean81 = option73.hasValueSeparator();
        java.lang.String str83 = option73.getValue("[ option:  +ARG ::  ]");
        java.lang.String str84 = option73.getLongOpt();
        java.lang.String str85 = option73.getValue();
        boolean boolean86 = option73.hasArg();
        org.apache.commons.cli.OptionGroup optionGroup87 = options40.getOptionGroup(option73);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNull(optionGroup46);
        org.junit.Assert.assertNotNull(list47);
        org.junit.Assert.assertNotNull(collection48);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNull(strArray58);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str61, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine69);
        org.junit.Assert.assertNull(option71);
        org.junit.Assert.assertNotNull(option73);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "arg" + "'", str75, "arg");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "[ option:  +ARG ::  ]" + "'", str83, "[ option:  +ARG ::  ]");
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(optionGroup87);
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0798");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        java.util.List list40 = commandLine39.getArgList();
        java.util.List list41 = commandLine39.getArgList();
        java.lang.String[] strArray43 = commandLine39.getOptionValues('=');
        java.lang.String str45 = commandLine39.getOptionValue("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]");
        java.util.List list46 = commandLine39.getArgList();
        boolean boolean48 = commandLine39.hasOption("org.apache.commons.cli.MissingOptionException: [ option: 4  :: null ]");
        org.apache.commons.cli.Option option49 = null;
        // The following exception was thrown during execution in test generation
        try {
            commandLine39.addOption(option49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(list40);
        org.junit.Assert.assertNotNull(list41);
        org.junit.Assert.assertNull(strArray43);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(list46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0897");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.util.Iterator iterator1 = commandLine0.iterator();
        boolean boolean3 = commandLine0.hasOption('=');
        java.lang.Object obj5 = commandLine0.getOptionObject('#');
        org.junit.Assert.assertNotNull(iterator1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj5);
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0356");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option38 = org.apache.commons.cli.OptionBuilder.create('4');
        option38.setDescription("");
        org.apache.commons.cli.Options options41 = options36.addOption(option38);
        org.apache.commons.cli.Options options42 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create('4');
        char char45 = option44.getValueSeparator();
        org.apache.commons.cli.Option option47 = org.apache.commons.cli.OptionBuilder.create('4');
        option47.setDescription("");
        option44.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup51 = options42.getOptionGroup(option44);
        option44.setOptionalArg(true);
        int int54 = option44.getId();
        org.apache.commons.cli.OptionGroup optionGroup55 = options41.getOptionGroup(option44);
        org.apache.commons.cli.Options options56 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option58 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup59 = options56.getOptionGroup(option58);
        boolean boolean60 = option58.hasLongOpt();
        boolean boolean61 = option58.isRequired();
        org.apache.commons.cli.Options options62 = options41.addOption(option58);
        org.apache.commons.cli.PosixParser posixParser63 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options64 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option66 = org.apache.commons.cli.OptionBuilder.create('4');
        option66.setDescription("");
        org.apache.commons.cli.Options options69 = options64.addOption(option66);
        org.apache.commons.cli.CommandLine commandLine70 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray72 = commandLine70.getOptionValues("hi!");
        java.lang.String str75 = commandLine70.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str77 = commandLine70.getOptionValue("arg");
        java.lang.String[] strArray78 = commandLine70.getArgs();
        java.lang.String[] strArray80 = posixParser63.flatten(options69, strArray78, false);
        org.apache.commons.cli.CommandLine commandLine82 = posixParser0.parse(options62, strArray80, false);
        org.apache.commons.cli.Option option87 = new org.apache.commons.cli.Option("arg", "", false, "");
        option87.setValueSeparator('#');
        org.apache.commons.cli.Options options90 = options62.addOption(option87);
        org.apache.commons.cli.Option option94 = new org.apache.commons.cli.Option("", true, "");
        option94.setArgs((-2));
        java.lang.String str97 = option94.toString();
        org.apache.commons.cli.Options options98 = options62.addOption(option94);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option38);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertTrue("'" + char45 + "' != '" + '\000' + "'", char45 == '\000');
        org.junit.Assert.assertNotNull(option47);
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 52 + "'", int54 == 52);
        org.junit.Assert.assertNull(optionGroup55);
        org.junit.Assert.assertNotNull(option58);
        org.junit.Assert.assertNull(optionGroup59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(options62);
        org.junit.Assert.assertNotNull(option66);
        org.junit.Assert.assertNotNull(options69);
        org.junit.Assert.assertNull(strArray72);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str75, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(options90);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "[ option:  +ARG ::  ]" + "'", str97, "[ option:  +ARG ::  ]");
        org.junit.Assert.assertNotNull(options98);
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1228");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options53, strArray60, true);
        java.lang.String str64 = commandLine62.getOptionValue('\000');
        java.lang.Object obj66 = commandLine62.getOptionObject("[ option:    :: null ]");
        org.apache.commons.cli.Option[] optionArray67 = commandLine62.getOptions();
        java.lang.String[] strArray68 = commandLine62.getArgs();
        java.lang.Object obj70 = commandLine62.getOptionObject("");
        java.lang.String str72 = commandLine62.getOptionValue('#');
        boolean boolean74 = commandLine62.hasOption("arg");
        org.apache.commons.cli.Option[] optionArray75 = commandLine62.getOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNotNull(optionArray67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(optionArray75);
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0993");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        boolean boolean5 = commandLine0.hasOption("hi!");
        org.apache.commons.cli.Options options6 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option8 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup9 = options6.getOptionGroup(option8);
        org.apache.commons.cli.Option option11 = org.apache.commons.cli.OptionBuilder.create('4');
        char char12 = option11.getValueSeparator();
        org.apache.commons.cli.Option option14 = org.apache.commons.cli.OptionBuilder.create('4');
        option14.setDescription("");
        option11.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup18 = options6.getOptionGroup(option11);
        int int19 = option11.getId();
        commandLine0.addOption(option11);
        java.util.Iterator iterator21 = commandLine0.iterator();
        java.lang.String str24 = commandLine0.getOptionValue("", "[ option: 4  :: null ]");
        java.lang.String str26 = commandLine0.getOptionValue("org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.MissingOptionException: hi!");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(option8);
        org.junit.Assert.assertNull(optionGroup9);
        org.junit.Assert.assertNotNull(option11);
        org.junit.Assert.assertTrue("'" + char12 + "' != '" + '\000' + "'", char12 == '\000');
        org.junit.Assert.assertNotNull(option14);
        org.junit.Assert.assertNull(optionGroup18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertNotNull(iterator21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[ option: 4  :: null ]" + "'", str24, "[ option: 4  :: null ]");
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0610");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option38 = org.apache.commons.cli.OptionBuilder.create('4');
        option38.setDescription("");
        org.apache.commons.cli.Options options41 = options36.addOption(option38);
        java.util.Collection collection42 = options36.getOptionGroups();
        org.apache.commons.cli.Options options46 = options36.addOption("", false, "arg");
        org.apache.commons.cli.Options options47 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option49 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup50 = options47.getOptionGroup(option49);
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        char char53 = option52.getValueSeparator();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        option52.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup59 = options47.getOptionGroup(option52);
        boolean boolean60 = option52.hasArgName();
        org.apache.commons.cli.Options options61 = options36.addOption(option52);
        java.util.List list62 = options36.helpOptions();
        org.apache.commons.cli.CommandLine commandLine63 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray65 = commandLine63.getOptionValues("hi!");
        java.lang.String str68 = commandLine63.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str70 = commandLine63.getOptionValue("arg");
        java.lang.String[] strArray71 = commandLine63.getArgs();
        java.lang.String[] strArray73 = posixParser0.flatten(options36, strArray71, false);
        java.util.Collection collection74 = options36.getOptions();
        org.apache.commons.cli.Option option76 = org.apache.commons.cli.OptionBuilder.create('4');
        option76.setArgs((int) (short) 100);
        java.lang.String str79 = option76.getOpt();
        org.apache.commons.cli.OptionGroup optionGroup80 = options36.getOptionGroup(option76);
        java.util.Collection collection81 = options36.getOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option38);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertNotNull(collection42);
        org.junit.Assert.assertNotNull(options46);
        org.junit.Assert.assertNotNull(option49);
        org.junit.Assert.assertNull(optionGroup50);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertTrue("'" + char53 + "' != '" + '\000' + "'", char53 == '\000');
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNull(optionGroup59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(options61);
        org.junit.Assert.assertNotNull(list62);
        org.junit.Assert.assertNull(strArray65);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str68, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(collection74);
        org.junit.Assert.assertNotNull(option76);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "4" + "'", str79, "4");
        org.junit.Assert.assertNull(optionGroup80);
        org.junit.Assert.assertNotNull(collection81);
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0154");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken("hi!", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptionGroups();
        org.apache.commons.cli.Option option29 = org.apache.commons.cli.OptionBuilder.create('4');
        option29.setDescription("");
        option29.setLongOpt("hi!");
        boolean boolean34 = option29.hasArgName();
        org.apache.commons.cli.Options options35 = options21.addOption(option29);
        java.util.Collection collection36 = options35.getOptionGroups();
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.PosixParser posixParser44 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options45 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option47 = org.apache.commons.cli.OptionBuilder.create('4');
        option47.setDescription("");
        org.apache.commons.cli.Options options50 = options45.addOption(option47);
        org.apache.commons.cli.CommandLine commandLine51 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray53 = commandLine51.getOptionValues("hi!");
        java.lang.String[] strArray54 = commandLine51.getArgs();
        java.util.Properties properties55 = null;
        org.apache.commons.cli.CommandLine commandLine56 = posixParser44.parse(options45, strArray54, properties55);
        org.apache.commons.cli.CommandLine commandLine58 = posixParser37.parse(options43, strArray54, false);
        org.apache.commons.cli.Options options59 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option61 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup62 = options59.getOptionGroup(option61);
        org.apache.commons.cli.Option option64 = org.apache.commons.cli.OptionBuilder.create('4');
        char char65 = option64.getValueSeparator();
        org.apache.commons.cli.Option option67 = org.apache.commons.cli.OptionBuilder.create('4');
        option67.setDescription("");
        option64.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup71 = options59.getOptionGroup(option64);
        boolean boolean73 = options59.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser74 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options75 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option77 = org.apache.commons.cli.OptionBuilder.create('4');
        option77.setDescription("");
        org.apache.commons.cli.Options options80 = options75.addOption(option77);
        org.apache.commons.cli.CommandLine commandLine81 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray83 = commandLine81.getOptionValues("hi!");
        java.lang.String[] strArray84 = commandLine81.getArgs();
        java.util.Properties properties85 = null;
        org.apache.commons.cli.CommandLine commandLine86 = posixParser74.parse(options75, strArray84, properties85);
        java.util.Properties properties87 = null;
        org.apache.commons.cli.CommandLine commandLine89 = posixParser37.parse(options59, strArray84, properties87, true);
        java.util.Properties properties90 = null;
        org.apache.commons.cli.CommandLine commandLine92 = posixParser0.parse(options35, strArray84, properties90, true);
        org.apache.commons.cli.Option option94 = org.apache.commons.cli.OptionBuilder.create('4');
        option94.setArgs((int) (short) 100);
        org.apache.commons.cli.OptionGroup optionGroup97 = options35.getOptionGroup(option94);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(option29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertNotNull(collection36);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNotNull(option47);
        org.junit.Assert.assertNotNull(options50);
        org.junit.Assert.assertNull(strArray53);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(commandLine56);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertNotNull(option61);
        org.junit.Assert.assertNull(optionGroup62);
        org.junit.Assert.assertNotNull(option64);
        org.junit.Assert.assertTrue("'" + char65 + "' != '" + '\000' + "'", char65 == '\000');
        org.junit.Assert.assertNotNull(option67);
        org.junit.Assert.assertNull(optionGroup71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(option77);
        org.junit.Assert.assertNotNull(options80);
        org.junit.Assert.assertNull(strArray83);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(commandLine86);
        org.junit.Assert.assertNotNull(commandLine89);
        org.junit.Assert.assertNotNull(commandLine92);
        org.junit.Assert.assertNotNull(option94);
        org.junit.Assert.assertNull(optionGroup97);
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0962");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.util.Iterator iterator3 = commandLine0.iterator();
        java.lang.String[] strArray5 = commandLine0.getOptionValues('a');
        java.lang.Object obj7 = commandLine0.getOptionObject('a');
        java.lang.Object obj9 = commandLine0.getOptionObject("org.apache.commons.cli.MissingOptionException: hi!");
        java.lang.String str12 = commandLine0.getOptionValue("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]", "[ option: 4  :: null ]");
        java.lang.String[] strArray14 = commandLine0.getOptionValues('=');
        java.lang.String[] strArray16 = commandLine0.getOptionValues("[ option: 4  :: null ::  ]");
        java.lang.String str18 = commandLine0.getOptionValue('#');
        java.lang.String str20 = commandLine0.getOptionValue('\000');
        org.apache.commons.cli.OptionBuilder optionBuilder21 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) '\000');
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(iterator3);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ option: 4  :: null ]" + "'", str12, "[ option: 4  :: null ]");
        org.junit.Assert.assertNull(strArray14);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(optionBuilder21);
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0881");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken("[ option: 4  :: null ::  ]", true);
        org.apache.commons.cli.Option option42 = new org.apache.commons.cli.Option("arg", false, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        boolean boolean43 = option42.hasArg();
        java.lang.String str44 = option42.getKey();
        java.util.ListIterator listIterator45 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option42, listIterator45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "arg" + "'", str44, "arg");
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0257");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue("hi!");
        java.util.List list6 = commandLine0.getArgList();
        java.lang.Object obj8 = commandLine0.getOptionObject("[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]");
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray11 = commandLine9.getOptionValues("hi!");
        java.lang.String[] strArray12 = commandLine9.getArgs();
        java.lang.String str14 = commandLine9.getOptionValue("hi!");
        org.apache.commons.cli.Option option16 = org.apache.commons.cli.OptionBuilder.create(' ');
        commandLine9.addOption(option16);
        commandLine0.addOption(option16);
        java.lang.Object obj20 = commandLine0.getOptionObject("org.apache.commons.cli.MissingOptionException: hi!");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(list6);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(option16);
        org.junit.Assert.assertNull(obj20);
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1084");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptions();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options25.getOptionGroup(option27);
        option27.setOptionalArg(true);
        int int37 = option27.getId();
        org.apache.commons.cli.Options options38 = options18.addOption(option27);
        option27.setOptionalArg(false);
        java.lang.String str42 = option27.getValue("[ option: 4  :: null ::  ]");
        java.lang.String[] strArray43 = option27.getValues();
        option27.setValueSeparator('a');
        org.apache.commons.cli.OptionGroup optionGroup46 = options6.getOptionGroup(option27);
        java.lang.String str47 = options6.toString();
        java.util.Collection collection48 = options6.getOptionGroups();
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option51 = org.apache.commons.cli.OptionBuilder.create('4');
        option51.setDescription("");
        org.apache.commons.cli.Options options54 = options49.addOption(option51);
        char char55 = option51.getValueSeparator();
        option51.setRequired(false);
        org.apache.commons.cli.Options options58 = options6.addOption(option51);
        org.apache.commons.cli.Option option59 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options60 = options6.addOption(option59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[ option: 4  :: null ::  ]" + "'", str42, "[ option: 4  :: null ::  ]");
        org.junit.Assert.assertNull(strArray43);
        org.junit.Assert.assertNull(optionGroup46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str47, "[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNotNull(collection48);
        org.junit.Assert.assertNotNull(option51);
        org.junit.Assert.assertNotNull(options54);
        org.junit.Assert.assertTrue("'" + char55 + "' != '" + '\000' + "'", char55 == '\000');
        org.junit.Assert.assertNotNull(options58);
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0367");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        boolean boolean2 = commandLine0.hasOption('4');
        org.apache.commons.cli.Option option4 = org.apache.commons.cli.OptionBuilder.create('4');
        char char5 = option4.getValueSeparator();
        boolean boolean6 = option4.hasArg();
        boolean boolean7 = option4.hasOptionalArg();
        java.lang.String str9 = option4.getValue(0);
        java.lang.String[] strArray10 = option4.getValues();
        int int11 = option4.getId();
        commandLine0.addOption(option4);
        commandLine0.addArg("[ option: 4  :: null ]");
        boolean boolean16 = commandLine0.hasOption("");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(option4);
        org.junit.Assert.assertTrue("'" + char5 + "' != '" + '\000' + "'", char5 == '\000');
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0883");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        org.apache.commons.cli.Options options36 = null;
        org.apache.commons.cli.CommandLine commandLine37 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray39 = commandLine37.getOptionValues("hi!");
        java.lang.String[] strArray40 = commandLine37.getArgs();
        java.lang.String[] strArray42 = posixParser0.flatten(options36, strArray40, false);
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        option45.setDescription("");
        org.apache.commons.cli.Options options48 = options43.addOption(option45);
        java.util.Collection collection49 = options43.getOptionGroups();
        org.apache.commons.cli.Options options53 = options43.addOption("", false, "arg");
        java.util.List list54 = options53.getRequiredOptions();
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create("arg");
        org.apache.commons.cli.Options options57 = options53.addOption(option56);
        java.util.Collection collection58 = options53.getOptionGroups();
        java.lang.String[] strArray59 = null;
        org.apache.commons.cli.CommandLine commandLine60 = posixParser0.parse(options53, strArray59);
        boolean boolean62 = commandLine60.hasOption('#');
        java.lang.String str65 = commandLine60.getOptionValue('=', "org.apache.commons.cli.UnrecognizedOptionException: ");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNull(strArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(collection49);
        org.junit.Assert.assertNotNull(options53);
        org.junit.Assert.assertNotNull(list54);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertNotNull(options57);
        org.junit.Assert.assertNotNull(collection58);
        org.junit.Assert.assertNotNull(commandLine60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: " + "'", str65, "org.apache.commons.cli.UnrecognizedOptionException: ");
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0899");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        java.util.List list36 = commandLine35.getArgList();
        java.lang.String[] strArray37 = commandLine35.getArgs();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        char char41 = option40.getValueSeparator();
        org.apache.commons.cli.Option option43 = org.apache.commons.cli.OptionBuilder.create('4');
        option43.setDescription("");
        option40.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup47 = options38.getOptionGroup(option40);
        boolean boolean48 = option40.hasValueSeparator();
        commandLine35.addOption(option40);
        option40.setArgs(10);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(list36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertTrue("'" + char41 + "' != '" + '\000' + "'", char41 == '\000');
        org.junit.Assert.assertNotNull(option43);
        org.junit.Assert.assertNull(optionGroup47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1696");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken("hi!", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup24 = options21.getOptionGroup(option23);
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        char char27 = option26.getValueSeparator();
        org.apache.commons.cli.Option option29 = org.apache.commons.cli.OptionBuilder.create('4');
        option29.setDescription("");
        option26.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup33 = options21.getOptionGroup(option26);
        java.lang.String[] strArray34 = null;
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser0.parse(options21, strArray34, properties35);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option39 = org.apache.commons.cli.OptionBuilder.create('4');
        option39.setDescription("");
        org.apache.commons.cli.Options options42 = options37.addOption(option39);
        java.util.Collection collection43 = options37.getOptionGroups();
        org.apache.commons.cli.Options options47 = options37.addOption("", false, "arg");
        java.lang.String str48 = options47.toString();
        org.apache.commons.cli.Option option50 = options47.getOption("[ option: 4 hi!  ::  ]");
        org.apache.commons.cli.PosixParser posixParser51 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options52 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option54 = org.apache.commons.cli.OptionBuilder.create('4');
        option54.setDescription("");
        org.apache.commons.cli.Options options57 = options52.addOption(option54);
        org.apache.commons.cli.PosixParser posixParser58 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options59 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option61 = org.apache.commons.cli.OptionBuilder.create('4');
        option61.setDescription("");
        org.apache.commons.cli.Options options64 = options59.addOption(option61);
        org.apache.commons.cli.CommandLine commandLine65 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray67 = commandLine65.getOptionValues("hi!");
        java.lang.String[] strArray68 = commandLine65.getArgs();
        java.util.Properties properties69 = null;
        org.apache.commons.cli.CommandLine commandLine70 = posixParser58.parse(options59, strArray68, properties69);
        org.apache.commons.cli.CommandLine commandLine72 = posixParser51.parse(options57, strArray68, false);
        java.lang.String str74 = commandLine72.getOptionValue("[ option:  +ARG ::  ]");
        java.lang.Object obj76 = commandLine72.getOptionObject("");
        java.util.Iterator iterator77 = commandLine72.iterator();
        java.lang.Object obj79 = commandLine72.getOptionObject("[ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]");
        boolean boolean81 = commandLine72.hasOption("[ option: arg [ option: 4  :: null ] +ARG :: 4 ]");
        java.lang.String[] strArray82 = commandLine72.getArgs();
        java.util.Properties properties83 = null;
        org.apache.commons.cli.CommandLine commandLine84 = posixParser0.parse(options47, strArray82, properties83);
        java.util.Iterator iterator85 = commandLine84.iterator();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNull(optionGroup24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + char27 + "' != '" + '\000' + "'", char27 == '\000');
        org.junit.Assert.assertNotNull(option29);
        org.junit.Assert.assertNull(optionGroup33);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(option39);
        org.junit.Assert.assertNotNull(options42);
        org.junit.Assert.assertNotNull(collection43);
        org.junit.Assert.assertNotNull(options47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str48, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(option50);
        org.junit.Assert.assertNotNull(option54);
        org.junit.Assert.assertNotNull(options57);
        org.junit.Assert.assertNotNull(option61);
        org.junit.Assert.assertNotNull(options64);
        org.junit.Assert.assertNull(strArray67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(commandLine70);
        org.junit.Assert.assertNotNull(commandLine72);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertNotNull(iterator77);
        org.junit.Assert.assertNull(obj79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(commandLine84);
        org.junit.Assert.assertNotNull(iterator85);
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1078");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        java.util.Collection collection35 = options22.getOptions();
        java.lang.String[] strArray36 = null;
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options22, strArray36, properties37, false);
        java.lang.String[] strArray41 = commandLine39.getOptionValues("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ], arg=[ option: arg  :: null ]} ] [ long {} ]");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertNotNull(collection35);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNull(strArray41);
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0381");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken("4", false);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup42 = options39.getOptionGroup(option41);
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create('4');
        char char45 = option44.getValueSeparator();
        org.apache.commons.cli.Option option47 = org.apache.commons.cli.OptionBuilder.create('4');
        option47.setDescription("");
        option44.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup51 = options39.getOptionGroup(option44);
        java.util.Collection collection52 = options39.getOptions();
        java.lang.String[] strArray53 = null;
        org.apache.commons.cli.CommandLine commandLine54 = posixParser0.parse(options39, strArray53);
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option57 = org.apache.commons.cli.OptionBuilder.create('4');
        option57.setDescription("");
        org.apache.commons.cli.Options options60 = options55.addOption(option57);
        java.util.List list61 = option57.getValuesList();
        java.lang.String str62 = option57.getOpt();
        org.apache.commons.cli.Option option64 = org.apache.commons.cli.OptionBuilder.create("arg");
        java.lang.String str65 = option64.getOpt();
        boolean boolean66 = option64.isRequired();
        boolean boolean67 = option57.equals((java.lang.Object) option64);
        org.apache.commons.cli.Options options68 = options39.addOption(option57);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options72 = options39.addOption("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]", true, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ], arg=[ option: arg  :: null ]} ] [ long {} ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertTrue("'" + char45 + "' != '" + '\000' + "'", char45 == '\000');
        org.junit.Assert.assertNotNull(option47);
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(collection52);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(list61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "4" + "'", str62, "4");
        org.junit.Assert.assertNotNull(option64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "arg" + "'", str65, "arg");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(options68);
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1429");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.Object obj4 = commandLine0.getOptionObject('a');
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        option6.setDescription("");
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option11 = org.apache.commons.cli.OptionBuilder.create('4');
        option11.setDescription("");
        org.apache.commons.cli.Options options14 = options9.addOption(option11);
        boolean boolean15 = option11.hasOptionalArg();
        option6.setType((java.lang.Object) boolean15);
        java.lang.String str17 = option6.getArgName();
        java.lang.Object obj18 = option6.getType();
        java.lang.String[] strArray19 = option6.getValues();
        commandLine0.addOption(option6);
        option6.setValueSeparator('a');
        int int23 = option6.getArgs();
        boolean boolean24 = option6.hasLongOpt();
        java.lang.String str25 = option6.getKey();
        int int26 = option6.getId();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertNotNull(option11);
        org.junit.Assert.assertNotNull(options14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "arg" + "'", str17, "arg");
        org.junit.Assert.assertEquals("'" + obj18 + "' != '" + false + "'", obj18, false);
        org.junit.Assert.assertNull(strArray19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "4" + "'", str25, "4");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0165");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue("hi!");
        org.apache.commons.cli.Option option7 = org.apache.commons.cli.OptionBuilder.create(' ');
        commandLine0.addOption(option7);
        java.lang.String str9 = option7.getDescription();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(option7);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0593");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptionGroups();
        org.apache.commons.cli.Options options11 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create('4');
        boolean boolean14 = option13.hasOptionalArg();
        org.apache.commons.cli.Options options15 = options1.addOption(option13);
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup20 = options17.getOptionGroup(option19);
        org.apache.commons.cli.CommandLine commandLine21 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray23 = commandLine21.getOptionValues("hi!");
        java.lang.String str26 = commandLine21.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str28 = commandLine21.getOptionValue("arg");
        java.lang.String[] strArray29 = commandLine21.getArgs();
        java.lang.String[] strArray31 = posixParser16.flatten(options17, strArray29, true);
        java.util.Properties properties32 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options15, strArray31, properties32);
        java.util.List list34 = options15.helpOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(options15);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNull(optionGroup20);
        org.junit.Assert.assertNull(strArray23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str26, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(list34);
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1461");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken("hi!", true);
        org.apache.commons.cli.PosixParser posixParser21 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create('4');
        option24.setDescription("");
        org.apache.commons.cli.Options options27 = options22.addOption(option24);
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option31 = org.apache.commons.cli.OptionBuilder.create('4');
        option31.setDescription("");
        org.apache.commons.cli.Options options34 = options29.addOption(option31);
        org.apache.commons.cli.CommandLine commandLine35 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray37 = commandLine35.getOptionValues("hi!");
        java.lang.String[] strArray38 = commandLine35.getArgs();
        java.util.Properties properties39 = null;
        org.apache.commons.cli.CommandLine commandLine40 = posixParser28.parse(options29, strArray38, properties39);
        org.apache.commons.cli.CommandLine commandLine42 = posixParser21.parse(options27, strArray38, false);
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup46 = options43.getOptionGroup(option45);
        org.apache.commons.cli.Option option48 = org.apache.commons.cli.OptionBuilder.create('4');
        char char49 = option48.getValueSeparator();
        org.apache.commons.cli.Option option51 = org.apache.commons.cli.OptionBuilder.create('4');
        option51.setDescription("");
        option48.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup55 = options43.getOptionGroup(option48);
        boolean boolean57 = options43.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser58 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options59 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option61 = org.apache.commons.cli.OptionBuilder.create('4');
        option61.setDescription("");
        org.apache.commons.cli.Options options64 = options59.addOption(option61);
        org.apache.commons.cli.CommandLine commandLine65 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray67 = commandLine65.getOptionValues("hi!");
        java.lang.String[] strArray68 = commandLine65.getArgs();
        java.util.Properties properties69 = null;
        org.apache.commons.cli.CommandLine commandLine70 = posixParser58.parse(options59, strArray68, properties69);
        java.util.Properties properties71 = null;
        org.apache.commons.cli.CommandLine commandLine73 = posixParser21.parse(options43, strArray68, properties71, true);
        java.lang.String str74 = options43.toString();
        org.apache.commons.cli.PosixParser posixParser75 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options76 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option78 = org.apache.commons.cli.OptionBuilder.create('4');
        option78.setDescription("");
        org.apache.commons.cli.Options options81 = options76.addOption(option78);
        java.util.Collection collection82 = options76.getOptions();
        boolean boolean84 = options76.hasOption("arg");
        java.lang.String[] strArray87 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" };
        org.apache.commons.cli.CommandLine commandLine88 = posixParser75.parse(options76, strArray87);
        org.apache.commons.cli.CommandLine commandLine90 = posixParser0.parse(options43, strArray87, false);
        java.util.List list91 = commandLine90.getArgList();
        java.lang.String str94 = commandLine90.getOptionValue("a", "4");
        java.lang.String[] strArray95 = commandLine90.getArgs();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNotNull(options27);
        org.junit.Assert.assertNotNull(option31);
        org.junit.Assert.assertNotNull(options34);
        org.junit.Assert.assertNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(commandLine40);
        org.junit.Assert.assertNotNull(commandLine42);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNull(optionGroup46);
        org.junit.Assert.assertNotNull(option48);
        org.junit.Assert.assertTrue("'" + char49 + "' != '" + '\000' + "'", char49 == '\000');
        org.junit.Assert.assertNotNull(option51);
        org.junit.Assert.assertNull(optionGroup55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(option61);
        org.junit.Assert.assertNotNull(options64);
        org.junit.Assert.assertNull(strArray67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(commandLine70);
        org.junit.Assert.assertNotNull(commandLine73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str74, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(option78);
        org.junit.Assert.assertNotNull(options81);
        org.junit.Assert.assertNotNull(collection82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(commandLine88);
        org.junit.Assert.assertNotNull(commandLine90);
        org.junit.Assert.assertNotNull(list91);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "4" + "'", str94, "4");
        org.junit.Assert.assertNotNull(strArray95);
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0120");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        org.apache.commons.cli.Option option36 = org.apache.commons.cli.OptionBuilder.create('4');
        boolean boolean37 = option36.isRequired();
        org.apache.commons.cli.Options options38 = options22.addOption(option36);
        java.util.List list39 = options38.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser40 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options41 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option43 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup44 = options41.getOptionGroup(option43);
        org.apache.commons.cli.Option option46 = org.apache.commons.cli.OptionBuilder.create('4');
        char char47 = option46.getValueSeparator();
        org.apache.commons.cli.Option option49 = org.apache.commons.cli.OptionBuilder.create('4');
        option49.setDescription("");
        option46.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup53 = options41.getOptionGroup(option46);
        boolean boolean55 = options41.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create('4');
        option59.setDescription("");
        org.apache.commons.cli.Options options62 = options57.addOption(option59);
        org.apache.commons.cli.CommandLine commandLine63 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray65 = commandLine63.getOptionValues("hi!");
        java.lang.String str68 = commandLine63.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str70 = commandLine63.getOptionValue("arg");
        java.lang.String[] strArray71 = commandLine63.getArgs();
        java.lang.String[] strArray73 = posixParser56.flatten(options62, strArray71, false);
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine75 = posixParser40.parse(options41, strArray73, properties74);
        java.util.List list76 = commandLine75.getArgList();
        java.lang.String[] strArray77 = commandLine75.getArgs();
        java.util.Properties properties78 = null;
        org.apache.commons.cli.CommandLine commandLine80 = posixParser0.parse(options38, strArray77, properties78, false);
        org.apache.commons.cli.Options options81 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option83 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup84 = options81.getOptionGroup(option83);
        boolean boolean85 = option83.hasLongOpt();
        boolean boolean86 = option83.isRequired();
        java.util.List list87 = option83.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup88 = options38.getOptionGroup(option83);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options93 = options38.addOption("org.apache.commons.cli.MissingArgumentException: [ option:    :: null ]", "", true, "[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '.'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertNotNull(option36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(list39);
        org.junit.Assert.assertNotNull(option43);
        org.junit.Assert.assertNull(optionGroup44);
        org.junit.Assert.assertNotNull(option46);
        org.junit.Assert.assertTrue("'" + char47 + "' != '" + '\000' + "'", char47 == '\000');
        org.junit.Assert.assertNotNull(option49);
        org.junit.Assert.assertNull(optionGroup53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertNotNull(options62);
        org.junit.Assert.assertNull(strArray65);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str68, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine75);
        org.junit.Assert.assertNotNull(list76);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(commandLine80);
        org.junit.Assert.assertNotNull(option83);
        org.junit.Assert.assertNull(optionGroup84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(list87);
        org.junit.Assert.assertNull(optionGroup88);
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0087");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken("hi!", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptionGroups();
        org.apache.commons.cli.Options options31 = options21.addOption("", false, "arg");
        java.util.List list32 = options31.getRequiredOptions();
        org.apache.commons.cli.Option option34 = org.apache.commons.cli.OptionBuilder.create("arg");
        org.apache.commons.cli.Options options35 = options31.addOption(option34);
        boolean boolean37 = options31.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        java.util.Collection collection38 = options31.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine39 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray41 = commandLine39.getOptionValues("hi!");
        java.lang.String str44 = commandLine39.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str46 = commandLine39.getOptionValue("arg");
        java.lang.String[] strArray47 = commandLine39.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine50 = posixParser0.parse(options31, strArray47, properties48, true);
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = org.apache.commons.cli.OptionBuilder.create('4');
        option53.setDescription("");
        org.apache.commons.cli.Options options56 = options51.addOption(option53);
        java.util.Collection collection57 = options51.getOptionGroups();
        java.util.Collection collection58 = options51.getOptionGroups();
        java.util.Collection collection59 = options51.getOptionGroups();
        org.apache.commons.cli.PosixParser posixParser60 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options61 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option63 = org.apache.commons.cli.OptionBuilder.create('4');
        option63.setDescription("");
        org.apache.commons.cli.Options options66 = options61.addOption(option63);
        org.apache.commons.cli.CommandLine commandLine67 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray69 = commandLine67.getOptionValues("hi!");
        java.lang.String str72 = commandLine67.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str74 = commandLine67.getOptionValue("arg");
        java.lang.String[] strArray75 = commandLine67.getArgs();
        java.lang.String[] strArray77 = posixParser60.flatten(options66, strArray75, false);
        java.util.Properties properties78 = null;
        org.apache.commons.cli.CommandLine commandLine79 = posixParser0.parse(options51, strArray77, properties78);
        java.lang.Object obj81 = commandLine79.getOptionObject("4");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(options31);
        org.junit.Assert.assertNotNull(list32);
        org.junit.Assert.assertNotNull(option34);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertNull(strArray41);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str44, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNotNull(options56);
        org.junit.Assert.assertNotNull(collection57);
        org.junit.Assert.assertNotNull(collection58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(option63);
        org.junit.Assert.assertNotNull(options66);
        org.junit.Assert.assertNull(strArray69);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str72, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(commandLine79);
        org.junit.Assert.assertNull(obj81);
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1346");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptions();
        boolean boolean9 = options1.hasOption("arg");
        java.lang.String[] strArray12 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" };
        org.apache.commons.cli.CommandLine commandLine13 = posixParser0.parse(options1, strArray12);
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = org.apache.commons.cli.OptionBuilder.create('4');
        option16.setDescription("");
        org.apache.commons.cli.Options options19 = options14.addOption(option16);
        java.util.Collection collection20 = options14.getOptionGroups();
        org.apache.commons.cli.Options options24 = options14.addOption("", false, "arg");
        java.util.List list25 = options24.getRequiredOptions();
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create("arg");
        org.apache.commons.cli.Options options28 = options24.addOption(option27);
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setArgs((int) (short) 100);
        option30.setArgName("[ option: 4  :: null ]");
        java.lang.String str35 = option30.getLongOpt();
        java.lang.String str37 = option30.getValue((int) (short) -1);
        org.apache.commons.cli.Options options38 = options28.addOption(option30);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup42 = options39.getOptionGroup(option41);
        boolean boolean43 = option41.hasLongOpt();
        boolean boolean44 = option41.isRequired();
        java.util.List list45 = option41.getValuesList();
        option41.setDescription("[ option: 4  ::  ]");
        org.apache.commons.cli.Options options48 = options38.addOption(option41);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        option52.setDescription("");
        org.apache.commons.cli.Options options55 = options50.addOption(option52);
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray58 = commandLine56.getOptionValues("hi!");
        java.lang.String str61 = commandLine56.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str63 = commandLine56.getOptionValue("arg");
        java.lang.String[] strArray64 = commandLine56.getArgs();
        java.lang.String[] strArray66 = posixParser49.flatten(options55, strArray64, false);
        org.apache.commons.cli.CommandLine commandLine68 = posixParser0.parse(options38, strArray64, true);
        boolean boolean70 = commandLine68.hasOption("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]");
        java.lang.String[] strArray72 = commandLine68.getOptionValues("[ Options: [ short {4=[ option: 4  :: null ::  ]} ] [ long {} ]");
        org.apache.commons.cli.Option option74 = org.apache.commons.cli.OptionBuilder.create('4');
        java.lang.String str76 = option74.getValue("arg");
        org.apache.commons.cli.MissingOptionException missingOptionException78 = new org.apache.commons.cli.MissingOptionException("hi!");
        boolean boolean79 = option74.equals((java.lang.Object) "hi!");
        java.lang.String str80 = option74.toString();
        option74.setDescription("");
        commandLine68.addOption(option74);
        java.lang.String[] strArray85 = commandLine68.getOptionValues('\000');
        boolean boolean87 = commandLine68.hasOption('#');
        org.apache.commons.cli.Option option88 = null;
        // The following exception was thrown during execution in test generation
        try {
            commandLine68.addOption(option88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine13);
        org.junit.Assert.assertNotNull(option16);
        org.junit.Assert.assertNotNull(options19);
        org.junit.Assert.assertNotNull(collection20);
        org.junit.Assert.assertNotNull(options24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(list45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNull(strArray58);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str61, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(strArray72);
        org.junit.Assert.assertNotNull(option74);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "arg" + "'", str76, "arg");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "[ option: 4  :: null ]" + "'", str80, "[ option: 4  :: null ]");
        org.junit.Assert.assertNull(strArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0142");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        boolean boolean5 = commandLine0.hasOption("hi!");
        java.util.List list6 = commandLine0.getArgList();
        java.lang.Object obj8 = commandLine0.getOptionObject("[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]");
        java.lang.String[] strArray10 = commandLine0.getOptionValues('\000');
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(list6);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(strArray10);
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0524");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        posixParser0.burstToken("", false);
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        option27.setDescription("");
        org.apache.commons.cli.Options options30 = options25.addOption(option27);
        java.util.Collection collection31 = options25.getOptionGroups();
        org.apache.commons.cli.Options options35 = options25.addOption("", false, "arg");
        java.util.List list36 = options35.getRequiredOptions();
        org.apache.commons.cli.Option option38 = org.apache.commons.cli.OptionBuilder.create("arg");
        org.apache.commons.cli.Options options39 = options35.addOption(option38);
        boolean boolean41 = options35.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser42 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        option45.setDescription("");
        org.apache.commons.cli.Options options48 = options43.addOption(option45);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        option52.setDescription("");
        org.apache.commons.cli.Options options55 = options50.addOption(option52);
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray58 = commandLine56.getOptionValues("hi!");
        java.lang.String[] strArray59 = commandLine56.getArgs();
        java.util.Properties properties60 = null;
        org.apache.commons.cli.CommandLine commandLine61 = posixParser49.parse(options50, strArray59, properties60);
        org.apache.commons.cli.CommandLine commandLine63 = posixParser42.parse(options48, strArray59, false);
        org.apache.commons.cli.Options options64 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option66 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup67 = options64.getOptionGroup(option66);
        org.apache.commons.cli.Option option69 = org.apache.commons.cli.OptionBuilder.create('4');
        char char70 = option69.getValueSeparator();
        org.apache.commons.cli.Option option72 = org.apache.commons.cli.OptionBuilder.create('4');
        option72.setDescription("");
        option69.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup76 = options64.getOptionGroup(option69);
        boolean boolean78 = options64.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser79 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options80 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option82 = org.apache.commons.cli.OptionBuilder.create('4');
        option82.setDescription("");
        org.apache.commons.cli.Options options85 = options80.addOption(option82);
        org.apache.commons.cli.CommandLine commandLine86 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray88 = commandLine86.getOptionValues("hi!");
        java.lang.String[] strArray89 = commandLine86.getArgs();
        java.util.Properties properties90 = null;
        org.apache.commons.cli.CommandLine commandLine91 = posixParser79.parse(options80, strArray89, properties90);
        java.util.Properties properties92 = null;
        org.apache.commons.cli.CommandLine commandLine94 = posixParser42.parse(options64, strArray89, properties92, true);
        java.util.Properties properties95 = null;
        org.apache.commons.cli.CommandLine commandLine96 = posixParser0.parse(options35, strArray89, properties95);
        posixParser0.burstToken("[ option: 4  :: null ]", true);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertNotNull(options30);
        org.junit.Assert.assertNotNull(collection31);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertNotNull(list36);
        org.junit.Assert.assertNotNull(option38);
        org.junit.Assert.assertNotNull(options39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNull(strArray58);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(commandLine61);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(option66);
        org.junit.Assert.assertNull(optionGroup67);
        org.junit.Assert.assertNotNull(option69);
        org.junit.Assert.assertTrue("'" + char70 + "' != '" + '\000' + "'", char70 == '\000');
        org.junit.Assert.assertNotNull(option72);
        org.junit.Assert.assertNull(optionGroup76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(option82);
        org.junit.Assert.assertNotNull(options85);
        org.junit.Assert.assertNull(strArray88);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(commandLine91);
        org.junit.Assert.assertNotNull(commandLine94);
        org.junit.Assert.assertNotNull(commandLine96);
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1192");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option2 = org.apache.commons.cli.OptionBuilder.create('4');
        option2.setDescription("");
        org.apache.commons.cli.Options options5 = options0.addOption(option2);
        java.util.Collection collection6 = options0.getOptionGroups();
        org.apache.commons.cli.Options options10 = options0.addOption("", false, "arg");
        java.util.List list11 = options10.getRequiredOptions();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("arg");
        org.apache.commons.cli.Options options14 = options10.addOption(option13);
        org.apache.commons.cli.Options options15 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option17 = org.apache.commons.cli.OptionBuilder.create('4');
        option17.setDescription("");
        org.apache.commons.cli.Options options20 = options15.addOption(option17);
        java.util.List list21 = options15.helpOptions();
        org.apache.commons.cli.Options options26 = options15.addOption("arg", "org.apache.commons.cli.UnrecognizedOptionException: hi!", false, "");
        org.apache.commons.cli.CommandLine commandLine27 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray29 = commandLine27.getOptionValues("hi!");
        java.lang.String[] strArray30 = commandLine27.getArgs();
        java.util.Iterator iterator31 = commandLine27.iterator();
        java.lang.String str33 = commandLine27.getOptionValue("[ option:    :: null ]");
        org.apache.commons.cli.Option option35 = org.apache.commons.cli.OptionBuilder.create('4');
        java.lang.String str37 = option35.getValue("arg");
        org.apache.commons.cli.MissingOptionException missingOptionException39 = new org.apache.commons.cli.MissingOptionException("hi!");
        boolean boolean40 = option35.equals((java.lang.Object) "hi!");
        option35.setValueSeparator('=');
        boolean boolean43 = option35.hasValueSeparator();
        java.lang.String str44 = option35.getArgName();
        commandLine27.addOption(option35);
        org.apache.commons.cli.OptionGroup optionGroup46 = options26.getOptionGroup(option35);
        int int47 = option35.getArgs();
        java.lang.String str48 = option35.getDescription();
        org.apache.commons.cli.Options options49 = options10.addOption(option35);
        java.util.List list50 = options49.helpOptions();
        org.junit.Assert.assertNotNull(option2);
        org.junit.Assert.assertNotNull(options5);
        org.junit.Assert.assertNotNull(collection6);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertNotNull(options14);
        org.junit.Assert.assertNotNull(option17);
        org.junit.Assert.assertNotNull(options20);
        org.junit.Assert.assertNotNull(list21);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNull(strArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(iterator31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(option35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "arg" + "'", str37, "arg");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "arg" + "'", str44, "arg");
        org.junit.Assert.assertNull(optionGroup46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(options49);
        org.junit.Assert.assertNotNull(list50);
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1396");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.util.Iterator iterator4 = commandLine0.iterator();
        java.lang.String str7 = commandLine0.getOptionValue("[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]", "arg");
        boolean boolean9 = commandLine0.hasOption("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]");
        java.util.List list10 = commandLine0.getArgList();
        org.apache.commons.cli.Option option12 = org.apache.commons.cli.OptionBuilder.create('4');
        option12.setDescription("");
        org.apache.commons.cli.Options options15 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option17 = org.apache.commons.cli.OptionBuilder.create('4');
        option17.setDescription("");
        org.apache.commons.cli.Options options20 = options15.addOption(option17);
        boolean boolean21 = option12.equals((java.lang.Object) option17);
        option17.setValueSeparator('#');
        boolean boolean24 = option17.hasArgs();
        java.lang.String[] strArray25 = option17.getValues();
        commandLine0.addOption(option17);
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(iterator4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(list10);
        org.junit.Assert.assertNotNull(option12);
        org.junit.Assert.assertNotNull(option17);
        org.junit.Assert.assertNotNull(options20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(strArray25);
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1195");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken("hi!", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptions();
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        char char31 = option30.getValueSeparator();
        org.apache.commons.cli.Option option33 = org.apache.commons.cli.OptionBuilder.create('4');
        option33.setDescription("");
        option30.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup37 = options28.getOptionGroup(option30);
        option30.setOptionalArg(true);
        int int40 = option30.getId();
        org.apache.commons.cli.Options options41 = options21.addOption(option30);
        boolean boolean43 = options41.hasOption("");
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        option45.setArgs((int) (short) 100);
        option45.setArgName("[ option: 4  :: null ]");
        java.lang.String str50 = option45.getLongOpt();
        boolean boolean51 = option45.hasLongOpt();
        org.apache.commons.cli.Options options52 = options41.addOption(option45);
        java.util.Collection collection53 = options41.getOptions();
        org.apache.commons.cli.PosixParser posixParser54 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option57 = org.apache.commons.cli.OptionBuilder.create('4');
        option57.setDescription("");
        org.apache.commons.cli.Options options60 = options55.addOption(option57);
        java.util.Collection collection61 = options55.getOptions();
        boolean boolean63 = options55.hasOption("arg");
        java.lang.String[] strArray66 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" };
        org.apache.commons.cli.CommandLine commandLine67 = posixParser54.parse(options55, strArray66);
        java.lang.String[] strArray69 = posixParser0.flatten(options41, strArray66, false);
        java.util.List list70 = options41.helpOptions();
        java.lang.String str71 = options41.toString();
        org.apache.commons.cli.Option option75 = new org.apache.commons.cli.Option("4", false, "[ option: 4  ::  ]");
        java.lang.String str76 = option75.getDescription();
        org.apache.commons.cli.Options options77 = options41.addOption(option75);
        java.util.Collection collection78 = options41.getOptions();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options83 = options41.addOption("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4 org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!  ::  ]} ] [ long {org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!=[ option: 4 org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!  ::  ]} ]", "hi!", false, "[ option: 4  :: null :: [ option:   [ option: 4  ::  ]  :: null ] ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertTrue("'" + char31 + "' != '" + '\000' + "'", char31 == '\000');
        org.junit.Assert.assertNotNull(option33);
        org.junit.Assert.assertNull(optionGroup37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(collection53);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(collection61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(list70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]" + "'", str71, "[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "[ option: 4  ::  ]" + "'", str76, "[ option: 4  ::  ]");
        org.junit.Assert.assertNotNull(options77);
        org.junit.Assert.assertNotNull(collection78);
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0851");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.Object obj4 = commandLine0.getOptionObject('a');
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        option6.setDescription("");
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option11 = org.apache.commons.cli.OptionBuilder.create('4');
        option11.setDescription("");
        org.apache.commons.cli.Options options14 = options9.addOption(option11);
        boolean boolean15 = option11.hasOptionalArg();
        option6.setType((java.lang.Object) boolean15);
        java.lang.String str17 = option6.getArgName();
        java.lang.Object obj18 = option6.getType();
        java.lang.String[] strArray19 = option6.getValues();
        commandLine0.addOption(option6);
        java.util.Iterator iterator21 = commandLine0.iterator();
        boolean boolean23 = commandLine0.hasOption('=');
        java.lang.String str26 = commandLine0.getOptionValue("org.apache.commons.cli.ParseException: [ option:   [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]  :: null ]", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertNotNull(option11);
        org.junit.Assert.assertNotNull(options14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "arg" + "'", str17, "arg");
        org.junit.Assert.assertEquals("'" + obj18 + "' != '" + false + "'", obj18, false);
        org.junit.Assert.assertNull(strArray19);
        org.junit.Assert.assertNotNull(iterator21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ::  ]} ] [ long {} ]" + "'", str26, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ::  ]} ] [ long {} ]");
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1684");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        boolean boolean5 = commandLine0.hasOption("hi!");
        boolean boolean7 = commandLine0.hasOption('a');
        java.lang.String str9 = commandLine0.getOptionValue("4");
        org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option12 = org.apache.commons.cli.OptionBuilder.create('4');
        option12.setDescription("");
        org.apache.commons.cli.Options options15 = options10.addOption(option12);
        option12.setArgName("");
        option12.setValueSeparator(' ');
        boolean boolean20 = option12.hasLongOpt();
        commandLine0.addOption(option12);
        option12.setArgName("");
        org.apache.commons.cli.PosixParser posixParser24 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        option27.setDescription("");
        org.apache.commons.cli.Options options30 = options25.addOption(option27);
        org.apache.commons.cli.CommandLine commandLine31 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray33 = commandLine31.getOptionValues("hi!");
        java.lang.String str36 = commandLine31.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str38 = commandLine31.getOptionValue("arg");
        java.lang.String[] strArray39 = commandLine31.getArgs();
        java.lang.String[] strArray41 = posixParser24.flatten(options30, strArray39, false);
        org.apache.commons.cli.Options options42 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create('4');
        option44.setDescription("");
        org.apache.commons.cli.Options options47 = options42.addOption(option44);
        java.util.Collection collection48 = options42.getOptionGroups();
        org.apache.commons.cli.Option option50 = org.apache.commons.cli.OptionBuilder.create('4');
        option50.setDescription("");
        option50.setLongOpt("hi!");
        boolean boolean55 = option50.hasArgName();
        org.apache.commons.cli.Options options56 = options42.addOption(option50);
        org.apache.commons.cli.CommandLine commandLine57 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray59 = commandLine57.getOptionValues("hi!");
        java.lang.String[] strArray60 = commandLine57.getArgs();
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine63 = posixParser24.parse(options42, strArray60, properties61, true);
        org.apache.commons.cli.Option[] optionArray64 = commandLine63.getOptions();
        boolean boolean65 = option12.equals((java.lang.Object) commandLine63);
        java.lang.String str67 = commandLine63.getOptionValue("[ option:   org.apache.commons.cli.UnrecognizedOptionException: hi!  :: null ]");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(option12);
        org.junit.Assert.assertNotNull(options15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertNotNull(options30);
        org.junit.Assert.assertNull(strArray33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str36, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertNotNull(options47);
        org.junit.Assert.assertNotNull(collection48);
        org.junit.Assert.assertNotNull(option50);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(options56);
        org.junit.Assert.assertNull(strArray59);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(optionArray64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(str67);
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1588");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String[] strArray10 = commandLine7.getArgs();
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = posixParser0.parse(options1, strArray10, properties11);
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option15 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup16 = options13.getOptionGroup(option15);
        org.apache.commons.cli.Option option18 = org.apache.commons.cli.OptionBuilder.create('4');
        char char19 = option18.getValueSeparator();
        org.apache.commons.cli.Option option21 = org.apache.commons.cli.OptionBuilder.create('4');
        option21.setDescription("");
        option18.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup25 = options13.getOptionGroup(option18);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        boolean boolean28 = option27.isRequired();
        org.apache.commons.cli.Options options29 = options13.addOption(option27);
        org.apache.commons.cli.Option option31 = org.apache.commons.cli.OptionBuilder.create('4');
        char char32 = option31.getValueSeparator();
        org.apache.commons.cli.Option option34 = org.apache.commons.cli.OptionBuilder.create('4');
        option34.setDescription("");
        option31.setType((java.lang.Object) "");
        boolean boolean38 = option31.isRequired();
        java.lang.String str39 = option31.getKey();
        boolean boolean40 = option31.isRequired();
        java.lang.Object obj41 = option31.getType();
        org.apache.commons.cli.Options options42 = options29.addOption(option31);
        java.lang.String[] strArray43 = null;
        org.apache.commons.cli.CommandLine commandLine44 = posixParser0.parse(options42, strArray43);
        org.apache.commons.cli.Option option46 = options42.getOption("[ option: 4  :: [ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ] ]");
        org.apache.commons.cli.Option option48 = options42.getOption("[ option:    :: null ]");
        org.apache.commons.cli.Option option50 = options42.getOption("[ Options: [ short { =[ option:    :: hi! ], 4=[ option: 4  ::  ], arg=[ option: arg org.apache.commons.cli.UnrecognizedOptionException: hi!  :: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ]} ] [ long {org.apache.commons.cli.UnrecognizedOptionException: hi!=[ option: arg org.apache.commons.cli.UnrecognizedOptionException: hi!  :: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ]} ]");
        org.apache.commons.cli.Option option54 = new org.apache.commons.cli.Option("4", true, "4");
        org.apache.commons.cli.Options options55 = options42.addOption(option54);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options60 = options55.addOption("[ option: 4  :: [ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ] ::  ]", "org.apache.commons.cli.MissingOptionException: [ option: 4  :: hi! ]", false, "org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ::  ]} ] [ long {} ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
        org.junit.Assert.assertNotNull(option15);
        org.junit.Assert.assertNull(optionGroup16);
        org.junit.Assert.assertNotNull(option18);
        org.junit.Assert.assertTrue("'" + char19 + "' != '" + '\000' + "'", char19 == '\000');
        org.junit.Assert.assertNotNull(option21);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(options29);
        org.junit.Assert.assertNotNull(option31);
        org.junit.Assert.assertTrue("'" + char32 + "' != '" + '\000' + "'", char32 == '\000');
        org.junit.Assert.assertNotNull(option34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "4" + "'", str39, "4");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + obj41 + "' != '" + "" + "'", obj41, "");
        org.junit.Assert.assertNotNull(options42);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNull(option46);
        org.junit.Assert.assertNull(option48);
        org.junit.Assert.assertNull(option50);
        org.junit.Assert.assertNotNull(options55);
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1660");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue('\000');
        java.lang.Object obj7 = commandLine0.getOptionObject("");
        java.util.List list8 = commandLine0.getArgList();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(list8);
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0279");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken("hi!", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptionGroups();
        org.apache.commons.cli.Options options31 = options21.addOption("", false, "arg");
        java.util.List list32 = options31.getRequiredOptions();
        org.apache.commons.cli.Option option34 = org.apache.commons.cli.OptionBuilder.create("arg");
        org.apache.commons.cli.Options options35 = options31.addOption(option34);
        boolean boolean37 = options31.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        java.util.Collection collection38 = options31.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine39 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray41 = commandLine39.getOptionValues("hi!");
        java.lang.String str44 = commandLine39.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str46 = commandLine39.getOptionValue("arg");
        java.lang.String[] strArray47 = commandLine39.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine50 = posixParser0.parse(options31, strArray47, properties48, true);
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = org.apache.commons.cli.OptionBuilder.create('4');
        option53.setDescription("");
        org.apache.commons.cli.Options options56 = options51.addOption(option53);
        org.apache.commons.cli.CommandLine commandLine57 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray59 = commandLine57.getOptionValues("hi!");
        java.lang.String str62 = commandLine57.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str64 = commandLine57.getOptionValue("arg");
        java.lang.String[] strArray65 = commandLine57.getArgs();
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser0.parse(options51, strArray65, properties66);
        java.util.List list68 = options51.helpOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(options31);
        org.junit.Assert.assertNotNull(list32);
        org.junit.Assert.assertNotNull(option34);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertNull(strArray41);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str44, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNotNull(options56);
        org.junit.Assert.assertNull(strArray59);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str62, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNotNull(list68);
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0701");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptions();
        boolean boolean9 = options1.hasOption("arg");
        java.lang.String[] strArray12 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" };
        org.apache.commons.cli.CommandLine commandLine13 = posixParser0.parse(options1, strArray12);
        commandLine13.addArg("[ option: 4  :: null ::  ]");
        java.util.Iterator iterator16 = commandLine13.iterator();
        java.lang.Object obj18 = commandLine13.getOptionObject("[ Options: [ short {4=[ option: 4  ::  :: [ option: arg [ option: 4  :: null ] +ARG :: 4 ] ]} ] [ long {} ]");
        java.lang.Object obj20 = commandLine13.getOptionObject('4');
        java.lang.Object obj22 = commandLine13.getOptionObject('a');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine13);
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(obj22);
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1679");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken("hi!", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptions();
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        char char31 = option30.getValueSeparator();
        org.apache.commons.cli.Option option33 = org.apache.commons.cli.OptionBuilder.create('4');
        option33.setDescription("");
        option30.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup37 = options28.getOptionGroup(option30);
        option30.setOptionalArg(true);
        int int40 = option30.getId();
        org.apache.commons.cli.Options options41 = options21.addOption(option30);
        boolean boolean43 = options41.hasOption("");
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        option45.setArgs((int) (short) 100);
        option45.setArgName("[ option: 4  :: null ]");
        java.lang.String str50 = option45.getLongOpt();
        boolean boolean51 = option45.hasLongOpt();
        org.apache.commons.cli.Options options52 = options41.addOption(option45);
        java.util.Collection collection53 = options41.getOptions();
        org.apache.commons.cli.PosixParser posixParser54 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option57 = org.apache.commons.cli.OptionBuilder.create('4');
        option57.setDescription("");
        org.apache.commons.cli.Options options60 = options55.addOption(option57);
        java.util.Collection collection61 = options55.getOptions();
        boolean boolean63 = options55.hasOption("arg");
        java.lang.String[] strArray66 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" };
        org.apache.commons.cli.CommandLine commandLine67 = posixParser54.parse(options55, strArray66);
        java.lang.String[] strArray69 = posixParser0.flatten(options41, strArray66, false);
        java.util.List list70 = options41.helpOptions();
        org.apache.commons.cli.Option option72 = org.apache.commons.cli.OptionBuilder.create('4');
        option72.setArgs((int) (short) 100);
        option72.setArgName("[ option: 4  :: null ]");
        java.lang.String str77 = option72.getLongOpt();
        boolean boolean78 = option72.hasLongOpt();
        java.lang.Object obj79 = option72.getType();
        int int80 = option72.getId();
        java.lang.String str81 = option72.getArgName();
        org.apache.commons.cli.Options options82 = options41.addOption(option72);
        boolean boolean83 = option72.hasOptionalArg();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertTrue("'" + char31 + "' != '" + '\000' + "'", char31 == '\000');
        org.junit.Assert.assertNotNull(option33);
        org.junit.Assert.assertNull(optionGroup37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(collection53);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(collection61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(list70);
        org.junit.Assert.assertNotNull(option72);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(obj79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 52 + "'", int80 == 52);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "[ option: 4  :: null ]" + "'", str81, "[ option: 4  :: null ]");
        org.junit.Assert.assertNotNull(options82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0402");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        org.apache.commons.cli.Option[] optionArray4 = commandLine0.getOptions();
        java.lang.Object obj6 = commandLine0.getOptionObject("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        java.lang.Object obj8 = commandLine0.getOptionObject(' ');
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(optionArray4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1431");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken("hi!", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptionGroups();
        org.apache.commons.cli.Options options31 = options21.addOption("", false, "arg");
        java.util.List list32 = options31.getRequiredOptions();
        org.apache.commons.cli.Option option34 = org.apache.commons.cli.OptionBuilder.create("arg");
        org.apache.commons.cli.Options options35 = options31.addOption(option34);
        boolean boolean37 = options31.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        java.util.Collection collection38 = options31.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine39 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray41 = commandLine39.getOptionValues("hi!");
        java.lang.String str44 = commandLine39.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str46 = commandLine39.getOptionValue("arg");
        java.lang.String[] strArray47 = commandLine39.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine50 = posixParser0.parse(options31, strArray47, properties48, true);
        org.apache.commons.cli.Option[] optionArray51 = commandLine50.getOptions();
        java.lang.String str54 = commandLine50.getOptionValue("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  :: [ option: arg [ option: 4  :: null ] +ARG :: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ] ]} ] [ long {} ]", "[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]");
        java.lang.Object obj56 = commandLine50.getOptionObject('a');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(options31);
        org.junit.Assert.assertNotNull(list32);
        org.junit.Assert.assertNotNull(option34);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertNull(strArray41);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str44, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertNotNull(optionArray51);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]" + "'", str54, "[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]");
        org.junit.Assert.assertNull(obj56);
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0917");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create(' ');
        boolean boolean2 = option1.hasArgName();
        boolean boolean3 = option1.hasArgName();
        boolean boolean4 = option1.hasOptionalArg();
        java.lang.Object obj5 = option1.getType();
        option1.setLongOpt("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.apache.commons.cli.CommandLine commandLine8 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine8.getOptionValues("hi!");
        java.lang.String[] strArray11 = commandLine8.getArgs();
        option1.setType((java.lang.Object) strArray11);
        option1.setDescription("org.apache.commons.cli.UnrecognizedOptionException: ");
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1602");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        org.apache.commons.cli.PosixParser posixParser36 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option39 = org.apache.commons.cli.OptionBuilder.create('4');
        option39.setDescription("");
        org.apache.commons.cli.Options options42 = options37.addOption(option39);
        org.apache.commons.cli.PosixParser posixParser43 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options44 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option46 = org.apache.commons.cli.OptionBuilder.create('4');
        option46.setDescription("");
        org.apache.commons.cli.Options options49 = options44.addOption(option46);
        org.apache.commons.cli.CommandLine commandLine50 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray52 = commandLine50.getOptionValues("hi!");
        java.lang.String[] strArray53 = commandLine50.getArgs();
        java.util.Properties properties54 = null;
        org.apache.commons.cli.CommandLine commandLine55 = posixParser43.parse(options44, strArray53, properties54);
        org.apache.commons.cli.CommandLine commandLine57 = posixParser36.parse(options42, strArray53, false);
        java.util.Collection collection58 = options42.getOptions();
        java.util.Collection collection59 = options42.getOptionGroups();
        org.apache.commons.cli.Option option61 = options42.getOption("[ option: 4  :: org.apache.commons.cli.ParseException: arg ]");
        org.apache.commons.cli.CommandLine commandLine62 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray64 = commandLine62.getOptionValues("hi!");
        java.lang.String str67 = commandLine62.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        commandLine62.addArg("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]");
        java.lang.String[] strArray71 = commandLine62.getOptionValues('4');
        java.lang.String[] strArray72 = commandLine62.getArgs();
        java.util.Properties properties73 = null;
        org.apache.commons.cli.CommandLine commandLine75 = posixParser0.parse(options42, strArray72, properties73, false);
        java.lang.String str76 = options42.toString();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option39);
        org.junit.Assert.assertNotNull(options42);
        org.junit.Assert.assertNotNull(option46);
        org.junit.Assert.assertNotNull(options49);
        org.junit.Assert.assertNull(strArray52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertNotNull(commandLine57);
        org.junit.Assert.assertNotNull(collection58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNull(option61);
        org.junit.Assert.assertNull(strArray64);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str67, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(strArray71);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(commandLine75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str76, "[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1573");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine8 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine8.getOptionValues("hi!");
        java.lang.String str13 = commandLine8.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str15 = commandLine8.getOptionValue("arg");
        java.lang.String[] strArray16 = commandLine8.getArgs();
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser0.parse(options1, strArray16, properties17);
        posixParser0.burstToken("[ Options: [ short {4=[ option: 4  :: null ::  ]} ] [ long {} ]", false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create('4');
        option24.setDescription("");
        org.apache.commons.cli.Options options27 = options22.addOption(option24);
        java.util.Collection collection28 = options22.getOptionGroups();
        org.apache.commons.cli.Options options32 = options22.addOption("", false, "arg");
        java.util.List list33 = options32.getRequiredOptions();
        org.apache.commons.cli.Option option35 = org.apache.commons.cli.OptionBuilder.create("arg");
        org.apache.commons.cli.Options options36 = options32.addOption(option35);
        java.util.Collection collection37 = options32.getOptionGroups();
        java.util.List list38 = options32.helpOptions();
        java.util.List list39 = options32.helpOptions();
        java.util.Collection collection40 = options32.getOptions();
        org.apache.commons.cli.Option option42 = options32.getOption("");
        boolean boolean44 = options32.hasOption("[ option: 4 hi!  ::  ]");
        boolean boolean46 = options32.hasOption("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]");
        java.lang.String[] strArray47 = null;
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine50 = posixParser0.parse(options32, strArray47, properties48, false);
        java.lang.String str51 = options32.toString();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str13, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNotNull(options27);
        org.junit.Assert.assertNotNull(collection28);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNotNull(list33);
        org.junit.Assert.assertNotNull(option35);
        org.junit.Assert.assertNotNull(options36);
        org.junit.Assert.assertNotNull(collection37);
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertNotNull(list39);
        org.junit.Assert.assertNotNull(collection40);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ], arg=[ option: arg  :: null ]} ] [ long {} ]" + "'", str51, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ], arg=[ option: arg  :: null ]} ] [ long {} ]");
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1140");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option38 = org.apache.commons.cli.OptionBuilder.create('4');
        option38.setDescription("");
        org.apache.commons.cli.Options options41 = options36.addOption(option38);
        java.util.Collection collection42 = options36.getOptionGroups();
        org.apache.commons.cli.Options options46 = options36.addOption("", false, "arg");
        org.apache.commons.cli.Options options47 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option49 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup50 = options47.getOptionGroup(option49);
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        char char53 = option52.getValueSeparator();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        option52.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup59 = options47.getOptionGroup(option52);
        boolean boolean60 = option52.hasArgName();
        org.apache.commons.cli.Options options61 = options36.addOption(option52);
        java.util.List list62 = options36.helpOptions();
        org.apache.commons.cli.CommandLine commandLine63 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray65 = commandLine63.getOptionValues("hi!");
        java.lang.String str68 = commandLine63.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str70 = commandLine63.getOptionValue("arg");
        java.lang.String[] strArray71 = commandLine63.getArgs();
        java.lang.String[] strArray73 = posixParser0.flatten(options36, strArray71, false);
        java.util.Collection collection74 = options36.getOptions();
        org.apache.commons.cli.Option option76 = org.apache.commons.cli.OptionBuilder.create('4');
        option76.setArgs((int) (short) 100);
        java.lang.String str79 = option76.getOpt();
        org.apache.commons.cli.OptionGroup optionGroup80 = options36.getOptionGroup(option76);
        org.apache.commons.cli.OptionGroup optionGroup81 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options82 = options36.addOptionGroup(optionGroup81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option38);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertNotNull(collection42);
        org.junit.Assert.assertNotNull(options46);
        org.junit.Assert.assertNotNull(option49);
        org.junit.Assert.assertNull(optionGroup50);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertTrue("'" + char53 + "' != '" + '\000' + "'", char53 == '\000');
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNull(optionGroup59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(options61);
        org.junit.Assert.assertNotNull(list62);
        org.junit.Assert.assertNull(strArray65);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str68, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(collection74);
        org.junit.Assert.assertNotNull(option76);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "4" + "'", str79, "4");
        org.junit.Assert.assertNull(optionGroup80);
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1549");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        boolean boolean37 = commandLine35.hasOption('4');
        boolean boolean39 = commandLine35.hasOption("");
        java.lang.String[] strArray41 = commandLine35.getOptionValues("[ option: 4  :: null ::  ]");
        java.lang.Object obj43 = commandLine35.getOptionObject('#');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(strArray41);
        org.junit.Assert.assertNull(obj43);
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1310");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken("hi!", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptions();
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        char char31 = option30.getValueSeparator();
        org.apache.commons.cli.Option option33 = org.apache.commons.cli.OptionBuilder.create('4');
        option33.setDescription("");
        option30.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup37 = options28.getOptionGroup(option30);
        option30.setOptionalArg(true);
        int int40 = option30.getId();
        org.apache.commons.cli.Options options41 = options21.addOption(option30);
        boolean boolean43 = options41.hasOption("");
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        option45.setArgs((int) (short) 100);
        option45.setArgName("[ option: 4  :: null ]");
        java.lang.String str50 = option45.getLongOpt();
        boolean boolean51 = option45.hasLongOpt();
        org.apache.commons.cli.Options options52 = options41.addOption(option45);
        java.util.Collection collection53 = options41.getOptions();
        org.apache.commons.cli.PosixParser posixParser54 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option57 = org.apache.commons.cli.OptionBuilder.create('4');
        option57.setDescription("");
        org.apache.commons.cli.Options options60 = options55.addOption(option57);
        java.util.Collection collection61 = options55.getOptions();
        boolean boolean63 = options55.hasOption("arg");
        java.lang.String[] strArray66 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" };
        org.apache.commons.cli.CommandLine commandLine67 = posixParser54.parse(options55, strArray66);
        java.lang.String[] strArray69 = posixParser0.flatten(options41, strArray66, false);
        java.util.List list70 = options41.helpOptions();
        java.lang.String str71 = options41.toString();
        org.apache.commons.cli.Option option75 = new org.apache.commons.cli.Option("4", false, "[ option: 4  ::  ]");
        java.lang.String str76 = option75.getDescription();
        org.apache.commons.cli.Options options77 = options41.addOption(option75);
        option75.setArgName("[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertTrue("'" + char31 + "' != '" + '\000' + "'", char31 == '\000');
        org.junit.Assert.assertNotNull(option33);
        org.junit.Assert.assertNull(optionGroup37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(collection53);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(collection61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(list70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]" + "'", str71, "[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "[ option: 4  ::  ]" + "'", str76, "[ option: 4  ::  ]");
        org.junit.Assert.assertNotNull(options77);
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1363");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options53, strArray60, true);
        java.lang.String str64 = commandLine62.getOptionValue('\000');
        java.lang.Object obj66 = commandLine62.getOptionObject("[ option:    :: null ]");
        org.apache.commons.cli.Option[] optionArray67 = commandLine62.getOptions();
        java.lang.String[] strArray68 = commandLine62.getArgs();
        java.lang.String[] strArray70 = commandLine62.getOptionValues("[ option: 4  :: null ]");
        java.lang.String str73 = commandLine62.getOptionValue("org.apache.commons.cli.ParseException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!", "org.apache.commons.cli.MissingArgumentException: [ option: 4  ::  ]");
        org.apache.commons.cli.Option option75 = org.apache.commons.cli.OptionBuilder.create('4');
        char char76 = option75.getValueSeparator();
        org.apache.commons.cli.Option option78 = org.apache.commons.cli.OptionBuilder.create('4');
        option78.setDescription("");
        option75.setType((java.lang.Object) "");
        boolean boolean82 = option75.hasLongOpt();
        int int83 = option75.getArgs();
        option75.setArgName("");
        option75.setOptionalArg(false);
        boolean boolean88 = option75.hasValueSeparator();
        commandLine62.addOption(option75);
        java.lang.String[] strArray91 = commandLine62.getOptionValues('a');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNotNull(optionArray67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNull(strArray70);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "org.apache.commons.cli.MissingArgumentException: [ option: 4  ::  ]" + "'", str73, "org.apache.commons.cli.MissingArgumentException: [ option: 4  ::  ]");
        org.junit.Assert.assertNotNull(option75);
        org.junit.Assert.assertTrue("'" + char76 + "' != '" + '\000' + "'", char76 == '\000');
        org.junit.Assert.assertNotNull(option78);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(strArray91);
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0151");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        java.util.Collection collection53 = options22.getOptionGroups();
        java.util.Collection collection54 = options22.getOptionGroups();
        boolean boolean56 = options22.hasOption("org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(collection53);
        org.junit.Assert.assertNotNull(collection54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0472");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        posixParser0.burstToken("", false);
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        option27.setDescription("");
        org.apache.commons.cli.Options options30 = options25.addOption(option27);
        java.util.Collection collection31 = options25.getOptionGroups();
        org.apache.commons.cli.Options options35 = options25.addOption("", false, "arg");
        java.util.List list36 = options35.getRequiredOptions();
        org.apache.commons.cli.Option option38 = org.apache.commons.cli.OptionBuilder.create("arg");
        org.apache.commons.cli.Options options39 = options35.addOption(option38);
        boolean boolean41 = options35.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser42 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        option45.setDescription("");
        org.apache.commons.cli.Options options48 = options43.addOption(option45);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        option52.setDescription("");
        org.apache.commons.cli.Options options55 = options50.addOption(option52);
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray58 = commandLine56.getOptionValues("hi!");
        java.lang.String[] strArray59 = commandLine56.getArgs();
        java.util.Properties properties60 = null;
        org.apache.commons.cli.CommandLine commandLine61 = posixParser49.parse(options50, strArray59, properties60);
        org.apache.commons.cli.CommandLine commandLine63 = posixParser42.parse(options48, strArray59, false);
        org.apache.commons.cli.Options options64 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option66 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup67 = options64.getOptionGroup(option66);
        org.apache.commons.cli.Option option69 = org.apache.commons.cli.OptionBuilder.create('4');
        char char70 = option69.getValueSeparator();
        org.apache.commons.cli.Option option72 = org.apache.commons.cli.OptionBuilder.create('4');
        option72.setDescription("");
        option69.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup76 = options64.getOptionGroup(option69);
        boolean boolean78 = options64.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser79 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options80 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option82 = org.apache.commons.cli.OptionBuilder.create('4');
        option82.setDescription("");
        org.apache.commons.cli.Options options85 = options80.addOption(option82);
        org.apache.commons.cli.CommandLine commandLine86 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray88 = commandLine86.getOptionValues("hi!");
        java.lang.String[] strArray89 = commandLine86.getArgs();
        java.util.Properties properties90 = null;
        org.apache.commons.cli.CommandLine commandLine91 = posixParser79.parse(options80, strArray89, properties90);
        java.util.Properties properties92 = null;
        org.apache.commons.cli.CommandLine commandLine94 = posixParser42.parse(options64, strArray89, properties92, true);
        java.util.Properties properties95 = null;
        org.apache.commons.cli.CommandLine commandLine96 = posixParser0.parse(options35, strArray89, properties95);
        org.apache.commons.cli.Option option97 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options98 = options35.addOption(option97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertNotNull(options30);
        org.junit.Assert.assertNotNull(collection31);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertNotNull(list36);
        org.junit.Assert.assertNotNull(option38);
        org.junit.Assert.assertNotNull(options39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNull(strArray58);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(commandLine61);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(option66);
        org.junit.Assert.assertNull(optionGroup67);
        org.junit.Assert.assertNotNull(option69);
        org.junit.Assert.assertTrue("'" + char70 + "' != '" + '\000' + "'", char70 == '\000');
        org.junit.Assert.assertNotNull(option72);
        org.junit.Assert.assertNull(optionGroup76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(option82);
        org.junit.Assert.assertNotNull(options85);
        org.junit.Assert.assertNull(strArray88);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(commandLine91);
        org.junit.Assert.assertNotNull(commandLine94);
        org.junit.Assert.assertNotNull(commandLine96);
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1412");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptions();
        boolean boolean9 = options1.hasOption("arg");
        java.lang.String[] strArray12 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" };
        org.apache.commons.cli.CommandLine commandLine13 = posixParser0.parse(options1, strArray12);
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = org.apache.commons.cli.OptionBuilder.create('4');
        char char17 = option16.getValueSeparator();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        option16.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup23 = options14.getOptionGroup(option16);
        java.util.List list24 = options14.helpOptions();
        java.util.Collection collection25 = options14.getOptionGroups();
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option28 = org.apache.commons.cli.OptionBuilder.create('4');
        option28.setDescription("");
        org.apache.commons.cli.Options options31 = options26.addOption(option28);
        java.util.Collection collection32 = options26.getOptionGroups();
        org.apache.commons.cli.Options options36 = options26.addOption("", false, "arg");
        java.util.Collection collection37 = options26.getOptionGroups();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        option40.setValueSeparator(' ');
        org.apache.commons.cli.OptionGroup optionGroup46 = options26.getOptionGroup(option40);
        option40.setRequired(false);
        org.apache.commons.cli.CommandLine commandLine49 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray51 = commandLine49.getOptionValues("hi!");
        java.lang.String[] strArray52 = commandLine49.getArgs();
        boolean boolean53 = option40.equals((java.lang.Object) strArray52);
        org.apache.commons.cli.CommandLine commandLine55 = posixParser0.parse(options14, strArray52, true);
        posixParser0.burstToken("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!", true);
        posixParser0.burstToken("org.apache.commons.cli.MissingOptionException: [ option: 4  :: null ]", true);
        posixParser0.burstToken("hi!", false);
        org.apache.commons.cli.Options options65 = null;
        org.apache.commons.cli.CommandLine commandLine66 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray68 = commandLine66.getOptionValues("hi!");
        java.lang.String str71 = commandLine66.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        commandLine66.addArg("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]");
        java.lang.String[] strArray75 = commandLine66.getOptionValues('4');
        boolean boolean77 = commandLine66.hasOption(' ');
        java.lang.String[] strArray78 = commandLine66.getArgs();
        java.util.Properties properties79 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.CommandLine commandLine80 = posixParser0.parse(options65, strArray78, properties79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine13);
        org.junit.Assert.assertNotNull(option16);
        org.junit.Assert.assertTrue("'" + char17 + "' != '" + '\000' + "'", char17 == '\000');
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNull(optionGroup23);
        org.junit.Assert.assertNotNull(list24);
        org.junit.Assert.assertNotNull(collection25);
        org.junit.Assert.assertNotNull(option28);
        org.junit.Assert.assertNotNull(options31);
        org.junit.Assert.assertNotNull(collection32);
        org.junit.Assert.assertNotNull(options36);
        org.junit.Assert.assertNotNull(collection37);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(optionGroup46);
        org.junit.Assert.assertNull(strArray51);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertNull(strArray68);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str71, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(strArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(strArray78);
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1643");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptionGroups();
        org.apache.commons.cli.Option option61 = org.apache.commons.cli.OptionBuilder.create('4');
        option61.setDescription("");
        option61.setLongOpt("hi!");
        boolean boolean66 = option61.hasArgName();
        org.apache.commons.cli.Options options67 = options53.addOption(option61);
        org.apache.commons.cli.PosixParser posixParser68 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options69 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option71 = org.apache.commons.cli.OptionBuilder.create('4');
        option71.setDescription("");
        org.apache.commons.cli.Options options74 = options69.addOption(option71);
        org.apache.commons.cli.CommandLine commandLine75 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray77 = commandLine75.getOptionValues("hi!");
        java.lang.String str80 = commandLine75.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str82 = commandLine75.getOptionValue("arg");
        java.lang.String[] strArray83 = commandLine75.getArgs();
        java.lang.String[] strArray85 = posixParser68.flatten(options74, strArray83, false);
        org.apache.commons.cli.CommandLine commandLine86 = posixParser0.parse(options53, strArray85);
        java.lang.Object obj88 = commandLine86.getOptionObject('a');
        java.lang.String[] strArray89 = commandLine86.getArgs();
        java.lang.Object obj91 = commandLine86.getOptionObject(' ');
        java.lang.String[] strArray93 = commandLine86.getOptionValues(' ');
        commandLine86.addArg("org.apache.commons.cli.UnrecognizedOptionException: [ option: 4  ::  ]");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(option61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(options67);
        org.junit.Assert.assertNotNull(option71);
        org.junit.Assert.assertNotNull(options74);
        org.junit.Assert.assertNull(strArray77);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str80, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(commandLine86);
        org.junit.Assert.assertNull(obj88);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertNull(strArray93);
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0272");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.util.Iterator iterator4 = commandLine0.iterator();
        java.lang.String str7 = commandLine0.getOptionValue("[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]", "arg");
        boolean boolean9 = commandLine0.hasOption('#');
        java.lang.String str11 = commandLine0.getOptionValue('a');
        org.apache.commons.cli.Option[] optionArray12 = commandLine0.getOptions();
        java.util.Iterator iterator13 = commandLine0.iterator();
        java.lang.Object obj15 = commandLine0.getOptionObject("[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]");
        java.util.List list16 = commandLine0.getArgList();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(iterator4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(optionArray12);
        org.junit.Assert.assertNotNull(iterator13);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(list16);
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0049");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.util.Iterator iterator3 = commandLine0.iterator();
        java.lang.String[] strArray5 = commandLine0.getOptionValues('a');
        java.lang.Object obj7 = commandLine0.getOptionObject('a');
        java.lang.Object obj9 = commandLine0.getOptionObject("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.Option[] optionArray10 = commandLine0.getOptions();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(iterator3);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(optionArray10);
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0707");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.util.Iterator iterator4 = commandLine0.iterator();
        boolean boolean6 = commandLine0.hasOption("[ option: 4  :: null ]");
        boolean boolean8 = commandLine0.hasOption('=');
        java.util.List list9 = commandLine0.getArgList();
        java.lang.Object obj11 = commandLine0.getOptionObject("[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(iterator4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0102");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options53, strArray60, true);
        java.util.List list63 = commandLine62.getArgList();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(list63);
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0928");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptionGroups();
        org.apache.commons.cli.Option option61 = org.apache.commons.cli.OptionBuilder.create('4');
        option61.setDescription("");
        option61.setLongOpt("hi!");
        boolean boolean66 = option61.hasArgName();
        org.apache.commons.cli.Options options67 = options53.addOption(option61);
        org.apache.commons.cli.PosixParser posixParser68 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options69 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option71 = org.apache.commons.cli.OptionBuilder.create('4');
        option71.setDescription("");
        org.apache.commons.cli.Options options74 = options69.addOption(option71);
        org.apache.commons.cli.CommandLine commandLine75 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray77 = commandLine75.getOptionValues("hi!");
        java.lang.String str80 = commandLine75.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str82 = commandLine75.getOptionValue("arg");
        java.lang.String[] strArray83 = commandLine75.getArgs();
        java.lang.String[] strArray85 = posixParser68.flatten(options74, strArray83, false);
        org.apache.commons.cli.CommandLine commandLine86 = posixParser0.parse(options53, strArray85);
        java.lang.Object obj88 = commandLine86.getOptionObject('a');
        java.lang.String str90 = commandLine86.getOptionValue('=');
        java.lang.String str93 = commandLine86.getOptionValue("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!", "arg");
        org.apache.commons.cli.Option[] optionArray94 = commandLine86.getOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(option61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(options67);
        org.junit.Assert.assertNotNull(option71);
        org.junit.Assert.assertNotNull(options74);
        org.junit.Assert.assertNull(strArray77);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str80, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(commandLine86);
        org.junit.Assert.assertNull(obj88);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "arg" + "'", str93, "arg");
        org.junit.Assert.assertNotNull(optionArray94);
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0874");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        org.apache.commons.cli.Options options36 = null;
        org.apache.commons.cli.CommandLine commandLine37 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray39 = commandLine37.getOptionValues("hi!");
        java.lang.String[] strArray40 = commandLine37.getArgs();
        java.lang.String[] strArray42 = posixParser0.flatten(options36, strArray40, false);
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        option45.setDescription("");
        org.apache.commons.cli.Options options48 = options43.addOption(option45);
        java.util.Collection collection49 = options43.getOptionGroups();
        org.apache.commons.cli.Options options53 = options43.addOption("", false, "arg");
        java.util.List list54 = options53.getRequiredOptions();
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create("arg");
        org.apache.commons.cli.Options options57 = options53.addOption(option56);
        java.util.Collection collection58 = options53.getOptionGroups();
        java.lang.String[] strArray59 = null;
        org.apache.commons.cli.CommandLine commandLine60 = posixParser0.parse(options53, strArray59);
        boolean boolean62 = commandLine60.hasOption('#');
        java.util.List list63 = commandLine60.getArgList();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNull(strArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(collection49);
        org.junit.Assert.assertNotNull(options53);
        org.junit.Assert.assertNotNull(list54);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertNotNull(options57);
        org.junit.Assert.assertNotNull(collection58);
        org.junit.Assert.assertNotNull(commandLine60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(list63);
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1708");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        java.lang.String[] strArray37 = commandLine35.getOptionValues("org.apache.commons.cli.MissingOptionException: hi!");
        java.util.Iterator iterator38 = commandLine35.iterator();
        java.lang.String str41 = commandLine35.getOptionValue("[ option: 4 org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]  ::  ]", "org.apache.commons.cli.MissingOptionException: [ option:    :: null ]");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNull(strArray37);
        org.junit.Assert.assertNotNull(iterator38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "org.apache.commons.cli.MissingOptionException: [ option:    :: null ]" + "'", str41, "org.apache.commons.cli.MissingOptionException: [ option:    :: null ]");
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1214");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        boolean boolean41 = options18.hasOption("[ option: 4  :: org.apache.commons.cli.ParseException: arg ]");
        org.apache.commons.cli.Options options42 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create('4');
        char char45 = option44.getValueSeparator();
        org.apache.commons.cli.Option option47 = org.apache.commons.cli.OptionBuilder.create('4');
        option47.setDescription("");
        option44.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup51 = options42.getOptionGroup(option44);
        boolean boolean52 = option44.hasValueSeparator();
        option44.setDescription("");
        option44.setLongOpt("org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        int int57 = option44.getArgs();
        org.apache.commons.cli.Options options58 = options18.addOption(option44);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertTrue("'" + char45 + "' != '" + '\000' + "'", char45 == '\000');
        org.junit.Assert.assertNotNull(option47);
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(options58);
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1612");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptionGroups();
        org.apache.commons.cli.Option option61 = org.apache.commons.cli.OptionBuilder.create('4');
        option61.setDescription("");
        option61.setLongOpt("hi!");
        boolean boolean66 = option61.hasArgName();
        org.apache.commons.cli.Options options67 = options53.addOption(option61);
        org.apache.commons.cli.PosixParser posixParser68 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options69 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option71 = org.apache.commons.cli.OptionBuilder.create('4');
        option71.setDescription("");
        org.apache.commons.cli.Options options74 = options69.addOption(option71);
        org.apache.commons.cli.CommandLine commandLine75 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray77 = commandLine75.getOptionValues("hi!");
        java.lang.String str80 = commandLine75.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str82 = commandLine75.getOptionValue("arg");
        java.lang.String[] strArray83 = commandLine75.getArgs();
        java.lang.String[] strArray85 = posixParser68.flatten(options74, strArray83, false);
        org.apache.commons.cli.CommandLine commandLine86 = posixParser0.parse(options53, strArray85);
        java.lang.Object obj88 = commandLine86.getOptionObject('a');
        java.lang.String[] strArray89 = commandLine86.getArgs();
        org.apache.commons.cli.Option[] optionArray90 = commandLine86.getOptions();
        java.lang.String[] strArray91 = commandLine86.getArgs();
        java.lang.String str93 = commandLine86.getOptionValue('a');
        commandLine86.addArg("[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(option61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(options67);
        org.junit.Assert.assertNotNull(option71);
        org.junit.Assert.assertNotNull(options74);
        org.junit.Assert.assertNull(strArray77);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str80, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(commandLine86);
        org.junit.Assert.assertNull(obj88);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(optionArray90);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNull(str93);
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0760");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        boolean boolean19 = options6.hasOption("arg");
        java.util.Collection collection20 = options6.getOptions();
        java.util.Collection collection21 = options6.getOptionGroups();
        java.util.List list22 = options6.helpOptions();
        java.util.List list23 = options6.getRequiredOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(collection20);
        org.junit.Assert.assertNotNull(collection21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(list23);
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0614");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String[] strArray10 = commandLine7.getArgs();
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = posixParser0.parse(options1, strArray10, properties11);
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option15 = org.apache.commons.cli.OptionBuilder.create('4');
        option15.setDescription("");
        org.apache.commons.cli.Options options18 = options13.addOption(option15);
        java.util.Collection collection19 = options13.getOptionGroups();
        org.apache.commons.cli.Options options23 = options13.addOption("", false, "arg");
        org.apache.commons.cli.Option option27 = new org.apache.commons.cli.Option("", true, "");
        boolean boolean28 = option27.hasOptionalArg();
        option27.setOptionalArg(false);
        org.apache.commons.cli.OptionGroup optionGroup31 = options23.getOptionGroup(option27);
        java.util.Collection collection32 = options23.getOptionGroups();
        org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option36 = org.apache.commons.cli.OptionBuilder.create('4');
        option36.setDescription("");
        org.apache.commons.cli.Options options39 = options34.addOption(option36);
        java.util.Collection collection40 = options34.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine41 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray43 = commandLine41.getOptionValues("hi!");
        java.lang.String str46 = commandLine41.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str48 = commandLine41.getOptionValue("arg");
        java.lang.String[] strArray49 = commandLine41.getArgs();
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine51 = posixParser33.parse(options34, strArray49, properties50);
        java.lang.String[] strArray53 = posixParser0.flatten(options23, strArray49, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options58 = options23.addOption("org.apache.commons.cli.UnrecognizedOptionException: [ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ]", "a", true, "[ option:    :: null :: arg ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '.'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
        org.junit.Assert.assertNotNull(option15);
        org.junit.Assert.assertNotNull(options18);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(optionGroup31);
        org.junit.Assert.assertNotNull(collection32);
        org.junit.Assert.assertNotNull(option36);
        org.junit.Assert.assertNotNull(options39);
        org.junit.Assert.assertNotNull(collection40);
        org.junit.Assert.assertNull(strArray43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str46, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNotNull(strArray53);
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1382");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        char char21 = option20.getValueSeparator();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("");
        option20.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup27 = options18.getOptionGroup(option20);
        boolean boolean28 = option20.hasValueSeparator();
        option20.setDescription("");
        org.apache.commons.cli.MissingOptionException missingOptionException32 = new org.apache.commons.cli.MissingOptionException("hi!");
        java.lang.Throwable[] throwableArray33 = missingOptionException32.getSuppressed();
        option20.setType((java.lang.Object) throwableArray33);
        java.lang.Object obj35 = option20.getType();
        boolean boolean36 = option20.hasValueSeparator();
        org.apache.commons.cli.OptionGroup optionGroup37 = options6.getOptionGroup(option20);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertTrue("'" + char21 + "' != '" + '\000' + "'", char21 == '\000');
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(optionGroup37);
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0405");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.Object obj4 = commandLine0.getOptionObject('a');
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        option6.setDescription("");
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option11 = org.apache.commons.cli.OptionBuilder.create('4');
        option11.setDescription("");
        org.apache.commons.cli.Options options14 = options9.addOption(option11);
        boolean boolean15 = option11.hasOptionalArg();
        option6.setType((java.lang.Object) boolean15);
        java.lang.String str17 = option6.getArgName();
        java.lang.Object obj18 = option6.getType();
        java.lang.String[] strArray19 = option6.getValues();
        commandLine0.addOption(option6);
        java.util.Iterator iterator21 = commandLine0.iterator();
        boolean boolean23 = commandLine0.hasOption('=');
        java.lang.String str25 = commandLine0.getOptionValue('=');
        boolean boolean27 = commandLine0.hasOption("[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine0.getOptionValue("org.apache.commons.cli.MissingOptionException: hi!", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        java.util.List list31 = commandLine0.getArgList();
        java.util.List list32 = commandLine0.getArgList();
        java.util.List list33 = commandLine0.getArgList();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertNotNull(option11);
        org.junit.Assert.assertNotNull(options14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "arg" + "'", str17, "arg");
        org.junit.Assert.assertEquals("'" + obj18 + "' != '" + false + "'", obj18, false);
        org.junit.Assert.assertNull(strArray19);
        org.junit.Assert.assertNotNull(iterator21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" + "'", str30, "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        org.junit.Assert.assertNotNull(list31);
        org.junit.Assert.assertNotNull(list32);
        org.junit.Assert.assertNotNull(list33);
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0051");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String str5 = commandLine0.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        commandLine0.addArg("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]");
        java.lang.String[] strArray9 = commandLine0.getOptionValues('4');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass10 = strArray9.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str5, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(strArray9);
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1610");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        java.util.Collection collection22 = options6.getOptions();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create('4');
        char char25 = option24.getValueSeparator();
        org.apache.commons.cli.Options options26 = options6.addOption(option24);
        org.apache.commons.cli.Option option28 = org.apache.commons.cli.OptionBuilder.create('4');
        option28.setArgs((int) (short) 100);
        option28.setArgName("[ option: 4  :: null ]");
        java.lang.String str33 = option28.getLongOpt();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option36 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup37 = options34.getOptionGroup(option36);
        org.apache.commons.cli.Option option39 = org.apache.commons.cli.OptionBuilder.create('4');
        org.apache.commons.cli.OptionGroup optionGroup40 = options34.getOptionGroup(option39);
        option28.setType((java.lang.Object) options34);
        org.apache.commons.cli.Options options42 = options6.addOption(option28);
        java.util.List list43 = options6.getRequiredOptions();
        org.apache.commons.cli.Option option47 = new org.apache.commons.cli.Option("", true, "");
        option47.setRequired(true);
        option47.setValueSeparator('=');
        option47.setValueSeparator('a');
        boolean boolean54 = option47.hasOptionalArg();
        org.apache.commons.cli.OptionGroup optionGroup55 = options6.getOptionGroup(option47);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(collection22);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertTrue("'" + char25 + "' != '" + '\000' + "'", char25 == '\000');
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(option28);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(option36);
        org.junit.Assert.assertNull(optionGroup37);
        org.junit.Assert.assertNotNull(option39);
        org.junit.Assert.assertNull(optionGroup40);
        org.junit.Assert.assertNotNull(options42);
        org.junit.Assert.assertNotNull(list43);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(optionGroup55);
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0671");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        java.util.Collection collection22 = options6.getOptions();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create('4');
        option24.setArgs((int) (short) 100);
        option24.setArgName("[ option: 4  :: null ]");
        java.lang.String str29 = option24.getLongOpt();
        java.lang.String str31 = option24.getValue((int) (short) -1);
        org.apache.commons.cli.Options options32 = options6.addOption(option24);
        java.lang.String str33 = option24.getLongOpt();
        option24.setArgName("org.apache.commons.cli.MissingOptionException: ");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(collection22);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(str33);
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0207");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.util.Iterator iterator3 = commandLine0.iterator();
        java.lang.String[] strArray5 = commandLine0.getOptionValues('a');
        commandLine0.addArg("[ option: 4  :: hi! ]");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(iterator3);
        org.junit.Assert.assertNull(strArray5);
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0991");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create('4');
        option1.setDescription("");
        boolean boolean4 = option1.hasValueSeparator();
        java.util.List list5 = option1.getValuesList();
        int int6 = option1.getArgs();
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        option1.setType((java.lang.Object) commandLine7);
        java.util.List list11 = commandLine7.getArgList();
        java.lang.String str13 = commandLine7.getOptionValue('4');
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup17 = options14.getOptionGroup(option16);
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        char char20 = option19.getValueSeparator();
        org.apache.commons.cli.Option option22 = org.apache.commons.cli.OptionBuilder.create('4');
        option22.setDescription("");
        option19.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup26 = options14.getOptionGroup(option19);
        org.apache.commons.cli.Option option28 = org.apache.commons.cli.OptionBuilder.create('4');
        boolean boolean29 = option28.isRequired();
        org.apache.commons.cli.Options options30 = options14.addOption(option28);
        commandLine7.addOption(option28);
        boolean boolean32 = option28.hasLongOpt();
        org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option36 = org.apache.commons.cli.OptionBuilder.create('4');
        option36.setDescription("");
        org.apache.commons.cli.Options options39 = options34.addOption(option36);
        org.apache.commons.cli.CommandLine commandLine40 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray42 = commandLine40.getOptionValues("hi!");
        java.lang.String str45 = commandLine40.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str47 = commandLine40.getOptionValue("arg");
        java.lang.String[] strArray48 = commandLine40.getArgs();
        java.lang.String[] strArray50 = posixParser33.flatten(options39, strArray48, false);
        posixParser33.burstToken("hi!", true);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        option56.setDescription("");
        org.apache.commons.cli.Options options59 = options54.addOption(option56);
        java.util.Collection collection60 = options54.getOptionGroups();
        org.apache.commons.cli.Options options64 = options54.addOption("", false, "arg");
        java.util.List list65 = options64.getRequiredOptions();
        org.apache.commons.cli.Option option67 = org.apache.commons.cli.OptionBuilder.create("arg");
        org.apache.commons.cli.Options options68 = options64.addOption(option67);
        boolean boolean70 = options64.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        java.util.Collection collection71 = options64.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine72 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray74 = commandLine72.getOptionValues("hi!");
        java.lang.String str77 = commandLine72.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str79 = commandLine72.getOptionValue("arg");
        java.lang.String[] strArray80 = commandLine72.getArgs();
        java.util.Properties properties81 = null;
        org.apache.commons.cli.CommandLine commandLine83 = posixParser33.parse(options64, strArray80, properties81, true);
        java.util.List list84 = options64.getRequiredOptions();
        boolean boolean85 = option28.equals((java.lang.Object) options64);
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(list5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(option16);
        org.junit.Assert.assertNull(optionGroup17);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertTrue("'" + char20 + "' != '" + '\000' + "'", char20 == '\000');
        org.junit.Assert.assertNotNull(option22);
        org.junit.Assert.assertNull(optionGroup26);
        org.junit.Assert.assertNotNull(option28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(options30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(option36);
        org.junit.Assert.assertNotNull(options39);
        org.junit.Assert.assertNull(strArray42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str45, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNotNull(collection60);
        org.junit.Assert.assertNotNull(options64);
        org.junit.Assert.assertNotNull(list65);
        org.junit.Assert.assertNotNull(option67);
        org.junit.Assert.assertNotNull(options68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(collection71);
        org.junit.Assert.assertNull(strArray74);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str77, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(commandLine83);
        org.junit.Assert.assertNotNull(list84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1716");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String[] strArray10 = commandLine7.getArgs();
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = posixParser0.parse(options1, strArray10, properties11);
        posixParser0.burstToken("[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]", false);
        org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = org.apache.commons.cli.OptionBuilder.create('4');
        option18.setDescription("");
        org.apache.commons.cli.Options options21 = options16.addOption(option18);
        java.util.Collection collection22 = options16.getOptionGroups();
        org.apache.commons.cli.Options options26 = options16.addOption("", false, "arg");
        org.apache.commons.cli.Option option28 = org.apache.commons.cli.OptionBuilder.create('4');
        boolean boolean29 = option28.hasOptionalArg();
        org.apache.commons.cli.Options options30 = options16.addOption(option28);
        boolean boolean32 = options16.hasOption("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]");
        java.lang.String[] strArray33 = null;
        org.apache.commons.cli.CommandLine commandLine34 = posixParser0.parse(options16, strArray33);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
        org.junit.Assert.assertNotNull(option18);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNotNull(collection22);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(option28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(options30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(commandLine34);
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0774");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine8 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine8.getOptionValues("hi!");
        java.lang.String str13 = commandLine8.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str15 = commandLine8.getOptionValue("arg");
        java.lang.String[] strArray16 = commandLine8.getArgs();
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser0.parse(options1, strArray16, properties17);
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option22 = org.apache.commons.cli.OptionBuilder.create('4');
        option22.setDescription("");
        org.apache.commons.cli.Options options25 = options20.addOption(option22);
        org.apache.commons.cli.CommandLine commandLine26 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray28 = commandLine26.getOptionValues("hi!");
        java.lang.String[] strArray29 = commandLine26.getArgs();
        java.util.Properties properties30 = null;
        org.apache.commons.cli.CommandLine commandLine31 = posixParser19.parse(options20, strArray29, properties30);
        org.apache.commons.cli.PosixParser posixParser32 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options33 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option35 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup36 = options33.getOptionGroup(option35);
        org.apache.commons.cli.Option option38 = org.apache.commons.cli.OptionBuilder.create('4');
        char char39 = option38.getValueSeparator();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create('4');
        option41.setDescription("");
        option38.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup45 = options33.getOptionGroup(option38);
        boolean boolean47 = options33.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser48 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option51 = org.apache.commons.cli.OptionBuilder.create('4');
        option51.setDescription("");
        org.apache.commons.cli.Options options54 = options49.addOption(option51);
        org.apache.commons.cli.CommandLine commandLine55 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray57 = commandLine55.getOptionValues("hi!");
        java.lang.String str60 = commandLine55.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str62 = commandLine55.getOptionValue("arg");
        java.lang.String[] strArray63 = commandLine55.getArgs();
        java.lang.String[] strArray65 = posixParser48.flatten(options54, strArray63, false);
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser32.parse(options33, strArray65, properties66);
        java.util.List list68 = commandLine67.getArgList();
        java.lang.String[] strArray69 = commandLine67.getArgs();
        java.lang.String[] strArray71 = posixParser0.flatten(options20, strArray69, false);
        org.apache.commons.cli.Options options76 = options20.addOption("", "[ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ]", true, "org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]");
        org.apache.commons.cli.Options options77 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option79 = org.apache.commons.cli.OptionBuilder.create('4');
        char char80 = option79.getValueSeparator();
        org.apache.commons.cli.Option option82 = org.apache.commons.cli.OptionBuilder.create('4');
        option82.setDescription("");
        option79.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup86 = options77.getOptionGroup(option79);
        boolean boolean87 = option79.hasValueSeparator();
        java.lang.String str88 = option79.getLongOpt();
        java.lang.String str89 = option79.getArgName();
        org.apache.commons.cli.Options options90 = options20.addOption(option79);
        java.util.Collection collection91 = options20.getOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str13, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNotNull(option22);
        org.junit.Assert.assertNotNull(options25);
        org.junit.Assert.assertNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(option35);
        org.junit.Assert.assertNull(optionGroup36);
        org.junit.Assert.assertNotNull(option38);
        org.junit.Assert.assertTrue("'" + char39 + "' != '" + '\000' + "'", char39 == '\000');
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(option51);
        org.junit.Assert.assertNotNull(options54);
        org.junit.Assert.assertNull(strArray57);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str60, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNotNull(list68);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(options76);
        org.junit.Assert.assertNotNull(option79);
        org.junit.Assert.assertTrue("'" + char80 + "' != '" + '\000' + "'", char80 == '\000');
        org.junit.Assert.assertNotNull(option82);
        org.junit.Assert.assertNull(optionGroup86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "arg" + "'", str89, "arg");
        org.junit.Assert.assertNotNull(options90);
        org.junit.Assert.assertNotNull(collection91);
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0721");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        posixParser0.burstToken("4", false);
        posixParser0.burstToken("[ option: 4  ::  ]", true);
        org.apache.commons.cli.Option option49 = new org.apache.commons.cli.Option("arg", false, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str51 = option49.getValue("");
        option49.setArgs(0);
        boolean boolean54 = option49.hasLongOpt();
        option49.setOptionalArg(false);
        java.lang.String str57 = option49.getValue();
        boolean boolean58 = option49.hasArgs();
        option49.setDescription("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.util.ListIterator listIterator61 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option49, listIterator61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0876");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option38 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup39 = options36.getOptionGroup(option38);
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create('4');
        char char42 = option41.getValueSeparator();
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create('4');
        option44.setDescription("");
        option41.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup48 = options36.getOptionGroup(option41);
        org.apache.commons.cli.Option option50 = org.apache.commons.cli.OptionBuilder.create('4');
        boolean boolean51 = option50.isRequired();
        org.apache.commons.cli.Options options52 = options36.addOption(option50);
        java.util.List list53 = options52.getRequiredOptions();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setArgs((int) (short) 100);
        option55.setArgName("[ option: 4  :: null ]");
        java.lang.String str60 = option55.getLongOpt();
        java.lang.String str62 = option55.getValue((int) (short) -1);
        org.apache.commons.cli.CommandLine commandLine63 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray65 = commandLine63.getOptionValues("hi!");
        java.lang.String str68 = commandLine63.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str70 = commandLine63.getOptionValue("arg");
        java.lang.String[] strArray71 = commandLine63.getArgs();
        option55.setType((java.lang.Object) strArray71);
        java.util.Properties properties73 = null;
        org.apache.commons.cli.CommandLine commandLine74 = posixParser0.parse(options52, strArray71, properties73);
        java.lang.String str76 = commandLine74.getOptionValue('a');
        java.lang.String str79 = commandLine74.getOptionValue(' ', "[ option: 4 [ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ]  :: null ]");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option38);
        org.junit.Assert.assertNull(optionGroup39);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertTrue("'" + char42 + "' != '" + '\000' + "'", char42 == '\000');
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertNull(optionGroup48);
        org.junit.Assert.assertNotNull(option50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(list53);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(strArray65);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str68, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(commandLine74);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "[ option: 4 [ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ]  :: null ]" + "'", str79, "[ option: 4 [ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ]  :: null ]");
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1645");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken("hi!", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptionGroups();
        org.apache.commons.cli.Options options31 = options21.addOption("", false, "arg");
        java.util.List list32 = options31.getRequiredOptions();
        org.apache.commons.cli.Option option34 = org.apache.commons.cli.OptionBuilder.create("arg");
        org.apache.commons.cli.Options options35 = options31.addOption(option34);
        boolean boolean37 = options31.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        java.util.Collection collection38 = options31.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine39 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray41 = commandLine39.getOptionValues("hi!");
        java.lang.String str44 = commandLine39.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str46 = commandLine39.getOptionValue("arg");
        java.lang.String[] strArray47 = commandLine39.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine50 = posixParser0.parse(options31, strArray47, properties48, true);
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = org.apache.commons.cli.OptionBuilder.create('4');
        option53.setDescription("");
        org.apache.commons.cli.Options options56 = options51.addOption(option53);
        org.apache.commons.cli.CommandLine commandLine57 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray59 = commandLine57.getOptionValues("hi!");
        java.lang.String str62 = commandLine57.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str64 = commandLine57.getOptionValue("arg");
        java.lang.String[] strArray65 = commandLine57.getArgs();
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser0.parse(options51, strArray65, properties66);
        java.lang.String str68 = options51.toString();
        java.util.Collection collection69 = options51.getOptions();
        java.util.Collection collection70 = options51.getOptions();
        java.util.List list71 = options51.helpOptions();
        org.apache.commons.cli.Option option74 = new org.apache.commons.cli.Option("", "");
        option74.setLongOpt("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]");
        org.apache.commons.cli.OptionGroup optionGroup77 = options51.getOptionGroup(option74);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(options31);
        org.junit.Assert.assertNotNull(list32);
        org.junit.Assert.assertNotNull(option34);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertNull(strArray41);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str44, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNotNull(options56);
        org.junit.Assert.assertNull(strArray59);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str62, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str68, "[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNotNull(collection69);
        org.junit.Assert.assertNotNull(collection70);
        org.junit.Assert.assertNotNull(list71);
        org.junit.Assert.assertNull(optionGroup77);
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0608");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options53, strArray60, true);
        org.apache.commons.cli.PosixParser posixParser63 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options64 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option66 = org.apache.commons.cli.OptionBuilder.create('4');
        option66.setDescription("");
        org.apache.commons.cli.Options options69 = options64.addOption(option66);
        org.apache.commons.cli.CommandLine commandLine70 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray72 = commandLine70.getOptionValues("hi!");
        java.lang.String[] strArray73 = commandLine70.getArgs();
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine75 = posixParser63.parse(options64, strArray73, properties74);
        java.lang.String[] strArray78 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]", "hi!" };
        java.util.Properties properties79 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser0.parse(options64, strArray78, properties79, true);
        java.util.List list82 = commandLine81.getArgList();
        java.lang.String str85 = commandLine81.getOptionValue('#', "[ option: 4  :: null ]");
        java.lang.String[] strArray86 = commandLine81.getArgs();
        commandLine81.addArg("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        java.util.List list89 = commandLine81.getArgList();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(option66);
        org.junit.Assert.assertNotNull(options69);
        org.junit.Assert.assertNull(strArray72);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine75);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(list82);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "[ option: 4  :: null ]" + "'", str85, "[ option: 4  :: null ]");
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(list89);
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0236");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options53, strArray60, true);
        java.lang.String str64 = commandLine62.getOptionValue('\000');
        java.lang.Object obj66 = commandLine62.getOptionObject("[ option:    :: null ]");
        org.apache.commons.cli.Option[] optionArray67 = commandLine62.getOptions();
        java.lang.String[] strArray68 = commandLine62.getArgs();
        java.lang.Object obj70 = commandLine62.getOptionObject("");
        java.lang.String str72 = commandLine62.getOptionValue('\000');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNotNull(optionArray67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertNull(str72);
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1748");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        posixParser0.burstToken("[ option: 4 hi!  ::  ]", false);
        org.apache.commons.cli.Option option43 = null;
        java.util.ListIterator listIterator44 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option43, listIterator44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1664");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        java.util.List list40 = commandLine39.getArgList();
        java.util.List list41 = commandLine39.getArgList();
        java.lang.String[] strArray43 = commandLine39.getOptionValues('=');
        java.lang.String str45 = commandLine39.getOptionValue("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]");
        java.util.List list46 = commandLine39.getArgList();
        java.lang.Object obj48 = commandLine39.getOptionObject("[ option:    :: [ option: 4 hi!  ::  ] ]");
        boolean boolean50 = commandLine39.hasOption('a');
        org.apache.commons.cli.Option[] optionArray51 = commandLine39.getOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(list40);
        org.junit.Assert.assertNotNull(list41);
        org.junit.Assert.assertNull(strArray43);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(list46);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(optionArray51);
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0266");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option38 = org.apache.commons.cli.OptionBuilder.create('4');
        option38.setDescription("");
        org.apache.commons.cli.Options options41 = options36.addOption(option38);
        org.apache.commons.cli.Options options42 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create('4');
        char char45 = option44.getValueSeparator();
        org.apache.commons.cli.Option option47 = org.apache.commons.cli.OptionBuilder.create('4');
        option47.setDescription("");
        option44.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup51 = options42.getOptionGroup(option44);
        option44.setOptionalArg(true);
        int int54 = option44.getId();
        org.apache.commons.cli.OptionGroup optionGroup55 = options41.getOptionGroup(option44);
        org.apache.commons.cli.Options options56 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option58 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup59 = options56.getOptionGroup(option58);
        boolean boolean60 = option58.hasLongOpt();
        boolean boolean61 = option58.isRequired();
        org.apache.commons.cli.Options options62 = options41.addOption(option58);
        org.apache.commons.cli.PosixParser posixParser63 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options64 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option66 = org.apache.commons.cli.OptionBuilder.create('4');
        option66.setDescription("");
        org.apache.commons.cli.Options options69 = options64.addOption(option66);
        org.apache.commons.cli.CommandLine commandLine70 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray72 = commandLine70.getOptionValues("hi!");
        java.lang.String str75 = commandLine70.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str77 = commandLine70.getOptionValue("arg");
        java.lang.String[] strArray78 = commandLine70.getArgs();
        java.lang.String[] strArray80 = posixParser63.flatten(options69, strArray78, false);
        org.apache.commons.cli.CommandLine commandLine82 = posixParser0.parse(options62, strArray80, false);
        org.apache.commons.cli.Option option84 = org.apache.commons.cli.OptionBuilder.create('4');
        java.lang.String str86 = option84.getValue("arg");
        java.lang.String str87 = option84.getLongOpt();
        option84.setLongOpt("");
        option84.setArgName("");
        commandLine82.addOption(option84);
        java.lang.String[] strArray94 = commandLine82.getOptionValues('=');
        java.util.Iterator iterator95 = commandLine82.iterator();
        java.lang.Object obj97 = commandLine82.getOptionObject('4');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option38);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertTrue("'" + char45 + "' != '" + '\000' + "'", char45 == '\000');
        org.junit.Assert.assertNotNull(option47);
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 52 + "'", int54 == 52);
        org.junit.Assert.assertNull(optionGroup55);
        org.junit.Assert.assertNotNull(option58);
        org.junit.Assert.assertNull(optionGroup59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(options62);
        org.junit.Assert.assertNotNull(option66);
        org.junit.Assert.assertNotNull(options69);
        org.junit.Assert.assertNull(strArray72);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str75, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(option84);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "arg" + "'", str86, "arg");
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertNull(strArray94);
        org.junit.Assert.assertNotNull(iterator95);
        org.junit.Assert.assertNull(obj97);
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1256");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.util.Iterator iterator3 = commandLine0.iterator();
        java.lang.String[] strArray5 = commandLine0.getOptionValues('a');
        java.lang.Object obj7 = commandLine0.getOptionObject('a');
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option9.setLongOpt("hi!");
        commandLine0.addOption(option9);
        java.lang.String str17 = commandLine0.getOptionValue('#', "[ option: 4 hi!  ::  ]");
        boolean boolean19 = commandLine0.hasOption('\000');
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(iterator3);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[ option: 4 hi!  ::  ]" + "'", str17, "[ option: 4 hi!  ::  ]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0764");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        java.util.List list40 = commandLine39.getArgList();
        java.util.List list41 = commandLine39.getArgList();
        java.lang.String[] strArray43 = commandLine39.getOptionValues('=');
        java.lang.Object obj45 = commandLine39.getOptionObject("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.util.Iterator iterator46 = commandLine39.iterator();
        java.util.Iterator iterator47 = commandLine39.iterator();
        java.util.List list48 = commandLine39.getArgList();
        java.lang.String str51 = commandLine39.getOptionValue('=', "[ option: 4  :: null :: [ option: arg [ option: 4  :: null ] +ARG :: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ] ]");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(list40);
        org.junit.Assert.assertNotNull(list41);
        org.junit.Assert.assertNull(strArray43);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertNotNull(iterator46);
        org.junit.Assert.assertNotNull(iterator47);
        org.junit.Assert.assertNotNull(list48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[ option: 4  :: null :: [ option: arg [ option: 4  :: null ] +ARG :: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ] ]" + "'", str51, "[ option: 4  :: null :: [ option: arg [ option: 4  :: null ] +ARG :: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ] ]");
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1179");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.util.Iterator iterator3 = commandLine0.iterator();
        java.lang.String[] strArray5 = commandLine0.getOptionValues('a');
        java.util.Iterator iterator6 = commandLine0.iterator();
        boolean boolean8 = commandLine0.hasOption("");
        boolean boolean10 = commandLine0.hasOption('4');
        org.apache.commons.cli.Option[] optionArray11 = commandLine0.getOptions();
        java.util.Iterator iterator12 = commandLine0.iterator();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(iterator3);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(optionArray11);
        org.junit.Assert.assertNotNull(iterator12);
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0289");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        posixParser0.burstToken("4", true);
        posixParser0.burstToken("", true);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0009");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        java.util.List list36 = commandLine35.getArgList();
        org.apache.commons.cli.Option[] optionArray37 = commandLine35.getOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(list36);
        org.junit.Assert.assertNotNull(optionArray37);
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0479");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptionGroups();
        org.apache.commons.cli.Option option61 = org.apache.commons.cli.OptionBuilder.create('4');
        option61.setDescription("");
        option61.setLongOpt("hi!");
        boolean boolean66 = option61.hasArgName();
        org.apache.commons.cli.Options options67 = options53.addOption(option61);
        org.apache.commons.cli.PosixParser posixParser68 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options69 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option71 = org.apache.commons.cli.OptionBuilder.create('4');
        option71.setDescription("");
        org.apache.commons.cli.Options options74 = options69.addOption(option71);
        org.apache.commons.cli.CommandLine commandLine75 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray77 = commandLine75.getOptionValues("hi!");
        java.lang.String str80 = commandLine75.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str82 = commandLine75.getOptionValue("arg");
        java.lang.String[] strArray83 = commandLine75.getArgs();
        java.lang.String[] strArray85 = posixParser68.flatten(options74, strArray83, false);
        org.apache.commons.cli.CommandLine commandLine86 = posixParser0.parse(options53, strArray85);
        java.lang.String str89 = commandLine86.getOptionValue("[ option: 4 hi!  ::  ]", "");
        commandLine86.addArg("org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(option61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(options67);
        org.junit.Assert.assertNotNull(option71);
        org.junit.Assert.assertNotNull(options74);
        org.junit.Assert.assertNull(strArray77);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str80, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(commandLine86);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0118");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken("hi!", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptions();
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        char char31 = option30.getValueSeparator();
        org.apache.commons.cli.Option option33 = org.apache.commons.cli.OptionBuilder.create('4');
        option33.setDescription("");
        option30.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup37 = options28.getOptionGroup(option30);
        option30.setOptionalArg(true);
        int int40 = option30.getId();
        org.apache.commons.cli.Options options41 = options21.addOption(option30);
        boolean boolean43 = options41.hasOption("");
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        option45.setArgs((int) (short) 100);
        option45.setArgName("[ option: 4  :: null ]");
        java.lang.String str50 = option45.getLongOpt();
        boolean boolean51 = option45.hasLongOpt();
        org.apache.commons.cli.Options options52 = options41.addOption(option45);
        java.util.Collection collection53 = options41.getOptions();
        org.apache.commons.cli.PosixParser posixParser54 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option57 = org.apache.commons.cli.OptionBuilder.create('4');
        option57.setDescription("");
        org.apache.commons.cli.Options options60 = options55.addOption(option57);
        java.util.Collection collection61 = options55.getOptions();
        boolean boolean63 = options55.hasOption("arg");
        java.lang.String[] strArray66 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" };
        org.apache.commons.cli.CommandLine commandLine67 = posixParser54.parse(options55, strArray66);
        java.lang.String[] strArray69 = posixParser0.flatten(options41, strArray66, false);
        org.apache.commons.cli.Option option73 = new org.apache.commons.cli.Option("", true, "");
        option73.setArgs((-2));
        java.lang.String str76 = option73.toString();
        java.util.ListIterator listIterator77 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option73, listIterator77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertTrue("'" + char31 + "' != '" + '\000' + "'", char31 == '\000');
        org.junit.Assert.assertNotNull(option33);
        org.junit.Assert.assertNull(optionGroup37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(collection53);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(collection61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "[ option:  +ARG ::  ]" + "'", str76, "[ option:  +ARG ::  ]");
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1041");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create('4');
        option1.setDescription("");
        option1.setLongOpt("hi!");
        option1.setArgName("arg");
        java.lang.String str8 = option1.toString();
        int int9 = option1.getId();
        org.apache.commons.cli.CommandLine commandLine10 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray12 = commandLine10.getOptionValues("hi!");
        java.lang.String[] strArray13 = commandLine10.getArgs();
        java.lang.String str15 = commandLine10.getOptionValue("hi!");
        option1.setType((java.lang.Object) commandLine10);
        java.lang.String str18 = commandLine10.getOptionValue('a');
        commandLine10.addArg("[ option: 4  :: hi! ]");
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[ option: 4 hi!  ::  ]" + "'", str8, "[ option: 4 hi!  ::  ]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1120");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.util.Iterator iterator3 = commandLine0.iterator();
        java.lang.String[] strArray5 = commandLine0.getOptionValues('a');
        java.lang.Object obj7 = commandLine0.getOptionObject('a');
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option9.setLongOpt("hi!");
        commandLine0.addOption(option9);
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", true, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str21 = option18.getValue("");
        java.lang.String str22 = option18.getValue();
        option18.setValueSeparator('a');
        char char25 = option18.getValueSeparator();
        boolean boolean26 = option9.equals((java.lang.Object) char25);
        java.lang.Object obj27 = option9.getType();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(iterator3);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + char25 + "' != '" + 'a' + "'", char25 == 'a');
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(obj27);
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0187");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.util.Iterator iterator3 = commandLine0.iterator();
        java.lang.String[] strArray5 = commandLine0.getOptionValues('a');
        java.lang.Object obj7 = commandLine0.getOptionObject('a');
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option9.setLongOpt("hi!");
        commandLine0.addOption(option9);
        boolean boolean15 = option9.hasOptionalArg();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(iterator3);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1193");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.util.Iterator iterator1 = commandLine0.iterator();
        boolean boolean3 = commandLine0.hasOption("[ option: 4  :: [ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ] ::  ]");
        boolean boolean5 = commandLine0.hasOption("[ Options: [ short {=[ option:  +ARG ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNotNull(iterator1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0579");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create(' ');
        boolean boolean2 = option1.hasArgName();
        boolean boolean3 = option1.hasArgName();
        boolean boolean4 = option1.hasOptionalArg();
        java.lang.Object obj5 = option1.getType();
        option1.setLongOpt("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.apache.commons.cli.CommandLine commandLine8 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine8.getOptionValues("hi!");
        java.util.Iterator iterator11 = commandLine8.iterator();
        java.lang.String[] strArray13 = commandLine8.getOptionValues('a');
        java.util.Iterator iterator14 = commandLine8.iterator();
        boolean boolean16 = commandLine8.hasOption("");
        boolean boolean17 = option1.equals((java.lang.Object) commandLine8);
        java.lang.Object obj18 = option1.getType();
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertNull(strArray13);
        org.junit.Assert.assertNotNull(iterator14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
// flaky:         org.junit.Assert.assertNull(obj18);
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0352");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create('4');
        option1.setDescription("");
        boolean boolean4 = option1.hasValueSeparator();
        java.util.List list5 = option1.getValuesList();
        int int6 = option1.getArgs();
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        option1.setType((java.lang.Object) commandLine7);
        char char11 = option1.getValueSeparator();
        option1.setArgName("[ option: 4  :: null ::  ]");
        boolean boolean14 = option1.hasValueSeparator();
        option1.setArgs((int) '4');
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(list5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertTrue("'" + char11 + "' != '" + '\000' + "'", char11 == '\000');
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1160");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine8 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine8.getOptionValues("hi!");
        java.lang.String str13 = commandLine8.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str15 = commandLine8.getOptionValue("arg");
        java.lang.String[] strArray16 = commandLine8.getArgs();
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser0.parse(options1, strArray16, properties17);
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option22 = org.apache.commons.cli.OptionBuilder.create('4');
        option22.setDescription("");
        org.apache.commons.cli.Options options25 = options20.addOption(option22);
        org.apache.commons.cli.CommandLine commandLine26 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray28 = commandLine26.getOptionValues("hi!");
        java.lang.String[] strArray29 = commandLine26.getArgs();
        java.util.Properties properties30 = null;
        org.apache.commons.cli.CommandLine commandLine31 = posixParser19.parse(options20, strArray29, properties30);
        org.apache.commons.cli.PosixParser posixParser32 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options33 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option35 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup36 = options33.getOptionGroup(option35);
        org.apache.commons.cli.Option option38 = org.apache.commons.cli.OptionBuilder.create('4');
        char char39 = option38.getValueSeparator();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create('4');
        option41.setDescription("");
        option38.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup45 = options33.getOptionGroup(option38);
        boolean boolean47 = options33.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser48 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option51 = org.apache.commons.cli.OptionBuilder.create('4');
        option51.setDescription("");
        org.apache.commons.cli.Options options54 = options49.addOption(option51);
        org.apache.commons.cli.CommandLine commandLine55 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray57 = commandLine55.getOptionValues("hi!");
        java.lang.String str60 = commandLine55.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str62 = commandLine55.getOptionValue("arg");
        java.lang.String[] strArray63 = commandLine55.getArgs();
        java.lang.String[] strArray65 = posixParser48.flatten(options54, strArray63, false);
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser32.parse(options33, strArray65, properties66);
        java.util.List list68 = commandLine67.getArgList();
        java.lang.String[] strArray69 = commandLine67.getArgs();
        java.lang.String[] strArray71 = posixParser0.flatten(options20, strArray69, false);
        org.apache.commons.cli.CommandLine commandLine72 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray74 = commandLine72.getOptionValues("hi!");
        java.lang.String[] strArray75 = commandLine72.getArgs();
        java.lang.String str77 = commandLine72.getOptionValue("hi!");
        org.apache.commons.cli.Option option79 = org.apache.commons.cli.OptionBuilder.create(' ');
        commandLine72.addOption(option79);
        org.apache.commons.cli.OptionGroup optionGroup81 = options20.getOptionGroup(option79);
        org.apache.commons.cli.Option option83 = options20.getOption("[ option: 4   :: null ]");
        org.apache.commons.cli.Option option85 = options20.getOption("org.apache.commons.cli.UnrecognizedOptionException: [ option: 4  ::  :: [] ]");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str13, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNotNull(option22);
        org.junit.Assert.assertNotNull(options25);
        org.junit.Assert.assertNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(option35);
        org.junit.Assert.assertNull(optionGroup36);
        org.junit.Assert.assertNotNull(option38);
        org.junit.Assert.assertTrue("'" + char39 + "' != '" + '\000' + "'", char39 == '\000');
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(option51);
        org.junit.Assert.assertNotNull(options54);
        org.junit.Assert.assertNull(strArray57);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str60, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNotNull(list68);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNull(strArray74);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(option79);
        org.junit.Assert.assertNull(optionGroup81);
        org.junit.Assert.assertNull(option83);
        org.junit.Assert.assertNull(option85);
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0985");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        posixParser0.burstToken("4", false);
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        option45.setDescription("");
        org.apache.commons.cli.Options options48 = options43.addOption(option45);
        java.util.Collection collection49 = options43.getOptionGroups();
        org.apache.commons.cli.Options options53 = options43.addOption("", false, "arg");
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        boolean boolean56 = option55.hasOptionalArg();
        org.apache.commons.cli.Options options57 = options43.addOption(option55);
        boolean boolean59 = options43.hasOption("");
        org.apache.commons.cli.PosixParser posixParser60 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options61 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option63 = org.apache.commons.cli.OptionBuilder.create('4');
        option63.setDescription("");
        org.apache.commons.cli.Options options66 = options61.addOption(option63);
        org.apache.commons.cli.CommandLine commandLine67 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray69 = commandLine67.getOptionValues("hi!");
        java.lang.String str72 = commandLine67.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str74 = commandLine67.getOptionValue("arg");
        java.lang.String[] strArray75 = commandLine67.getArgs();
        java.lang.String[] strArray77 = posixParser60.flatten(options66, strArray75, false);
        org.apache.commons.cli.CommandLine commandLine79 = posixParser0.parse(options43, strArray75, false);
        java.lang.String str82 = commandLine79.getOptionValue("[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]", "hi!");
        java.lang.Object obj84 = commandLine79.getOptionObject("[ option: 4  :: hi! ]");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(collection49);
        org.junit.Assert.assertNotNull(options53);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(options57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(option63);
        org.junit.Assert.assertNotNull(options66);
        org.junit.Assert.assertNull(strArray69);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str72, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(commandLine79);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "hi!" + "'", str82, "hi!");
        org.junit.Assert.assertNull(obj84);
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0683");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        java.util.Collection collection22 = options6.getOptions();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create('4');
        option24.setArgs((int) (short) 100);
        option24.setArgName("[ option: 4  :: null ]");
        java.lang.String str29 = option24.getLongOpt();
        java.lang.String str31 = option24.getValue((int) (short) -1);
        org.apache.commons.cli.Options options32 = options6.addOption(option24);
        boolean boolean33 = option24.hasOptionalArg();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(collection22);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1218");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue("hi!");
        org.apache.commons.cli.Option option7 = org.apache.commons.cli.OptionBuilder.create(' ');
        commandLine0.addOption(option7);
        java.lang.String[] strArray10 = commandLine0.getOptionValues("[ option: 4  :: null ]");
        java.lang.Object obj12 = commandLine0.getOptionObject("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.apache.commons.cli.Option[] optionArray13 = commandLine0.getOptions();
        commandLine0.addArg("org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]");
        java.lang.String str18 = commandLine0.getOptionValue("[ option:    :: null :: arg ]", "[ Options: [ short {4=[ option: 4  :: null ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(option7);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(optionArray13);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[ Options: [ short {4=[ option: 4  :: null ::  ]} ] [ long {} ]" + "'", str18, "[ Options: [ short {4=[ option: 4  :: null ::  ]} ] [ long {} ]");
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0482");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken("hi!", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptions();
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        char char31 = option30.getValueSeparator();
        org.apache.commons.cli.Option option33 = org.apache.commons.cli.OptionBuilder.create('4');
        option33.setDescription("");
        option30.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup37 = options28.getOptionGroup(option30);
        option30.setOptionalArg(true);
        int int40 = option30.getId();
        org.apache.commons.cli.Options options41 = options21.addOption(option30);
        boolean boolean43 = options41.hasOption("");
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        option45.setArgs((int) (short) 100);
        option45.setArgName("[ option: 4  :: null ]");
        java.lang.String str50 = option45.getLongOpt();
        boolean boolean51 = option45.hasLongOpt();
        org.apache.commons.cli.Options options52 = options41.addOption(option45);
        java.util.Collection collection53 = options41.getOptions();
        org.apache.commons.cli.PosixParser posixParser54 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option57 = org.apache.commons.cli.OptionBuilder.create('4');
        option57.setDescription("");
        org.apache.commons.cli.Options options60 = options55.addOption(option57);
        java.util.Collection collection61 = options55.getOptions();
        boolean boolean63 = options55.hasOption("arg");
        java.lang.String[] strArray66 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" };
        org.apache.commons.cli.CommandLine commandLine67 = posixParser54.parse(options55, strArray66);
        java.lang.String[] strArray69 = posixParser0.flatten(options41, strArray66, false);
        java.util.List list70 = options41.helpOptions();
        java.lang.String str71 = options41.toString();
        org.apache.commons.cli.Option option75 = new org.apache.commons.cli.Option("4", false, "[ option: 4  ::  ]");
        java.lang.String str76 = option75.getDescription();
        org.apache.commons.cli.Options options77 = options41.addOption(option75);
        org.apache.commons.cli.Option option79 = options41.getOption("[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
        org.apache.commons.cli.OptionGroup optionGroup80 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options81 = options41.addOptionGroup(optionGroup80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertTrue("'" + char31 + "' != '" + '\000' + "'", char31 == '\000');
        org.junit.Assert.assertNotNull(option33);
        org.junit.Assert.assertNull(optionGroup37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(collection53);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(collection61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(list70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]" + "'", str71, "[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "[ option: 4  ::  ]" + "'", str76, "[ option: 4  ::  ]");
        org.junit.Assert.assertNotNull(options77);
        org.junit.Assert.assertNull(option79);
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0828");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option38 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup39 = options36.getOptionGroup(option38);
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create('4');
        char char42 = option41.getValueSeparator();
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create('4');
        option44.setDescription("");
        option41.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup48 = options36.getOptionGroup(option41);
        org.apache.commons.cli.Option option50 = org.apache.commons.cli.OptionBuilder.create('4');
        boolean boolean51 = option50.isRequired();
        org.apache.commons.cli.Options options52 = options36.addOption(option50);
        java.util.List list53 = options52.getRequiredOptions();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setArgs((int) (short) 100);
        option55.setArgName("[ option: 4  :: null ]");
        java.lang.String str60 = option55.getLongOpt();
        java.lang.String str62 = option55.getValue((int) (short) -1);
        org.apache.commons.cli.CommandLine commandLine63 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray65 = commandLine63.getOptionValues("hi!");
        java.lang.String str68 = commandLine63.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str70 = commandLine63.getOptionValue("arg");
        java.lang.String[] strArray71 = commandLine63.getArgs();
        option55.setType((java.lang.Object) strArray71);
        java.util.Properties properties73 = null;
        org.apache.commons.cli.CommandLine commandLine74 = posixParser0.parse(options52, strArray71, properties73);
        posixParser0.burstToken("org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!", false);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option38);
        org.junit.Assert.assertNull(optionGroup39);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertTrue("'" + char42 + "' != '" + '\000' + "'", char42 == '\000');
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertNull(optionGroup48);
        org.junit.Assert.assertNotNull(option50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(list53);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(strArray65);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str68, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(commandLine74);
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1373");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String[] strArray10 = commandLine7.getArgs();
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = posixParser0.parse(options1, strArray10, properties11);
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option15 = org.apache.commons.cli.OptionBuilder.create('4');
        option15.setDescription("");
        org.apache.commons.cli.Options options18 = options13.addOption(option15);
        java.util.Collection collection19 = options13.getOptionGroups();
        org.apache.commons.cli.Options options23 = options13.addOption("", false, "arg");
        org.apache.commons.cli.Option option27 = new org.apache.commons.cli.Option("", true, "");
        boolean boolean28 = option27.hasOptionalArg();
        option27.setOptionalArg(false);
        org.apache.commons.cli.OptionGroup optionGroup31 = options23.getOptionGroup(option27);
        java.util.Collection collection32 = options23.getOptionGroups();
        org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option36 = org.apache.commons.cli.OptionBuilder.create('4');
        option36.setDescription("");
        org.apache.commons.cli.Options options39 = options34.addOption(option36);
        java.util.Collection collection40 = options34.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine41 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray43 = commandLine41.getOptionValues("hi!");
        java.lang.String str46 = commandLine41.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str48 = commandLine41.getOptionValue("arg");
        java.lang.String[] strArray49 = commandLine41.getArgs();
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine51 = posixParser33.parse(options34, strArray49, properties50);
        java.lang.String[] strArray53 = posixParser0.flatten(options23, strArray49, true);
        org.apache.commons.cli.Option option55 = options23.getOption("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        boolean boolean57 = options23.hasOption("[ Options: [ short { =[ option:    +ARG :: org.apache.commons.cli.UnrecognizedOptionException: hi! ], 4=[ option: 4  ::  ]} ] [ long {=[ option:    +ARG :: org.apache.commons.cli.UnrecognizedOptionException: hi! ]} ]");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
        org.junit.Assert.assertNotNull(option15);
        org.junit.Assert.assertNotNull(options18);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(optionGroup31);
        org.junit.Assert.assertNotNull(collection32);
        org.junit.Assert.assertNotNull(option36);
        org.junit.Assert.assertNotNull(options39);
        org.junit.Assert.assertNotNull(collection40);
        org.junit.Assert.assertNull(strArray43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str46, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNull(option55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0489");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option38 = org.apache.commons.cli.OptionBuilder.create('4');
        option38.setDescription("");
        org.apache.commons.cli.Options options41 = options36.addOption(option38);
        org.apache.commons.cli.Options options42 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create('4');
        char char45 = option44.getValueSeparator();
        org.apache.commons.cli.Option option47 = org.apache.commons.cli.OptionBuilder.create('4');
        option47.setDescription("");
        option44.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup51 = options42.getOptionGroup(option44);
        option44.setOptionalArg(true);
        int int54 = option44.getId();
        org.apache.commons.cli.OptionGroup optionGroup55 = options41.getOptionGroup(option44);
        org.apache.commons.cli.Options options56 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option58 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup59 = options56.getOptionGroup(option58);
        boolean boolean60 = option58.hasLongOpt();
        boolean boolean61 = option58.isRequired();
        org.apache.commons.cli.Options options62 = options41.addOption(option58);
        org.apache.commons.cli.PosixParser posixParser63 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options64 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option66 = org.apache.commons.cli.OptionBuilder.create('4');
        option66.setDescription("");
        org.apache.commons.cli.Options options69 = options64.addOption(option66);
        org.apache.commons.cli.CommandLine commandLine70 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray72 = commandLine70.getOptionValues("hi!");
        java.lang.String str75 = commandLine70.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str77 = commandLine70.getOptionValue("arg");
        java.lang.String[] strArray78 = commandLine70.getArgs();
        java.lang.String[] strArray80 = posixParser63.flatten(options69, strArray78, false);
        org.apache.commons.cli.CommandLine commandLine82 = posixParser0.parse(options62, strArray80, false);
        org.apache.commons.cli.Option option87 = new org.apache.commons.cli.Option("arg", "", false, "");
        option87.setValueSeparator('#');
        org.apache.commons.cli.Options options90 = options62.addOption(option87);
        java.util.Collection collection91 = options62.getOptionGroups();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option38);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertTrue("'" + char45 + "' != '" + '\000' + "'", char45 == '\000');
        org.junit.Assert.assertNotNull(option47);
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 52 + "'", int54 == 52);
        org.junit.Assert.assertNull(optionGroup55);
        org.junit.Assert.assertNotNull(option58);
        org.junit.Assert.assertNull(optionGroup59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(options62);
        org.junit.Assert.assertNotNull(option66);
        org.junit.Assert.assertNotNull(options69);
        org.junit.Assert.assertNull(strArray72);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str75, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(options90);
        org.junit.Assert.assertNotNull(collection91);
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0792");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue("hi!");
        boolean boolean7 = commandLine0.hasOption("");
        java.lang.String str10 = commandLine0.getOptionValue("[ option: 4  :: null ]", "org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.Option[] optionArray11 = commandLine0.getOptions();
        org.apache.commons.cli.Option[] optionArray12 = commandLine0.getOptions();
        java.lang.String[] strArray14 = commandLine0.getOptionValues('a');
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "org.apache.commons.cli.MissingOptionException: hi!" + "'", str10, "org.apache.commons.cli.MissingOptionException: hi!");
        org.junit.Assert.assertNotNull(optionArray11);
        org.junit.Assert.assertNotNull(optionArray12);
        org.junit.Assert.assertNull(strArray14);
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1438");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options53, strArray60, true);
        org.apache.commons.cli.PosixParser posixParser63 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options64 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option66 = org.apache.commons.cli.OptionBuilder.create('4');
        option66.setDescription("");
        org.apache.commons.cli.Options options69 = options64.addOption(option66);
        org.apache.commons.cli.CommandLine commandLine70 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray72 = commandLine70.getOptionValues("hi!");
        java.lang.String[] strArray73 = commandLine70.getArgs();
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine75 = posixParser63.parse(options64, strArray73, properties74);
        java.lang.String[] strArray78 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]", "hi!" };
        java.util.Properties properties79 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser0.parse(options64, strArray78, properties79, true);
        java.util.List list82 = commandLine81.getArgList();
        java.lang.String str85 = commandLine81.getOptionValue('#', "[ option: 4  :: null ]");
        java.lang.String str88 = commandLine81.getOptionValue("", "");
        org.apache.commons.cli.Option[] optionArray89 = commandLine81.getOptions();
        java.lang.String[] strArray91 = commandLine81.getOptionValues("[ option:    :: null ]");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(option66);
        org.junit.Assert.assertNotNull(options69);
        org.junit.Assert.assertNull(strArray72);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine75);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(list82);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "[ option: 4  :: null ]" + "'", str85, "[ option: 4  :: null ]");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertNotNull(optionArray89);
        org.junit.Assert.assertNull(strArray91);
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0276");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        java.util.List list40 = commandLine39.getArgList();
        java.util.List list41 = commandLine39.getArgList();
        org.apache.commons.cli.Option[] optionArray42 = commandLine39.getOptions();
        java.util.Iterator iterator43 = commandLine39.iterator();
        java.lang.String str46 = commandLine39.getOptionValue('\000', "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.String str48 = commandLine39.getOptionValue('=');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(list40);
        org.junit.Assert.assertNotNull(list41);
        org.junit.Assert.assertNotNull(optionArray42);
        org.junit.Assert.assertNotNull(iterator43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str46, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNull(str48);
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1426");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        java.util.Collection collection53 = options22.getOptionGroups();
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        option56.setDescription("");
        org.apache.commons.cli.Options options59 = options54.addOption(option56);
        java.util.Collection collection60 = options54.getOptionGroups();
        org.apache.commons.cli.Options options64 = options54.addOption("", false, "arg");
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option67 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup68 = options65.getOptionGroup(option67);
        org.apache.commons.cli.Option option70 = org.apache.commons.cli.OptionBuilder.create('4');
        char char71 = option70.getValueSeparator();
        org.apache.commons.cli.Option option73 = org.apache.commons.cli.OptionBuilder.create('4');
        option73.setDescription("");
        option70.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup77 = options65.getOptionGroup(option70);
        boolean boolean78 = option70.hasArgName();
        org.apache.commons.cli.Options options79 = options54.addOption(option70);
        org.apache.commons.cli.Options options80 = options22.addOption(option70);
        java.lang.String str81 = option70.getKey();
        java.lang.String str83 = option70.getValue(10);
        boolean boolean84 = option70.hasLongOpt();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(collection53);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNotNull(collection60);
        org.junit.Assert.assertNotNull(options64);
        org.junit.Assert.assertNotNull(option67);
        org.junit.Assert.assertNull(optionGroup68);
        org.junit.Assert.assertNotNull(option70);
        org.junit.Assert.assertTrue("'" + char71 + "' != '" + '\000' + "'", char71 == '\000');
        org.junit.Assert.assertNotNull(option73);
        org.junit.Assert.assertNull(optionGroup77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(options79);
        org.junit.Assert.assertNotNull(options80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "4" + "'", str81, "4");
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1293");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue("hi!");
        boolean boolean7 = commandLine0.hasOption("");
        commandLine0.addArg("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        boolean boolean11 = commandLine0.hasOption("[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str15 = option13.getValue("");
        commandLine0.addOption(option13);
        java.lang.String str17 = option13.getDescription();
        option13.setValueSeparator('\000');
        java.lang.String str20 = option13.getKey();
        char char21 = option13.getValueSeparator();
        option13.setArgs(10);
        org.apache.commons.cli.ParseException parseException25 = new org.apache.commons.cli.ParseException("[ option:    :: null :: arg ]");
        boolean boolean26 = option13.equals((java.lang.Object) parseException25);
        org.apache.commons.cli.ParseException parseException28 = new org.apache.commons.cli.ParseException("[ option: 4  :: null ::  ]");
        org.apache.commons.cli.MissingArgumentException missingArgumentException30 = new org.apache.commons.cli.MissingArgumentException("[ option:    :: null :: arg ]");
        parseException28.addSuppressed((java.lang.Throwable) missingArgumentException30);
        parseException25.addSuppressed((java.lang.Throwable) parseException28);
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + char21 + "' != '" + '\000' + "'", char21 == '\000');
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0178");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        boolean boolean2 = commandLine0.hasOption('4');
        java.lang.Object obj4 = commandLine0.getOptionObject('4');
        java.lang.String str7 = commandLine0.getOptionValue('#', "[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
        commandLine0.addArg("[ option: 4 arg  :: null ]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str7, "[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1205");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String[] strArray10 = commandLine7.getArgs();
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = posixParser0.parse(options1, strArray10, properties11);
        org.apache.commons.cli.Options options13 = null;
        org.apache.commons.cli.PosixParser posixParser14 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options15 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option17 = org.apache.commons.cli.OptionBuilder.create('4');
        option17.setDescription("");
        org.apache.commons.cli.Options options20 = options15.addOption(option17);
        org.apache.commons.cli.CommandLine commandLine21 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray23 = commandLine21.getOptionValues("hi!");
        java.lang.String str26 = commandLine21.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str28 = commandLine21.getOptionValue("arg");
        java.lang.String[] strArray29 = commandLine21.getArgs();
        java.lang.String[] strArray31 = posixParser14.flatten(options20, strArray29, false);
        org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option34 = org.apache.commons.cli.OptionBuilder.create('4');
        option34.setDescription("");
        org.apache.commons.cli.Options options37 = options32.addOption(option34);
        java.util.Collection collection38 = options32.getOptionGroups();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        option40.setLongOpt("hi!");
        boolean boolean45 = option40.hasArgName();
        org.apache.commons.cli.Options options46 = options32.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine47 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray49 = commandLine47.getOptionValues("hi!");
        java.lang.String[] strArray50 = commandLine47.getArgs();
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser14.parse(options32, strArray50, properties51, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.CommandLine commandLine55 = posixParser0.parse(options13, strArray50, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
        org.junit.Assert.assertNotNull(option17);
        org.junit.Assert.assertNotNull(options20);
        org.junit.Assert.assertNull(strArray23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str26, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(option34);
        org.junit.Assert.assertNotNull(options37);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(options46);
        org.junit.Assert.assertNull(strArray49);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine53);
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1541");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine8 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine8.getOptionValues("hi!");
        java.lang.String str13 = commandLine8.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str15 = commandLine8.getOptionValue("arg");
        java.lang.String[] strArray16 = commandLine8.getArgs();
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser0.parse(options1, strArray16, properties17);
        org.apache.commons.cli.Options options23 = options1.addOption(" ", "", true, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.String str24 = options23.toString();
        boolean boolean26 = options23.hasOption("org.apache.commons.cli.MissingOptionException: [ option: 4  :: null ]");
        java.util.Collection collection27 = options23.getOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str13, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[ Options: [ short { =[ option:    +ARG :: org.apache.commons.cli.UnrecognizedOptionException: hi! ], 4=[ option: 4  ::  :: [ option: 4  :: null ] ]} ] [ long {=[ option:    +ARG :: org.apache.commons.cli.UnrecognizedOptionException: hi! ]} ]" + "'", str24, "[ Options: [ short { =[ option:    +ARG :: org.apache.commons.cli.UnrecognizedOptionException: hi! ], 4=[ option: 4  ::  :: [ option: 4  :: null ] ]} ] [ long {=[ option:    +ARG :: org.apache.commons.cli.UnrecognizedOptionException: hi! ]} ]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(collection27);
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1414");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.util.Iterator iterator4 = commandLine0.iterator();
        java.lang.Object obj6 = commandLine0.getOptionObject('#');
        java.lang.String str8 = commandLine0.getOptionValue("4");
        java.lang.String str10 = commandLine0.getOptionValue("[ option: 4  ::  :: false ]");
        org.apache.commons.cli.Option option12 = org.apache.commons.cli.OptionBuilder.create('4');
        boolean boolean13 = option12.hasArgs();
        java.lang.Object obj14 = option12.getType();
        char char15 = option12.getValueSeparator();
        java.lang.String[] strArray16 = option12.getValues();
        java.lang.String[] strArray17 = option12.getValues();
        java.lang.Object obj18 = option12.getType();
        commandLine0.addOption(option12);
        option12.setValueSeparator('#');
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(iterator4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(option12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + char15 + "' != '" + '\000' + "'", char15 == '\000');
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNull(strArray17);
        org.junit.Assert.assertNull(obj18);
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0393");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        java.util.Collection collection35 = options22.getOptions();
        java.lang.String[] strArray36 = null;
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options22, strArray36, properties37, false);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        boolean boolean46 = option42.hasValueSeparator();
        java.lang.String str47 = option42.toString();
        java.util.ListIterator listIterator48 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option42, listIterator48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertNotNull(collection35);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[ option: 4  ::  ]" + "'", str47, "[ option: 4  ::  ]");
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0432");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option39 = org.apache.commons.cli.OptionBuilder.create('4');
        option39.setDescription("");
        org.apache.commons.cli.Options options42 = options37.addOption(option39);
        option39.setArgs((int) '\000');
        org.apache.commons.cli.Options options45 = options22.addOption(option39);
        org.apache.commons.cli.PosixParser posixParser46 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options47 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option49 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup50 = options47.getOptionGroup(option49);
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        char char53 = option52.getValueSeparator();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        option52.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup59 = options47.getOptionGroup(option52);
        boolean boolean61 = options47.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser62 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options63 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option65 = org.apache.commons.cli.OptionBuilder.create('4');
        option65.setDescription("");
        org.apache.commons.cli.Options options68 = options63.addOption(option65);
        org.apache.commons.cli.CommandLine commandLine69 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray71 = commandLine69.getOptionValues("hi!");
        java.lang.String str74 = commandLine69.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str76 = commandLine69.getOptionValue("arg");
        java.lang.String[] strArray77 = commandLine69.getArgs();
        java.lang.String[] strArray79 = posixParser62.flatten(options68, strArray77, false);
        java.util.Properties properties80 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser46.parse(options47, strArray79, properties80);
        java.util.List list82 = commandLine81.getArgList();
        java.lang.String[] strArray83 = commandLine81.getArgs();
        java.lang.String[] strArray84 = commandLine81.getArgs();
        java.util.Properties properties85 = null;
        org.apache.commons.cli.CommandLine commandLine86 = posixParser0.parse(options22, strArray84, properties85);
        java.lang.String[] strArray88 = commandLine86.getOptionValues("org.apache.commons.cli.MissingOptionException: [ option: 4  :: null ]");
        java.lang.Object obj90 = commandLine86.getOptionObject("[ option:   [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]  :: null ]");
        java.lang.String[] strArray92 = commandLine86.getOptionValues("[ option: 4  ::  :: [] ]");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option39);
        org.junit.Assert.assertNotNull(options42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(option49);
        org.junit.Assert.assertNull(optionGroup50);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertTrue("'" + char53 + "' != '" + '\000' + "'", char53 == '\000');
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNull(optionGroup59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(option65);
        org.junit.Assert.assertNotNull(options68);
        org.junit.Assert.assertNull(strArray71);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str74, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(list82);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(commandLine86);
        org.junit.Assert.assertNull(strArray88);
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertNull(strArray92);
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1649");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        java.util.Collection collection46 = options40.getOptionGroups();
        java.lang.String[] strArray47 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options40, strArray47);
        org.apache.commons.cli.Option option50 = org.apache.commons.cli.OptionBuilder.create(' ');
        char char51 = option50.getValueSeparator();
        org.apache.commons.cli.Options options52 = options40.addOption(option50);
        org.apache.commons.cli.OptionBuilder optionBuilder53 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options52);
        org.apache.commons.cli.OptionGroup optionGroup54 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options55 = options52.addOptionGroup(optionGroup54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(option50);
        org.junit.Assert.assertTrue("'" + char51 + "' != '" + '\000' + "'", char51 == '\000');
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(optionBuilder53);
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0344");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.util.Iterator iterator3 = commandLine0.iterator();
        java.lang.String[] strArray5 = commandLine0.getOptionValues('a');
        java.lang.Object obj7 = commandLine0.getOptionObject('a');
        java.lang.Object obj9 = commandLine0.getOptionObject("org.apache.commons.cli.MissingOptionException: hi!");
        java.lang.String str12 = commandLine0.getOptionValue("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]", "[ option: 4  :: null ]");
        java.lang.String[] strArray14 = commandLine0.getOptionValues('=');
        java.lang.String[] strArray16 = commandLine0.getOptionValues("");
        java.lang.String str18 = commandLine0.getOptionValue('4');
        boolean boolean20 = commandLine0.hasOption('\000');
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(iterator3);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ option: 4  :: null ]" + "'", str12, "[ option: 4  :: null ]");
        org.junit.Assert.assertNull(strArray14);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1212");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue('\000');
        java.lang.Object obj7 = commandLine0.getOptionObject("");
        java.lang.String[] strArray9 = commandLine0.getOptionValues('\000');
        java.lang.String str11 = commandLine0.getOptionValue('\000');
        java.lang.Object obj13 = commandLine0.getOptionObject("");
        java.util.Iterator iterator14 = commandLine0.iterator();
        java.lang.String str16 = commandLine0.getOptionValue("org.apache.commons.cli.ParseException: org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(iterator14);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0323");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option39 = org.apache.commons.cli.OptionBuilder.create('4');
        option39.setDescription("");
        org.apache.commons.cli.Options options42 = options37.addOption(option39);
        option39.setArgs((int) '\000');
        org.apache.commons.cli.Options options45 = options22.addOption(option39);
        org.apache.commons.cli.PosixParser posixParser46 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options47 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option49 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup50 = options47.getOptionGroup(option49);
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        char char53 = option52.getValueSeparator();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        option52.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup59 = options47.getOptionGroup(option52);
        boolean boolean61 = options47.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser62 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options63 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option65 = org.apache.commons.cli.OptionBuilder.create('4');
        option65.setDescription("");
        org.apache.commons.cli.Options options68 = options63.addOption(option65);
        org.apache.commons.cli.CommandLine commandLine69 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray71 = commandLine69.getOptionValues("hi!");
        java.lang.String str74 = commandLine69.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str76 = commandLine69.getOptionValue("arg");
        java.lang.String[] strArray77 = commandLine69.getArgs();
        java.lang.String[] strArray79 = posixParser62.flatten(options68, strArray77, false);
        java.util.Properties properties80 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser46.parse(options47, strArray79, properties80);
        java.util.List list82 = commandLine81.getArgList();
        java.lang.String[] strArray83 = commandLine81.getArgs();
        java.lang.String[] strArray84 = commandLine81.getArgs();
        java.util.Properties properties85 = null;
        org.apache.commons.cli.CommandLine commandLine86 = posixParser0.parse(options22, strArray84, properties85);
        org.apache.commons.cli.OptionGroup optionGroup87 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options88 = options22.addOptionGroup(optionGroup87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option39);
        org.junit.Assert.assertNotNull(options42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(option49);
        org.junit.Assert.assertNull(optionGroup50);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertTrue("'" + char53 + "' != '" + '\000' + "'", char53 == '\000');
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNull(optionGroup59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(option65);
        org.junit.Assert.assertNotNull(options68);
        org.junit.Assert.assertNull(strArray71);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str74, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(list82);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(commandLine86);
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1626");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        java.util.Collection collection46 = options40.getOptionGroups();
        java.lang.String[] strArray47 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options40, strArray47);
        org.apache.commons.cli.Option option50 = org.apache.commons.cli.OptionBuilder.create('4');
        option50.setDescription("");
        boolean boolean53 = option50.hasValueSeparator();
        java.lang.String str54 = option50.getValue();
        option50.setArgs((int) '\000');
        boolean boolean57 = option50.hasValueSeparator();
        java.lang.String str58 = option50.getValue();
        boolean boolean59 = option50.hasArgName();
        commandLine48.addOption(option50);
        java.lang.String str62 = option50.getValue("[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
        option50.setValueSeparator('4');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(option50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str62, "[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1141");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        java.util.Collection collection22 = options6.getOptions();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create('4');
        char char25 = option24.getValueSeparator();
        org.apache.commons.cli.Options options26 = options6.addOption(option24);
        java.lang.String str27 = option24.getValue();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(collection22);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertTrue("'" + char25 + "' != '" + '\000' + "'", char25 == '\000');
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0534");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        org.apache.commons.cli.Options options36 = null;
        org.apache.commons.cli.CommandLine commandLine37 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray39 = commandLine37.getOptionValues("hi!");
        java.lang.String[] strArray40 = commandLine37.getArgs();
        java.lang.String[] strArray42 = posixParser0.flatten(options36, strArray40, false);
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup46 = options43.getOptionGroup(option45);
        boolean boolean47 = option45.hasLongOpt();
        boolean boolean48 = option45.isRequired();
        java.util.List list49 = option45.getValuesList();
        boolean boolean50 = option45.isRequired();
        java.lang.String str51 = option45.toString();
        org.apache.commons.cli.Options options52 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option54 = org.apache.commons.cli.OptionBuilder.create('4');
        option54.setDescription("");
        org.apache.commons.cli.Options options57 = options52.addOption(option54);
        java.util.Collection collection58 = options52.getOptions();
        org.apache.commons.cli.Options options59 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option61 = org.apache.commons.cli.OptionBuilder.create('4');
        char char62 = option61.getValueSeparator();
        org.apache.commons.cli.Option option64 = org.apache.commons.cli.OptionBuilder.create('4');
        option64.setDescription("");
        option61.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup68 = options59.getOptionGroup(option61);
        option61.setOptionalArg(true);
        int int71 = option61.getId();
        org.apache.commons.cli.Options options72 = options52.addOption(option61);
        option45.setType((java.lang.Object) options72);
        org.apache.commons.cli.CommandLine commandLine74 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray76 = commandLine74.getOptionValues("hi!");
        java.lang.String[] strArray77 = commandLine74.getArgs();
        java.lang.String str79 = commandLine74.getOptionValue("hi!");
        boolean boolean81 = commandLine74.hasOption("");
        java.lang.String str84 = commandLine74.getOptionValue("[ option: 4  :: null ]", "org.apache.commons.cli.MissingOptionException: hi!");
        java.lang.String[] strArray86 = commandLine74.getOptionValues('4');
        java.lang.String[] strArray87 = commandLine74.getArgs();
        java.lang.Object obj89 = commandLine74.getOptionObject("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String[] strArray90 = commandLine74.getArgs();
        java.util.Properties properties91 = null;
        org.apache.commons.cli.CommandLine commandLine92 = posixParser0.parse(options72, strArray90, properties91);
        posixParser0.burstToken("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", false);
        posixParser0.burstToken("[ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ]", false);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNull(strArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNull(optionGroup46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(list49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[ option:    :: null ]" + "'", str51, "[ option:    :: null ]");
        org.junit.Assert.assertNotNull(option54);
        org.junit.Assert.assertNotNull(options57);
        org.junit.Assert.assertNotNull(collection58);
        org.junit.Assert.assertNotNull(option61);
        org.junit.Assert.assertTrue("'" + char62 + "' != '" + '\000' + "'", char62 == '\000');
        org.junit.Assert.assertNotNull(option64);
        org.junit.Assert.assertNull(optionGroup68);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 52 + "'", int71 == 52);
        org.junit.Assert.assertNotNull(options72);
        org.junit.Assert.assertNull(strArray76);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "org.apache.commons.cli.MissingOptionException: hi!" + "'", str84, "org.apache.commons.cli.MissingOptionException: hi!");
        org.junit.Assert.assertNull(strArray86);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNull(obj89);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertNotNull(commandLine92);
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0047");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        java.util.List list36 = commandLine35.getArgList();
        java.lang.String[] strArray37 = commandLine35.getArgs();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        char char41 = option40.getValueSeparator();
        org.apache.commons.cli.Option option43 = org.apache.commons.cli.OptionBuilder.create('4');
        option43.setDescription("");
        option40.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup47 = options38.getOptionGroup(option40);
        boolean boolean48 = option40.hasValueSeparator();
        commandLine35.addOption(option40);
        java.lang.String str50 = option40.getLongOpt();
        java.lang.String str51 = option40.getLongOpt();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(list36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertTrue("'" + char41 + "' != '" + '\000' + "'", char41 == '\000');
        org.junit.Assert.assertNotNull(option43);
        org.junit.Assert.assertNull(optionGroup47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(str51);
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0979");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        java.util.Collection collection46 = options40.getOptionGroups();
        org.apache.commons.cli.Options options50 = options40.addOption("", false, "arg");
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup54 = options51.getOptionGroup(option53);
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        char char57 = option56.getValueSeparator();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create('4');
        option59.setDescription("");
        option56.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup63 = options51.getOptionGroup(option56);
        boolean boolean64 = option56.hasArgName();
        org.apache.commons.cli.Options options65 = options40.addOption(option56);
        org.apache.commons.cli.CommandLine commandLine66 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray68 = commandLine66.getOptionValues("hi!");
        java.lang.String str71 = commandLine66.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str73 = commandLine66.getOptionValue("arg");
        java.lang.String[] strArray74 = commandLine66.getArgs();
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options40, strArray74, properties75);
        org.apache.commons.cli.Options options77 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option79 = org.apache.commons.cli.OptionBuilder.create('4');
        char char80 = option79.getValueSeparator();
        org.apache.commons.cli.Option option82 = org.apache.commons.cli.OptionBuilder.create('4');
        option82.setDescription("");
        option79.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup86 = options77.getOptionGroup(option79);
        java.lang.String[] strArray89 = new java.lang.String[] { "4", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" };
        java.util.Properties properties90 = null;
        org.apache.commons.cli.CommandLine commandLine91 = posixParser0.parse(options77, strArray89, properties90);
        java.lang.String str93 = commandLine91.getOptionValue('\000');
        org.apache.commons.cli.Option[] optionArray94 = commandLine91.getOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertNotNull(options50);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertTrue("'" + char57 + "' != '" + '\000' + "'", char57 == '\000');
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertNull(optionGroup63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(options65);
        org.junit.Assert.assertNull(strArray68);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str71, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertNotNull(option79);
        org.junit.Assert.assertTrue("'" + char80 + "' != '" + '\000' + "'", char80 == '\000');
        org.junit.Assert.assertNotNull(option82);
        org.junit.Assert.assertNull(optionGroup86);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(commandLine91);
        org.junit.Assert.assertNull(str93);
        org.junit.Assert.assertNotNull(optionArray94);
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0028");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.OptionGroup optionGroup40 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options41 = options18.addOptionGroup(optionGroup40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1144");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String str5 = commandLine0.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str7 = commandLine0.getOptionValue("arg");
        java.util.Iterator iterator8 = commandLine0.iterator();
        java.lang.String str10 = commandLine0.getOptionValue("[ Options: [ short {4=[ option: 4  :: null ::  ]} ] [ long {} ]");
        java.lang.String str13 = commandLine0.getOptionValue(' ', "[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]");
        java.lang.Object obj15 = commandLine0.getOptionObject("[ Options: [ short {} ] [ long {} ]");
        java.lang.Object obj17 = commandLine0.getOptionObject('a');
        java.lang.String str20 = commandLine0.getOptionValue('a', "[ Options: [ short {4=[ option: 4  ::  :: [ option: arg [ option: 4  :: null ] +ARG :: 4 ] ]} ] [ long {} ]");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str5, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]" + "'", str13, "[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]");
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[ Options: [ short {4=[ option: 4  ::  :: [ option: arg [ option: 4  :: null ] +ARG :: 4 ] ]} ] [ long {} ]" + "'", str20, "[ Options: [ short {4=[ option: 4  ::  :: [ option: arg [ option: 4  :: null ] +ARG :: 4 ] ]} ] [ long {} ]");
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1262");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken("hi!", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup24 = options21.getOptionGroup(option23);
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        char char27 = option26.getValueSeparator();
        org.apache.commons.cli.Option option29 = org.apache.commons.cli.OptionBuilder.create('4');
        option29.setDescription("");
        option26.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup33 = options21.getOptionGroup(option26);
        java.lang.String[] strArray34 = null;
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser0.parse(options21, strArray34, properties35);
        org.apache.commons.cli.Option option38 = options21.getOption("[ option:    :: null ]");
        java.util.Collection collection39 = options21.getOptions();
        java.lang.String str40 = options21.toString();
        org.apache.commons.cli.Option option41 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.OptionGroup optionGroup42 = options21.getOptionGroup(option41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNull(optionGroup24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + char27 + "' != '" + '\000' + "'", char27 == '\000');
        org.junit.Assert.assertNotNull(option29);
        org.junit.Assert.assertNull(optionGroup33);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNull(option38);
        org.junit.Assert.assertNotNull(collection39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str40, "[ Options: [ short {} ] [ long {} ]");
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0961");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options53, strArray60, true);
        org.apache.commons.cli.PosixParser posixParser63 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options64 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option66 = org.apache.commons.cli.OptionBuilder.create('4');
        option66.setDescription("");
        org.apache.commons.cli.Options options69 = options64.addOption(option66);
        org.apache.commons.cli.CommandLine commandLine70 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray72 = commandLine70.getOptionValues("hi!");
        java.lang.String[] strArray73 = commandLine70.getArgs();
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine75 = posixParser63.parse(options64, strArray73, properties74);
        java.lang.String[] strArray78 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]", "hi!" };
        java.util.Properties properties79 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser0.parse(options64, strArray78, properties79, true);
        java.lang.String str84 = commandLine81.getOptionValue('a', "[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]");
        java.lang.String str86 = commandLine81.getOptionValue("");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(option66);
        org.junit.Assert.assertNotNull(options69);
        org.junit.Assert.assertNull(strArray72);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine75);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]" + "'", str84, "[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str86);
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0307");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup43 = options40.getOptionGroup(option42);
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        org.apache.commons.cli.OptionGroup optionGroup46 = options40.getOptionGroup(option45);
        java.util.List list47 = options40.getRequiredOptions();
        java.util.Collection collection48 = options40.getOptions();
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        option52.setDescription("");
        org.apache.commons.cli.Options options55 = options50.addOption(option52);
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray58 = commandLine56.getOptionValues("hi!");
        java.lang.String str61 = commandLine56.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str63 = commandLine56.getOptionValue("arg");
        java.lang.String[] strArray64 = commandLine56.getArgs();
        java.lang.String[] strArray66 = posixParser49.flatten(options55, strArray64, false);
        java.util.Properties properties67 = null;
        org.apache.commons.cli.CommandLine commandLine69 = posixParser0.parse(options40, strArray64, properties67, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options73 = options40.addOption("[ option: 4 [ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ]  :: null ]", false, "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNull(optionGroup46);
        org.junit.Assert.assertNotNull(list47);
        org.junit.Assert.assertNotNull(collection48);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNull(strArray58);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str61, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine69);
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1508");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option2 = org.apache.commons.cli.OptionBuilder.create('4');
        option2.setDescription("");
        org.apache.commons.cli.Options options5 = options0.addOption(option2);
        boolean boolean6 = option2.hasValueSeparator();
        boolean boolean7 = option2.hasOptionalArg();
        java.lang.String str8 = option2.getDescription();
        boolean boolean9 = option2.hasArgName();
        org.apache.commons.cli.CommandLine commandLine10 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray12 = commandLine10.getOptionValues("hi!");
        java.lang.String[] strArray13 = commandLine10.getArgs();
        java.util.Iterator iterator14 = commandLine10.iterator();
        java.lang.String str17 = commandLine10.getOptionValue("[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]", "arg");
        java.lang.String str19 = commandLine10.getOptionValue("[ option:  +ARG ::  ]");
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option22 = org.apache.commons.cli.OptionBuilder.create('4');
        option22.setDescription("");
        org.apache.commons.cli.Options options25 = options20.addOption(option22);
        java.util.List list26 = option22.getValuesList();
        boolean boolean27 = option22.hasArgs();
        commandLine10.addOption(option22);
        java.lang.Object obj30 = commandLine10.getOptionObject("org.apache.commons.cli.ParseException: [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ], arg=[ option: arg  :: null ]} ] [ long {} ]");
        option2.setType((java.lang.Object) "org.apache.commons.cli.ParseException: [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ], arg=[ option: arg  :: null ]} ] [ long {} ]");
        org.junit.Assert.assertNotNull(option2);
        org.junit.Assert.assertNotNull(options5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(iterator14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "arg" + "'", str17, "arg");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(option22);
        org.junit.Assert.assertNotNull(options25);
        org.junit.Assert.assertNotNull(list26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(obj30);
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0302");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        boolean boolean2 = commandLine0.hasOption('4');
        org.apache.commons.cli.Option option4 = org.apache.commons.cli.OptionBuilder.create('4');
        char char5 = option4.getValueSeparator();
        boolean boolean6 = option4.hasArg();
        boolean boolean7 = option4.hasOptionalArg();
        java.lang.String str9 = option4.getValue(0);
        java.lang.String[] strArray10 = option4.getValues();
        int int11 = option4.getId();
        commandLine0.addOption(option4);
        int int13 = option4.getArgs();
        java.lang.String str14 = option4.getKey();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(option4);
        org.junit.Assert.assertTrue("'" + char5 + "' != '" + '\000' + "'", char5 == '\000');
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "4" + "'", str14, "4");
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0007");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.util.Iterator iterator3 = commandLine0.iterator();
        java.lang.Class<?> wildcardClass4 = commandLine0.getClass();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(iterator3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1031");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.util.Iterator iterator4 = commandLine0.iterator();
        java.lang.String str7 = commandLine0.getOptionValue("[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]", "arg");
        java.lang.Object obj9 = commandLine0.getOptionObject("[ option: 4  :: null ]");
        java.lang.String[] strArray11 = commandLine0.getOptionValues('a');
        java.lang.Object obj13 = commandLine0.getOptionObject("[ option:  +ARG :: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ]");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(iterator4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg");
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(strArray11);
        org.junit.Assert.assertNull(obj13);
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1235");
        org.apache.commons.cli.Option option3 = new org.apache.commons.cli.Option("", true, "");
        boolean boolean4 = option3.hasOptionalArg();
        option3.setArgName("[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]");
        option3.setValueSeparator('\000');
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option12 = org.apache.commons.cli.OptionBuilder.create('4');
        option12.setDescription("");
        org.apache.commons.cli.Options options15 = options10.addOption(option12);
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String[] strArray26 = commandLine23.getArgs();
        java.util.Properties properties27 = null;
        org.apache.commons.cli.CommandLine commandLine28 = posixParser16.parse(options17, strArray26, properties27);
        org.apache.commons.cli.CommandLine commandLine30 = posixParser9.parse(options15, strArray26, false);
        org.apache.commons.cli.OptionBuilder optionBuilder31 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options15);
        java.util.Collection collection32 = options15.getOptionGroups();
        option3.setType((java.lang.Object) options15);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(option12);
        org.junit.Assert.assertNotNull(options15);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(commandLine28);
        org.junit.Assert.assertNotNull(commandLine30);
        org.junit.Assert.assertNotNull(optionBuilder31);
        org.junit.Assert.assertNotNull(collection32);
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1280");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options53, strArray60, true);
        java.lang.String str64 = commandLine62.getOptionValue('\000');
        java.lang.Object obj66 = commandLine62.getOptionObject("[ option:    :: null ]");
        java.lang.String str68 = commandLine62.getOptionValue('=');
        java.lang.String str71 = commandLine62.getOptionValue("arg", "[ option: 4  :: null ]");
        java.lang.String str74 = commandLine62.getOptionValue('4', "[ option: a  :: null ]");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[ option: 4  :: null ]" + "'", str71, "[ option: 4  :: null ]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "[ option: a  :: null ]" + "'", str74, "[ option: a  :: null ]");
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0620");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create('4');
        option1.setArgs((int) (short) 100);
        option1.setArgName("[ option: 4  :: null ]");
        java.lang.String str6 = option1.getLongOpt();
        java.lang.String str8 = option1.getValue((int) (short) -1);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray11 = commandLine9.getOptionValues("hi!");
        java.lang.String str14 = commandLine9.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str16 = commandLine9.getOptionValue("arg");
        java.lang.String[] strArray17 = commandLine9.getArgs();
        option1.setType((java.lang.Object) strArray17);
        java.lang.String str19 = option1.getLongOpt();
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(strArray11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str14, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0291");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Options options28 = options18.addOption("", false, "arg");
        java.util.List list29 = options28.getRequiredOptions();
        org.apache.commons.cli.Option option31 = org.apache.commons.cli.OptionBuilder.create("arg");
        org.apache.commons.cli.Options options32 = options28.addOption(option31);
        org.apache.commons.cli.Option option34 = org.apache.commons.cli.OptionBuilder.create('4');
        option34.setArgs((int) (short) 100);
        option34.setArgName("[ option: 4  :: null ]");
        java.lang.String str39 = option34.getLongOpt();
        java.lang.String str41 = option34.getValue((int) (short) -1);
        org.apache.commons.cli.Options options42 = options32.addOption(option34);
        int int43 = option34.getArgs();
        boolean boolean44 = option34.hasArg();
        boolean boolean45 = option34.hasArgName();
        boolean boolean46 = option34.hasArg();
        java.util.ListIterator listIterator47 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option34, listIterator47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(option31);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNotNull(option34);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(options42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0403");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option38 = org.apache.commons.cli.OptionBuilder.create('4');
        option38.setDescription("");
        org.apache.commons.cli.Options options41 = options36.addOption(option38);
        org.apache.commons.cli.Options options42 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create('4');
        char char45 = option44.getValueSeparator();
        org.apache.commons.cli.Option option47 = org.apache.commons.cli.OptionBuilder.create('4');
        option47.setDescription("");
        option44.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup51 = options42.getOptionGroup(option44);
        option44.setOptionalArg(true);
        int int54 = option44.getId();
        org.apache.commons.cli.OptionGroup optionGroup55 = options41.getOptionGroup(option44);
        org.apache.commons.cli.Options options56 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option58 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup59 = options56.getOptionGroup(option58);
        boolean boolean60 = option58.hasLongOpt();
        boolean boolean61 = option58.isRequired();
        org.apache.commons.cli.Options options62 = options41.addOption(option58);
        org.apache.commons.cli.PosixParser posixParser63 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options64 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option66 = org.apache.commons.cli.OptionBuilder.create('4');
        option66.setDescription("");
        org.apache.commons.cli.Options options69 = options64.addOption(option66);
        org.apache.commons.cli.CommandLine commandLine70 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray72 = commandLine70.getOptionValues("hi!");
        java.lang.String str75 = commandLine70.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str77 = commandLine70.getOptionValue("arg");
        java.lang.String[] strArray78 = commandLine70.getArgs();
        java.lang.String[] strArray80 = posixParser63.flatten(options69, strArray78, false);
        org.apache.commons.cli.CommandLine commandLine82 = posixParser0.parse(options62, strArray80, false);
        java.lang.Object obj84 = commandLine82.getOptionObject(' ');
        java.lang.Object obj86 = commandLine82.getOptionObject("[ option: 4  :: null ::  ]");
        java.lang.String[] strArray88 = commandLine82.getOptionValues('4');
        boolean boolean90 = commandLine82.hasOption("[ option: 4  :: null ::  ]");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option38);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertTrue("'" + char45 + "' != '" + '\000' + "'", char45 == '\000');
        org.junit.Assert.assertNotNull(option47);
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 52 + "'", int54 == 52);
        org.junit.Assert.assertNull(optionGroup55);
        org.junit.Assert.assertNotNull(option58);
        org.junit.Assert.assertNull(optionGroup59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(options62);
        org.junit.Assert.assertNotNull(option66);
        org.junit.Assert.assertNotNull(options69);
        org.junit.Assert.assertNull(strArray72);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str75, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNull(obj84);
        org.junit.Assert.assertNull(obj86);
        org.junit.Assert.assertNull(strArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0002");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine8 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine8.getOptionValues("hi!");
        java.lang.String str13 = commandLine8.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str15 = commandLine8.getOptionValue("arg");
        java.lang.String[] strArray16 = commandLine8.getArgs();
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser0.parse(options1, strArray16, properties17);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options23 = options1.addOption("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]", false, "[ option: 4  :: null ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str13, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1651");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.Object obj4 = commandLine0.getOptionObject('a');
        java.lang.String str7 = commandLine0.getOptionValue('\000', "org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        java.util.List list8 = commandLine0.getArgList();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" + "'", str7, "org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        org.junit.Assert.assertNotNull(list8);
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0024");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        java.util.Collection collection53 = options22.getOptionGroups();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options58 = options22.addOption("[ option:    :: null ]", "hi!", false, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(collection53);
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1114");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.util.Iterator iterator3 = commandLine0.iterator();
        java.lang.String[] strArray5 = commandLine0.getOptionValues('a');
        java.util.Iterator iterator6 = commandLine0.iterator();
        java.lang.Object obj8 = commandLine0.getOptionObject("[ option:    :: null ]");
        java.lang.String str11 = commandLine0.getOptionValue('\000', "org.apache.commons.cli.MissingOptionException: [ option: 4  :: null ]");
        java.lang.String[] strArray12 = commandLine0.getArgs();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(iterator3);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.apache.commons.cli.MissingOptionException: [ option: 4  :: null ]" + "'", str11, "org.apache.commons.cli.MissingOptionException: [ option: 4  :: null ]");
        org.junit.Assert.assertNotNull(strArray12);
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1633");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option2 = org.apache.commons.cli.OptionBuilder.create('4');
        option2.setDescription("");
        org.apache.commons.cli.Options options5 = options0.addOption(option2);
        java.util.Collection collection6 = options0.getOptionGroups();
        org.apache.commons.cli.Options options10 = options0.addOption("", false, "arg");
        org.apache.commons.cli.Option option12 = org.apache.commons.cli.OptionBuilder.create('4');
        boolean boolean13 = option12.hasOptionalArg();
        org.apache.commons.cli.Options options14 = options0.addOption(option12);
        org.apache.commons.cli.Option option16 = org.apache.commons.cli.OptionBuilder.create('4');
        char char17 = option16.getValueSeparator();
        boolean boolean18 = option16.hasArg();
        java.lang.String str19 = option16.getValue();
        java.lang.String str21 = option16.getValue((int) ' ');
        org.apache.commons.cli.OptionGroup optionGroup22 = options0.getOptionGroup(option16);
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create('4');
        option25.setDescription("");
        org.apache.commons.cli.Options options28 = options23.addOption(option25);
        option25.setArgName("");
        org.apache.commons.cli.Options options31 = options0.addOption(option25);
        java.util.List list32 = options31.getRequiredOptions();
        org.apache.commons.cli.Option option34 = org.apache.commons.cli.OptionBuilder.create('4');
        option34.setDescription("");
        boolean boolean37 = option34.hasValueSeparator();
        java.util.List list38 = option34.getValuesList();
        int int39 = option34.getArgs();
        org.apache.commons.cli.CommandLine commandLine40 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray42 = commandLine40.getOptionValues("hi!");
        option34.setType((java.lang.Object) commandLine40);
        char char44 = option34.getValueSeparator();
        option34.setArgName("[ option: 4  :: null ::  ]");
        java.util.List list47 = option34.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup48 = options31.getOptionGroup(option34);
        org.junit.Assert.assertNotNull(option2);
        org.junit.Assert.assertNotNull(options5);
        org.junit.Assert.assertNotNull(collection6);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(option12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(options14);
        org.junit.Assert.assertNotNull(option16);
        org.junit.Assert.assertTrue("'" + char17 + "' != '" + '\000' + "'", char17 == '\000');
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(optionGroup22);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(options31);
        org.junit.Assert.assertNotNull(list32);
        org.junit.Assert.assertNotNull(option34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNull(strArray42);
        org.junit.Assert.assertTrue("'" + char44 + "' != '" + '\000' + "'", char44 == '\000');
        org.junit.Assert.assertNotNull(list47);
        org.junit.Assert.assertNull(optionGroup48);
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0359");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String[] strArray10 = commandLine7.getArgs();
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = posixParser0.parse(options1, strArray10, properties11);
        boolean boolean14 = options1.hasOption(" ");
        java.util.List list15 = options1.getRequiredOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(list15);
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0416");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String[] strArray10 = commandLine7.getArgs();
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = posixParser0.parse(options1, strArray10, properties11);
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option15 = org.apache.commons.cli.OptionBuilder.create('4');
        char char16 = option15.getValueSeparator();
        org.apache.commons.cli.Option option18 = org.apache.commons.cli.OptionBuilder.create('4');
        option18.setDescription("");
        option15.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup22 = options13.getOptionGroup(option15);
        java.util.List list23 = options13.helpOptions();
        org.apache.commons.cli.PosixParser posixParser24 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup28 = options25.getOptionGroup(option27);
        org.apache.commons.cli.CommandLine commandLine29 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray31 = commandLine29.getOptionValues("hi!");
        java.lang.String str34 = commandLine29.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str36 = commandLine29.getOptionValue("arg");
        java.lang.String[] strArray37 = commandLine29.getArgs();
        java.lang.String[] strArray39 = posixParser24.flatten(options25, strArray37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        java.util.Collection collection46 = options40.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine47 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray49 = commandLine47.getOptionValues("hi!");
        java.lang.String str52 = commandLine47.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str54 = commandLine47.getOptionValue("arg");
        java.lang.String[] strArray55 = commandLine47.getArgs();
        java.util.Properties properties56 = null;
        org.apache.commons.cli.CommandLine commandLine58 = posixParser24.parse(options40, strArray55, properties56, false);
        org.apache.commons.cli.CommandLine commandLine59 = posixParser0.parse(options13, strArray55);
        java.util.Collection collection60 = options13.getOptions();
        java.util.Collection collection61 = options13.getOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
        org.junit.Assert.assertNotNull(option15);
        org.junit.Assert.assertTrue("'" + char16 + "' != '" + '\000' + "'", char16 == '\000');
        org.junit.Assert.assertNotNull(option18);
        org.junit.Assert.assertNull(optionGroup22);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertNull(optionGroup28);
        org.junit.Assert.assertNull(strArray31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str34, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertNull(strArray49);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str52, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertNotNull(commandLine59);
        org.junit.Assert.assertNotNull(collection60);
        org.junit.Assert.assertNotNull(collection61);
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0992");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option2 = org.apache.commons.cli.OptionBuilder.create('4');
        option2.setDescription("");
        org.apache.commons.cli.Options options5 = options0.addOption(option2);
        java.util.Collection collection6 = options0.getOptionGroups();
        org.apache.commons.cli.Option option8 = org.apache.commons.cli.OptionBuilder.create('4');
        option8.setDescription("");
        option8.setLongOpt("hi!");
        boolean boolean13 = option8.hasArgName();
        org.apache.commons.cli.Options options14 = options0.addOption(option8);
        boolean boolean15 = option8.hasValueSeparator();
        option8.setOptionalArg(false);
        char char18 = option8.getValueSeparator();
        java.util.List list19 = option8.getValuesList();
        org.apache.commons.cli.PosixParser posixParser20 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        org.apache.commons.cli.CommandLine commandLine27 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray29 = commandLine27.getOptionValues("hi!");
        java.lang.String str32 = commandLine27.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str34 = commandLine27.getOptionValue("arg");
        java.lang.String[] strArray35 = commandLine27.getArgs();
        java.lang.String[] strArray37 = posixParser20.flatten(options26, strArray35, false);
        posixParser20.burstToken("hi!", true);
        org.apache.commons.cli.Options options41 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option43 = org.apache.commons.cli.OptionBuilder.create('4');
        option43.setDescription("");
        org.apache.commons.cli.Options options46 = options41.addOption(option43);
        java.util.Collection collection47 = options41.getOptionGroups();
        org.apache.commons.cli.Options options51 = options41.addOption("", false, "arg");
        java.util.List list52 = options51.getRequiredOptions();
        org.apache.commons.cli.Option option54 = org.apache.commons.cli.OptionBuilder.create("arg");
        org.apache.commons.cli.Options options55 = options51.addOption(option54);
        boolean boolean57 = options51.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        java.util.Collection collection58 = options51.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine59 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray61 = commandLine59.getOptionValues("hi!");
        java.lang.String str64 = commandLine59.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str66 = commandLine59.getOptionValue("arg");
        java.lang.String[] strArray67 = commandLine59.getArgs();
        java.util.Properties properties68 = null;
        org.apache.commons.cli.CommandLine commandLine70 = posixParser20.parse(options51, strArray67, properties68, true);
        commandLine70.addArg("org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        boolean boolean74 = commandLine70.hasOption('=');
        boolean boolean75 = option8.equals((java.lang.Object) '=');
        org.junit.Assert.assertNotNull(option2);
        org.junit.Assert.assertNotNull(options5);
        org.junit.Assert.assertNotNull(collection6);
        org.junit.Assert.assertNotNull(option8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(options14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + char18 + "' != '" + '\000' + "'", char18 == '\000');
        org.junit.Assert.assertNotNull(list19);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNull(strArray29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str32, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(option43);
        org.junit.Assert.assertNotNull(options46);
        org.junit.Assert.assertNotNull(collection47);
        org.junit.Assert.assertNotNull(options51);
        org.junit.Assert.assertNotNull(list52);
        org.junit.Assert.assertNotNull(option54);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(collection58);
        org.junit.Assert.assertNull(strArray61);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str64, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(commandLine70);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0680");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        org.apache.commons.cli.Option[] optionArray1 = commandLine0.getOptions();
        boolean boolean3 = commandLine0.hasOption("[ option: 4  :: null :: [ option: 4  :: null ] ]");
        org.junit.Assert.assertNotNull(optionArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1793");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptionGroups();
        org.apache.commons.cli.Option option61 = org.apache.commons.cli.OptionBuilder.create('4');
        option61.setDescription("");
        option61.setLongOpt("hi!");
        boolean boolean66 = option61.hasArgName();
        org.apache.commons.cli.Options options67 = options53.addOption(option61);
        org.apache.commons.cli.PosixParser posixParser68 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options69 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option71 = org.apache.commons.cli.OptionBuilder.create('4');
        option71.setDescription("");
        org.apache.commons.cli.Options options74 = options69.addOption(option71);
        org.apache.commons.cli.CommandLine commandLine75 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray77 = commandLine75.getOptionValues("hi!");
        java.lang.String str80 = commandLine75.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str82 = commandLine75.getOptionValue("arg");
        java.lang.String[] strArray83 = commandLine75.getArgs();
        java.lang.String[] strArray85 = posixParser68.flatten(options74, strArray83, false);
        org.apache.commons.cli.CommandLine commandLine86 = posixParser0.parse(options53, strArray85);
        java.util.Iterator iterator87 = commandLine86.iterator();
        java.util.List list88 = commandLine86.getArgList();
        java.lang.String[] strArray90 = commandLine86.getOptionValues("[ option: 4  :: null ]");
        java.lang.String[] strArray91 = commandLine86.getArgs();
        java.lang.String[] strArray93 = commandLine86.getOptionValues('a');
        java.util.Iterator iterator94 = commandLine86.iterator();
        java.lang.Object obj96 = commandLine86.getOptionObject("[ option: 4 hi!  ::  ]");
        java.lang.String[] strArray98 = commandLine86.getOptionValues('a');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(option61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(options67);
        org.junit.Assert.assertNotNull(option71);
        org.junit.Assert.assertNotNull(options74);
        org.junit.Assert.assertNull(strArray77);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str80, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(commandLine86);
        org.junit.Assert.assertNotNull(iterator87);
        org.junit.Assert.assertNotNull(list88);
        org.junit.Assert.assertNull(strArray90);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNull(strArray93);
        org.junit.Assert.assertNotNull(iterator94);
        org.junit.Assert.assertNull(obj96);
        org.junit.Assert.assertNull(strArray98);
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1730");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String str5 = commandLine0.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str7 = commandLine0.getOptionValue("arg");
        java.util.Iterator iterator8 = commandLine0.iterator();
        java.lang.String str10 = commandLine0.getOptionValue("[ Options: [ short {4=[ option: 4  :: null ::  ]} ] [ long {} ]");
        java.lang.String str13 = commandLine0.getOptionValue(' ', "[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]");
        java.lang.Object obj15 = commandLine0.getOptionObject("[ Options: [ short {} ] [ long {} ]");
        commandLine0.addArg("[ option:  +ARG :: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ]");
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup21 = options18.getOptionGroup(option20);
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        char char24 = option23.getValueSeparator();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option23.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup30 = options18.getOptionGroup(option23);
        boolean boolean31 = option23.hasArgName();
        java.lang.String str32 = option23.getValue();
        java.lang.String str34 = option23.getValue(0);
        java.lang.String str35 = option23.getValue();
        commandLine0.addOption(option23);
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str5, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]" + "'", str13, "[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]");
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNull(optionGroup21);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertTrue("'" + char24 + "' != '" + '\000' + "'", char24 == '\000');
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertNull(optionGroup30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str35);
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0476");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.CommandLine commandLine5 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray7 = commandLine5.getOptionValues("hi!");
        java.lang.String str10 = commandLine5.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str12 = commandLine5.getOptionValue("arg");
        java.lang.String[] strArray13 = commandLine5.getArgs();
        java.lang.String[] strArray15 = posixParser0.flatten(options1, strArray13, true);
        org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup19 = options16.getOptionGroup(option18);
        org.apache.commons.cli.Option option21 = org.apache.commons.cli.OptionBuilder.create('4');
        char char22 = option21.getValueSeparator();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create('4');
        option24.setDescription("");
        option21.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup28 = options16.getOptionGroup(option21);
        java.util.List list29 = options16.getRequiredOptions();
        boolean boolean31 = options16.hasOption("[ option: 4  :: hi! ]");
        org.apache.commons.cli.PosixParser posixParser32 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options33 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option35 = org.apache.commons.cli.OptionBuilder.create('4');
        option35.setDescription("");
        org.apache.commons.cli.Options options38 = options33.addOption(option35);
        org.apache.commons.cli.CommandLine commandLine39 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray41 = commandLine39.getOptionValues("hi!");
        java.lang.String str44 = commandLine39.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str46 = commandLine39.getOptionValue("arg");
        java.lang.String[] strArray47 = commandLine39.getArgs();
        java.lang.String[] strArray49 = posixParser32.flatten(options38, strArray47, false);
        posixParser32.burstToken("hi!", true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptionGroups();
        org.apache.commons.cli.Options options63 = options53.addOption("", false, "arg");
        java.util.List list64 = options63.getRequiredOptions();
        org.apache.commons.cli.Option option66 = org.apache.commons.cli.OptionBuilder.create("arg");
        org.apache.commons.cli.Options options67 = options63.addOption(option66);
        boolean boolean69 = options63.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        java.util.Collection collection70 = options63.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine71 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray73 = commandLine71.getOptionValues("hi!");
        java.lang.String str76 = commandLine71.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str78 = commandLine71.getOptionValue("arg");
        java.lang.String[] strArray79 = commandLine71.getArgs();
        java.util.Properties properties80 = null;
        org.apache.commons.cli.CommandLine commandLine82 = posixParser32.parse(options63, strArray79, properties80, true);
        org.apache.commons.cli.Option[] optionArray83 = commandLine82.getOptions();
        java.lang.String[] strArray84 = commandLine82.getArgs();
        org.apache.commons.cli.CommandLine commandLine86 = posixParser0.parse(options16, strArray84, false);
        java.lang.String str88 = commandLine86.getOptionValue('=');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNull(strArray7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str10, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(option18);
        org.junit.Assert.assertNull(optionGroup19);
        org.junit.Assert.assertNotNull(option21);
        org.junit.Assert.assertTrue("'" + char22 + "' != '" + '\000' + "'", char22 == '\000');
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup28);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(option35);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNull(strArray41);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str44, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(options63);
        org.junit.Assert.assertNotNull(list64);
        org.junit.Assert.assertNotNull(option66);
        org.junit.Assert.assertNotNull(options67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(collection70);
        org.junit.Assert.assertNull(strArray73);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str76, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(optionArray83);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(commandLine86);
        org.junit.Assert.assertNull(str88);
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0326");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        java.lang.String[] strArray41 = commandLine39.getOptionValues("");
        java.lang.String[] strArray43 = commandLine39.getOptionValues('a');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass44 = strArray43.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNull(strArray41);
        org.junit.Assert.assertNull(strArray43);
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1194");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create('4');
        option1.setDescription("");
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        option6.setDescription("");
        org.apache.commons.cli.Options options9 = options4.addOption(option6);
        boolean boolean10 = option6.hasOptionalArg();
        option1.setType((java.lang.Object) boolean10);
        java.lang.String[] strArray12 = option1.getValues();
        boolean boolean13 = option1.hasArgName();
        option1.setOptionalArg(false);
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option36 = org.apache.commons.cli.OptionBuilder.create('4');
        option36.setDescription("");
        org.apache.commons.cli.Options options39 = options34.addOption(option36);
        java.util.Collection collection40 = options34.getOptionGroups();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("");
        option42.setLongOpt("hi!");
        boolean boolean47 = option42.hasArgName();
        org.apache.commons.cli.Options options48 = options34.addOption(option42);
        org.apache.commons.cli.CommandLine commandLine49 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray51 = commandLine49.getOptionValues("hi!");
        java.lang.String[] strArray52 = commandLine49.getArgs();
        java.util.Properties properties53 = null;
        org.apache.commons.cli.CommandLine commandLine55 = posixParser16.parse(options34, strArray52, properties53, true);
        org.apache.commons.cli.Options options56 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option58 = org.apache.commons.cli.OptionBuilder.create('4');
        option58.setDescription("");
        org.apache.commons.cli.Options options61 = options56.addOption(option58);
        java.util.Collection collection62 = options56.getOptionGroups();
        java.lang.String[] strArray63 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser16.parse(options56, strArray63);
        java.lang.String str67 = commandLine64.getOptionValue("[ option:    :: null ]", "[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]");
        org.apache.commons.cli.Options options68 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option70 = org.apache.commons.cli.OptionBuilder.create('4');
        option70.setDescription("");
        org.apache.commons.cli.Options options73 = options68.addOption(option70);
        java.util.Collection collection74 = options68.getOptions();
        org.apache.commons.cli.Options options75 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option77 = org.apache.commons.cli.OptionBuilder.create('4');
        char char78 = option77.getValueSeparator();
        org.apache.commons.cli.Option option80 = org.apache.commons.cli.OptionBuilder.create('4');
        option80.setDescription("");
        option77.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup84 = options75.getOptionGroup(option77);
        option77.setOptionalArg(true);
        int int87 = option77.getId();
        org.apache.commons.cli.Options options88 = options68.addOption(option77);
        option77.setOptionalArg(false);
        java.lang.String str92 = option77.getValue("[ option: 4  :: null ::  ]");
        commandLine64.addOption(option77);
        option1.setType((java.lang.Object) option77);
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(option36);
        org.junit.Assert.assertNotNull(options39);
        org.junit.Assert.assertNotNull(collection40);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNull(strArray51);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertNotNull(option58);
        org.junit.Assert.assertNotNull(options61);
        org.junit.Assert.assertNotNull(collection62);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]" + "'", str67, "[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]");
        org.junit.Assert.assertNotNull(option70);
        org.junit.Assert.assertNotNull(options73);
        org.junit.Assert.assertNotNull(collection74);
        org.junit.Assert.assertNotNull(option77);
        org.junit.Assert.assertTrue("'" + char78 + "' != '" + '\000' + "'", char78 == '\000');
        org.junit.Assert.assertNotNull(option80);
        org.junit.Assert.assertNull(optionGroup84);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 52 + "'", int87 == 52);
        org.junit.Assert.assertNotNull(options88);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "[ option: 4  :: null ::  ]" + "'", str92, "[ option: 4  :: null ::  ]");
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0847");
        org.apache.commons.cli.Option option3 = new org.apache.commons.cli.Option("4", false, "[ option: 4  ::  ]");
        org.apache.commons.cli.PosixParser posixParser4 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options5 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option7 = org.apache.commons.cli.OptionBuilder.create('4');
        option7.setDescription("");
        org.apache.commons.cli.Options options10 = options5.addOption(option7);
        java.util.Collection collection11 = options5.getOptionGroups();
        org.apache.commons.cli.Options options15 = options5.addOption("", false, "arg");
        org.apache.commons.cli.Option option17 = org.apache.commons.cli.OptionBuilder.create('4');
        boolean boolean18 = option17.hasOptionalArg();
        org.apache.commons.cli.Options options19 = options5.addOption(option17);
        org.apache.commons.cli.PosixParser posixParser20 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup24 = options21.getOptionGroup(option23);
        org.apache.commons.cli.CommandLine commandLine25 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray27 = commandLine25.getOptionValues("hi!");
        java.lang.String str30 = commandLine25.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str32 = commandLine25.getOptionValue("arg");
        java.lang.String[] strArray33 = commandLine25.getArgs();
        java.lang.String[] strArray35 = posixParser20.flatten(options21, strArray33, true);
        java.util.Properties properties36 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser4.parse(options19, strArray35, properties36);
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        java.util.List list44 = options38.helpOptions();
        org.apache.commons.cli.PosixParser posixParser45 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option48 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup49 = options46.getOptionGroup(option48);
        org.apache.commons.cli.Option option51 = org.apache.commons.cli.OptionBuilder.create('4');
        char char52 = option51.getValueSeparator();
        org.apache.commons.cli.Option option54 = org.apache.commons.cli.OptionBuilder.create('4');
        option54.setDescription("");
        option51.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup58 = options46.getOptionGroup(option51);
        boolean boolean60 = options46.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser61 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options62 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option64 = org.apache.commons.cli.OptionBuilder.create('4');
        option64.setDescription("");
        org.apache.commons.cli.Options options67 = options62.addOption(option64);
        org.apache.commons.cli.CommandLine commandLine68 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray70 = commandLine68.getOptionValues("hi!");
        java.lang.String str73 = commandLine68.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str75 = commandLine68.getOptionValue("arg");
        java.lang.String[] strArray76 = commandLine68.getArgs();
        java.lang.String[] strArray78 = posixParser61.flatten(options67, strArray76, false);
        java.util.Properties properties79 = null;
        org.apache.commons.cli.CommandLine commandLine80 = posixParser45.parse(options46, strArray78, properties79);
        org.apache.commons.cli.CommandLine commandLine81 = posixParser4.parse(options38, strArray78);
        java.util.List list82 = options38.helpOptions();
        option3.setType((java.lang.Object) options38);
        org.junit.Assert.assertNotNull(option7);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(collection11);
        org.junit.Assert.assertNotNull(options15);
        org.junit.Assert.assertNotNull(option17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(options19);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNull(optionGroup24);
        org.junit.Assert.assertNull(strArray27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str30, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNotNull(list44);
        org.junit.Assert.assertNotNull(option48);
        org.junit.Assert.assertNull(optionGroup49);
        org.junit.Assert.assertNotNull(option51);
        org.junit.Assert.assertTrue("'" + char52 + "' != '" + '\000' + "'", char52 == '\000');
        org.junit.Assert.assertNotNull(option54);
        org.junit.Assert.assertNull(optionGroup58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(option64);
        org.junit.Assert.assertNotNull(options67);
        org.junit.Assert.assertNull(strArray70);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str73, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(commandLine80);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(list82);
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0463");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue("hi!");
        org.apache.commons.cli.Option option7 = org.apache.commons.cli.OptionBuilder.create(' ');
        commandLine0.addOption(option7);
        java.lang.String[] strArray10 = commandLine0.getOptionValues("[ option: 4  :: null ]");
        java.lang.String str13 = commandLine0.getOptionValue("org.apache.commons.cli.MissingArgumentException: [ option:    :: null ]", "[ option:    :: null ]");
        java.lang.String[] strArray15 = commandLine0.getOptionValues("org.apache.commons.cli.MissingOptionException: hi!");
        commandLine0.addArg("[ option: 4  :: null :: [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ] ]");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(option7);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[ option:    :: null ]" + "'", str13, "[ option:    :: null ]");
        org.junit.Assert.assertNull(strArray15);
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1784");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        posixParser0.burstToken("", false);
        posixParser0.burstToken("", false);
        org.apache.commons.cli.Options options28 = null;
        java.lang.String[] strArray33 = new java.lang.String[] { "[ Options: [ short {=[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  ::  ]} ] [ long {=[ option:    :: [ option: 4  ::  ] ]} ]", "[ option: 4  :: [ option:    :: [ option: 4 hi!  ::  ] ] ]", "org.apache.commons.cli.MissingArgumentException:  ", "[ Options: [ short { =[ option:    +ARG :: org.apache.commons.cli.UnrecognizedOptionException: hi! ], 4=[ option: 4  ::  ]} ] [ long {=[ option:    +ARG :: org.apache.commons.cli.UnrecognizedOptionException: hi! ]} ]" };
        java.util.Properties properties34 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options28, strArray33, properties34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(strArray33);
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1278");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option38 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup39 = options36.getOptionGroup(option38);
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create('4');
        char char42 = option41.getValueSeparator();
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create('4');
        option44.setDescription("");
        option41.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup48 = options36.getOptionGroup(option41);
        org.apache.commons.cli.Option option50 = org.apache.commons.cli.OptionBuilder.create('4');
        boolean boolean51 = option50.isRequired();
        org.apache.commons.cli.Options options52 = options36.addOption(option50);
        java.util.List list53 = options52.getRequiredOptions();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setArgs((int) (short) 100);
        option55.setArgName("[ option: 4  :: null ]");
        java.lang.String str60 = option55.getLongOpt();
        java.lang.String str62 = option55.getValue((int) (short) -1);
        org.apache.commons.cli.CommandLine commandLine63 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray65 = commandLine63.getOptionValues("hi!");
        java.lang.String str68 = commandLine63.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str70 = commandLine63.getOptionValue("arg");
        java.lang.String[] strArray71 = commandLine63.getArgs();
        option55.setType((java.lang.Object) strArray71);
        java.util.Properties properties73 = null;
        org.apache.commons.cli.CommandLine commandLine74 = posixParser0.parse(options52, strArray71, properties73);
        java.lang.String str76 = commandLine74.getOptionValue('a');
        boolean boolean78 = commandLine74.hasOption('#');
        boolean boolean80 = commandLine74.hasOption('\000');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option38);
        org.junit.Assert.assertNull(optionGroup39);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertTrue("'" + char42 + "' != '" + '\000' + "'", char42 == '\000');
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertNull(optionGroup48);
        org.junit.Assert.assertNotNull(option50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(list53);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(strArray65);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str68, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(commandLine74);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1728");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        commandLine0.addArg("org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        java.lang.String str7 = commandLine0.getOptionValue('4');
        java.lang.String str9 = commandLine0.getOptionValue('4');
        java.util.List list10 = commandLine0.getArgList();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(list10);
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1576");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        java.util.Collection collection46 = options40.getOptionGroups();
        org.apache.commons.cli.Options options50 = options40.addOption("", false, "arg");
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup54 = options51.getOptionGroup(option53);
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        char char57 = option56.getValueSeparator();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create('4');
        option59.setDescription("");
        option56.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup63 = options51.getOptionGroup(option56);
        boolean boolean64 = option56.hasArgName();
        org.apache.commons.cli.Options options65 = options40.addOption(option56);
        org.apache.commons.cli.CommandLine commandLine66 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray68 = commandLine66.getOptionValues("hi!");
        java.lang.String str71 = commandLine66.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str73 = commandLine66.getOptionValue("arg");
        java.lang.String[] strArray74 = commandLine66.getArgs();
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options40, strArray74, properties75);
        posixParser0.burstToken("org.apache.commons.cli.ParseException: org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!", false);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertNotNull(options50);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertTrue("'" + char57 + "' != '" + '\000' + "'", char57 == '\000');
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertNull(optionGroup63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(options65);
        org.junit.Assert.assertNull(strArray68);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str71, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine76);
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1311");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        java.util.Collection collection46 = options40.getOptionGroups();
        org.apache.commons.cli.Options options50 = options40.addOption("", false, "arg");
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup54 = options51.getOptionGroup(option53);
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        char char57 = option56.getValueSeparator();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create('4');
        option59.setDescription("");
        option56.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup63 = options51.getOptionGroup(option56);
        boolean boolean64 = option56.hasArgName();
        org.apache.commons.cli.Options options65 = options40.addOption(option56);
        org.apache.commons.cli.CommandLine commandLine66 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray68 = commandLine66.getOptionValues("hi!");
        java.lang.String str71 = commandLine66.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str73 = commandLine66.getOptionValue("arg");
        java.lang.String[] strArray74 = commandLine66.getArgs();
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options40, strArray74, properties75);
        org.apache.commons.cli.Options options77 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option79 = org.apache.commons.cli.OptionBuilder.create('4');
        char char80 = option79.getValueSeparator();
        org.apache.commons.cli.Option option82 = org.apache.commons.cli.OptionBuilder.create('4');
        option82.setDescription("");
        option79.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup86 = options77.getOptionGroup(option79);
        java.lang.String[] strArray89 = new java.lang.String[] { "4", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" };
        java.util.Properties properties90 = null;
        org.apache.commons.cli.CommandLine commandLine91 = posixParser0.parse(options77, strArray89, properties90);
        org.apache.commons.cli.Option option93 = options77.getOption("org.apache.commons.cli.UnrecognizedOptionException: ");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertNotNull(options50);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertTrue("'" + char57 + "' != '" + '\000' + "'", char57 == '\000');
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertNull(optionGroup63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(options65);
        org.junit.Assert.assertNull(strArray68);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str71, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertNotNull(option79);
        org.junit.Assert.assertTrue("'" + char80 + "' != '" + '\000' + "'", char80 == '\000');
        org.junit.Assert.assertNotNull(option82);
        org.junit.Assert.assertNull(optionGroup86);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(commandLine91);
        org.junit.Assert.assertNull(option93);
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0418");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String str5 = commandLine0.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str7 = commandLine0.getOptionValue("arg");
        java.lang.String str9 = commandLine0.getOptionValue('a');
        java.lang.String str12 = commandLine0.getOptionValue("[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        java.lang.Object obj14 = commandLine0.getOptionObject(' ');
        org.apache.commons.cli.Option[] optionArray15 = commandLine0.getOptions();
        java.lang.Object obj17 = commandLine0.getOptionObject('\000');
        boolean boolean19 = commandLine0.hasOption('#');
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str5, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" + "'", str12, "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(optionArray15);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0569");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String str5 = commandLine0.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str7 = commandLine0.getOptionValue("arg");
        java.lang.String str9 = commandLine0.getOptionValue('a');
        java.lang.String str12 = commandLine0.getOptionValue("[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        java.lang.String str14 = commandLine0.getOptionValue("[ option:    :: null ]");
        java.lang.String str17 = commandLine0.getOptionValue("org.apache.commons.cli.MissingOptionException: hi!", "[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str5, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" + "'", str12, "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]" + "'", str17, "[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]");
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0273");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken("hi!", true);
        org.apache.commons.cli.PosixParser posixParser21 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create('4');
        option24.setDescription("");
        org.apache.commons.cli.Options options27 = options22.addOption(option24);
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option31 = org.apache.commons.cli.OptionBuilder.create('4');
        option31.setDescription("");
        org.apache.commons.cli.Options options34 = options29.addOption(option31);
        org.apache.commons.cli.CommandLine commandLine35 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray37 = commandLine35.getOptionValues("hi!");
        java.lang.String[] strArray38 = commandLine35.getArgs();
        java.util.Properties properties39 = null;
        org.apache.commons.cli.CommandLine commandLine40 = posixParser28.parse(options29, strArray38, properties39);
        org.apache.commons.cli.CommandLine commandLine42 = posixParser21.parse(options27, strArray38, false);
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup46 = options43.getOptionGroup(option45);
        org.apache.commons.cli.Option option48 = org.apache.commons.cli.OptionBuilder.create('4');
        char char49 = option48.getValueSeparator();
        org.apache.commons.cli.Option option51 = org.apache.commons.cli.OptionBuilder.create('4');
        option51.setDescription("");
        option48.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup55 = options43.getOptionGroup(option48);
        boolean boolean57 = options43.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser58 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options59 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option61 = org.apache.commons.cli.OptionBuilder.create('4');
        option61.setDescription("");
        org.apache.commons.cli.Options options64 = options59.addOption(option61);
        org.apache.commons.cli.CommandLine commandLine65 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray67 = commandLine65.getOptionValues("hi!");
        java.lang.String[] strArray68 = commandLine65.getArgs();
        java.util.Properties properties69 = null;
        org.apache.commons.cli.CommandLine commandLine70 = posixParser58.parse(options59, strArray68, properties69);
        java.util.Properties properties71 = null;
        org.apache.commons.cli.CommandLine commandLine73 = posixParser21.parse(options43, strArray68, properties71, true);
        java.lang.String str74 = options43.toString();
        org.apache.commons.cli.PosixParser posixParser75 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options76 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option78 = org.apache.commons.cli.OptionBuilder.create('4');
        option78.setDescription("");
        org.apache.commons.cli.Options options81 = options76.addOption(option78);
        java.util.Collection collection82 = options76.getOptions();
        boolean boolean84 = options76.hasOption("arg");
        java.lang.String[] strArray87 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" };
        org.apache.commons.cli.CommandLine commandLine88 = posixParser75.parse(options76, strArray87);
        org.apache.commons.cli.CommandLine commandLine90 = posixParser0.parse(options43, strArray87, false);
        org.apache.commons.cli.Option option91 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.OptionGroup optionGroup92 = options43.getOptionGroup(option91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNotNull(options27);
        org.junit.Assert.assertNotNull(option31);
        org.junit.Assert.assertNotNull(options34);
        org.junit.Assert.assertNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(commandLine40);
        org.junit.Assert.assertNotNull(commandLine42);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNull(optionGroup46);
        org.junit.Assert.assertNotNull(option48);
        org.junit.Assert.assertTrue("'" + char49 + "' != '" + '\000' + "'", char49 == '\000');
        org.junit.Assert.assertNotNull(option51);
        org.junit.Assert.assertNull(optionGroup55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(option61);
        org.junit.Assert.assertNotNull(options64);
        org.junit.Assert.assertNull(strArray67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(commandLine70);
        org.junit.Assert.assertNotNull(commandLine73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str74, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(option78);
        org.junit.Assert.assertNotNull(options81);
        org.junit.Assert.assertNotNull(collection82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(commandLine88);
        org.junit.Assert.assertNotNull(commandLine90);
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0990");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Option[] optionArray40 = commandLine39.getOptions();
        java.lang.String[] strArray42 = commandLine39.getOptionValues('a');
        org.apache.commons.cli.Option[] optionArray43 = commandLine39.getOptions();
        java.lang.String str46 = commandLine39.getOptionValue('=', "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4 org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!  ::  ]} ] [ long {org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!=[ option: 4 org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!  ::  ]} ]");
        java.lang.String str48 = commandLine39.getOptionValue('#');
        boolean boolean50 = commandLine39.hasOption("[ option: 4 arg +ARG :: [ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ] ]");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(optionArray40);
        org.junit.Assert.assertNull(strArray42);
        org.junit.Assert.assertNotNull(optionArray43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4 org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!  ::  ]} ] [ long {org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!=[ option: 4 org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!  ::  ]} ]" + "'", str46, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4 org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!  ::  ]} ] [ long {org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!=[ option: 4 org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!  ::  ]} ]");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0498");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken("hi!", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup24 = options21.getOptionGroup(option23);
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        char char27 = option26.getValueSeparator();
        org.apache.commons.cli.Option option29 = org.apache.commons.cli.OptionBuilder.create('4');
        option29.setDescription("");
        option26.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup33 = options21.getOptionGroup(option26);
        java.lang.String[] strArray34 = null;
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser0.parse(options21, strArray34, properties35);
        posixParser0.burstToken("org.apache.commons.cli.ParseException: [ option:    :: null ]", false);
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create('4');
        boolean boolean42 = option41.hasOptionalArg();
        java.lang.String str44 = option41.getValue("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str45 = option41.getKey();
        java.lang.String str46 = option41.getKey();
        java.lang.String str47 = option41.getArgName();
        java.util.ListIterator listIterator48 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option41, listIterator48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNull(optionGroup24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + char27 + "' != '" + '\000' + "'", char27 == '\000');
        org.junit.Assert.assertNotNull(option29);
        org.junit.Assert.assertNull(optionGroup33);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str44, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "4" + "'", str45, "4");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "4" + "'", str46, "4");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "arg" + "'", str47, "arg");
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1592");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        java.util.Collection collection22 = options6.getOptions();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create('4');
        char char25 = option24.getValueSeparator();
        org.apache.commons.cli.Options options26 = options6.addOption(option24);
        org.apache.commons.cli.Option option28 = org.apache.commons.cli.OptionBuilder.create('4');
        option28.setArgs((int) (short) 100);
        option28.setArgName("[ option: 4  :: null ]");
        java.lang.String str33 = option28.getLongOpt();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option36 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup37 = options34.getOptionGroup(option36);
        org.apache.commons.cli.Option option39 = org.apache.commons.cli.OptionBuilder.create('4');
        org.apache.commons.cli.OptionGroup optionGroup40 = options34.getOptionGroup(option39);
        option28.setType((java.lang.Object) options34);
        org.apache.commons.cli.Options options42 = options6.addOption(option28);
        org.apache.commons.cli.Option option44 = options42.getOption("[ option: 4  :: null ::  ]");
        org.apache.commons.cli.Options options49 = options42.addOption("", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!", false, "org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.util.List list50 = options49.helpOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(collection22);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertTrue("'" + char25 + "' != '" + '\000' + "'", char25 == '\000');
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(option28);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(option36);
        org.junit.Assert.assertNull(optionGroup37);
        org.junit.Assert.assertNotNull(option39);
        org.junit.Assert.assertNull(optionGroup40);
        org.junit.Assert.assertNotNull(options42);
        org.junit.Assert.assertNull(option44);
        org.junit.Assert.assertNotNull(options49);
        org.junit.Assert.assertNotNull(list50);
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0520");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options53, strArray60, true);
        java.lang.String str64 = commandLine62.getOptionValue('\000');
        java.lang.Object obj66 = commandLine62.getOptionObject("[ option:    :: null ]");
        org.apache.commons.cli.Option[] optionArray67 = commandLine62.getOptions();
        java.lang.String[] strArray68 = commandLine62.getArgs();
        java.lang.String[] strArray70 = commandLine62.getOptionValues("[ option: 4  :: null ]");
        java.lang.String str73 = commandLine62.getOptionValue("org.apache.commons.cli.ParseException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!", "org.apache.commons.cli.MissingArgumentException: [ option: 4  ::  ]");
        java.lang.String[] strArray75 = commandLine62.getOptionValues("");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNotNull(optionArray67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNull(strArray70);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "org.apache.commons.cli.MissingArgumentException: [ option: 4  ::  ]" + "'", str73, "org.apache.commons.cli.MissingArgumentException: [ option: 4  ::  ]");
        org.junit.Assert.assertNull(strArray75);
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0725");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        java.util.Collection collection53 = options22.getOptionGroups();
        java.util.List list54 = options22.helpOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(collection53);
        org.junit.Assert.assertNotNull(list54);
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1516");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken("4", false);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup42 = options39.getOptionGroup(option41);
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create('4');
        char char45 = option44.getValueSeparator();
        org.apache.commons.cli.Option option47 = org.apache.commons.cli.OptionBuilder.create('4');
        option47.setDescription("");
        option44.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup51 = options39.getOptionGroup(option44);
        java.util.Collection collection52 = options39.getOptions();
        java.lang.String[] strArray53 = null;
        org.apache.commons.cli.CommandLine commandLine54 = posixParser0.parse(options39, strArray53);
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option57 = org.apache.commons.cli.OptionBuilder.create('4');
        option57.setDescription("");
        org.apache.commons.cli.Options options60 = options55.addOption(option57);
        java.util.List list61 = option57.getValuesList();
        java.lang.String str62 = option57.getOpt();
        org.apache.commons.cli.Option option64 = org.apache.commons.cli.OptionBuilder.create("arg");
        java.lang.String str65 = option64.getOpt();
        boolean boolean66 = option64.isRequired();
        boolean boolean67 = option57.equals((java.lang.Object) option64);
        org.apache.commons.cli.Options options68 = options39.addOption(option57);
        java.lang.String str69 = option57.getOpt();
        char char70 = option57.getValueSeparator();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertTrue("'" + char45 + "' != '" + '\000' + "'", char45 == '\000');
        org.junit.Assert.assertNotNull(option47);
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(collection52);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(list61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "4" + "'", str62, "4");
        org.junit.Assert.assertNotNull(option64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "arg" + "'", str65, "arg");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(options68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "4" + "'", str69, "4");
        org.junit.Assert.assertTrue("'" + char70 + "' != '" + '\000' + "'", char70 == '\000');
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0661");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.util.Iterator iterator3 = commandLine0.iterator();
        java.lang.Object obj5 = commandLine0.getOptionObject('=');
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(iterator3);
        org.junit.Assert.assertNull(obj5);
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0108");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine8 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine8.getOptionValues("hi!");
        java.lang.String str13 = commandLine8.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str15 = commandLine8.getOptionValue("arg");
        java.lang.String[] strArray16 = commandLine8.getArgs();
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser0.parse(options1, strArray16, properties17);
        org.apache.commons.cli.Options options23 = options1.addOption(" ", "", true, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.Option option25 = options1.getOption("org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str13, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNull(option25);
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0802");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create('4');
        option1.setDescription("");
        boolean boolean4 = option1.hasValueSeparator();
        java.lang.String str5 = option1.getValue();
        option1.setArgs((int) '\000');
        boolean boolean8 = option1.hasValueSeparator();
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray11 = commandLine9.getOptionValues("hi!");
        java.util.Iterator iterator12 = commandLine9.iterator();
        java.lang.String[] strArray14 = commandLine9.getOptionValues('a');
        org.apache.commons.cli.Option[] optionArray15 = commandLine9.getOptions();
        option1.setType((java.lang.Object) optionArray15);
        java.lang.String[] strArray17 = option1.getValues();
        boolean boolean18 = option1.hasLongOpt();
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(strArray11);
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertNull(strArray14);
        org.junit.Assert.assertNotNull(optionArray15);
        org.junit.Assert.assertNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1533");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create('4');
        option1.setDescription("");
        boolean boolean4 = option1.hasValueSeparator();
        java.util.List list5 = option1.getValuesList();
        int int6 = option1.getArgs();
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        option1.setType((java.lang.Object) commandLine7);
        org.apache.commons.cli.Option option12 = org.apache.commons.cli.OptionBuilder.create('\000');
        commandLine7.addOption(option12);
        option12.setValueSeparator(' ');
        java.lang.String str16 = option12.getValue();
        java.lang.Object obj17 = option12.getType();
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(list5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(option12);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(obj17);
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0627");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        java.util.List list40 = commandLine39.getArgList();
        java.util.List list41 = commandLine39.getArgList();
        java.lang.String[] strArray43 = commandLine39.getOptionValues('=');
        boolean boolean45 = commandLine39.hasOption(' ');
        boolean boolean47 = commandLine39.hasOption("[ option: 4 [ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ]  :: null ]");
        java.util.List list48 = commandLine39.getArgList();
        java.lang.Object obj50 = commandLine39.getOptionObject("");
        java.lang.String str53 = commandLine39.getOptionValue('\000', "");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(list40);
        org.junit.Assert.assertNotNull(list41);
        org.junit.Assert.assertNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(list48);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0799");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.Object obj2 = commandLine0.getOptionObject('#');
        org.junit.Assert.assertNull(obj2);
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0092");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        java.util.List list40 = commandLine39.getArgList();
        org.apache.commons.cli.OptionBuilder optionBuilder41 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) commandLine39);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(list40);
        org.junit.Assert.assertNotNull(optionBuilder41);
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0196");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        java.lang.String[] strArray37 = commandLine35.getOptionValues("org.apache.commons.cli.MissingOptionException: hi!");
        java.lang.String[] strArray39 = commandLine35.getOptionValues("4");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNull(strArray37);
        org.junit.Assert.assertNull(strArray39);
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1034");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken("hi!", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptionGroups();
        org.apache.commons.cli.Options options31 = options21.addOption("", false, "arg");
        java.util.List list32 = options31.getRequiredOptions();
        org.apache.commons.cli.Option option34 = org.apache.commons.cli.OptionBuilder.create("arg");
        org.apache.commons.cli.Options options35 = options31.addOption(option34);
        boolean boolean37 = options31.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        java.util.Collection collection38 = options31.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine39 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray41 = commandLine39.getOptionValues("hi!");
        java.lang.String str44 = commandLine39.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str46 = commandLine39.getOptionValue("arg");
        java.lang.String[] strArray47 = commandLine39.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine50 = posixParser0.parse(options31, strArray47, properties48, true);
        java.util.List list51 = options31.getRequiredOptions();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options55 = options31.addOption("[ option: 4 [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4 org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!  ::  ]} ] [ long {org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!=[ option: 4 org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!  ::  ]} ]  :: null ]", false, "org.apache.commons.cli.ParseException: org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(options31);
        org.junit.Assert.assertNotNull(list32);
        org.junit.Assert.assertNotNull(option34);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertNull(strArray41);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str44, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertNotNull(list51);
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0205");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine8 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine8.getOptionValues("hi!");
        java.lang.String str13 = commandLine8.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str15 = commandLine8.getOptionValue("arg");
        java.lang.String[] strArray16 = commandLine8.getArgs();
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser0.parse(options1, strArray16, properties17);
        posixParser0.burstToken("[ Options: [ short {4=[ option: 4  :: null ::  ]} ] [ long {} ]", false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create('4');
        option24.setDescription("");
        org.apache.commons.cli.Options options27 = options22.addOption(option24);
        java.util.Collection collection28 = options22.getOptionGroups();
        org.apache.commons.cli.Options options32 = options22.addOption("", false, "arg");
        org.apache.commons.cli.Option option36 = new org.apache.commons.cli.Option("", true, "");
        boolean boolean37 = option36.hasOptionalArg();
        option36.setOptionalArg(false);
        org.apache.commons.cli.OptionGroup optionGroup40 = options32.getOptionGroup(option36);
        option36.setOptionalArg(false);
        java.util.ListIterator listIterator43 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option36, listIterator43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str13, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNotNull(options27);
        org.junit.Assert.assertNotNull(collection28);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(optionGroup40);
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1288");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        org.apache.commons.cli.Options options36 = null;
        org.apache.commons.cli.CommandLine commandLine37 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray39 = commandLine37.getOptionValues("hi!");
        java.lang.String[] strArray40 = commandLine37.getArgs();
        java.lang.String[] strArray42 = posixParser0.flatten(options36, strArray40, false);
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        option45.setDescription("");
        org.apache.commons.cli.Options options48 = options43.addOption(option45);
        java.util.Collection collection49 = options43.getOptionGroups();
        org.apache.commons.cli.Options options53 = options43.addOption("", false, "arg");
        java.util.List list54 = options53.getRequiredOptions();
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create("arg");
        org.apache.commons.cli.Options options57 = options53.addOption(option56);
        java.util.Collection collection58 = options53.getOptionGroups();
        java.lang.String[] strArray59 = null;
        org.apache.commons.cli.CommandLine commandLine60 = posixParser0.parse(options53, strArray59);
        java.lang.Object obj62 = commandLine60.getOptionObject("org.apache.commons.cli.MissingArgumentException: [ option: 4  ::  ]");
        java.lang.String[] strArray64 = commandLine60.getOptionValues("[ option: 4  :: null :: [ option: arg [ option: 4  :: null ] +ARG :: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ] ]");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNull(strArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(collection49);
        org.junit.Assert.assertNotNull(options53);
        org.junit.Assert.assertNotNull(list54);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertNotNull(options57);
        org.junit.Assert.assertNotNull(collection58);
        org.junit.Assert.assertNotNull(commandLine60);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertNull(strArray64);
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1015");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String[] strArray10 = commandLine7.getArgs();
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = posixParser0.parse(options1, strArray10, properties11);
        org.apache.commons.cli.Option[] optionArray13 = commandLine12.getOptions();
        java.lang.String str16 = commandLine12.getOptionValue("", "[ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ]");
        java.util.List list17 = commandLine12.getArgList();
        java.lang.String[] strArray19 = commandLine12.getOptionValues('a');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
        org.junit.Assert.assertNotNull(optionArray13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ]" + "'", str16, "[ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ]");
        org.junit.Assert.assertNotNull(list17);
        org.junit.Assert.assertNull(strArray19);
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1615");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken("hi!", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptions();
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        char char31 = option30.getValueSeparator();
        org.apache.commons.cli.Option option33 = org.apache.commons.cli.OptionBuilder.create('4');
        option33.setDescription("");
        option30.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup37 = options28.getOptionGroup(option30);
        option30.setOptionalArg(true);
        int int40 = option30.getId();
        org.apache.commons.cli.Options options41 = options21.addOption(option30);
        boolean boolean43 = options41.hasOption("");
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        option45.setArgs((int) (short) 100);
        option45.setArgName("[ option: 4  :: null ]");
        java.lang.String str50 = option45.getLongOpt();
        boolean boolean51 = option45.hasLongOpt();
        org.apache.commons.cli.Options options52 = options41.addOption(option45);
        java.util.Collection collection53 = options41.getOptions();
        org.apache.commons.cli.PosixParser posixParser54 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option57 = org.apache.commons.cli.OptionBuilder.create('4');
        option57.setDescription("");
        org.apache.commons.cli.Options options60 = options55.addOption(option57);
        java.util.Collection collection61 = options55.getOptions();
        boolean boolean63 = options55.hasOption("arg");
        java.lang.String[] strArray66 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" };
        org.apache.commons.cli.CommandLine commandLine67 = posixParser54.parse(options55, strArray66);
        java.lang.String[] strArray69 = posixParser0.flatten(options41, strArray66, false);
        java.util.List list70 = options41.helpOptions();
        java.lang.String str71 = options41.toString();
        java.util.List list72 = options41.getRequiredOptions();
        org.apache.commons.cli.Option option74 = org.apache.commons.cli.OptionBuilder.create('4');
        java.lang.String str76 = option74.getValue("arg");
        org.apache.commons.cli.MissingOptionException missingOptionException78 = new org.apache.commons.cli.MissingOptionException("hi!");
        boolean boolean79 = option74.equals((java.lang.Object) "hi!");
        option74.setValueSeparator('=');
        boolean boolean82 = option74.hasValueSeparator();
        option74.setRequired(false);
        org.apache.commons.cli.Options options85 = options41.addOption(option74);
        java.util.List list86 = options41.helpOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertTrue("'" + char31 + "' != '" + '\000' + "'", char31 == '\000');
        org.junit.Assert.assertNotNull(option33);
        org.junit.Assert.assertNull(optionGroup37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(collection53);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(collection61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(list70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]" + "'", str71, "[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]");
        org.junit.Assert.assertNotNull(list72);
        org.junit.Assert.assertNotNull(option74);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "arg" + "'", str76, "arg");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(options85);
        org.junit.Assert.assertNotNull(list86);
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0211");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options53, strArray60, true);
        commandLine62.addArg("[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(commandLine62);
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0766");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create('4');
        option1.setArgs((int) (short) 100);
        option1.setArgName("[ option: 4  :: null ]");
        java.lang.String str6 = option1.getLongOpt();
        boolean boolean7 = option1.hasLongOpt();
        org.apache.commons.cli.PosixParser posixParser8 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option11 = org.apache.commons.cli.OptionBuilder.create('4');
        option11.setDescription("");
        org.apache.commons.cli.Options options14 = options9.addOption(option11);
        org.apache.commons.cli.PosixParser posixParser15 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = org.apache.commons.cli.OptionBuilder.create('4');
        option18.setDescription("");
        org.apache.commons.cli.Options options21 = options16.addOption(option18);
        org.apache.commons.cli.CommandLine commandLine22 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray24 = commandLine22.getOptionValues("hi!");
        java.lang.String[] strArray25 = commandLine22.getArgs();
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser15.parse(options16, strArray25, properties26);
        org.apache.commons.cli.CommandLine commandLine29 = posixParser8.parse(options14, strArray25, false);
        org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option32 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup33 = options30.getOptionGroup(option32);
        org.apache.commons.cli.Option option35 = org.apache.commons.cli.OptionBuilder.create('4');
        char char36 = option35.getValueSeparator();
        org.apache.commons.cli.Option option38 = org.apache.commons.cli.OptionBuilder.create('4');
        option38.setDescription("");
        option35.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup42 = options30.getOptionGroup(option35);
        boolean boolean44 = options30.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser45 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option48 = org.apache.commons.cli.OptionBuilder.create('4');
        option48.setDescription("");
        org.apache.commons.cli.Options options51 = options46.addOption(option48);
        org.apache.commons.cli.CommandLine commandLine52 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray54 = commandLine52.getOptionValues("hi!");
        java.lang.String[] strArray55 = commandLine52.getArgs();
        java.util.Properties properties56 = null;
        org.apache.commons.cli.CommandLine commandLine57 = posixParser45.parse(options46, strArray55, properties56);
        java.util.Properties properties58 = null;
        org.apache.commons.cli.CommandLine commandLine60 = posixParser8.parse(options30, strArray55, properties58, true);
        java.util.Collection collection61 = options30.getOptionGroups();
        org.apache.commons.cli.Options options62 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option64 = org.apache.commons.cli.OptionBuilder.create('4');
        option64.setDescription("");
        org.apache.commons.cli.Options options67 = options62.addOption(option64);
        java.util.Collection collection68 = options62.getOptionGroups();
        org.apache.commons.cli.Options options72 = options62.addOption("", false, "arg");
        org.apache.commons.cli.Options options73 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option75 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup76 = options73.getOptionGroup(option75);
        org.apache.commons.cli.Option option78 = org.apache.commons.cli.OptionBuilder.create('4');
        char char79 = option78.getValueSeparator();
        org.apache.commons.cli.Option option81 = org.apache.commons.cli.OptionBuilder.create('4');
        option81.setDescription("");
        option78.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup85 = options73.getOptionGroup(option78);
        boolean boolean86 = option78.hasArgName();
        org.apache.commons.cli.Options options87 = options62.addOption(option78);
        org.apache.commons.cli.Options options88 = options30.addOption(option78);
        boolean boolean89 = option1.equals((java.lang.Object) options30);
        java.lang.String str91 = option1.getValue((int) 'a');
        option1.setOptionalArg(false);
        boolean boolean94 = option1.isRequired();
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(option11);
        org.junit.Assert.assertNotNull(options14);
        org.junit.Assert.assertNotNull(option18);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(option32);
        org.junit.Assert.assertNull(optionGroup33);
        org.junit.Assert.assertNotNull(option35);
        org.junit.Assert.assertTrue("'" + char36 + "' != '" + '\000' + "'", char36 == '\000');
        org.junit.Assert.assertNotNull(option38);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(option48);
        org.junit.Assert.assertNotNull(options51);
        org.junit.Assert.assertNull(strArray54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(commandLine57);
        org.junit.Assert.assertNotNull(commandLine60);
        org.junit.Assert.assertNotNull(collection61);
        org.junit.Assert.assertNotNull(option64);
        org.junit.Assert.assertNotNull(options67);
        org.junit.Assert.assertNotNull(collection68);
        org.junit.Assert.assertNotNull(options72);
        org.junit.Assert.assertNotNull(option75);
        org.junit.Assert.assertNull(optionGroup76);
        org.junit.Assert.assertNotNull(option78);
        org.junit.Assert.assertTrue("'" + char79 + "' != '" + '\000' + "'", char79 == '\000');
        org.junit.Assert.assertNotNull(option81);
        org.junit.Assert.assertNull(optionGroup85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(options87);
        org.junit.Assert.assertNotNull(options88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNull(str91);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0595");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options53, strArray60, true);
        org.apache.commons.cli.PosixParser posixParser63 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options64 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option66 = org.apache.commons.cli.OptionBuilder.create('4');
        option66.setDescription("");
        org.apache.commons.cli.Options options69 = options64.addOption(option66);
        org.apache.commons.cli.CommandLine commandLine70 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray72 = commandLine70.getOptionValues("hi!");
        java.lang.String[] strArray73 = commandLine70.getArgs();
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine75 = posixParser63.parse(options64, strArray73, properties74);
        java.lang.String[] strArray78 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]", "hi!" };
        java.util.Properties properties79 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser0.parse(options64, strArray78, properties79, true);
        java.util.List list82 = commandLine81.getArgList();
        java.lang.String str84 = commandLine81.getOptionValue("[ option:  +ARG ::  ]");
        java.lang.String str86 = commandLine81.getOptionValue("4");
        java.lang.String[] strArray87 = commandLine81.getArgs();
        java.lang.Class<?> wildcardClass88 = strArray87.getClass();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(option66);
        org.junit.Assert.assertNotNull(options69);
        org.junit.Assert.assertNull(strArray72);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine75);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(list82);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0926");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        java.util.List list40 = commandLine39.getArgList();
        java.util.List list41 = commandLine39.getArgList();
        java.lang.String[] strArray43 = commandLine39.getOptionValues('=');
        java.lang.Object obj45 = commandLine39.getOptionObject("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.util.Iterator iterator46 = commandLine39.iterator();
        java.lang.String str49 = commandLine39.getOptionValue('=', "[ Options: [ short {=[ option:  [ Options: [ short { =[ option:    +ARG :: org.apache.commons.cli.UnrecognizedOptionException: hi! ], 4=[ option: 4  ::  ]} ] [ long {=[ option:    +ARG :: org.apache.commons.cli.UnrecognizedOptionException: hi! ]} ]  :: org.apache.commons.cli.ParseException: [ option: 4  :: null ] ], 4=[ option: 4  :: null ::  ]} ] [ long {[ Options: [ short { =[ option:    +ARG :: org.apache.commons.cli.UnrecognizedOptionException: hi! ], 4=[ option: 4  ::  ]} ] [ long {=[ option:    +ARG :: org.apache.commons.cli.UnrecognizedOptionException: hi! ]} ]=[ option:  [ Options: [ short { =[ option:    +ARG :: org.apache.commons.cli.UnrecognizedOptionException: hi! ], 4=[ option: 4  ::  ]} ] [ long {=[ option:    +ARG :: org.apache.commons.cli.UnrecognizedOptionException: hi! ]} ]  :: org.apache.commons.cli.ParseException: [ option: 4  :: null ] ]} ]");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(list40);
        org.junit.Assert.assertNotNull(list41);
        org.junit.Assert.assertNull(strArray43);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertNotNull(iterator46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[ Options: [ short {=[ option:  [ Options: [ short { =[ option:    +ARG :: org.apache.commons.cli.UnrecognizedOptionException: hi! ], 4=[ option: 4  ::  ]} ] [ long {=[ option:    +ARG :: org.apache.commons.cli.UnrecognizedOptionException: hi! ]} ]  :: org.apache.commons.cli.ParseException: [ option: 4  :: null ] ], 4=[ option: 4  :: null ::  ]} ] [ long {[ Options: [ short { =[ option:    +ARG :: org.apache.commons.cli.UnrecognizedOptionException: hi! ], 4=[ option: 4  ::  ]} ] [ long {=[ option:    +ARG :: org.apache.commons.cli.UnrecognizedOptionException: hi! ]} ]=[ option:  [ Options: [ short { =[ option:    +ARG :: org.apache.commons.cli.UnrecognizedOptionException: hi! ], 4=[ option: 4  ::  ]} ] [ long {=[ option:    +ARG :: org.apache.commons.cli.UnrecognizedOptionException: hi! ]} ]  :: org.apache.commons.cli.ParseException: [ option: 4  :: null ] ]} ]" + "'", str49, "[ Options: [ short {=[ option:  [ Options: [ short { =[ option:    +ARG :: org.apache.commons.cli.UnrecognizedOptionException: hi! ], 4=[ option: 4  ::  ]} ] [ long {=[ option:    +ARG :: org.apache.commons.cli.UnrecognizedOptionException: hi! ]} ]  :: org.apache.commons.cli.ParseException: [ option: 4  :: null ] ], 4=[ option: 4  :: null ::  ]} ] [ long {[ Options: [ short { =[ option:    +ARG :: org.apache.commons.cli.UnrecognizedOptionException: hi! ], 4=[ option: 4  ::  ]} ] [ long {=[ option:    +ARG :: org.apache.commons.cli.UnrecognizedOptionException: hi! ]} ]=[ option:  [ Options: [ short { =[ option:    +ARG :: org.apache.commons.cli.UnrecognizedOptionException: hi! ], 4=[ option: 4  ::  ]} ] [ long {=[ option:    +ARG :: org.apache.commons.cli.UnrecognizedOptionException: hi! ]} ]  :: org.apache.commons.cli.ParseException: [ option: 4  :: null ] ]} ]");
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1333");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptions();
        boolean boolean9 = options1.hasOption("arg");
        java.lang.String[] strArray12 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" };
        org.apache.commons.cli.CommandLine commandLine13 = posixParser0.parse(options1, strArray12);
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = org.apache.commons.cli.OptionBuilder.create('4');
        option16.setDescription("");
        org.apache.commons.cli.Options options19 = options14.addOption(option16);
        java.util.Collection collection20 = options14.getOptionGroups();
        org.apache.commons.cli.Options options24 = options14.addOption("", false, "arg");
        java.util.List list25 = options24.getRequiredOptions();
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create("arg");
        org.apache.commons.cli.Options options28 = options24.addOption(option27);
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setArgs((int) (short) 100);
        option30.setArgName("[ option: 4  :: null ]");
        java.lang.String str35 = option30.getLongOpt();
        java.lang.String str37 = option30.getValue((int) (short) -1);
        org.apache.commons.cli.Options options38 = options28.addOption(option30);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup42 = options39.getOptionGroup(option41);
        boolean boolean43 = option41.hasLongOpt();
        boolean boolean44 = option41.isRequired();
        java.util.List list45 = option41.getValuesList();
        option41.setDescription("[ option: 4  ::  ]");
        org.apache.commons.cli.Options options48 = options38.addOption(option41);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        option52.setDescription("");
        org.apache.commons.cli.Options options55 = options50.addOption(option52);
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray58 = commandLine56.getOptionValues("hi!");
        java.lang.String str61 = commandLine56.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str63 = commandLine56.getOptionValue("arg");
        java.lang.String[] strArray64 = commandLine56.getArgs();
        java.lang.String[] strArray66 = posixParser49.flatten(options55, strArray64, false);
        org.apache.commons.cli.CommandLine commandLine68 = posixParser0.parse(options38, strArray64, true);
        java.util.List list69 = options38.getRequiredOptions();
        java.util.List list70 = options38.helpOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine13);
        org.junit.Assert.assertNotNull(option16);
        org.junit.Assert.assertNotNull(options19);
        org.junit.Assert.assertNotNull(collection20);
        org.junit.Assert.assertNotNull(options24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(list45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNull(strArray58);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str61, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertNotNull(list69);
        org.junit.Assert.assertNotNull(list70);
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1319");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String[] strArray10 = commandLine7.getArgs();
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = posixParser0.parse(options1, strArray10, properties11);
        java.util.List list13 = options1.getRequiredOptions();
        java.util.Collection collection14 = options1.getOptionGroups();
        java.util.List list15 = options1.getRequiredOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNotNull(collection14);
        org.junit.Assert.assertNotNull(list15);
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1762");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String[] strArray10 = commandLine7.getArgs();
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = posixParser0.parse(options1, strArray10, properties11);
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option15 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup16 = options13.getOptionGroup(option15);
        org.apache.commons.cli.Option option18 = org.apache.commons.cli.OptionBuilder.create('4');
        char char19 = option18.getValueSeparator();
        org.apache.commons.cli.Option option21 = org.apache.commons.cli.OptionBuilder.create('4');
        option21.setDescription("");
        option18.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup25 = options13.getOptionGroup(option18);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        boolean boolean28 = option27.isRequired();
        org.apache.commons.cli.Options options29 = options13.addOption(option27);
        org.apache.commons.cli.Option option31 = org.apache.commons.cli.OptionBuilder.create('4');
        char char32 = option31.getValueSeparator();
        org.apache.commons.cli.Option option34 = org.apache.commons.cli.OptionBuilder.create('4');
        option34.setDescription("");
        option31.setType((java.lang.Object) "");
        boolean boolean38 = option31.isRequired();
        java.lang.String str39 = option31.getKey();
        boolean boolean40 = option31.isRequired();
        java.lang.Object obj41 = option31.getType();
        org.apache.commons.cli.Options options42 = options29.addOption(option31);
        java.lang.String[] strArray43 = null;
        org.apache.commons.cli.CommandLine commandLine44 = posixParser0.parse(options42, strArray43);
        java.lang.String str45 = options42.toString();
        org.apache.commons.cli.Options options50 = options42.addOption("", "[ option: 4   :: null ]", true, "[ option: 4 [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  :: false ]} ] [ long {} ]  :: null ]");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
        org.junit.Assert.assertNotNull(option15);
        org.junit.Assert.assertNull(optionGroup16);
        org.junit.Assert.assertNotNull(option18);
        org.junit.Assert.assertTrue("'" + char19 + "' != '" + '\000' + "'", char19 == '\000');
        org.junit.Assert.assertNotNull(option21);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(options29);
        org.junit.Assert.assertNotNull(option31);
        org.junit.Assert.assertTrue("'" + char32 + "' != '" + '\000' + "'", char32 == '\000');
        org.junit.Assert.assertNotNull(option34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "4" + "'", str39, "4");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + obj41 + "' != '" + "" + "'", obj41, "");
        org.junit.Assert.assertNotNull(options42);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[ Options: [ short {4=[ option: 4  :: null ::  ]} ] [ long {} ]" + "'", str45, "[ Options: [ short {4=[ option: 4  :: null ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNotNull(options50);
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0807");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", true);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create('4');
        option41.setDescription("");
        org.apache.commons.cli.Options options44 = options39.addOption(option41);
        java.util.Collection collection45 = options39.getOptionGroups();
        org.apache.commons.cli.Options options49 = options39.addOption("", false, "arg");
        java.util.List list50 = options49.getRequiredOptions();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create("arg");
        org.apache.commons.cli.Options options53 = options49.addOption(option52);
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setArgs((int) (short) 100);
        option55.setArgName("[ option: 4  :: null ]");
        java.lang.String str60 = option55.getLongOpt();
        java.lang.String str62 = option55.getValue((int) (short) -1);
        org.apache.commons.cli.Options options63 = options53.addOption(option55);
        org.apache.commons.cli.Option option65 = options63.getOption("[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
        java.util.List list66 = options63.helpOptions();
        org.apache.commons.cli.CommandLine commandLine67 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray69 = commandLine67.getOptionValues("hi!");
        java.lang.String[] strArray70 = commandLine67.getArgs();
        java.util.Iterator iterator71 = commandLine67.iterator();
        java.lang.Object obj73 = commandLine67.getOptionObject('#');
        java.lang.String str76 = commandLine67.getOptionValue('a', "[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray77 = commandLine67.getArgs();
        java.util.Properties properties78 = null;
        org.apache.commons.cli.CommandLine commandLine79 = posixParser0.parse(options63, strArray77, properties78);
        commandLine79.addArg("[ Options: [ short {=[ option:  +ARG ::  ], 4=[ option: 4  :: null ]} ] [ long {} ]");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertNotNull(collection45);
        org.junit.Assert.assertNotNull(options49);
        org.junit.Assert.assertNotNull(list50);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertNotNull(options53);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(options63);
        org.junit.Assert.assertNull(option65);
        org.junit.Assert.assertNotNull(list66);
        org.junit.Assert.assertNull(strArray69);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(iterator71);
        org.junit.Assert.assertNull(obj73);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str76, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(commandLine79);
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0132");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.PosixParser posixParser53 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        option56.setDescription("");
        org.apache.commons.cli.Options options59 = options54.addOption(option56);
        org.apache.commons.cli.CommandLine commandLine60 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray62 = commandLine60.getOptionValues("hi!");
        java.lang.String str65 = commandLine60.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str67 = commandLine60.getOptionValue("arg");
        java.lang.String[] strArray68 = commandLine60.getArgs();
        java.lang.String[] strArray70 = posixParser53.flatten(options59, strArray68, false);
        org.apache.commons.cli.PosixParser posixParser71 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options72 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option74 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup75 = options72.getOptionGroup(option74);
        org.apache.commons.cli.CommandLine commandLine76 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray78 = commandLine76.getOptionValues("hi!");
        java.lang.String str81 = commandLine76.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str83 = commandLine76.getOptionValue("arg");
        java.lang.String[] strArray84 = commandLine76.getArgs();
        java.lang.String[] strArray86 = posixParser71.flatten(options72, strArray84, true);
        org.apache.commons.cli.CommandLine commandLine88 = posixParser0.parse(options59, strArray84, false);
        java.util.Iterator iterator89 = commandLine88.iterator();
        boolean boolean91 = commandLine88.hasOption("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNull(strArray62);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str65, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(option74);
        org.junit.Assert.assertNull(optionGroup75);
        org.junit.Assert.assertNull(strArray78);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str81, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(commandLine88);
        org.junit.Assert.assertNotNull(iterator89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0496");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptions();
        boolean boolean9 = options1.hasOption("arg");
        java.lang.String[] strArray12 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" };
        org.apache.commons.cli.CommandLine commandLine13 = posixParser0.parse(options1, strArray12);
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = org.apache.commons.cli.OptionBuilder.create('4');
        option16.setDescription("");
        org.apache.commons.cli.Options options19 = options14.addOption(option16);
        java.util.Collection collection20 = options14.getOptionGroups();
        org.apache.commons.cli.Options options24 = options14.addOption("", false, "arg");
        java.util.List list25 = options24.getRequiredOptions();
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create("arg");
        org.apache.commons.cli.Options options28 = options24.addOption(option27);
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setArgs((int) (short) 100);
        option30.setArgName("[ option: 4  :: null ]");
        java.lang.String str35 = option30.getLongOpt();
        java.lang.String str37 = option30.getValue((int) (short) -1);
        org.apache.commons.cli.Options options38 = options28.addOption(option30);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup42 = options39.getOptionGroup(option41);
        boolean boolean43 = option41.hasLongOpt();
        boolean boolean44 = option41.isRequired();
        java.util.List list45 = option41.getValuesList();
        option41.setDescription("[ option: 4  ::  ]");
        org.apache.commons.cli.Options options48 = options38.addOption(option41);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        option52.setDescription("");
        org.apache.commons.cli.Options options55 = options50.addOption(option52);
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray58 = commandLine56.getOptionValues("hi!");
        java.lang.String str61 = commandLine56.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str63 = commandLine56.getOptionValue("arg");
        java.lang.String[] strArray64 = commandLine56.getArgs();
        java.lang.String[] strArray66 = posixParser49.flatten(options55, strArray64, false);
        org.apache.commons.cli.CommandLine commandLine68 = posixParser0.parse(options38, strArray64, true);
        boolean boolean70 = commandLine68.hasOption("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]");
        java.lang.String[] strArray71 = commandLine68.getArgs();
        org.apache.commons.cli.Option option75 = new org.apache.commons.cli.Option("", true, "");
        boolean boolean76 = option75.hasOptionalArg();
        java.lang.String str77 = option75.getOpt();
        option75.setDescription("[ Options: [ short {4=[ option: 4  :: null ::  ]} ] [ long {} ]");
        java.lang.Object obj80 = option75.getType();
        commandLine68.addOption(option75);
        boolean boolean83 = commandLine68.hasOption('4');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine13);
        org.junit.Assert.assertNotNull(option16);
        org.junit.Assert.assertNotNull(options19);
        org.junit.Assert.assertNotNull(collection20);
        org.junit.Assert.assertNotNull(options24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(list45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNull(strArray58);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str61, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNull(obj80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1231");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create('4');
        option1.setDescription("");
        boolean boolean4 = option1.hasValueSeparator();
        java.util.List list5 = option1.getValuesList();
        int int6 = option1.getArgs();
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        option1.setType((java.lang.Object) commandLine7);
        commandLine7.addArg("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.util.List list13 = commandLine7.getArgList();
        org.apache.commons.cli.Option option17 = new org.apache.commons.cli.Option("4", false, "[ option: 4  ::  ]");
        java.lang.String str18 = option17.getKey();
        boolean boolean19 = option17.hasArgName();
        commandLine7.addOption(option17);
        java.util.List list21 = commandLine7.getArgList();
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(list5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "4" + "'", str18, "4");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(list21);
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1741");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken("hi!", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup24 = options21.getOptionGroup(option23);
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        char char27 = option26.getValueSeparator();
        org.apache.commons.cli.Option option29 = org.apache.commons.cli.OptionBuilder.create('4');
        option29.setDescription("");
        option26.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup33 = options21.getOptionGroup(option26);
        java.lang.String[] strArray34 = null;
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser0.parse(options21, strArray34, properties35);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option39 = org.apache.commons.cli.OptionBuilder.create('4');
        option39.setDescription("");
        org.apache.commons.cli.Options options42 = options37.addOption(option39);
        java.util.Collection collection43 = options37.getOptionGroups();
        org.apache.commons.cli.Options options47 = options37.addOption("", false, "arg");
        java.lang.String str48 = options47.toString();
        org.apache.commons.cli.Option option50 = options47.getOption("[ option: 4 hi!  ::  ]");
        org.apache.commons.cli.PosixParser posixParser51 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options52 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option54 = org.apache.commons.cli.OptionBuilder.create('4');
        option54.setDescription("");
        org.apache.commons.cli.Options options57 = options52.addOption(option54);
        org.apache.commons.cli.PosixParser posixParser58 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options59 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option61 = org.apache.commons.cli.OptionBuilder.create('4');
        option61.setDescription("");
        org.apache.commons.cli.Options options64 = options59.addOption(option61);
        org.apache.commons.cli.CommandLine commandLine65 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray67 = commandLine65.getOptionValues("hi!");
        java.lang.String[] strArray68 = commandLine65.getArgs();
        java.util.Properties properties69 = null;
        org.apache.commons.cli.CommandLine commandLine70 = posixParser58.parse(options59, strArray68, properties69);
        org.apache.commons.cli.CommandLine commandLine72 = posixParser51.parse(options57, strArray68, false);
        java.lang.String str74 = commandLine72.getOptionValue("[ option:  +ARG ::  ]");
        java.lang.Object obj76 = commandLine72.getOptionObject("");
        java.util.Iterator iterator77 = commandLine72.iterator();
        java.lang.Object obj79 = commandLine72.getOptionObject("[ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]");
        boolean boolean81 = commandLine72.hasOption("[ option: arg [ option: 4  :: null ] +ARG :: 4 ]");
        java.lang.String[] strArray82 = commandLine72.getArgs();
        java.util.Properties properties83 = null;
        org.apache.commons.cli.CommandLine commandLine84 = posixParser0.parse(options47, strArray82, properties83);
        org.apache.commons.cli.OptionGroup optionGroup85 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options86 = options47.addOptionGroup(optionGroup85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNull(optionGroup24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + char27 + "' != '" + '\000' + "'", char27 == '\000');
        org.junit.Assert.assertNotNull(option29);
        org.junit.Assert.assertNull(optionGroup33);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(option39);
        org.junit.Assert.assertNotNull(options42);
        org.junit.Assert.assertNotNull(collection43);
        org.junit.Assert.assertNotNull(options47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str48, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(option50);
        org.junit.Assert.assertNotNull(option54);
        org.junit.Assert.assertNotNull(options57);
        org.junit.Assert.assertNotNull(option61);
        org.junit.Assert.assertNotNull(options64);
        org.junit.Assert.assertNull(strArray67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(commandLine70);
        org.junit.Assert.assertNotNull(commandLine72);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertNotNull(iterator77);
        org.junit.Assert.assertNull(obj79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(commandLine84);
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1393");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken("4", false);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create('4');
        option41.setDescription("");
        org.apache.commons.cli.Options options44 = options39.addOption(option41);
        java.util.Collection collection45 = options39.getOptionGroups();
        org.apache.commons.cli.Option option47 = org.apache.commons.cli.OptionBuilder.create('4');
        option47.setDescription("");
        option47.setLongOpt("hi!");
        boolean boolean52 = option47.hasArgName();
        org.apache.commons.cli.Options options53 = options39.addOption(option47);
        java.util.List list54 = options53.helpOptions();
        org.apache.commons.cli.Options options59 = options53.addOption("", "[ option: 4  ::  ]", true, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]");
        org.apache.commons.cli.CommandLine commandLine60 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray62 = commandLine60.getOptionValues("hi!");
        java.lang.String[] strArray63 = commandLine60.getArgs();
        java.lang.String str65 = commandLine60.getOptionValue("hi!");
        boolean boolean67 = commandLine60.hasOption("");
        java.lang.String str70 = commandLine60.getOptionValue("[ option: 4  :: null ]", "org.apache.commons.cli.MissingOptionException: hi!");
        java.lang.String[] strArray72 = commandLine60.getOptionValues('4');
        java.lang.String[] strArray73 = commandLine60.getArgs();
        java.lang.Object obj75 = commandLine60.getOptionObject("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String[] strArray76 = commandLine60.getArgs();
        org.apache.commons.cli.CommandLine commandLine77 = posixParser0.parse(options53, strArray76);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertNotNull(collection45);
        org.junit.Assert.assertNotNull(option47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(options53);
        org.junit.Assert.assertNotNull(list54);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNull(strArray62);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "org.apache.commons.cli.MissingOptionException: hi!" + "'", str70, "org.apache.commons.cli.MissingOptionException: hi!");
        org.junit.Assert.assertNull(strArray72);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(commandLine77);
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0518");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create('4');
        char char2 = option1.getValueSeparator();
        boolean boolean3 = option1.hasArg();
        org.apache.commons.cli.PosixParser posixParser4 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options5 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option7 = org.apache.commons.cli.OptionBuilder.create('4');
        option7.setDescription("");
        org.apache.commons.cli.Options options10 = options5.addOption(option7);
        org.apache.commons.cli.PosixParser posixParser11 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option14 = org.apache.commons.cli.OptionBuilder.create('4');
        option14.setDescription("");
        org.apache.commons.cli.Options options17 = options12.addOption(option14);
        org.apache.commons.cli.CommandLine commandLine18 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray20 = commandLine18.getOptionValues("hi!");
        java.lang.String[] strArray21 = commandLine18.getArgs();
        java.util.Properties properties22 = null;
        org.apache.commons.cli.CommandLine commandLine23 = posixParser11.parse(options12, strArray21, properties22);
        org.apache.commons.cli.CommandLine commandLine25 = posixParser4.parse(options10, strArray21, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option28 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup29 = options26.getOptionGroup(option28);
        org.apache.commons.cli.Option option31 = org.apache.commons.cli.OptionBuilder.create('4');
        char char32 = option31.getValueSeparator();
        org.apache.commons.cli.Option option34 = org.apache.commons.cli.OptionBuilder.create('4');
        option34.setDescription("");
        option31.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup38 = options26.getOptionGroup(option31);
        boolean boolean40 = options26.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser41 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options42 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create('4');
        option44.setDescription("");
        org.apache.commons.cli.Options options47 = options42.addOption(option44);
        org.apache.commons.cli.CommandLine commandLine48 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray50 = commandLine48.getOptionValues("hi!");
        java.lang.String[] strArray51 = commandLine48.getArgs();
        java.util.Properties properties52 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser41.parse(options42, strArray51, properties52);
        java.util.Properties properties54 = null;
        org.apache.commons.cli.CommandLine commandLine56 = posixParser4.parse(options26, strArray51, properties54, true);
        org.apache.commons.cli.PosixParser posixParser57 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options58 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option60 = org.apache.commons.cli.OptionBuilder.create('4');
        option60.setDescription("");
        org.apache.commons.cli.Options options63 = options58.addOption(option60);
        org.apache.commons.cli.CommandLine commandLine64 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray66 = commandLine64.getOptionValues("hi!");
        java.lang.String str69 = commandLine64.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str71 = commandLine64.getOptionValue("arg");
        java.lang.String[] strArray72 = commandLine64.getArgs();
        java.lang.String[] strArray74 = posixParser57.flatten(options63, strArray72, false);
        org.apache.commons.cli.PosixParser posixParser75 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options76 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option78 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup79 = options76.getOptionGroup(option78);
        org.apache.commons.cli.CommandLine commandLine80 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray82 = commandLine80.getOptionValues("hi!");
        java.lang.String str85 = commandLine80.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str87 = commandLine80.getOptionValue("arg");
        java.lang.String[] strArray88 = commandLine80.getArgs();
        java.lang.String[] strArray90 = posixParser75.flatten(options76, strArray88, true);
        org.apache.commons.cli.CommandLine commandLine92 = posixParser4.parse(options63, strArray88, false);
        boolean boolean93 = option1.equals((java.lang.Object) commandLine92);
        java.lang.Class<?> wildcardClass94 = commandLine92.getClass();
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertTrue("'" + char2 + "' != '" + '\000' + "'", char2 == '\000');
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(option7);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(option14);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(commandLine23);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(option28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(option31);
        org.junit.Assert.assertTrue("'" + char32 + "' != '" + '\000' + "'", char32 == '\000');
        org.junit.Assert.assertNotNull(option34);
        org.junit.Assert.assertNull(optionGroup38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertNotNull(options47);
        org.junit.Assert.assertNull(strArray50);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(commandLine56);
        org.junit.Assert.assertNotNull(option60);
        org.junit.Assert.assertNotNull(options63);
        org.junit.Assert.assertNull(strArray66);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str69, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(option78);
        org.junit.Assert.assertNull(optionGroup79);
        org.junit.Assert.assertNull(strArray82);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str85, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertNotNull(commandLine92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1328");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        java.util.Collection collection40 = options18.getOptionGroups();
        java.util.List list41 = options18.helpOptions();
        java.lang.String str42 = options18.toString();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(collection40);
        org.junit.Assert.assertNotNull(list41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[ Options: [ short {4=[ option: 4 hi!  ::  ]} ] [ long {hi!=[ option: 4 hi!  ::  ]} ]" + "'", str42, "[ Options: [ short {4=[ option: 4 hi!  ::  ]} ] [ long {hi!=[ option: 4 hi!  ::  ]} ]");
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0437");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        org.apache.commons.cli.Options options36 = null;
        org.apache.commons.cli.CommandLine commandLine37 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray39 = commandLine37.getOptionValues("hi!");
        java.lang.String[] strArray40 = commandLine37.getArgs();
        java.lang.String[] strArray42 = posixParser0.flatten(options36, strArray40, false);
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup46 = options43.getOptionGroup(option45);
        boolean boolean47 = option45.hasLongOpt();
        boolean boolean48 = option45.isRequired();
        java.util.List list49 = option45.getValuesList();
        boolean boolean50 = option45.isRequired();
        java.lang.String str51 = option45.toString();
        org.apache.commons.cli.Options options52 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option54 = org.apache.commons.cli.OptionBuilder.create('4');
        option54.setDescription("");
        org.apache.commons.cli.Options options57 = options52.addOption(option54);
        java.util.Collection collection58 = options52.getOptions();
        org.apache.commons.cli.Options options59 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option61 = org.apache.commons.cli.OptionBuilder.create('4');
        char char62 = option61.getValueSeparator();
        org.apache.commons.cli.Option option64 = org.apache.commons.cli.OptionBuilder.create('4');
        option64.setDescription("");
        option61.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup68 = options59.getOptionGroup(option61);
        option61.setOptionalArg(true);
        int int71 = option61.getId();
        org.apache.commons.cli.Options options72 = options52.addOption(option61);
        option45.setType((java.lang.Object) options72);
        org.apache.commons.cli.CommandLine commandLine74 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray76 = commandLine74.getOptionValues("hi!");
        java.lang.String[] strArray77 = commandLine74.getArgs();
        java.lang.String str79 = commandLine74.getOptionValue("hi!");
        boolean boolean81 = commandLine74.hasOption("");
        java.lang.String str84 = commandLine74.getOptionValue("[ option: 4  :: null ]", "org.apache.commons.cli.MissingOptionException: hi!");
        java.lang.String[] strArray86 = commandLine74.getOptionValues('4');
        java.lang.String[] strArray87 = commandLine74.getArgs();
        java.lang.Object obj89 = commandLine74.getOptionObject("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String[] strArray90 = commandLine74.getArgs();
        java.util.Properties properties91 = null;
        org.apache.commons.cli.CommandLine commandLine92 = posixParser0.parse(options72, strArray90, properties91);
        posixParser0.burstToken("hi!", false);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNull(strArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNull(optionGroup46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(list49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[ option:    :: null ]" + "'", str51, "[ option:    :: null ]");
        org.junit.Assert.assertNotNull(option54);
        org.junit.Assert.assertNotNull(options57);
        org.junit.Assert.assertNotNull(collection58);
        org.junit.Assert.assertNotNull(option61);
        org.junit.Assert.assertTrue("'" + char62 + "' != '" + '\000' + "'", char62 == '\000');
        org.junit.Assert.assertNotNull(option64);
        org.junit.Assert.assertNull(optionGroup68);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 52 + "'", int71 == 52);
        org.junit.Assert.assertNotNull(options72);
        org.junit.Assert.assertNull(strArray76);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "org.apache.commons.cli.MissingOptionException: hi!" + "'", str84, "org.apache.commons.cli.MissingOptionException: hi!");
        org.junit.Assert.assertNull(strArray86);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNull(obj89);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertNotNull(commandLine92);
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1511");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken("hi!", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptionGroups();
        org.apache.commons.cli.Options options31 = options21.addOption("", false, "arg");
        java.util.List list32 = options31.getRequiredOptions();
        org.apache.commons.cli.Option option34 = org.apache.commons.cli.OptionBuilder.create("arg");
        org.apache.commons.cli.Options options35 = options31.addOption(option34);
        boolean boolean37 = options31.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        java.util.Collection collection38 = options31.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine39 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray41 = commandLine39.getOptionValues("hi!");
        java.lang.String str44 = commandLine39.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str46 = commandLine39.getOptionValue("arg");
        java.lang.String[] strArray47 = commandLine39.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine50 = posixParser0.parse(options31, strArray47, properties48, true);
        org.apache.commons.cli.Option option52 = options31.getOption(" ");
        java.util.List list53 = options31.helpOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(options31);
        org.junit.Assert.assertNotNull(list32);
        org.junit.Assert.assertNotNull(option34);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertNull(strArray41);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str44, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertNull(option52);
        org.junit.Assert.assertNotNull(list53);
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1768");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Option[] optionArray40 = commandLine39.getOptions();
        java.util.Iterator iterator41 = commandLine39.iterator();
        java.lang.String str43 = commandLine39.getOptionValue('a');
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        char char46 = option45.getValueSeparator();
        boolean boolean47 = option45.hasArg();
        boolean boolean48 = option45.hasOptionalArg();
        java.lang.Object obj49 = option45.getType();
        option45.setValueSeparator('#');
        java.lang.String str53 = option45.getValue("[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]");
        int int54 = option45.getId();
        org.apache.commons.cli.OptionBuilder optionBuilder55 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) option45);
        commandLine39.addOption(option45);
        java.lang.Object obj58 = commandLine39.getOptionObject("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {4=[ option: 4  ::  :: [ option: arg [ option: 4  :: null ] +ARG :: 4 ] ]} ] [ long {} ]");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(optionArray40);
        org.junit.Assert.assertNotNull(iterator41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertTrue("'" + char46 + "' != '" + '\000' + "'", char46 == '\000');
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]" + "'", str53, "[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 52 + "'", int54 == 52);
        org.junit.Assert.assertNotNull(optionBuilder55);
        org.junit.Assert.assertNull(obj58);
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1210");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String[] strArray10 = commandLine7.getArgs();
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = posixParser0.parse(options1, strArray10, properties11);
        posixParser0.burstToken("[ option:  +ARG :: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ]", false);
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        posixParser16.burstToken("hi!", true);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option39 = org.apache.commons.cli.OptionBuilder.create('4');
        option39.setDescription("");
        org.apache.commons.cli.Options options42 = options37.addOption(option39);
        java.util.Collection collection43 = options37.getOptions();
        org.apache.commons.cli.Options options44 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option46 = org.apache.commons.cli.OptionBuilder.create('4');
        char char47 = option46.getValueSeparator();
        org.apache.commons.cli.Option option49 = org.apache.commons.cli.OptionBuilder.create('4');
        option49.setDescription("");
        option46.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup53 = options44.getOptionGroup(option46);
        option46.setOptionalArg(true);
        int int56 = option46.getId();
        org.apache.commons.cli.Options options57 = options37.addOption(option46);
        boolean boolean59 = options57.hasOption("");
        org.apache.commons.cli.Option option61 = org.apache.commons.cli.OptionBuilder.create('4');
        option61.setArgs((int) (short) 100);
        option61.setArgName("[ option: 4  :: null ]");
        java.lang.String str66 = option61.getLongOpt();
        boolean boolean67 = option61.hasLongOpt();
        org.apache.commons.cli.Options options68 = options57.addOption(option61);
        java.util.Collection collection69 = options57.getOptions();
        org.apache.commons.cli.PosixParser posixParser70 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options71 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option73 = org.apache.commons.cli.OptionBuilder.create('4');
        option73.setDescription("");
        org.apache.commons.cli.Options options76 = options71.addOption(option73);
        java.util.Collection collection77 = options71.getOptions();
        boolean boolean79 = options71.hasOption("arg");
        java.lang.String[] strArray82 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" };
        org.apache.commons.cli.CommandLine commandLine83 = posixParser70.parse(options71, strArray82);
        java.lang.String[] strArray85 = posixParser16.flatten(options57, strArray82, false);
        java.util.List list86 = options57.helpOptions();
        java.lang.String str87 = options57.toString();
        org.apache.commons.cli.Option option91 = new org.apache.commons.cli.Option("4", false, "[ option: 4  ::  ]");
        java.lang.String str92 = option91.getDescription();
        org.apache.commons.cli.Options options93 = options57.addOption(option91);
        org.apache.commons.cli.Option option95 = options57.getOption("[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str96 = options57.toString();
        java.lang.String[] strArray97 = null;
        org.apache.commons.cli.CommandLine commandLine98 = posixParser0.parse(options57, strArray97);
        java.util.List list99 = options57.getRequiredOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(option39);
        org.junit.Assert.assertNotNull(options42);
        org.junit.Assert.assertNotNull(collection43);
        org.junit.Assert.assertNotNull(option46);
        org.junit.Assert.assertTrue("'" + char47 + "' != '" + '\000' + "'", char47 == '\000');
        org.junit.Assert.assertNotNull(option49);
        org.junit.Assert.assertNull(optionGroup53);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 52 + "'", int56 == 52);
        org.junit.Assert.assertNotNull(options57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(option61);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(options68);
        org.junit.Assert.assertNotNull(collection69);
        org.junit.Assert.assertNotNull(option73);
        org.junit.Assert.assertNotNull(options76);
        org.junit.Assert.assertNotNull(collection77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(commandLine83);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(list86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]" + "'", str87, "[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "[ option: 4  ::  ]" + "'", str92, "[ option: 4  ::  ]");
        org.junit.Assert.assertNotNull(options93);
        org.junit.Assert.assertNull(option95);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "[ Options: [ short {4=[ option: 4  :: [ option: 4  ::  ] ]} ] [ long {} ]" + "'", str96, "[ Options: [ short {4=[ option: 4  :: [ option: 4  ::  ] ]} ] [ long {} ]");
        org.junit.Assert.assertNotNull(commandLine98);
        org.junit.Assert.assertNotNull(list99);
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0369");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option38 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup39 = options36.getOptionGroup(option38);
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create('4');
        char char42 = option41.getValueSeparator();
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create('4');
        option44.setDescription("");
        option41.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup48 = options36.getOptionGroup(option41);
        org.apache.commons.cli.Option option50 = org.apache.commons.cli.OptionBuilder.create('4');
        boolean boolean51 = option50.isRequired();
        org.apache.commons.cli.Options options52 = options36.addOption(option50);
        java.util.List list53 = options52.getRequiredOptions();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setArgs((int) (short) 100);
        option55.setArgName("[ option: 4  :: null ]");
        java.lang.String str60 = option55.getLongOpt();
        java.lang.String str62 = option55.getValue((int) (short) -1);
        org.apache.commons.cli.CommandLine commandLine63 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray65 = commandLine63.getOptionValues("hi!");
        java.lang.String str68 = commandLine63.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str70 = commandLine63.getOptionValue("arg");
        java.lang.String[] strArray71 = commandLine63.getArgs();
        option55.setType((java.lang.Object) strArray71);
        java.util.Properties properties73 = null;
        org.apache.commons.cli.CommandLine commandLine74 = posixParser0.parse(options52, strArray71, properties73);
        posixParser0.burstToken("[ Options: [ short {} ] [ long {} ]", false);
        posixParser0.burstToken("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ::  ]} ] [ long {} ]", false);
        posixParser0.burstToken("a", true);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option38);
        org.junit.Assert.assertNull(optionGroup39);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertTrue("'" + char42 + "' != '" + '\000' + "'", char42 == '\000');
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertNull(optionGroup48);
        org.junit.Assert.assertNotNull(option50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(list53);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(strArray65);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str68, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(commandLine74);
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0464");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.Object obj2 = commandLine0.getOptionObject("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4 org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!  ::  ]} ] [ long {org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!=[ option: 4 org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!  ::  ]} ]");
        java.util.Iterator iterator3 = commandLine0.iterator();
        java.lang.String[] strArray5 = commandLine0.getOptionValues("[ option:   [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]  :: null ]");
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNotNull(iterator3);
        org.junit.Assert.assertNull(strArray5);
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1085");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        java.util.List list40 = commandLine39.getArgList();
        java.util.List list41 = commandLine39.getArgList();
        java.lang.String[] strArray43 = commandLine39.getOptionValues('=');
        java.lang.String str45 = commandLine39.getOptionValue("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]");
        java.util.List list46 = commandLine39.getArgList();
        boolean boolean48 = commandLine39.hasOption("org.apache.commons.cli.MissingOptionException: [ option: 4  :: null ]");
        java.lang.Object obj50 = commandLine39.getOptionObject("[ option: 4  :: hi! ]");
        org.apache.commons.cli.Option[] optionArray51 = commandLine39.getOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(list40);
        org.junit.Assert.assertNotNull(list41);
        org.junit.Assert.assertNull(strArray43);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(list46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNotNull(optionArray51);
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0339");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String str5 = commandLine0.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str7 = commandLine0.getOptionValue("arg");
        java.lang.Object obj9 = commandLine0.getOptionObject('a');
        java.lang.String[] strArray11 = commandLine0.getOptionValues('=');
        java.lang.String[] strArray12 = commandLine0.getArgs();
        java.lang.String[] strArray13 = commandLine0.getArgs();
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]", false, "hi!");
        commandLine0.addOption(option18);
        java.lang.String str21 = option18.getValue("[ Options: [ short {4=[ option: 4  ::  :: [ option: arg [ option: 4  :: null ] +ARG :: 4 ] ]} ] [ long {} ]");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str5, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[ Options: [ short {4=[ option: 4  ::  :: [ option: arg [ option: 4  :: null ] +ARG :: 4 ] ]} ] [ long {} ]" + "'", str21, "[ Options: [ short {4=[ option: 4  ::  :: [ option: arg [ option: 4  :: null ] +ARG :: 4 ] ]} ] [ long {} ]");
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0329");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String[] strArray10 = commandLine7.getArgs();
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = posixParser0.parse(options1, strArray10, properties11);
        org.apache.commons.cli.Option option14 = org.apache.commons.cli.OptionBuilder.create('4');
        option14.setDescription("");
        boolean boolean17 = option14.isRequired();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        char char20 = option19.getValueSeparator();
        java.lang.String str21 = option19.getDescription();
        boolean boolean22 = option14.equals((java.lang.Object) option19);
        java.lang.String str23 = option14.toString();
        boolean boolean24 = option14.isRequired();
        option14.setRequired(false);
        java.util.ListIterator listIterator27 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option14, listIterator27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
        org.junit.Assert.assertNotNull(option14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertTrue("'" + char20 + "' != '" + '\000' + "'", char20 == '\000');
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option: 4  ::  ]" + "'", str23, "[ option: 4  ::  ]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1053");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.Class<?> wildcardClass3 = commandLine0.getClass();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0679");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue("hi!");
        boolean boolean7 = commandLine0.hasOption("");
        commandLine0.addArg("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        boolean boolean11 = commandLine0.hasOption("[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str13 = commandLine0.getOptionValue("[ option: 4  :: null ::  ]");
        commandLine0.addArg("[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]");
        boolean boolean17 = commandLine0.hasOption("[ option: 4 arg  :: null ]");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0623");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken("hi!", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.PosixParser posixParser22 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup26 = options23.getOptionGroup(option25);
        org.apache.commons.cli.Option option28 = org.apache.commons.cli.OptionBuilder.create('4');
        char char29 = option28.getValueSeparator();
        org.apache.commons.cli.Option option31 = org.apache.commons.cli.OptionBuilder.create('4');
        option31.setDescription("");
        option28.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup35 = options23.getOptionGroup(option28);
        boolean boolean37 = options23.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser38 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create('4');
        option41.setDescription("");
        org.apache.commons.cli.Options options44 = options39.addOption(option41);
        org.apache.commons.cli.CommandLine commandLine45 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray47 = commandLine45.getOptionValues("hi!");
        java.lang.String str50 = commandLine45.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str52 = commandLine45.getOptionValue("arg");
        java.lang.String[] strArray53 = commandLine45.getArgs();
        java.lang.String[] strArray55 = posixParser38.flatten(options44, strArray53, false);
        java.util.Properties properties56 = null;
        org.apache.commons.cli.CommandLine commandLine57 = posixParser22.parse(options23, strArray55, properties56);
        org.apache.commons.cli.Options options58 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option60 = org.apache.commons.cli.OptionBuilder.create('4');
        option60.setDescription("");
        org.apache.commons.cli.Options options63 = options58.addOption(option60);
        java.util.Collection collection64 = options58.getOptionGroups();
        org.apache.commons.cli.Options options68 = options58.addOption("", false, "arg");
        org.apache.commons.cli.Options options69 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option71 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup72 = options69.getOptionGroup(option71);
        org.apache.commons.cli.Option option74 = org.apache.commons.cli.OptionBuilder.create('4');
        char char75 = option74.getValueSeparator();
        org.apache.commons.cli.Option option77 = org.apache.commons.cli.OptionBuilder.create('4');
        option77.setDescription("");
        option74.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup81 = options69.getOptionGroup(option74);
        boolean boolean82 = option74.hasArgName();
        org.apache.commons.cli.Options options83 = options58.addOption(option74);
        java.util.List list84 = options58.helpOptions();
        org.apache.commons.cli.CommandLine commandLine85 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray87 = commandLine85.getOptionValues("hi!");
        java.lang.String str90 = commandLine85.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str92 = commandLine85.getOptionValue("arg");
        java.lang.String[] strArray93 = commandLine85.getArgs();
        java.lang.String[] strArray95 = posixParser22.flatten(options58, strArray93, false);
        java.util.Properties properties96 = null;
        org.apache.commons.cli.CommandLine commandLine98 = posixParser0.parse(options21, strArray95, properties96, true);
        java.lang.String str99 = options21.toString();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertNull(optionGroup26);
        org.junit.Assert.assertNotNull(option28);
        org.junit.Assert.assertTrue("'" + char29 + "' != '" + '\000' + "'", char29 == '\000');
        org.junit.Assert.assertNotNull(option31);
        org.junit.Assert.assertNull(optionGroup35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertNull(strArray47);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str50, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(commandLine57);
        org.junit.Assert.assertNotNull(option60);
        org.junit.Assert.assertNotNull(options63);
        org.junit.Assert.assertNotNull(collection64);
        org.junit.Assert.assertNotNull(options68);
        org.junit.Assert.assertNotNull(option71);
        org.junit.Assert.assertNull(optionGroup72);
        org.junit.Assert.assertNotNull(option74);
        org.junit.Assert.assertTrue("'" + char75 + "' != '" + '\000' + "'", char75 == '\000');
        org.junit.Assert.assertNotNull(option77);
        org.junit.Assert.assertNull(optionGroup81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(options83);
        org.junit.Assert.assertNotNull(list84);
        org.junit.Assert.assertNull(strArray87);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str90, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertNotNull(strArray95);
        org.junit.Assert.assertNotNull(commandLine98);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str99, "[ Options: [ short {} ] [ long {} ]");
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0737");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option2 = org.apache.commons.cli.OptionBuilder.create('4');
        option2.setDescription("");
        org.apache.commons.cli.Options options5 = options0.addOption(option2);
        java.util.Collection collection6 = options0.getOptionGroups();
        org.apache.commons.cli.Options options10 = options0.addOption("", false, "arg");
        java.lang.String str11 = options10.toString();
        java.util.Collection collection12 = options10.getOptionGroups();
        org.apache.commons.cli.Option option14 = options10.getOption("");
        org.apache.commons.cli.PosixParser posixParser15 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup19 = options16.getOptionGroup(option18);
        org.apache.commons.cli.Option option21 = org.apache.commons.cli.OptionBuilder.create('4');
        char char22 = option21.getValueSeparator();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create('4');
        option24.setDescription("");
        option21.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup28 = options16.getOptionGroup(option21);
        boolean boolean30 = options16.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser31 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option34 = org.apache.commons.cli.OptionBuilder.create('4');
        option34.setDescription("");
        org.apache.commons.cli.Options options37 = options32.addOption(option34);
        org.apache.commons.cli.CommandLine commandLine38 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray40 = commandLine38.getOptionValues("hi!");
        java.lang.String str43 = commandLine38.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str45 = commandLine38.getOptionValue("arg");
        java.lang.String[] strArray46 = commandLine38.getArgs();
        java.lang.String[] strArray48 = posixParser31.flatten(options37, strArray46, false);
        java.util.Properties properties49 = null;
        org.apache.commons.cli.CommandLine commandLine50 = posixParser15.parse(options16, strArray48, properties49);
        posixParser15.burstToken("4", false);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup57 = options54.getOptionGroup(option56);
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create('4');
        char char60 = option59.getValueSeparator();
        org.apache.commons.cli.Option option62 = org.apache.commons.cli.OptionBuilder.create('4');
        option62.setDescription("");
        option59.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup66 = options54.getOptionGroup(option59);
        java.util.Collection collection67 = options54.getOptions();
        java.lang.String[] strArray68 = null;
        org.apache.commons.cli.CommandLine commandLine69 = posixParser15.parse(options54, strArray68);
        org.apache.commons.cli.Options options70 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option72 = org.apache.commons.cli.OptionBuilder.create('4');
        option72.setDescription("");
        org.apache.commons.cli.Options options75 = options70.addOption(option72);
        java.util.List list76 = option72.getValuesList();
        java.lang.String str77 = option72.getOpt();
        org.apache.commons.cli.Option option79 = org.apache.commons.cli.OptionBuilder.create("arg");
        java.lang.String str80 = option79.getOpt();
        boolean boolean81 = option79.isRequired();
        boolean boolean82 = option72.equals((java.lang.Object) option79);
        org.apache.commons.cli.Options options83 = options54.addOption(option72);
        java.lang.String str84 = option72.getDescription();
        option14.setType((java.lang.Object) str84);
        org.junit.Assert.assertNotNull(option2);
        org.junit.Assert.assertNotNull(options5);
        org.junit.Assert.assertNotNull(collection6);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str11, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNotNull(collection12);
        org.junit.Assert.assertNotNull(option14);
        org.junit.Assert.assertNotNull(option18);
        org.junit.Assert.assertNull(optionGroup19);
        org.junit.Assert.assertNotNull(option21);
        org.junit.Assert.assertTrue("'" + char22 + "' != '" + '\000' + "'", char22 == '\000');
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(option34);
        org.junit.Assert.assertNotNull(options37);
        org.junit.Assert.assertNull(strArray40);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str43, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertNull(optionGroup57);
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertTrue("'" + char60 + "' != '" + '\000' + "'", char60 == '\000');
        org.junit.Assert.assertNotNull(option62);
        org.junit.Assert.assertNull(optionGroup66);
        org.junit.Assert.assertNotNull(collection67);
        org.junit.Assert.assertNotNull(commandLine69);
        org.junit.Assert.assertNotNull(option72);
        org.junit.Assert.assertNotNull(options75);
        org.junit.Assert.assertNotNull(list76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "4" + "'", str77, "4");
        org.junit.Assert.assertNotNull(option79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "arg" + "'", str80, "arg");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(options83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1510");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.CommandLine commandLine5 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray7 = commandLine5.getOptionValues("hi!");
        java.lang.String str10 = commandLine5.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str12 = commandLine5.getOptionValue("arg");
        java.lang.String[] strArray13 = commandLine5.getArgs();
        java.lang.String[] strArray15 = posixParser0.flatten(options1, strArray13, true);
        posixParser0.burstToken("org.apache.commons.cli.ParseException: [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]", false);
        posixParser0.burstToken("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!", true);
        org.apache.commons.cli.PosixParser posixParser22 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create('4');
        option25.setDescription("");
        org.apache.commons.cli.Options options28 = options23.addOption(option25);
        org.apache.commons.cli.CommandLine commandLine29 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray31 = commandLine29.getOptionValues("hi!");
        java.lang.String[] strArray32 = commandLine29.getArgs();
        java.util.Properties properties33 = null;
        org.apache.commons.cli.CommandLine commandLine34 = posixParser22.parse(options23, strArray32, properties33);
        java.util.Collection collection35 = options23.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine36 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray38 = commandLine36.getOptionValues("hi!");
        java.lang.String str41 = commandLine36.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        commandLine36.addArg("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]");
        java.lang.String[] strArray45 = commandLine36.getOptionValues('4');
        boolean boolean47 = commandLine36.hasOption(' ');
        java.lang.String[] strArray48 = commandLine36.getArgs();
        org.apache.commons.cli.CommandLine commandLine50 = posixParser0.parse(options23, strArray48, false);
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = org.apache.commons.cli.OptionBuilder.create('4');
        option53.setDescription("");
        org.apache.commons.cli.Options options56 = options51.addOption(option53);
        java.util.List list57 = options51.helpOptions();
        org.apache.commons.cli.Options options62 = options51.addOption("arg", "org.apache.commons.cli.UnrecognizedOptionException: hi!", false, "");
        org.apache.commons.cli.Options options63 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option65 = org.apache.commons.cli.OptionBuilder.create('4');
        option65.setDescription("");
        org.apache.commons.cli.Options options68 = options63.addOption(option65);
        java.util.Collection collection69 = options63.getOptionGroups();
        org.apache.commons.cli.Options options73 = options63.addOption("", false, "arg");
        org.apache.commons.cli.Option option75 = options63.getOption("");
        org.apache.commons.cli.OptionGroup optionGroup76 = options62.getOptionGroup(option75);
        org.apache.commons.cli.Option option78 = org.apache.commons.cli.OptionBuilder.create('4');
        option78.setArgs((int) (short) 100);
        option78.setArgName("[ option: 4  :: null ]");
        java.lang.String str83 = option78.getLongOpt();
        java.lang.String str85 = option78.getValue((int) (short) -1);
        org.apache.commons.cli.CommandLine commandLine86 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray88 = commandLine86.getOptionValues("hi!");
        java.lang.String str91 = commandLine86.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str93 = commandLine86.getOptionValue("arg");
        java.lang.String[] strArray94 = commandLine86.getArgs();
        option78.setType((java.lang.Object) strArray94);
        java.util.Properties properties96 = null;
        org.apache.commons.cli.CommandLine commandLine98 = posixParser0.parse(options62, strArray94, properties96, false);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNull(strArray7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str10, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(collection35);
        org.junit.Assert.assertNull(strArray38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str41, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNotNull(options56);
        org.junit.Assert.assertNotNull(list57);
        org.junit.Assert.assertNotNull(options62);
        org.junit.Assert.assertNotNull(option65);
        org.junit.Assert.assertNotNull(options68);
        org.junit.Assert.assertNotNull(collection69);
        org.junit.Assert.assertNotNull(options73);
        org.junit.Assert.assertNotNull(option75);
        org.junit.Assert.assertNull(optionGroup76);
        org.junit.Assert.assertNotNull(option78);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertNull(strArray88);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str91, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str93);
        org.junit.Assert.assertNotNull(strArray94);
        org.junit.Assert.assertNotNull(commandLine98);
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0119");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptionGroups();
        org.apache.commons.cli.Option option61 = org.apache.commons.cli.OptionBuilder.create('4');
        option61.setDescription("");
        option61.setLongOpt("hi!");
        boolean boolean66 = option61.hasArgName();
        org.apache.commons.cli.Options options67 = options53.addOption(option61);
        org.apache.commons.cli.PosixParser posixParser68 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options69 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option71 = org.apache.commons.cli.OptionBuilder.create('4');
        option71.setDescription("");
        org.apache.commons.cli.Options options74 = options69.addOption(option71);
        org.apache.commons.cli.CommandLine commandLine75 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray77 = commandLine75.getOptionValues("hi!");
        java.lang.String str80 = commandLine75.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str82 = commandLine75.getOptionValue("arg");
        java.lang.String[] strArray83 = commandLine75.getArgs();
        java.lang.String[] strArray85 = posixParser68.flatten(options74, strArray83, false);
        org.apache.commons.cli.CommandLine commandLine86 = posixParser0.parse(options53, strArray85);
        java.lang.Object obj88 = commandLine86.getOptionObject('a');
        java.lang.String[] strArray89 = commandLine86.getArgs();
        org.apache.commons.cli.Option[] optionArray90 = commandLine86.getOptions();
        java.util.Iterator iterator91 = commandLine86.iterator();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(option61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(options67);
        org.junit.Assert.assertNotNull(option71);
        org.junit.Assert.assertNotNull(options74);
        org.junit.Assert.assertNull(strArray77);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str80, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(commandLine86);
        org.junit.Assert.assertNull(obj88);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(optionArray90);
        org.junit.Assert.assertNotNull(iterator91);
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0397");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.util.Iterator iterator1 = commandLine0.iterator();
        java.lang.String str3 = commandLine0.getOptionValue('\000');
        org.junit.Assert.assertNotNull(iterator1);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0915");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue("hi!");
        boolean boolean7 = commandLine0.hasOption("");
        commandLine0.addArg("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        boolean boolean11 = commandLine0.hasOption("[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create('4');
        option13.setDescription("");
        org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = org.apache.commons.cli.OptionBuilder.create('4');
        option18.setDescription("");
        org.apache.commons.cli.Options options21 = options16.addOption(option18);
        boolean boolean22 = option13.equals((java.lang.Object) option18);
        option18.setDescription("[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
        commandLine0.addOption(option18);
        java.lang.String str26 = option18.getDescription();
        java.lang.String str27 = option18.getLongOpt();
        java.lang.String str28 = option18.getKey();
        java.lang.Object obj29 = option18.getType();
        java.lang.String str30 = option18.getOpt();
        boolean boolean31 = option18.hasOptionalArg();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertNotNull(option18);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str26, "[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "4" + "'", str28, "4");
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "4" + "'", str30, "4");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1385");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String str5 = commandLine0.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str7 = commandLine0.getOptionValue("arg");
        java.lang.String str9 = commandLine0.getOptionValue('a');
        java.lang.String str12 = commandLine0.getOptionValue("[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        java.lang.Object obj14 = commandLine0.getOptionObject(' ');
        org.apache.commons.cli.Option[] optionArray15 = commandLine0.getOptions();
        java.lang.Object obj17 = commandLine0.getOptionObject('\000');
        java.lang.String str19 = commandLine0.getOptionValue(' ');
        org.apache.commons.cli.Option[] optionArray20 = commandLine0.getOptions();
        java.lang.String str23 = commandLine0.getOptionValue('a', "[ Options: [ short { =[ option:    :: hi! ], 4=[ option: 4  ::  ], arg=[ option: arg org.apache.commons.cli.UnrecognizedOptionException: hi!  :: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ]} ] [ long {org.apache.commons.cli.UnrecognizedOptionException: hi!=[ option: arg org.apache.commons.cli.UnrecognizedOptionException: hi!  :: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ]} ]");
        java.lang.Object obj25 = commandLine0.getOptionObject("org.apache.commons.cli.MissingOptionException: hi!");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str5, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" + "'", str12, "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(optionArray15);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(optionArray20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ Options: [ short { =[ option:    :: hi! ], 4=[ option: 4  ::  ], arg=[ option: arg org.apache.commons.cli.UnrecognizedOptionException: hi!  :: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ]} ] [ long {org.apache.commons.cli.UnrecognizedOptionException: hi!=[ option: arg org.apache.commons.cli.UnrecognizedOptionException: hi!  :: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ]} ]" + "'", str23, "[ Options: [ short { =[ option:    :: hi! ], 4=[ option: 4  ::  ], arg=[ option: arg org.apache.commons.cli.UnrecognizedOptionException: hi!  :: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ]} ] [ long {org.apache.commons.cli.UnrecognizedOptionException: hi!=[ option: arg org.apache.commons.cli.UnrecognizedOptionException: hi!  :: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ]} ]");
        org.junit.Assert.assertNull(obj25);
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0788");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option2 = org.apache.commons.cli.OptionBuilder.create('4');
        option2.setDescription("");
        org.apache.commons.cli.Options options5 = options0.addOption(option2);
        java.util.List list6 = options0.helpOptions();
        org.apache.commons.cli.Options options11 = options0.addOption("arg", "org.apache.commons.cli.UnrecognizedOptionException: hi!", false, "");
        org.apache.commons.cli.CommandLine commandLine12 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray14 = commandLine12.getOptionValues("hi!");
        java.lang.String[] strArray15 = commandLine12.getArgs();
        java.util.Iterator iterator16 = commandLine12.iterator();
        java.lang.String str18 = commandLine12.getOptionValue("[ option:    :: null ]");
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        java.lang.String str22 = option20.getValue("arg");
        org.apache.commons.cli.MissingOptionException missingOptionException24 = new org.apache.commons.cli.MissingOptionException("hi!");
        boolean boolean25 = option20.equals((java.lang.Object) "hi!");
        option20.setValueSeparator('=');
        boolean boolean28 = option20.hasValueSeparator();
        java.lang.String str29 = option20.getArgName();
        commandLine12.addOption(option20);
        org.apache.commons.cli.OptionGroup optionGroup31 = options11.getOptionGroup(option20);
        org.apache.commons.cli.PosixParser posixParser32 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options33 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option35 = org.apache.commons.cli.OptionBuilder.create('4');
        option35.setDescription("");
        org.apache.commons.cli.Options options38 = options33.addOption(option35);
        org.apache.commons.cli.CommandLine commandLine39 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray41 = commandLine39.getOptionValues("hi!");
        java.lang.String str44 = commandLine39.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str46 = commandLine39.getOptionValue("arg");
        java.lang.String[] strArray47 = commandLine39.getArgs();
        java.lang.String[] strArray49 = posixParser32.flatten(options38, strArray47, false);
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        option52.setDescription("");
        org.apache.commons.cli.Options options55 = options50.addOption(option52);
        java.util.Collection collection56 = options50.getOptions();
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create('4');
        char char60 = option59.getValueSeparator();
        org.apache.commons.cli.Option option62 = org.apache.commons.cli.OptionBuilder.create('4');
        option62.setDescription("");
        option59.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup66 = options57.getOptionGroup(option59);
        option59.setOptionalArg(true);
        int int69 = option59.getId();
        org.apache.commons.cli.Options options70 = options50.addOption(option59);
        option59.setOptionalArg(false);
        java.lang.String str74 = option59.getValue("[ option: 4  :: null ::  ]");
        java.lang.String[] strArray75 = option59.getValues();
        option59.setValueSeparator('a');
        org.apache.commons.cli.OptionGroup optionGroup78 = options38.getOptionGroup(option59);
        org.apache.commons.cli.Options options79 = options11.addOption(option59);
        org.apache.commons.cli.Options options80 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option82 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup83 = options80.getOptionGroup(option82);
        java.lang.Object obj84 = option82.getType();
        java.lang.String[] strArray85 = option82.getValues();
        org.apache.commons.cli.Options options86 = options79.addOption(option82);
        java.lang.String str88 = option82.getValue("");
        org.junit.Assert.assertNotNull(option2);
        org.junit.Assert.assertNotNull(options5);
        org.junit.Assert.assertNotNull(list6);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "arg" + "'", str22, "arg");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "arg" + "'", str29, "arg");
        org.junit.Assert.assertNull(optionGroup31);
        org.junit.Assert.assertNotNull(option35);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNull(strArray41);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str44, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(collection56);
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertTrue("'" + char60 + "' != '" + '\000' + "'", char60 == '\000');
        org.junit.Assert.assertNotNull(option62);
        org.junit.Assert.assertNull(optionGroup66);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 52 + "'", int69 == 52);
        org.junit.Assert.assertNotNull(options70);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "[ option: 4  :: null ::  ]" + "'", str74, "[ option: 4  :: null ::  ]");
        org.junit.Assert.assertNull(strArray75);
        org.junit.Assert.assertNull(optionGroup78);
        org.junit.Assert.assertNotNull(options79);
        org.junit.Assert.assertNotNull(option82);
        org.junit.Assert.assertNull(optionGroup83);
        org.junit.Assert.assertNull(obj84);
        org.junit.Assert.assertNull(strArray85);
        org.junit.Assert.assertNotNull(options86);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1368");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.util.Iterator iterator3 = commandLine0.iterator();
        java.lang.String[] strArray5 = commandLine0.getOptionValues('a');
        java.lang.Object obj7 = commandLine0.getOptionObject('a');
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option9.setLongOpt("hi!");
        option9.setArgName("arg");
        java.lang.String str16 = option9.toString();
        commandLine0.addOption(option9);
        java.lang.String str19 = commandLine0.getOptionValue('4');
        java.util.List list20 = commandLine0.getArgList();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(iterator3);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[ option: 4 hi!  ::  ]" + "'", str16, "[ option: 4 hi!  ::  ]");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(list20);
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0832");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken("org.apache.commons.cli.MissingOptionException: hi!", false);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create('4');
        option41.setDescription("");
        org.apache.commons.cli.Options options44 = options39.addOption(option41);
        java.util.Collection collection45 = options39.getOptionGroups();
        org.apache.commons.cli.Options options49 = options39.addOption("", false, "arg");
        org.apache.commons.cli.Option option51 = org.apache.commons.cli.OptionBuilder.create('4');
        boolean boolean52 = option51.hasOptionalArg();
        org.apache.commons.cli.Options options53 = options39.addOption(option51);
        org.apache.commons.cli.PosixParser posixParser54 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option57 = org.apache.commons.cli.OptionBuilder.create('4');
        option57.setDescription("");
        org.apache.commons.cli.Options options60 = options55.addOption(option57);
        org.apache.commons.cli.PosixParser posixParser61 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options62 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option64 = org.apache.commons.cli.OptionBuilder.create('4');
        option64.setDescription("");
        org.apache.commons.cli.Options options67 = options62.addOption(option64);
        org.apache.commons.cli.CommandLine commandLine68 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray70 = commandLine68.getOptionValues("hi!");
        java.lang.String[] strArray71 = commandLine68.getArgs();
        java.util.Properties properties72 = null;
        org.apache.commons.cli.CommandLine commandLine73 = posixParser61.parse(options62, strArray71, properties72);
        org.apache.commons.cli.CommandLine commandLine75 = posixParser54.parse(options60, strArray71, false);
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options53, strArray71);
        posixParser0.burstToken("[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]", true);
        org.apache.commons.cli.Option option81 = org.apache.commons.cli.OptionBuilder.create('4');
        java.lang.String str83 = option81.getValue("arg");
        java.lang.String str84 = option81.getLongOpt();
        option81.setLongOpt("");
        option81.setArgName("");
        java.lang.String str89 = option81.getArgName();
        option81.setArgName("org.apache.commons.cli.MissingArgumentException: [ option:    :: null ]");
        java.util.ListIterator listIterator92 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option81, listIterator92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertNotNull(collection45);
        org.junit.Assert.assertNotNull(options49);
        org.junit.Assert.assertNotNull(option51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(options53);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(option64);
        org.junit.Assert.assertNotNull(options67);
        org.junit.Assert.assertNull(strArray70);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(commandLine73);
        org.junit.Assert.assertNotNull(commandLine75);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertNotNull(option81);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "arg" + "'", str83, "arg");
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1703");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        java.util.List list36 = commandLine35.getArgList();
        java.lang.String[] strArray37 = commandLine35.getArgs();
        java.lang.String[] strArray38 = commandLine35.getArgs();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        boolean boolean43 = option40.isRequired();
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        char char46 = option45.getValueSeparator();
        java.lang.String str47 = option45.getDescription();
        boolean boolean48 = option40.equals((java.lang.Object) option45);
        java.lang.String str49 = option40.toString();
        commandLine35.addOption(option40);
        java.lang.String str52 = commandLine35.getOptionValue("");
        java.lang.String[] strArray53 = commandLine35.getArgs();
        java.lang.String[] strArray55 = commandLine35.getOptionValues("org.apache.commons.cli.UnrecognizedOptionException: [ option: 4  ::  :: [] ]");
        boolean boolean57 = commandLine35.hasOption('=');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(list36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertTrue("'" + char46 + "' != '" + '\000' + "'", char46 == '\000');
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[ option: 4  ::  ]" + "'", str49, "[ option: 4  ::  ]");
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0914");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken("hi!", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptions();
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        char char31 = option30.getValueSeparator();
        org.apache.commons.cli.Option option33 = org.apache.commons.cli.OptionBuilder.create('4');
        option33.setDescription("");
        option30.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup37 = options28.getOptionGroup(option30);
        option30.setOptionalArg(true);
        int int40 = option30.getId();
        org.apache.commons.cli.Options options41 = options21.addOption(option30);
        boolean boolean43 = options41.hasOption("");
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        option45.setArgs((int) (short) 100);
        option45.setArgName("[ option: 4  :: null ]");
        java.lang.String str50 = option45.getLongOpt();
        boolean boolean51 = option45.hasLongOpt();
        org.apache.commons.cli.Options options52 = options41.addOption(option45);
        java.util.Collection collection53 = options41.getOptions();
        org.apache.commons.cli.PosixParser posixParser54 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option57 = org.apache.commons.cli.OptionBuilder.create('4');
        option57.setDescription("");
        org.apache.commons.cli.Options options60 = options55.addOption(option57);
        java.util.Collection collection61 = options55.getOptions();
        boolean boolean63 = options55.hasOption("arg");
        java.lang.String[] strArray66 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" };
        org.apache.commons.cli.CommandLine commandLine67 = posixParser54.parse(options55, strArray66);
        java.lang.String[] strArray69 = posixParser0.flatten(options41, strArray66, false);
        java.util.List list70 = options41.helpOptions();
        java.lang.String str71 = options41.toString();
        java.util.List list72 = options41.getRequiredOptions();
        org.apache.commons.cli.Option option74 = org.apache.commons.cli.OptionBuilder.create('4');
        java.lang.String str76 = option74.getValue("arg");
        org.apache.commons.cli.MissingOptionException missingOptionException78 = new org.apache.commons.cli.MissingOptionException("hi!");
        boolean boolean79 = option74.equals((java.lang.Object) "hi!");
        option74.setValueSeparator('=');
        boolean boolean82 = option74.hasValueSeparator();
        option74.setRequired(false);
        org.apache.commons.cli.Options options85 = options41.addOption(option74);
        org.apache.commons.cli.OptionBuilder optionBuilder86 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) option74);
        boolean boolean87 = option74.hasValueSeparator();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertTrue("'" + char31 + "' != '" + '\000' + "'", char31 == '\000');
        org.junit.Assert.assertNotNull(option33);
        org.junit.Assert.assertNull(optionGroup37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(collection53);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(collection61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(list70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]" + "'", str71, "[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]");
        org.junit.Assert.assertNotNull(list72);
        org.junit.Assert.assertNotNull(option74);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "arg" + "'", str76, "arg");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(options85);
        org.junit.Assert.assertNotNull(optionBuilder86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0856");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptions();
        boolean boolean9 = options1.hasOption("arg");
        java.lang.String[] strArray12 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" };
        org.apache.commons.cli.CommandLine commandLine13 = posixParser0.parse(options1, strArray12);
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = org.apache.commons.cli.OptionBuilder.create('4');
        char char17 = option16.getValueSeparator();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        option16.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup23 = options14.getOptionGroup(option16);
        java.util.List list24 = options14.helpOptions();
        java.util.Collection collection25 = options14.getOptionGroups();
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option28 = org.apache.commons.cli.OptionBuilder.create('4');
        option28.setDescription("");
        org.apache.commons.cli.Options options31 = options26.addOption(option28);
        java.util.Collection collection32 = options26.getOptionGroups();
        org.apache.commons.cli.Options options36 = options26.addOption("", false, "arg");
        java.util.Collection collection37 = options26.getOptionGroups();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        option40.setValueSeparator(' ');
        org.apache.commons.cli.OptionGroup optionGroup46 = options26.getOptionGroup(option40);
        option40.setRequired(false);
        org.apache.commons.cli.CommandLine commandLine49 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray51 = commandLine49.getOptionValues("hi!");
        java.lang.String[] strArray52 = commandLine49.getArgs();
        boolean boolean53 = option40.equals((java.lang.Object) strArray52);
        org.apache.commons.cli.CommandLine commandLine55 = posixParser0.parse(options14, strArray52, true);
        posixParser0.burstToken("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!", true);
        posixParser0.burstToken("org.apache.commons.cli.MissingOptionException: [ option: 4  :: null ]", true);
        org.apache.commons.cli.Option option65 = new org.apache.commons.cli.Option("", true, "");
        boolean boolean66 = option65.hasOptionalArg();
        java.lang.String str67 = option65.getOpt();
        option65.setDescription("");
        org.apache.commons.cli.Options options70 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option72 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup73 = options70.getOptionGroup(option72);
        org.apache.commons.cli.Option option75 = org.apache.commons.cli.OptionBuilder.create('4');
        char char76 = option75.getValueSeparator();
        org.apache.commons.cli.Option option78 = org.apache.commons.cli.OptionBuilder.create('4');
        option78.setDescription("");
        option75.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup82 = options70.getOptionGroup(option75);
        boolean boolean83 = option75.hasArgName();
        java.lang.String str84 = option75.getValue();
        option75.setDescription("[ option: 4  :: null ]");
        java.util.List list87 = option75.getValuesList();
        option65.setType((java.lang.Object) list87);
        option65.setArgName("[ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ]");
        option65.setLongOpt("org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.MissingOptionException: hi!");
        java.util.ListIterator listIterator93 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option65, listIterator93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine13);
        org.junit.Assert.assertNotNull(option16);
        org.junit.Assert.assertTrue("'" + char17 + "' != '" + '\000' + "'", char17 == '\000');
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNull(optionGroup23);
        org.junit.Assert.assertNotNull(list24);
        org.junit.Assert.assertNotNull(collection25);
        org.junit.Assert.assertNotNull(option28);
        org.junit.Assert.assertNotNull(options31);
        org.junit.Assert.assertNotNull(collection32);
        org.junit.Assert.assertNotNull(options36);
        org.junit.Assert.assertNotNull(collection37);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(optionGroup46);
        org.junit.Assert.assertNull(strArray51);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(option72);
        org.junit.Assert.assertNull(optionGroup73);
        org.junit.Assert.assertNotNull(option75);
        org.junit.Assert.assertTrue("'" + char76 + "' != '" + '\000' + "'", char76 == '\000');
        org.junit.Assert.assertNotNull(option78);
        org.junit.Assert.assertNull(optionGroup82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNotNull(list87);
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1538");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken("org.apache.commons.cli.MissingOptionException: hi!", false);
        posixParser0.burstToken("[ option: 4 hi!  ::  ]", false);
        posixParser0.burstToken("org.apache.commons.cli.ParseException: org.apache.commons.cli.UnrecognizedOptionException: hi!", false);
        org.apache.commons.cli.Options options45 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option47 = org.apache.commons.cli.OptionBuilder.create('4');
        option47.setDescription("");
        org.apache.commons.cli.Options options50 = options45.addOption(option47);
        java.util.Collection collection51 = options45.getOptionGroups();
        org.apache.commons.cli.Options options55 = options45.addOption("", false, "arg");
        org.apache.commons.cli.Option option57 = org.apache.commons.cli.OptionBuilder.create('4');
        boolean boolean58 = option57.hasOptionalArg();
        org.apache.commons.cli.Options options59 = options45.addOption(option57);
        org.apache.commons.cli.Option option61 = org.apache.commons.cli.OptionBuilder.create('4');
        char char62 = option61.getValueSeparator();
        boolean boolean63 = option61.hasArg();
        java.lang.String str64 = option61.getValue();
        java.lang.String str66 = option61.getValue((int) ' ');
        org.apache.commons.cli.OptionGroup optionGroup67 = options45.getOptionGroup(option61);
        org.apache.commons.cli.Option option69 = options45.getOption("4");
        java.util.List list70 = options45.helpOptions();
        java.util.Collection collection71 = options45.getOptions();
        org.apache.commons.cli.Option option73 = org.apache.commons.cli.OptionBuilder.create(' ');
        boolean boolean74 = option73.hasArgName();
        boolean boolean75 = option73.hasArgName();
        boolean boolean76 = option73.hasOptionalArg();
        java.lang.Object obj77 = option73.getType();
        option73.setLongOpt("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.apache.commons.cli.CommandLine commandLine80 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray82 = commandLine80.getOptionValues("hi!");
        java.util.Iterator iterator83 = commandLine80.iterator();
        java.lang.String[] strArray85 = commandLine80.getOptionValues('a');
        java.util.Iterator iterator86 = commandLine80.iterator();
        boolean boolean88 = commandLine80.hasOption("");
        boolean boolean89 = option73.equals((java.lang.Object) commandLine80);
        java.util.List list90 = commandLine80.getArgList();
        java.lang.String[] strArray91 = commandLine80.getArgs();
        org.apache.commons.cli.CommandLine commandLine93 = posixParser0.parse(options45, strArray91, true);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option47);
        org.junit.Assert.assertNotNull(options50);
        org.junit.Assert.assertNotNull(collection51);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNotNull(option61);
        org.junit.Assert.assertTrue("'" + char62 + "' != '" + '\000' + "'", char62 == '\000');
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(optionGroup67);
        org.junit.Assert.assertNotNull(option69);
        org.junit.Assert.assertNotNull(list70);
        org.junit.Assert.assertNotNull(collection71);
        org.junit.Assert.assertNotNull(option73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertNull(strArray82);
        org.junit.Assert.assertNotNull(iterator83);
        org.junit.Assert.assertNull(strArray85);
        org.junit.Assert.assertNotNull(iterator86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(list90);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNotNull(commandLine93);
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0031");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken("hi!", true);
        org.apache.commons.cli.PosixParser posixParser21 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create('4');
        option24.setDescription("");
        org.apache.commons.cli.Options options27 = options22.addOption(option24);
        org.apache.commons.cli.CommandLine commandLine28 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray30 = commandLine28.getOptionValues("hi!");
        java.lang.String str33 = commandLine28.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str35 = commandLine28.getOptionValue("arg");
        java.lang.String[] strArray36 = commandLine28.getArgs();
        java.lang.String[] strArray38 = posixParser21.flatten(options27, strArray36, false);
        posixParser21.burstToken("hi!", true);
        org.apache.commons.cli.Options options42 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup45 = options42.getOptionGroup(option44);
        org.apache.commons.cli.Option option47 = org.apache.commons.cli.OptionBuilder.create('4');
        char char48 = option47.getValueSeparator();
        org.apache.commons.cli.Option option50 = org.apache.commons.cli.OptionBuilder.create('4');
        option50.setDescription("");
        option47.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup54 = options42.getOptionGroup(option47);
        java.lang.String[] strArray55 = null;
        java.util.Properties properties56 = null;
        org.apache.commons.cli.CommandLine commandLine57 = posixParser21.parse(options42, strArray55, properties56);
        org.apache.commons.cli.Option option59 = options42.getOption("[ option:    :: null ]");
        java.lang.String[] strArray60 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[] strArray62 = posixParser0.flatten(options42, strArray60, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNotNull(options27);
        org.junit.Assert.assertNull(strArray30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str33, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertNull(optionGroup45);
        org.junit.Assert.assertNotNull(option47);
        org.junit.Assert.assertTrue("'" + char48 + "' != '" + '\000' + "'", char48 == '\000');
        org.junit.Assert.assertNotNull(option50);
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(commandLine57);
        org.junit.Assert.assertNull(option59);
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1456");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.util.Iterator iterator4 = commandLine0.iterator();
        boolean boolean6 = commandLine0.hasOption("[ option: 4  :: null ]");
        java.lang.String[] strArray8 = commandLine0.getOptionValues("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        boolean boolean10 = commandLine0.hasOption('a');
        java.lang.String[] strArray11 = commandLine0.getArgs();
        java.util.Iterator iterator12 = commandLine0.iterator();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(iterator4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(iterator12);
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0423");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue("hi!");
        org.apache.commons.cli.Option option7 = org.apache.commons.cli.OptionBuilder.create(' ');
        commandLine0.addOption(option7);
        java.lang.String[] strArray10 = commandLine0.getOptionValues("[ option: 4  :: null ]");
        java.lang.Object obj12 = commandLine0.getOptionObject("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.Object obj14 = commandLine0.getOptionObject("[ Options: [ short {4=[ option: 4  :: null ::  ]} ] [ long {} ]");
        java.lang.String[] strArray16 = commandLine0.getOptionValues("org.apache.commons.cli.ParseException: [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ], arg=[ option: arg  :: null ]} ] [ long {} ]");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(option7);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(strArray16);
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1462");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup43 = options40.getOptionGroup(option42);
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        org.apache.commons.cli.OptionGroup optionGroup46 = options40.getOptionGroup(option45);
        java.util.List list47 = options40.getRequiredOptions();
        java.util.Collection collection48 = options40.getOptions();
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        option52.setDescription("");
        org.apache.commons.cli.Options options55 = options50.addOption(option52);
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray58 = commandLine56.getOptionValues("hi!");
        java.lang.String str61 = commandLine56.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str63 = commandLine56.getOptionValue("arg");
        java.lang.String[] strArray64 = commandLine56.getArgs();
        java.lang.String[] strArray66 = posixParser49.flatten(options55, strArray64, false);
        java.util.Properties properties67 = null;
        org.apache.commons.cli.CommandLine commandLine69 = posixParser0.parse(options40, strArray64, properties67, true);
        java.lang.String str70 = options40.toString();
        java.lang.String str71 = options40.toString();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNull(optionGroup46);
        org.junit.Assert.assertNotNull(list47);
        org.junit.Assert.assertNotNull(collection48);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNull(strArray58);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str61, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str70, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str71, "[ Options: [ short {} ] [ long {} ]");
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0685");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.util.Iterator iterator4 = commandLine0.iterator();
        java.lang.String str7 = commandLine0.getOptionValue("[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]", "arg");
        boolean boolean9 = commandLine0.hasOption("[ option: 4  :: null ]");
        java.lang.String[] strArray11 = commandLine0.getOptionValues("");
        java.lang.Object obj13 = commandLine0.getOptionObject('a');
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = org.apache.commons.cli.OptionBuilder.create('4');
        option16.setDescription("");
        org.apache.commons.cli.Options options19 = options14.addOption(option16);
        java.util.Collection collection20 = options14.getOptionGroups();
        org.apache.commons.cli.Options options24 = options14.addOption("", false, "arg");
        java.util.List list25 = options24.getRequiredOptions();
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create("arg");
        org.apache.commons.cli.Options options28 = options24.addOption(option27);
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setArgs((int) (short) 100);
        option30.setArgName("[ option: 4  :: null ]");
        java.lang.String str35 = option30.getLongOpt();
        java.lang.String str37 = option30.getValue((int) (short) -1);
        org.apache.commons.cli.Options options38 = options28.addOption(option30);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup42 = options39.getOptionGroup(option41);
        boolean boolean43 = option41.hasLongOpt();
        boolean boolean44 = option41.isRequired();
        java.util.List list45 = option41.getValuesList();
        option41.setDescription("[ option: 4  ::  ]");
        org.apache.commons.cli.Options options48 = options38.addOption(option41);
        option41.setValueSeparator('4');
        commandLine0.addOption(option41);
        java.lang.Object obj53 = commandLine0.getOptionObject('#');
        java.lang.Object obj55 = commandLine0.getOptionObject('#');
        java.lang.Object obj57 = commandLine0.getOptionObject('a');
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(iterator4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(option16);
        org.junit.Assert.assertNotNull(options19);
        org.junit.Assert.assertNotNull(collection20);
        org.junit.Assert.assertNotNull(options24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(list45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertNull(obj57);
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0483");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.Class<?> wildcardClass4 = strArray3.getClass();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0564");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue("hi!");
        boolean boolean7 = commandLine0.hasOption("");
        commandLine0.addArg("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        boolean boolean11 = commandLine0.hasOption("[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str15 = option13.getValue("");
        commandLine0.addOption(option13);
        boolean boolean18 = commandLine0.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.Class<?> wildcardClass19 = commandLine0.getClass();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0300");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        posixParser0.burstToken("", false);
        java.lang.Class<?> wildcardClass25 = posixParser0.getClass();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1337");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.PosixParser posixParser53 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        option56.setDescription("");
        org.apache.commons.cli.Options options59 = options54.addOption(option56);
        org.apache.commons.cli.CommandLine commandLine60 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray62 = commandLine60.getOptionValues("hi!");
        java.lang.String str65 = commandLine60.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str67 = commandLine60.getOptionValue("arg");
        java.lang.String[] strArray68 = commandLine60.getArgs();
        java.lang.String[] strArray70 = posixParser53.flatten(options59, strArray68, false);
        org.apache.commons.cli.PosixParser posixParser71 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options72 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option74 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup75 = options72.getOptionGroup(option74);
        org.apache.commons.cli.CommandLine commandLine76 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray78 = commandLine76.getOptionValues("hi!");
        java.lang.String str81 = commandLine76.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str83 = commandLine76.getOptionValue("arg");
        java.lang.String[] strArray84 = commandLine76.getArgs();
        java.lang.String[] strArray86 = posixParser71.flatten(options72, strArray84, true);
        org.apache.commons.cli.CommandLine commandLine88 = posixParser0.parse(options59, strArray84, false);
        java.util.Iterator iterator89 = commandLine88.iterator();
        java.lang.Object obj91 = commandLine88.getOptionObject('4');
        java.lang.String str94 = commandLine88.getOptionValue('4', "[ option: 4  ::  :: [] ]");
        java.lang.Class<?> wildcardClass95 = commandLine88.getClass();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNull(strArray62);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str65, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(option74);
        org.junit.Assert.assertNull(optionGroup75);
        org.junit.Assert.assertNull(strArray78);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str81, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(commandLine88);
        org.junit.Assert.assertNotNull(iterator89);
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "[ option: 4  ::  :: [] ]" + "'", str94, "[ option: 4  ::  :: [] ]");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0775");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptions();
        boolean boolean9 = options1.hasOption("arg");
        java.lang.String[] strArray12 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" };
        org.apache.commons.cli.CommandLine commandLine13 = posixParser0.parse(options1, strArray12);
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = org.apache.commons.cli.OptionBuilder.create('4');
        option16.setDescription("");
        org.apache.commons.cli.Options options19 = options14.addOption(option16);
        java.util.Collection collection20 = options14.getOptionGroups();
        org.apache.commons.cli.Options options24 = options14.addOption("", false, "arg");
        java.util.List list25 = options24.getRequiredOptions();
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create("arg");
        org.apache.commons.cli.Options options28 = options24.addOption(option27);
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setArgs((int) (short) 100);
        option30.setArgName("[ option: 4  :: null ]");
        java.lang.String str35 = option30.getLongOpt();
        java.lang.String str37 = option30.getValue((int) (short) -1);
        org.apache.commons.cli.Options options38 = options28.addOption(option30);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup42 = options39.getOptionGroup(option41);
        boolean boolean43 = option41.hasLongOpt();
        boolean boolean44 = option41.isRequired();
        java.util.List list45 = option41.getValuesList();
        option41.setDescription("[ option: 4  ::  ]");
        org.apache.commons.cli.Options options48 = options38.addOption(option41);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        option52.setDescription("");
        org.apache.commons.cli.Options options55 = options50.addOption(option52);
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray58 = commandLine56.getOptionValues("hi!");
        java.lang.String str61 = commandLine56.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str63 = commandLine56.getOptionValue("arg");
        java.lang.String[] strArray64 = commandLine56.getArgs();
        java.lang.String[] strArray66 = posixParser49.flatten(options55, strArray64, false);
        org.apache.commons.cli.CommandLine commandLine68 = posixParser0.parse(options38, strArray64, true);
        org.apache.commons.cli.OptionBuilder optionBuilder69 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options38);
        java.lang.String str70 = options38.toString();
        java.util.Collection collection71 = options38.getOptionGroups();
        java.lang.String str72 = options38.toString();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine13);
        org.junit.Assert.assertNotNull(option16);
        org.junit.Assert.assertNotNull(options19);
        org.junit.Assert.assertNotNull(collection20);
        org.junit.Assert.assertNotNull(options24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(list45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNull(strArray58);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str61, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertNotNull(optionBuilder69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "[ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]" + "'", str70, "[ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]");
        org.junit.Assert.assertNotNull(collection71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "[ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]" + "'", str72, "[ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]");
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0247");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptions();
        boolean boolean9 = options1.hasOption("arg");
        java.lang.String[] strArray12 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" };
        org.apache.commons.cli.CommandLine commandLine13 = posixParser0.parse(options1, strArray12);
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = org.apache.commons.cli.OptionBuilder.create('4');
        char char17 = option16.getValueSeparator();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        option16.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup23 = options14.getOptionGroup(option16);
        java.util.List list24 = options14.helpOptions();
        java.util.Collection collection25 = options14.getOptionGroups();
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option28 = org.apache.commons.cli.OptionBuilder.create('4');
        option28.setDescription("");
        org.apache.commons.cli.Options options31 = options26.addOption(option28);
        java.util.Collection collection32 = options26.getOptionGroups();
        org.apache.commons.cli.Options options36 = options26.addOption("", false, "arg");
        java.util.Collection collection37 = options26.getOptionGroups();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        option40.setValueSeparator(' ');
        org.apache.commons.cli.OptionGroup optionGroup46 = options26.getOptionGroup(option40);
        option40.setRequired(false);
        org.apache.commons.cli.CommandLine commandLine49 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray51 = commandLine49.getOptionValues("hi!");
        java.lang.String[] strArray52 = commandLine49.getArgs();
        boolean boolean53 = option40.equals((java.lang.Object) strArray52);
        org.apache.commons.cli.CommandLine commandLine55 = posixParser0.parse(options14, strArray52, true);
        java.lang.String[] strArray56 = commandLine55.getArgs();
        java.lang.String str58 = commandLine55.getOptionValue('#');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine13);
        org.junit.Assert.assertNotNull(option16);
        org.junit.Assert.assertTrue("'" + char17 + "' != '" + '\000' + "'", char17 == '\000');
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNull(optionGroup23);
        org.junit.Assert.assertNotNull(list24);
        org.junit.Assert.assertNotNull(collection25);
        org.junit.Assert.assertNotNull(option28);
        org.junit.Assert.assertNotNull(options31);
        org.junit.Assert.assertNotNull(collection32);
        org.junit.Assert.assertNotNull(options36);
        org.junit.Assert.assertNotNull(collection37);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(optionGroup46);
        org.junit.Assert.assertNull(strArray51);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNull(str58);
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1136");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String[] strArray10 = commandLine7.getArgs();
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = posixParser0.parse(options1, strArray10, properties11);
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option15 = org.apache.commons.cli.OptionBuilder.create('4');
        option15.setDescription("");
        org.apache.commons.cli.Options options18 = options13.addOption(option15);
        java.lang.String str19 = options13.toString();
        org.apache.commons.cli.CommandLine commandLine20 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray22 = commandLine20.getOptionValues("hi!");
        java.lang.String str25 = commandLine20.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str27 = commandLine20.getOptionValue("arg");
        java.lang.String[] strArray28 = commandLine20.getArgs();
        java.util.Properties properties29 = null;
        org.apache.commons.cli.CommandLine commandLine31 = posixParser0.parse(options13, strArray28, properties29, false);
        posixParser0.burstToken("org.apache.commons.cli.ParseException: [ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]", false);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
        org.junit.Assert.assertNotNull(option15);
        org.junit.Assert.assertNotNull(options18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str19, "[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(strArray22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str25, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(commandLine31);
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0427");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptions();
        boolean boolean9 = options1.hasOption("arg");
        java.lang.String[] strArray12 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" };
        org.apache.commons.cli.CommandLine commandLine13 = posixParser0.parse(options1, strArray12);
        commandLine13.addArg("[ option: 4  :: null ::  ]");
        java.lang.String str17 = commandLine13.getOptionValue("[ option: 4 arg  :: null ]");
        java.lang.String[] strArray19 = commandLine13.getOptionValues("org.apache.commons.cli.MissingArgumentException: [ option:    :: null ]");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine13);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(strArray19);
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1465");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", true);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create('4');
        char char42 = option41.getValueSeparator();
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create('4');
        option44.setDescription("");
        option41.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup48 = options39.getOptionGroup(option41);
        java.util.List list49 = options39.helpOptions();
        org.apache.commons.cli.Option option51 = org.apache.commons.cli.OptionBuilder.create('4');
        option51.setOptionalArg(false);
        java.lang.String str54 = option51.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup55 = options39.getOptionGroup(option51);
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray58 = commandLine56.getOptionValues("hi!");
        java.lang.Object obj60 = commandLine56.getOptionObject('a');
        java.lang.String str63 = commandLine56.getOptionValue('\000', "org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        java.lang.String[] strArray64 = commandLine56.getArgs();
        org.apache.commons.cli.CommandLine commandLine66 = posixParser0.parse(options39, strArray64, true);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertTrue("'" + char42 + "' != '" + '\000' + "'", char42 == '\000');
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertNull(optionGroup48);
        org.junit.Assert.assertNotNull(list49);
        org.junit.Assert.assertNotNull(option51);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "arg" + "'", str54, "arg");
        org.junit.Assert.assertNull(optionGroup55);
        org.junit.Assert.assertNull(strArray58);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" + "'", str63, "org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(commandLine66);
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1743");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        org.apache.commons.cli.Option[] optionArray4 = commandLine0.getOptions();
        java.lang.Object obj6 = commandLine0.getOptionObject("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        java.util.Iterator iterator7 = commandLine0.iterator();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(optionArray4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(iterator7);
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0668");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.util.Iterator iterator1 = commandLine0.iterator();
        boolean boolean3 = commandLine0.hasOption('=');
        commandLine0.addArg("4");
        java.lang.Object obj7 = commandLine0.getOptionObject(' ');
        org.junit.Assert.assertNotNull(iterator1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0349");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue("hi!");
        org.apache.commons.cli.Option option7 = org.apache.commons.cli.OptionBuilder.create(' ');
        commandLine0.addOption(option7);
        java.lang.String[] strArray10 = commandLine0.getOptionValues("[ option: 4  :: null ]");
        java.lang.Object obj12 = commandLine0.getOptionObject("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.Object obj14 = commandLine0.getOptionObject("[ Options: [ short {4=[ option: 4  :: null ::  ]} ] [ long {} ]");
        java.lang.String[] strArray16 = commandLine0.getOptionValues("[ option: 4  :: null ]");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(option7);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(strArray16);
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1683");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        java.util.List list36 = commandLine35.getArgList();
        java.lang.String[] strArray37 = commandLine35.getArgs();
        java.lang.String[] strArray38 = commandLine35.getArgs();
        commandLine35.addArg("");
        java.lang.Object obj42 = commandLine35.getOptionObject(" ");
        java.lang.String[] strArray43 = commandLine35.getArgs();
        java.lang.String[] strArray45 = commandLine35.getOptionValues("[ Options: [ short { =[ option:   +ARG :: [ Options: [ short {} ] [ long {} ] ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(list36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNull(strArray45);
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1443");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option2 = org.apache.commons.cli.OptionBuilder.create('4');
        option2.setDescription("");
        org.apache.commons.cli.Options options5 = options0.addOption(option2);
        boolean boolean6 = option2.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        java.util.Collection collection14 = options8.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine15 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray17 = commandLine15.getOptionValues("hi!");
        java.lang.String str20 = commandLine15.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str22 = commandLine15.getOptionValue("arg");
        java.lang.String[] strArray23 = commandLine15.getArgs();
        java.util.Properties properties24 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser7.parse(options8, strArray23, properties24);
        org.apache.commons.cli.PosixParser posixParser26 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option29 = org.apache.commons.cli.OptionBuilder.create('4');
        option29.setDescription("");
        org.apache.commons.cli.Options options32 = options27.addOption(option29);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser26.parse(options27, strArray36, properties37);
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup43 = options40.getOptionGroup(option42);
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        char char46 = option45.getValueSeparator();
        org.apache.commons.cli.Option option48 = org.apache.commons.cli.OptionBuilder.create('4');
        option48.setDescription("");
        option45.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup52 = options40.getOptionGroup(option45);
        boolean boolean54 = options40.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser55 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options56 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option58 = org.apache.commons.cli.OptionBuilder.create('4');
        option58.setDescription("");
        org.apache.commons.cli.Options options61 = options56.addOption(option58);
        org.apache.commons.cli.CommandLine commandLine62 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray64 = commandLine62.getOptionValues("hi!");
        java.lang.String str67 = commandLine62.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str69 = commandLine62.getOptionValue("arg");
        java.lang.String[] strArray70 = commandLine62.getArgs();
        java.lang.String[] strArray72 = posixParser55.flatten(options61, strArray70, false);
        java.util.Properties properties73 = null;
        org.apache.commons.cli.CommandLine commandLine74 = posixParser39.parse(options40, strArray72, properties73);
        java.util.List list75 = commandLine74.getArgList();
        java.lang.String[] strArray76 = commandLine74.getArgs();
        java.lang.String[] strArray78 = posixParser7.flatten(options27, strArray76, false);
        boolean boolean79 = option2.equals((java.lang.Object) strArray76);
        int int80 = option2.getId();
        org.apache.commons.cli.CommandLine commandLine81 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray83 = commandLine81.getOptionValues("hi!");
        java.lang.String str86 = commandLine81.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        commandLine81.addArg("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]");
        java.lang.String[] strArray90 = commandLine81.getOptionValues("[ option:    :: null ]");
        option2.setType((java.lang.Object) commandLine81);
        java.lang.String str92 = option2.getOpt();
        org.junit.Assert.assertNotNull(option2);
        org.junit.Assert.assertNotNull(options5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNotNull(collection14);
        org.junit.Assert.assertNull(strArray17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str20, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(option29);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertTrue("'" + char46 + "' != '" + '\000' + "'", char46 == '\000');
        org.junit.Assert.assertNotNull(option48);
        org.junit.Assert.assertNull(optionGroup52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(option58);
        org.junit.Assert.assertNotNull(options61);
        org.junit.Assert.assertNull(strArray64);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str67, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(commandLine74);
        org.junit.Assert.assertNotNull(list75);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 52 + "'", int80 == 52);
        org.junit.Assert.assertNull(strArray83);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str86, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(strArray90);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "4" + "'", str92, "4");
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0499");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options53, strArray60, true);
        java.lang.String str64 = commandLine62.getOptionValue('\000');
        java.lang.Object obj66 = commandLine62.getOptionObject("[ option:    :: null ]");
        java.lang.String str68 = commandLine62.getOptionValue('=');
        java.lang.String str71 = commandLine62.getOptionValue(' ', "org.apache.commons.cli.UnrecognizedOptionException: ");
        java.lang.String str73 = commandLine62.getOptionValue("");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: " + "'", str71, "org.apache.commons.cli.UnrecognizedOptionException: ");
        org.junit.Assert.assertNull(str73);
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0080");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup21 = options18.getOptionGroup(option20);
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        org.apache.commons.cli.OptionGroup optionGroup24 = options18.getOptionGroup(option23);
        java.util.List list25 = options18.getRequiredOptions();
        java.util.Collection collection26 = options18.getOptionGroups();
        java.lang.String[] strArray27 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[] strArray29 = posixParser0.flatten(options18, strArray27, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNull(optionGroup21);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNull(optionGroup24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertNotNull(collection26);
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0089");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        java.util.Collection collection46 = options40.getOptionGroups();
        java.lang.String[] strArray47 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options40, strArray47);
        java.lang.String str50 = commandLine48.getOptionValue("[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNull(str50);
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1191");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.Object obj4 = commandLine0.getOptionObject('a');
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        option6.setDescription("");
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option11 = org.apache.commons.cli.OptionBuilder.create('4');
        option11.setDescription("");
        org.apache.commons.cli.Options options14 = options9.addOption(option11);
        boolean boolean15 = option11.hasOptionalArg();
        option6.setType((java.lang.Object) boolean15);
        java.lang.String str17 = option6.getArgName();
        java.lang.Object obj18 = option6.getType();
        java.lang.String[] strArray19 = option6.getValues();
        commandLine0.addOption(option6);
        java.util.Iterator iterator21 = commandLine0.iterator();
        boolean boolean23 = commandLine0.hasOption('=');
        java.lang.String str25 = commandLine0.getOptionValue('=');
        boolean boolean27 = commandLine0.hasOption("[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine0.getOptionValue("org.apache.commons.cli.MissingOptionException: hi!", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        java.util.Iterator iterator31 = commandLine0.iterator();
        boolean boolean33 = commandLine0.hasOption("[ Options: [ short {4=[ option: 4  ::  :: [ option: arg [ option: 4  :: null ] +ARG :: 4 ] ]} ] [ long {} ]");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertNotNull(option11);
        org.junit.Assert.assertNotNull(options14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "arg" + "'", str17, "arg");
        org.junit.Assert.assertEquals("'" + obj18 + "' != '" + false + "'", obj18, false);
        org.junit.Assert.assertNull(strArray19);
        org.junit.Assert.assertNotNull(iterator21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" + "'", str30, "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        org.junit.Assert.assertNotNull(iterator31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0903");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.util.Iterator iterator3 = commandLine0.iterator();
        java.lang.String[] strArray5 = commandLine0.getOptionValues('a');
        java.lang.Object obj7 = commandLine0.getOptionObject('a');
        java.lang.Object obj9 = commandLine0.getOptionObject("org.apache.commons.cli.MissingOptionException: hi!");
        java.lang.String str12 = commandLine0.getOptionValue("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]", "[ option: 4  :: null ]");
        java.lang.String[] strArray14 = commandLine0.getOptionValues('=');
        java.lang.String[] strArray16 = commandLine0.getOptionValues("");
        java.util.Iterator iterator17 = commandLine0.iterator();
        java.lang.String str20 = commandLine0.getOptionValue('a', "4");
        org.apache.commons.cli.Option[] optionArray21 = commandLine0.getOptions();
        java.lang.Class<?> wildcardClass22 = optionArray21.getClass();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(iterator3);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ option: 4  :: null ]" + "'", str12, "[ option: 4  :: null ]");
        org.junit.Assert.assertNull(strArray14);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(iterator17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "4" + "'", str20, "4");
        org.junit.Assert.assertNotNull(optionArray21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1082");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.util.Iterator iterator4 = commandLine0.iterator();
        boolean boolean6 = commandLine0.hasOption("[ option: 4  :: null ]");
        org.apache.commons.cli.Option[] optionArray7 = commandLine0.getOptions();
        java.lang.String[] strArray9 = commandLine0.getOptionValues("org.apache.commons.cli.ParseException: [ option: 4  :: null ::  ]");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(iterator4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(optionArray7);
        org.junit.Assert.assertNull(strArray9);
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0968");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue('\000');
        java.lang.Object obj7 = commandLine0.getOptionObject("");
        java.lang.String[] strArray9 = commandLine0.getOptionValues("org.apache.commons.cli.MissingOptionException: hi!");
        java.lang.String str12 = commandLine0.getOptionValue('a', "[ option: 4 arg  :: null ]");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ option: 4 arg  :: null ]" + "'", str12, "[ option: 4 arg  :: null ]");
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0989");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.util.Iterator iterator3 = commandLine0.iterator();
        java.lang.String[] strArray5 = commandLine0.getOptionValues('a');
        java.lang.Object obj7 = commandLine0.getOptionObject('a');
        java.lang.String str9 = commandLine0.getOptionValue(" ");
        java.lang.String[] strArray11 = commandLine0.getOptionValues('#');
        commandLine0.addArg("[ Options: [ short {=[ option:  +ARG ::  ], 4=[ option: 4  :: null ]} ] [ long {} ]");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(iterator3);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strArray11);
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0116");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option4 = org.apache.commons.cli.OptionBuilder.create('4');
        option4.setDescription("");
        org.apache.commons.cli.Options options7 = options2.addOption(option4);
        org.apache.commons.cli.PosixParser posixParser8 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option11 = org.apache.commons.cli.OptionBuilder.create('4');
        option11.setDescription("");
        org.apache.commons.cli.Options options14 = options9.addOption(option11);
        org.apache.commons.cli.CommandLine commandLine15 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray17 = commandLine15.getOptionValues("hi!");
        java.lang.String[] strArray18 = commandLine15.getArgs();
        java.util.Properties properties19 = null;
        org.apache.commons.cli.CommandLine commandLine20 = posixParser8.parse(options9, strArray18, properties19);
        org.apache.commons.cli.CommandLine commandLine22 = posixParser1.parse(options7, strArray18, false);
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup26 = options23.getOptionGroup(option25);
        org.apache.commons.cli.Option option28 = org.apache.commons.cli.OptionBuilder.create('4');
        char char29 = option28.getValueSeparator();
        org.apache.commons.cli.Option option31 = org.apache.commons.cli.OptionBuilder.create('4');
        option31.setDescription("");
        option28.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup35 = options23.getOptionGroup(option28);
        boolean boolean37 = options23.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser38 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create('4');
        option41.setDescription("");
        org.apache.commons.cli.Options options44 = options39.addOption(option41);
        org.apache.commons.cli.CommandLine commandLine45 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray47 = commandLine45.getOptionValues("hi!");
        java.lang.String[] strArray48 = commandLine45.getArgs();
        java.util.Properties properties49 = null;
        org.apache.commons.cli.CommandLine commandLine50 = posixParser38.parse(options39, strArray48, properties49);
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser1.parse(options23, strArray48, properties51, true);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        option56.setDescription("");
        org.apache.commons.cli.Options options59 = options54.addOption(option56);
        java.util.Collection collection60 = options54.getOptionGroups();
        org.apache.commons.cli.Option option62 = org.apache.commons.cli.OptionBuilder.create('4');
        option62.setDescription("");
        option62.setLongOpt("hi!");
        boolean boolean67 = option62.hasArgName();
        org.apache.commons.cli.Options options68 = options54.addOption(option62);
        org.apache.commons.cli.PosixParser posixParser69 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options70 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option72 = org.apache.commons.cli.OptionBuilder.create('4');
        option72.setDescription("");
        org.apache.commons.cli.Options options75 = options70.addOption(option72);
        org.apache.commons.cli.CommandLine commandLine76 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray78 = commandLine76.getOptionValues("hi!");
        java.lang.String str81 = commandLine76.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str83 = commandLine76.getOptionValue("arg");
        java.lang.String[] strArray84 = commandLine76.getArgs();
        java.lang.String[] strArray86 = posixParser69.flatten(options75, strArray84, false);
        org.apache.commons.cli.CommandLine commandLine87 = posixParser1.parse(options54, strArray86);
        java.lang.String[] strArray93 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]", "[ option:  +ARG ::  ]", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!", "[ option:    :: null ]" };
        java.util.Properties properties94 = null;
        org.apache.commons.cli.CommandLine commandLine96 = posixParser0.parse(options54, strArray93, properties94, false);
        org.apache.commons.cli.Option option97 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options98 = options54.addOption(option97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option4);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option11);
        org.junit.Assert.assertNotNull(options14);
        org.junit.Assert.assertNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(commandLine20);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertNull(optionGroup26);
        org.junit.Assert.assertNotNull(option28);
        org.junit.Assert.assertTrue("'" + char29 + "' != '" + '\000' + "'", char29 == '\000');
        org.junit.Assert.assertNotNull(option31);
        org.junit.Assert.assertNull(optionGroup35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertNull(strArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNotNull(collection60);
        org.junit.Assert.assertNotNull(option62);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(options68);
        org.junit.Assert.assertNotNull(option72);
        org.junit.Assert.assertNotNull(options75);
        org.junit.Assert.assertNull(strArray78);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str81, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(commandLine87);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertNotNull(commandLine96);
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0180");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        boolean boolean2 = commandLine0.hasOption('4');
        org.apache.commons.cli.Option option4 = org.apache.commons.cli.OptionBuilder.create('4');
        char char5 = option4.getValueSeparator();
        boolean boolean6 = option4.hasArg();
        boolean boolean7 = option4.hasOptionalArg();
        java.lang.String str9 = option4.getValue(0);
        java.lang.String[] strArray10 = option4.getValues();
        int int11 = option4.getId();
        commandLine0.addOption(option4);
        java.lang.String str13 = option4.getOpt();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(option4);
        org.junit.Assert.assertTrue("'" + char5 + "' != '" + '\000' + "'", char5 == '\000');
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "4" + "'", str13, "4");
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0308");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken("hi!", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptionGroups();
        org.apache.commons.cli.Option option29 = org.apache.commons.cli.OptionBuilder.create('4');
        option29.setDescription("");
        option29.setLongOpt("hi!");
        boolean boolean34 = option29.hasArgName();
        org.apache.commons.cli.Options options35 = options21.addOption(option29);
        java.util.Collection collection36 = options35.getOptionGroups();
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.PosixParser posixParser44 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options45 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option47 = org.apache.commons.cli.OptionBuilder.create('4');
        option47.setDescription("");
        org.apache.commons.cli.Options options50 = options45.addOption(option47);
        org.apache.commons.cli.CommandLine commandLine51 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray53 = commandLine51.getOptionValues("hi!");
        java.lang.String[] strArray54 = commandLine51.getArgs();
        java.util.Properties properties55 = null;
        org.apache.commons.cli.CommandLine commandLine56 = posixParser44.parse(options45, strArray54, properties55);
        org.apache.commons.cli.CommandLine commandLine58 = posixParser37.parse(options43, strArray54, false);
        org.apache.commons.cli.Options options59 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option61 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup62 = options59.getOptionGroup(option61);
        org.apache.commons.cli.Option option64 = org.apache.commons.cli.OptionBuilder.create('4');
        char char65 = option64.getValueSeparator();
        org.apache.commons.cli.Option option67 = org.apache.commons.cli.OptionBuilder.create('4');
        option67.setDescription("");
        option64.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup71 = options59.getOptionGroup(option64);
        boolean boolean73 = options59.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser74 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options75 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option77 = org.apache.commons.cli.OptionBuilder.create('4');
        option77.setDescription("");
        org.apache.commons.cli.Options options80 = options75.addOption(option77);
        org.apache.commons.cli.CommandLine commandLine81 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray83 = commandLine81.getOptionValues("hi!");
        java.lang.String[] strArray84 = commandLine81.getArgs();
        java.util.Properties properties85 = null;
        org.apache.commons.cli.CommandLine commandLine86 = posixParser74.parse(options75, strArray84, properties85);
        java.util.Properties properties87 = null;
        org.apache.commons.cli.CommandLine commandLine89 = posixParser37.parse(options59, strArray84, properties87, true);
        java.util.Properties properties90 = null;
        org.apache.commons.cli.CommandLine commandLine92 = posixParser0.parse(options35, strArray84, properties90, true);
        org.apache.commons.cli.Option[] optionArray93 = commandLine92.getOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(option29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertNotNull(collection36);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNotNull(option47);
        org.junit.Assert.assertNotNull(options50);
        org.junit.Assert.assertNull(strArray53);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(commandLine56);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertNotNull(option61);
        org.junit.Assert.assertNull(optionGroup62);
        org.junit.Assert.assertNotNull(option64);
        org.junit.Assert.assertTrue("'" + char65 + "' != '" + '\000' + "'", char65 == '\000');
        org.junit.Assert.assertNotNull(option67);
        org.junit.Assert.assertNull(optionGroup71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(option77);
        org.junit.Assert.assertNotNull(options80);
        org.junit.Assert.assertNull(strArray83);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(commandLine86);
        org.junit.Assert.assertNotNull(commandLine89);
        org.junit.Assert.assertNotNull(commandLine92);
        org.junit.Assert.assertNotNull(optionArray93);
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1371");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue("hi!");
        boolean boolean7 = commandLine0.hasOption("");
        commandLine0.addArg("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        boolean boolean11 = commandLine0.hasOption("[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create('4');
        option13.setDescription("");
        org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = org.apache.commons.cli.OptionBuilder.create('4');
        option18.setDescription("");
        org.apache.commons.cli.Options options21 = options16.addOption(option18);
        boolean boolean22 = option13.equals((java.lang.Object) option18);
        option18.setDescription("[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
        commandLine0.addOption(option18);
        java.lang.String str26 = option18.getDescription();
        boolean boolean27 = option18.hasOptionalArg();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertNotNull(option18);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str26, "[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1102");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.util.Iterator iterator3 = commandLine0.iterator();
        java.lang.String[] strArray5 = commandLine0.getOptionValues('a');
        java.lang.Object obj7 = commandLine0.getOptionObject('a');
        java.lang.Object obj9 = commandLine0.getOptionObject("org.apache.commons.cli.MissingOptionException: hi!");
        java.lang.String str12 = commandLine0.getOptionValue("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]", "[ option: 4  :: null ]");
        java.lang.String[] strArray14 = commandLine0.getOptionValues('=');
        java.lang.String[] strArray16 = commandLine0.getOptionValues("[ option: 4  :: null ::  ]");
        java.lang.Object obj18 = commandLine0.getOptionObject('#');
        java.lang.Class<?> wildcardClass19 = commandLine0.getClass();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(iterator3);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ option: 4  :: null ]" + "'", str12, "[ option: 4  :: null ]");
        org.junit.Assert.assertNull(strArray14);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0941");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create('4');
        option1.setDescription("");
        boolean boolean4 = option1.hasValueSeparator();
        java.util.List list5 = option1.getValuesList();
        int int6 = option1.getArgs();
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        option1.setType((java.lang.Object) commandLine7);
        java.util.List list11 = commandLine7.getArgList();
        java.lang.String str13 = commandLine7.getOptionValue('4');
        java.util.List list14 = commandLine7.getArgList();
        java.lang.String str16 = commandLine7.getOptionValue("[ Options: [ short { =[ option:    :: null ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(list5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(list14);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1098");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.util.Iterator iterator4 = commandLine0.iterator();
        boolean boolean6 = commandLine0.hasOption("[ option: 4  :: null ]");
        boolean boolean8 = commandLine0.hasOption('=');
        java.lang.String[] strArray9 = commandLine0.getArgs();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(iterator4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strArray9);
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1305");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        java.util.List list36 = commandLine35.getArgList();
        java.lang.String[] strArray37 = commandLine35.getArgs();
        org.apache.commons.cli.Option[] optionArray38 = commandLine35.getOptions();
        java.util.List list39 = commandLine35.getArgList();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(list36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(optionArray38);
        org.junit.Assert.assertNotNull(list39);
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0020");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken("4", false);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup42 = options39.getOptionGroup(option41);
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create('4');
        char char45 = option44.getValueSeparator();
        org.apache.commons.cli.Option option47 = org.apache.commons.cli.OptionBuilder.create('4');
        option47.setDescription("");
        option44.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup51 = options39.getOptionGroup(option44);
        java.util.Collection collection52 = options39.getOptions();
        java.lang.String[] strArray53 = null;
        org.apache.commons.cli.CommandLine commandLine54 = posixParser0.parse(options39, strArray53);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options59 = options39.addOption("[ option: 4  ::  ]", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", false, "[ option: 4  ::  ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertTrue("'" + char45 + "' != '" + '\000' + "'", char45 == '\000');
        org.junit.Assert.assertNotNull(option47);
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(collection52);
        org.junit.Assert.assertNotNull(commandLine54);
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1074");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String[] strArray10 = commandLine7.getArgs();
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = posixParser0.parse(options1, strArray10, properties11);
        java.lang.String[] strArray13 = commandLine12.getArgs();
        java.lang.String str15 = commandLine12.getOptionValue('4');
        java.lang.String str18 = commandLine12.getOptionValue("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", "[ option:   [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]  :: null ]");
        java.lang.String str21 = commandLine12.getOptionValue("org.apache.commons.cli.UnrecognizedOptionException: arg", "arg");
        java.util.Iterator iterator22 = commandLine12.iterator();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[ option:   [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]  :: null ]" + "'", str18, "[ option:   [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]  :: null ]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "arg" + "'", str21, "arg");
        org.junit.Assert.assertNotNull(iterator22);
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0694");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue("hi!");
        boolean boolean7 = commandLine0.hasOption("");
        java.lang.String str10 = commandLine0.getOptionValue("[ option: 4  :: null ]", "org.apache.commons.cli.MissingOptionException: hi!");
        java.lang.String[] strArray12 = commandLine0.getOptionValues('4');
        java.lang.String[] strArray14 = commandLine0.getOptionValues('a');
        org.apache.commons.cli.Option option16 = org.apache.commons.cli.OptionBuilder.create(' ');
        boolean boolean17 = option16.hasArgName();
        boolean boolean18 = option16.hasArgName();
        commandLine0.addOption(option16);
        java.lang.String str21 = option16.getValue((int) 'a');
        java.lang.String str22 = option16.getOpt();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "org.apache.commons.cli.MissingOptionException: hi!" + "'", str10, "org.apache.commons.cli.MissingOptionException: hi!");
        org.junit.Assert.assertNull(strArray12);
        org.junit.Assert.assertNull(strArray14);
        org.junit.Assert.assertNotNull(option16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + " " + "'", str22, " ");
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1300");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken("hi!", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptions();
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        char char31 = option30.getValueSeparator();
        org.apache.commons.cli.Option option33 = org.apache.commons.cli.OptionBuilder.create('4');
        option33.setDescription("");
        option30.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup37 = options28.getOptionGroup(option30);
        option30.setOptionalArg(true);
        int int40 = option30.getId();
        org.apache.commons.cli.Options options41 = options21.addOption(option30);
        boolean boolean43 = options41.hasOption("");
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        option45.setArgs((int) (short) 100);
        option45.setArgName("[ option: 4  :: null ]");
        java.lang.String str50 = option45.getLongOpt();
        boolean boolean51 = option45.hasLongOpt();
        org.apache.commons.cli.Options options52 = options41.addOption(option45);
        java.util.Collection collection53 = options41.getOptions();
        org.apache.commons.cli.PosixParser posixParser54 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option57 = org.apache.commons.cli.OptionBuilder.create('4');
        option57.setDescription("");
        org.apache.commons.cli.Options options60 = options55.addOption(option57);
        java.util.Collection collection61 = options55.getOptions();
        boolean boolean63 = options55.hasOption("arg");
        java.lang.String[] strArray66 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" };
        org.apache.commons.cli.CommandLine commandLine67 = posixParser54.parse(options55, strArray66);
        java.lang.String[] strArray69 = posixParser0.flatten(options41, strArray66, false);
        java.util.List list70 = options41.helpOptions();
        java.lang.String str71 = options41.toString();
        org.apache.commons.cli.Option option75 = new org.apache.commons.cli.Option("4", false, "[ option: 4  ::  ]");
        java.lang.String str76 = option75.getDescription();
        org.apache.commons.cli.Options options77 = options41.addOption(option75);
        org.apache.commons.cli.Option option79 = options41.getOption("[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
        org.apache.commons.cli.Option option81 = options41.getOption("org.apache.commons.cli.ParseException: [ option: 4  :: null ]");
        java.util.List list82 = options41.helpOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertTrue("'" + char31 + "' != '" + '\000' + "'", char31 == '\000');
        org.junit.Assert.assertNotNull(option33);
        org.junit.Assert.assertNull(optionGroup37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(collection53);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(collection61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(list70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]" + "'", str71, "[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "[ option: 4  ::  ]" + "'", str76, "[ option: 4  ::  ]");
        org.junit.Assert.assertNotNull(options77);
        org.junit.Assert.assertNull(option79);
        org.junit.Assert.assertNull(option81);
        org.junit.Assert.assertNotNull(list82);
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1483");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.PosixParser posixParser53 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        option56.setDescription("");
        org.apache.commons.cli.Options options59 = options54.addOption(option56);
        org.apache.commons.cli.CommandLine commandLine60 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray62 = commandLine60.getOptionValues("hi!");
        java.lang.String str65 = commandLine60.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str67 = commandLine60.getOptionValue("arg");
        java.lang.String[] strArray68 = commandLine60.getArgs();
        java.lang.String[] strArray70 = posixParser53.flatten(options59, strArray68, false);
        org.apache.commons.cli.PosixParser posixParser71 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options72 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option74 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup75 = options72.getOptionGroup(option74);
        org.apache.commons.cli.CommandLine commandLine76 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray78 = commandLine76.getOptionValues("hi!");
        java.lang.String str81 = commandLine76.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str83 = commandLine76.getOptionValue("arg");
        java.lang.String[] strArray84 = commandLine76.getArgs();
        java.lang.String[] strArray86 = posixParser71.flatten(options72, strArray84, true);
        org.apache.commons.cli.CommandLine commandLine88 = posixParser0.parse(options59, strArray84, false);
        java.util.List list89 = options59.getRequiredOptions();
        java.util.Collection collection90 = options59.getOptions();
        java.lang.String str91 = options59.toString();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNull(strArray62);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str65, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(option74);
        org.junit.Assert.assertNull(optionGroup75);
        org.junit.Assert.assertNull(strArray78);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str81, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(commandLine88);
        org.junit.Assert.assertNotNull(list89);
        org.junit.Assert.assertNotNull(collection90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str91, "[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0570");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        boolean boolean4 = commandLine0.hasOption('4');
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1150");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken("4", false);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup42 = options39.getOptionGroup(option41);
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create('4');
        char char45 = option44.getValueSeparator();
        org.apache.commons.cli.Option option47 = org.apache.commons.cli.OptionBuilder.create('4');
        option47.setDescription("");
        option44.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup51 = options39.getOptionGroup(option44);
        java.util.Collection collection52 = options39.getOptions();
        java.lang.String[] strArray53 = null;
        org.apache.commons.cli.CommandLine commandLine54 = posixParser0.parse(options39, strArray53);
        java.lang.String str57 = commandLine54.getOptionValue(' ', "");
        java.lang.String[] strArray59 = commandLine54.getOptionValues(' ');
        java.lang.String str62 = commandLine54.getOptionValue("[ option: 4  :: null :: [ option: 4  :: null ] ]", "org.apache.commons.cli.MissingOptionException: [ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertTrue("'" + char45 + "' != '" + '\000' + "'", char45 == '\000');
        org.junit.Assert.assertNotNull(option47);
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(collection52);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNull(strArray59);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "org.apache.commons.cli.MissingOptionException: [ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str62, "org.apache.commons.cli.MissingOptionException: [ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0246");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine8 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine8.getOptionValues("hi!");
        java.lang.String str13 = commandLine8.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str15 = commandLine8.getOptionValue("arg");
        java.lang.String[] strArray16 = commandLine8.getArgs();
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser0.parse(options1, strArray16, properties17);
        java.lang.String str20 = commandLine18.getOptionValue('#');
        java.lang.Object obj22 = commandLine18.getOptionObject("");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str13, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(obj22);
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1110");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create('4');
        char char2 = option1.getValueSeparator();
        boolean boolean3 = option1.hasArg();
        org.apache.commons.cli.PosixParser posixParser4 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options5 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option7 = org.apache.commons.cli.OptionBuilder.create('4');
        option7.setDescription("");
        org.apache.commons.cli.Options options10 = options5.addOption(option7);
        org.apache.commons.cli.PosixParser posixParser11 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option14 = org.apache.commons.cli.OptionBuilder.create('4');
        option14.setDescription("");
        org.apache.commons.cli.Options options17 = options12.addOption(option14);
        org.apache.commons.cli.CommandLine commandLine18 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray20 = commandLine18.getOptionValues("hi!");
        java.lang.String[] strArray21 = commandLine18.getArgs();
        java.util.Properties properties22 = null;
        org.apache.commons.cli.CommandLine commandLine23 = posixParser11.parse(options12, strArray21, properties22);
        org.apache.commons.cli.CommandLine commandLine25 = posixParser4.parse(options10, strArray21, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option28 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup29 = options26.getOptionGroup(option28);
        org.apache.commons.cli.Option option31 = org.apache.commons.cli.OptionBuilder.create('4');
        char char32 = option31.getValueSeparator();
        org.apache.commons.cli.Option option34 = org.apache.commons.cli.OptionBuilder.create('4');
        option34.setDescription("");
        option31.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup38 = options26.getOptionGroup(option31);
        boolean boolean40 = options26.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser41 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options42 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create('4');
        option44.setDescription("");
        org.apache.commons.cli.Options options47 = options42.addOption(option44);
        org.apache.commons.cli.CommandLine commandLine48 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray50 = commandLine48.getOptionValues("hi!");
        java.lang.String[] strArray51 = commandLine48.getArgs();
        java.util.Properties properties52 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser41.parse(options42, strArray51, properties52);
        java.util.Properties properties54 = null;
        org.apache.commons.cli.CommandLine commandLine56 = posixParser4.parse(options26, strArray51, properties54, true);
        org.apache.commons.cli.PosixParser posixParser57 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options58 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option60 = org.apache.commons.cli.OptionBuilder.create('4');
        option60.setDescription("");
        org.apache.commons.cli.Options options63 = options58.addOption(option60);
        org.apache.commons.cli.CommandLine commandLine64 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray66 = commandLine64.getOptionValues("hi!");
        java.lang.String str69 = commandLine64.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str71 = commandLine64.getOptionValue("arg");
        java.lang.String[] strArray72 = commandLine64.getArgs();
        java.lang.String[] strArray74 = posixParser57.flatten(options63, strArray72, false);
        org.apache.commons.cli.PosixParser posixParser75 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options76 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option78 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup79 = options76.getOptionGroup(option78);
        org.apache.commons.cli.CommandLine commandLine80 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray82 = commandLine80.getOptionValues("hi!");
        java.lang.String str85 = commandLine80.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str87 = commandLine80.getOptionValue("arg");
        java.lang.String[] strArray88 = commandLine80.getArgs();
        java.lang.String[] strArray90 = posixParser75.flatten(options76, strArray88, true);
        org.apache.commons.cli.CommandLine commandLine92 = posixParser4.parse(options63, strArray88, false);
        boolean boolean93 = option1.equals((java.lang.Object) commandLine92);
        java.lang.String str94 = option1.getDescription();
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertTrue("'" + char2 + "' != '" + '\000' + "'", char2 == '\000');
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(option7);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(option14);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(commandLine23);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(option28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(option31);
        org.junit.Assert.assertTrue("'" + char32 + "' != '" + '\000' + "'", char32 == '\000');
        org.junit.Assert.assertNotNull(option34);
        org.junit.Assert.assertNull(optionGroup38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertNotNull(options47);
        org.junit.Assert.assertNull(strArray50);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(commandLine56);
        org.junit.Assert.assertNotNull(option60);
        org.junit.Assert.assertNotNull(options63);
        org.junit.Assert.assertNull(strArray66);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str69, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(option78);
        org.junit.Assert.assertNull(optionGroup79);
        org.junit.Assert.assertNull(strArray82);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str85, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertNotNull(commandLine92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNull(str94);
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0072");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken("[ option: 4  :: null ::  ]", true);
        posixParser0.burstToken("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", false);
        org.apache.commons.cli.PosixParser posixParser42 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        option45.setDescription("");
        org.apache.commons.cli.Options options48 = options43.addOption(option45);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        option52.setDescription("");
        org.apache.commons.cli.Options options55 = options50.addOption(option52);
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray58 = commandLine56.getOptionValues("hi!");
        java.lang.String[] strArray59 = commandLine56.getArgs();
        java.util.Properties properties60 = null;
        org.apache.commons.cli.CommandLine commandLine61 = posixParser49.parse(options50, strArray59, properties60);
        org.apache.commons.cli.CommandLine commandLine63 = posixParser42.parse(options48, strArray59, false);
        java.util.Collection collection64 = options48.getOptionGroups();
        org.apache.commons.cli.PosixParser posixParser65 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options66 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option68 = org.apache.commons.cli.OptionBuilder.create('4');
        option68.setDescription("");
        org.apache.commons.cli.Options options71 = options66.addOption(option68);
        org.apache.commons.cli.CommandLine commandLine72 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray74 = commandLine72.getOptionValues("hi!");
        java.lang.String str77 = commandLine72.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str79 = commandLine72.getOptionValue("arg");
        java.lang.String[] strArray80 = commandLine72.getArgs();
        java.lang.String[] strArray82 = posixParser65.flatten(options71, strArray80, false);
        org.apache.commons.cli.CommandLine commandLine84 = posixParser0.parse(options48, strArray80, false);
        java.lang.Object obj86 = commandLine84.getOptionObject('\000');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNull(strArray58);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(commandLine61);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(collection64);
        org.junit.Assert.assertNotNull(option68);
        org.junit.Assert.assertNotNull(options71);
        org.junit.Assert.assertNull(strArray74);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str77, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(commandLine84);
        org.junit.Assert.assertNull(obj86);
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1616");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option38 = org.apache.commons.cli.OptionBuilder.create('4');
        option38.setDescription("");
        org.apache.commons.cli.Options options41 = options36.addOption(option38);
        org.apache.commons.cli.Options options42 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create('4');
        char char45 = option44.getValueSeparator();
        org.apache.commons.cli.Option option47 = org.apache.commons.cli.OptionBuilder.create('4');
        option47.setDescription("");
        option44.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup51 = options42.getOptionGroup(option44);
        option44.setOptionalArg(true);
        int int54 = option44.getId();
        org.apache.commons.cli.OptionGroup optionGroup55 = options41.getOptionGroup(option44);
        org.apache.commons.cli.Options options56 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option58 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup59 = options56.getOptionGroup(option58);
        boolean boolean60 = option58.hasLongOpt();
        boolean boolean61 = option58.isRequired();
        org.apache.commons.cli.Options options62 = options41.addOption(option58);
        org.apache.commons.cli.PosixParser posixParser63 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options64 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option66 = org.apache.commons.cli.OptionBuilder.create('4');
        option66.setDescription("");
        org.apache.commons.cli.Options options69 = options64.addOption(option66);
        org.apache.commons.cli.CommandLine commandLine70 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray72 = commandLine70.getOptionValues("hi!");
        java.lang.String str75 = commandLine70.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str77 = commandLine70.getOptionValue("arg");
        java.lang.String[] strArray78 = commandLine70.getArgs();
        java.lang.String[] strArray80 = posixParser63.flatten(options69, strArray78, false);
        org.apache.commons.cli.CommandLine commandLine82 = posixParser0.parse(options62, strArray80, false);
        org.apache.commons.cli.Option option84 = org.apache.commons.cli.OptionBuilder.create('4');
        java.lang.String str86 = option84.getValue("arg");
        java.lang.String str87 = option84.getLongOpt();
        option84.setLongOpt("");
        option84.setArgName("");
        commandLine82.addOption(option84);
        org.apache.commons.cli.ParseException parseException94 = new org.apache.commons.cli.ParseException("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  :: [ option: arg [ option: 4  :: null ] +ARG :: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ] ]} ] [ long {} ]");
        org.apache.commons.cli.ParseException parseException96 = new org.apache.commons.cli.ParseException("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]");
        parseException94.addSuppressed((java.lang.Throwable) parseException96);
        boolean boolean98 = option84.equals((java.lang.Object) parseException94);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option38);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertTrue("'" + char45 + "' != '" + '\000' + "'", char45 == '\000');
        org.junit.Assert.assertNotNull(option47);
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 52 + "'", int54 == 52);
        org.junit.Assert.assertNull(optionGroup55);
        org.junit.Assert.assertNotNull(option58);
        org.junit.Assert.assertNull(optionGroup59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(options62);
        org.junit.Assert.assertNotNull(option66);
        org.junit.Assert.assertNotNull(options69);
        org.junit.Assert.assertNull(strArray72);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str75, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(option84);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "arg" + "'", str86, "arg");
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0609");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue("hi!");
        boolean boolean7 = commandLine0.hasOption("");
        java.lang.String str10 = commandLine0.getOptionValue("[ option: 4  :: null ]", "org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.Option[] optionArray11 = commandLine0.getOptions();
        java.lang.Object obj13 = commandLine0.getOptionObject('=');
        java.lang.String str16 = commandLine0.getOptionValue("[ option: 4 arg  :: null ]", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4 org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!  ::  ]} ] [ long {org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!=[ option: 4 org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!  ::  ]} ]");
        boolean boolean18 = commandLine0.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        java.lang.String str21 = commandLine0.getOptionValue(' ', "[ option: 4 [ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ]  :: null ]");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "org.apache.commons.cli.MissingOptionException: hi!" + "'", str10, "org.apache.commons.cli.MissingOptionException: hi!");
        org.junit.Assert.assertNotNull(optionArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4 org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!  ::  ]} ] [ long {org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!=[ option: 4 org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!  ::  ]} ]" + "'", str16, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4 org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!  ::  ]} ] [ long {org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!=[ option: 4 org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!  ::  ]} ]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[ option: 4 [ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ]  :: null ]" + "'", str21, "[ option: 4 [ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ]  :: null ]");
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0110");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken("4", false);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup42 = options39.getOptionGroup(option41);
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create('4');
        char char45 = option44.getValueSeparator();
        org.apache.commons.cli.Option option47 = org.apache.commons.cli.OptionBuilder.create('4');
        option47.setDescription("");
        option44.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup51 = options39.getOptionGroup(option44);
        java.util.Collection collection52 = options39.getOptions();
        java.lang.String[] strArray53 = null;
        org.apache.commons.cli.CommandLine commandLine54 = posixParser0.parse(options39, strArray53);
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option57 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup58 = options55.getOptionGroup(option57);
        org.apache.commons.cli.Option option60 = options55.getOption("org.apache.commons.cli.MissingOptionException: hi!");
        java.util.List list61 = options55.helpOptions();
        org.apache.commons.cli.CommandLine commandLine62 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray64 = commandLine62.getOptionValues("hi!");
        java.lang.String str67 = commandLine62.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str69 = commandLine62.getOptionValue("arg");
        java.lang.String[] strArray70 = commandLine62.getArgs();
        java.util.Properties properties71 = null;
        org.apache.commons.cli.CommandLine commandLine73 = posixParser0.parse(options55, strArray70, properties71, true);
        org.apache.commons.cli.Option option74 = null;
        // The following exception was thrown during execution in test generation
        try {
            commandLine73.addOption(option74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertTrue("'" + char45 + "' != '" + '\000' + "'", char45 == '\000');
        org.junit.Assert.assertNotNull(option47);
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(collection52);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNull(optionGroup58);
        org.junit.Assert.assertNull(option60);
        org.junit.Assert.assertNotNull(list61);
        org.junit.Assert.assertNull(strArray64);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str67, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(commandLine73);
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0364");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        java.util.Collection collection46 = options40.getOptionGroups();
        org.apache.commons.cli.Options options50 = options40.addOption("", false, "arg");
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup54 = options51.getOptionGroup(option53);
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        char char57 = option56.getValueSeparator();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create('4');
        option59.setDescription("");
        option56.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup63 = options51.getOptionGroup(option56);
        boolean boolean64 = option56.hasArgName();
        org.apache.commons.cli.Options options65 = options40.addOption(option56);
        org.apache.commons.cli.CommandLine commandLine66 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray68 = commandLine66.getOptionValues("hi!");
        java.lang.String str71 = commandLine66.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str73 = commandLine66.getOptionValue("arg");
        java.lang.String[] strArray74 = commandLine66.getArgs();
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options40, strArray74, properties75);
        org.apache.commons.cli.Options options77 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option79 = org.apache.commons.cli.OptionBuilder.create('4');
        char char80 = option79.getValueSeparator();
        org.apache.commons.cli.Option option82 = org.apache.commons.cli.OptionBuilder.create('4');
        option82.setDescription("");
        option79.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup86 = options77.getOptionGroup(option79);
        java.lang.String[] strArray89 = new java.lang.String[] { "4", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" };
        java.util.Properties properties90 = null;
        org.apache.commons.cli.CommandLine commandLine91 = posixParser0.parse(options77, strArray89, properties90);
        java.lang.String str94 = commandLine91.getOptionValue("[ option: 4  ::  ]", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str96 = commandLine91.getOptionValue("arg");
        boolean boolean98 = commandLine91.hasOption('=');
        org.apache.commons.cli.Option[] optionArray99 = commandLine91.getOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertNotNull(options50);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertTrue("'" + char57 + "' != '" + '\000' + "'", char57 == '\000');
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertNull(optionGroup63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(options65);
        org.junit.Assert.assertNull(strArray68);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str71, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertNotNull(option79);
        org.junit.Assert.assertTrue("'" + char80 + "' != '" + '\000' + "'", char80 == '\000');
        org.junit.Assert.assertNotNull(option82);
        org.junit.Assert.assertNull(optionGroup86);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(commandLine91);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str94, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str96);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertNotNull(optionArray99);
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0676");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create(' ');
        boolean boolean2 = option1.hasArgName();
        boolean boolean3 = option1.hasArgName();
        boolean boolean4 = option1.hasOptionalArg();
        java.lang.Object obj5 = option1.getType();
        option1.setLongOpt("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.apache.commons.cli.CommandLine commandLine8 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine8.getOptionValues("hi!");
        java.lang.String[] strArray11 = commandLine8.getArgs();
        option1.setType((java.lang.Object) strArray11);
        // The following exception was thrown during execution in test generation
        try {
            option1.addValue("org.apache.commons.cli.UnrecognizedOptionException: ");
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: NO_ARGS_ALLOWED");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1207");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        java.util.List list40 = commandLine39.getArgList();
        java.util.List list41 = commandLine39.getArgList();
        java.lang.String[] strArray43 = commandLine39.getOptionValues('=');
        java.lang.String str45 = commandLine39.getOptionValue("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]");
        java.util.List list46 = commandLine39.getArgList();
        java.lang.Object obj48 = commandLine39.getOptionObject("[ option:    :: [ option: 4 hi!  ::  ] ]");
        boolean boolean50 = commandLine39.hasOption('a');
        commandLine39.addArg("");
        org.apache.commons.cli.Option[] optionArray53 = commandLine39.getOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(list40);
        org.junit.Assert.assertNotNull(list41);
        org.junit.Assert.assertNull(strArray43);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(list46);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(optionArray53);
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1662");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String str5 = commandLine0.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str7 = commandLine0.getOptionValue("arg");
        java.util.Iterator iterator8 = commandLine0.iterator();
        java.lang.String str10 = commandLine0.getOptionValue("[ Options: [ short {4=[ option: 4  :: null ::  ]} ] [ long {} ]");
        java.lang.String str13 = commandLine0.getOptionValue(' ', "[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]");
        java.util.List list14 = commandLine0.getArgList();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str5, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]" + "'", str13, "[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]");
        org.junit.Assert.assertNotNull(list14);
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0240");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Option[] optionArray40 = commandLine39.getOptions();
        java.util.Iterator iterator41 = commandLine39.iterator();
        java.lang.String[] strArray42 = commandLine39.getArgs();
        boolean boolean44 = commandLine39.hasOption("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.Object obj46 = commandLine39.getOptionObject('\000');
        java.lang.String[] strArray47 = commandLine39.getArgs();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(optionArray40);
        org.junit.Assert.assertNotNull(iterator41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNotNull(strArray47);
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1159");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String[] strArray10 = commandLine7.getArgs();
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = posixParser0.parse(options1, strArray10, properties11);
        java.util.Collection collection13 = options1.getOptionGroups();
        java.util.Collection collection14 = options1.getOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
        org.junit.Assert.assertNotNull(collection13);
        org.junit.Assert.assertNotNull(collection14);
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0996");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        java.util.Collection collection46 = options40.getOptionGroups();
        java.lang.String[] strArray47 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options40, strArray47);
        java.lang.String str51 = commandLine48.getOptionValue("[ option:    :: null ]", "[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]");
        java.lang.String[] strArray53 = commandLine48.getOptionValues('=');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]" + "'", str51, "[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]");
        org.junit.Assert.assertNull(strArray53);
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0282");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String[] strArray10 = commandLine7.getArgs();
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = posixParser0.parse(options1, strArray10, properties11);
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option15 = org.apache.commons.cli.OptionBuilder.create('4');
        char char16 = option15.getValueSeparator();
        org.apache.commons.cli.Option option18 = org.apache.commons.cli.OptionBuilder.create('4');
        option18.setDescription("");
        option15.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup22 = options13.getOptionGroup(option15);
        java.util.List list23 = options13.helpOptions();
        org.apache.commons.cli.PosixParser posixParser24 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup28 = options25.getOptionGroup(option27);
        org.apache.commons.cli.CommandLine commandLine29 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray31 = commandLine29.getOptionValues("hi!");
        java.lang.String str34 = commandLine29.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str36 = commandLine29.getOptionValue("arg");
        java.lang.String[] strArray37 = commandLine29.getArgs();
        java.lang.String[] strArray39 = posixParser24.flatten(options25, strArray37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        java.util.Collection collection46 = options40.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine47 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray49 = commandLine47.getOptionValues("hi!");
        java.lang.String str52 = commandLine47.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str54 = commandLine47.getOptionValue("arg");
        java.lang.String[] strArray55 = commandLine47.getArgs();
        java.util.Properties properties56 = null;
        org.apache.commons.cli.CommandLine commandLine58 = posixParser24.parse(options40, strArray55, properties56, false);
        org.apache.commons.cli.CommandLine commandLine59 = posixParser0.parse(options13, strArray55);
        org.apache.commons.cli.Options options60 = null;
        org.apache.commons.cli.CommandLine commandLine61 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray63 = commandLine61.getOptionValues("hi!");
        java.lang.Object obj65 = commandLine61.getOptionObject('a');
        org.apache.commons.cli.Option option67 = org.apache.commons.cli.OptionBuilder.create('4');
        option67.setDescription("");
        org.apache.commons.cli.Options options70 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option72 = org.apache.commons.cli.OptionBuilder.create('4');
        option72.setDescription("");
        org.apache.commons.cli.Options options75 = options70.addOption(option72);
        boolean boolean76 = option72.hasOptionalArg();
        option67.setType((java.lang.Object) boolean76);
        java.lang.String str78 = option67.getArgName();
        java.lang.Object obj79 = option67.getType();
        java.lang.String[] strArray80 = option67.getValues();
        commandLine61.addOption(option67);
        java.lang.String[] strArray82 = commandLine61.getArgs();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.CommandLine commandLine83 = posixParser0.parse(options60, strArray82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
        org.junit.Assert.assertNotNull(option15);
        org.junit.Assert.assertTrue("'" + char16 + "' != '" + '\000' + "'", char16 == '\000');
        org.junit.Assert.assertNotNull(option18);
        org.junit.Assert.assertNull(optionGroup22);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertNull(optionGroup28);
        org.junit.Assert.assertNull(strArray31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str34, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertNull(strArray49);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str52, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertNotNull(commandLine59);
        org.junit.Assert.assertNull(strArray63);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertNotNull(option67);
        org.junit.Assert.assertNotNull(option72);
        org.junit.Assert.assertNotNull(options75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "arg" + "'", str78, "arg");
        org.junit.Assert.assertEquals("'" + obj79 + "' != '" + false + "'", obj79, false);
        org.junit.Assert.assertNull(strArray80);
        org.junit.Assert.assertNotNull(strArray82);
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1447");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue("hi!");
        boolean boolean7 = commandLine0.hasOption("");
        commandLine0.addArg("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        boolean boolean11 = commandLine0.hasOption("[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str15 = option13.getValue("");
        commandLine0.addOption(option13);
        java.lang.String str17 = option13.getDescription();
        option13.setValueSeparator('\000');
        java.lang.String str20 = option13.getKey();
        char char21 = option13.getValueSeparator();
        option13.setArgs(10);
        org.apache.commons.cli.ParseException parseException25 = new org.apache.commons.cli.ParseException("[ option:    :: null :: arg ]");
        boolean boolean26 = option13.equals((java.lang.Object) parseException25);
        java.lang.String str27 = parseException25.toString();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + char21 + "' != '" + '\000' + "'", char21 == '\000');
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "org.apache.commons.cli.ParseException: [ option:    :: null :: arg ]" + "'", str27, "org.apache.commons.cli.ParseException: [ option:    :: null :: arg ]");
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0572");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        posixParser0.burstToken("4", false);
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        option45.setDescription("");
        org.apache.commons.cli.Options options48 = options43.addOption(option45);
        java.util.Collection collection49 = options43.getOptionGroups();
        org.apache.commons.cli.Options options53 = options43.addOption("", false, "arg");
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        boolean boolean56 = option55.hasOptionalArg();
        org.apache.commons.cli.Options options57 = options43.addOption(option55);
        boolean boolean59 = options43.hasOption("");
        org.apache.commons.cli.PosixParser posixParser60 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options61 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option63 = org.apache.commons.cli.OptionBuilder.create('4');
        option63.setDescription("");
        org.apache.commons.cli.Options options66 = options61.addOption(option63);
        org.apache.commons.cli.CommandLine commandLine67 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray69 = commandLine67.getOptionValues("hi!");
        java.lang.String str72 = commandLine67.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str74 = commandLine67.getOptionValue("arg");
        java.lang.String[] strArray75 = commandLine67.getArgs();
        java.lang.String[] strArray77 = posixParser60.flatten(options66, strArray75, false);
        org.apache.commons.cli.CommandLine commandLine79 = posixParser0.parse(options43, strArray75, false);
        java.util.Iterator iterator80 = commandLine79.iterator();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(collection49);
        org.junit.Assert.assertNotNull(options53);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(options57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(option63);
        org.junit.Assert.assertNotNull(options66);
        org.junit.Assert.assertNull(strArray69);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str72, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(commandLine79);
        org.junit.Assert.assertNotNull(iterator80);
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1260");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.util.Iterator iterator4 = commandLine0.iterator();
        java.lang.String str7 = commandLine0.getOptionValue("[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]", "arg");
        boolean boolean9 = commandLine0.hasOption("[ option: 4  :: null ]");
        java.lang.String[] strArray11 = commandLine0.getOptionValues("");
        java.lang.String str14 = commandLine0.getOptionValue("[ option: 4  :: null ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        java.lang.String str17 = commandLine0.getOptionValue('4', "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.List list24 = option20.getValuesList();
        option20.setValueSeparator(' ');
        option20.setValueSeparator('a');
        commandLine0.addOption(option20);
        java.lang.Object obj31 = commandLine0.getOptionObject('a');
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(iterator4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strArray11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" + "'", str14, "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str17, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(list24);
        org.junit.Assert.assertNull(obj31);
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0234");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create('4');
        char char2 = option1.getValueSeparator();
        boolean boolean3 = option1.hasArg();
        boolean boolean4 = option1.hasOptionalArg();
        java.lang.String str6 = option1.getValue(0);
        java.lang.String[] strArray7 = option1.getValues();
        int int8 = option1.getId();
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray11 = commandLine9.getOptionValues("hi!");
        java.lang.String[] strArray12 = commandLine9.getArgs();
        java.util.Iterator iterator13 = commandLine9.iterator();
        java.lang.String str16 = commandLine9.getOptionValue("[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]", "arg");
        java.lang.Object obj18 = commandLine9.getOptionObject("[ option: 4  :: null ]");
        option1.setType((java.lang.Object) "[ option: 4  :: null ]");
        boolean boolean20 = option1.isRequired();
        boolean boolean21 = option1.hasLongOpt();
        boolean boolean22 = option1.hasArg();
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertTrue("'" + char2 + "' != '" + '\000' + "'", char2 == '\000');
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(strArray7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(iterator13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "arg" + "'", str16, "arg");
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1605");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String[] strArray10 = commandLine7.getArgs();
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = posixParser0.parse(options1, strArray10, properties11);
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option15 = org.apache.commons.cli.OptionBuilder.create('4');
        option15.setDescription("");
        org.apache.commons.cli.Options options18 = options13.addOption(option15);
        java.util.Collection collection19 = options13.getOptionGroups();
        org.apache.commons.cli.Options options23 = options13.addOption("", false, "arg");
        org.apache.commons.cli.Option option27 = new org.apache.commons.cli.Option("", true, "");
        boolean boolean28 = option27.hasOptionalArg();
        option27.setOptionalArg(false);
        org.apache.commons.cli.OptionGroup optionGroup31 = options23.getOptionGroup(option27);
        java.util.Collection collection32 = options23.getOptionGroups();
        org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option36 = org.apache.commons.cli.OptionBuilder.create('4');
        option36.setDescription("");
        org.apache.commons.cli.Options options39 = options34.addOption(option36);
        java.util.Collection collection40 = options34.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine41 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray43 = commandLine41.getOptionValues("hi!");
        java.lang.String str46 = commandLine41.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str48 = commandLine41.getOptionValue("arg");
        java.lang.String[] strArray49 = commandLine41.getArgs();
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine51 = posixParser33.parse(options34, strArray49, properties50);
        java.lang.String[] strArray53 = posixParser0.flatten(options23, strArray49, true);
        posixParser0.burstToken("", true);
        posixParser0.burstToken("[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]", true);
        org.apache.commons.cli.Options options60 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option62 = org.apache.commons.cli.OptionBuilder.create('4');
        char char63 = option62.getValueSeparator();
        org.apache.commons.cli.Option option65 = org.apache.commons.cli.OptionBuilder.create('4');
        option65.setDescription("");
        option62.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup69 = options60.getOptionGroup(option62);
        java.util.List list70 = options60.helpOptions();
        java.util.Collection collection71 = options60.getOptionGroups();
        java.util.Collection collection72 = options60.getOptions();
        java.lang.String[] strArray73 = null;
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine75 = posixParser0.parse(options60, strArray73, properties74);
        posixParser0.burstToken("[ Options: [ short {=[ option:  +ARG ::  ]} ] [ long {} ]", false);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
        org.junit.Assert.assertNotNull(option15);
        org.junit.Assert.assertNotNull(options18);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(optionGroup31);
        org.junit.Assert.assertNotNull(collection32);
        org.junit.Assert.assertNotNull(option36);
        org.junit.Assert.assertNotNull(options39);
        org.junit.Assert.assertNotNull(collection40);
        org.junit.Assert.assertNull(strArray43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str46, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(option62);
        org.junit.Assert.assertTrue("'" + char63 + "' != '" + '\000' + "'", char63 == '\000');
        org.junit.Assert.assertNotNull(option65);
        org.junit.Assert.assertNull(optionGroup69);
        org.junit.Assert.assertNotNull(list70);
        org.junit.Assert.assertNotNull(collection71);
        org.junit.Assert.assertNotNull(collection72);
        org.junit.Assert.assertNotNull(commandLine75);
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0127");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        java.util.Collection collection53 = options22.getOptionGroups();
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        option56.setDescription("");
        org.apache.commons.cli.Options options59 = options54.addOption(option56);
        java.util.Collection collection60 = options54.getOptionGroups();
        org.apache.commons.cli.Options options64 = options54.addOption("", false, "arg");
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option67 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup68 = options65.getOptionGroup(option67);
        org.apache.commons.cli.Option option70 = org.apache.commons.cli.OptionBuilder.create('4');
        char char71 = option70.getValueSeparator();
        org.apache.commons.cli.Option option73 = org.apache.commons.cli.OptionBuilder.create('4');
        option73.setDescription("");
        option70.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup77 = options65.getOptionGroup(option70);
        boolean boolean78 = option70.hasArgName();
        org.apache.commons.cli.Options options79 = options54.addOption(option70);
        org.apache.commons.cli.Options options80 = options22.addOption(option70);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options85 = options80.addOption("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ::  ]} ] [ long {} ]", "[ option: 4  :: [ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ] ::  ]", true, "[ option:  +ARG ::  ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(collection53);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNotNull(collection60);
        org.junit.Assert.assertNotNull(options64);
        org.junit.Assert.assertNotNull(option67);
        org.junit.Assert.assertNull(optionGroup68);
        org.junit.Assert.assertNotNull(option70);
        org.junit.Assert.assertTrue("'" + char71 + "' != '" + '\000' + "'", char71 == '\000');
        org.junit.Assert.assertNotNull(option73);
        org.junit.Assert.assertNull(optionGroup77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(options79);
        org.junit.Assert.assertNotNull(options80);
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0030");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        java.util.Collection collection46 = options40.getOptionGroups();
        java.lang.String[] strArray47 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options40, strArray47);
        java.lang.Class<?> wildcardClass49 = commandLine48.getClass();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1265");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option2 = org.apache.commons.cli.OptionBuilder.create('4');
        option2.setDescription("");
        org.apache.commons.cli.Options options5 = options0.addOption(option2);
        java.util.Collection collection6 = options0.getOptionGroups();
        org.apache.commons.cli.Options options10 = options0.addOption("", false, "arg");
        org.apache.commons.cli.Option option14 = new org.apache.commons.cli.Option("", true, "");
        boolean boolean15 = option14.hasOptionalArg();
        option14.setOptionalArg(false);
        org.apache.commons.cli.OptionGroup optionGroup18 = options10.getOptionGroup(option14);
        java.lang.String str20 = option14.getValue("[ option: 4  :: [ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ] ::  ]");
        org.apache.commons.cli.PosixParser posixParser21 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String str49 = commandLine44.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str51 = commandLine44.getOptionValue("arg");
        java.lang.String[] strArray52 = commandLine44.getArgs();
        java.lang.String[] strArray54 = posixParser37.flatten(options43, strArray52, false);
        java.util.Properties properties55 = null;
        org.apache.commons.cli.CommandLine commandLine56 = posixParser21.parse(options22, strArray54, properties55);
        posixParser21.burstToken("[ option: 4  :: null ::  ]", true);
        posixParser21.burstToken("[ Options: [ short {} ] [ long {} ]", true);
        boolean boolean63 = option14.equals((java.lang.Object) posixParser21);
        java.lang.String str64 = option14.getLongOpt();
        java.lang.String str65 = option14.getOpt();
        org.junit.Assert.assertNotNull(option2);
        org.junit.Assert.assertNotNull(options5);
        org.junit.Assert.assertNotNull(collection6);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(optionGroup18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[ option: 4  :: [ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ] ::  ]" + "'", str20, "[ option: 4  :: [ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ] ::  ]");
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str49, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(commandLine56);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0112");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create('4');
        java.lang.String str3 = option1.getValue("arg");
        org.apache.commons.cli.MissingOptionException missingOptionException5 = new org.apache.commons.cli.MissingOptionException("hi!");
        boolean boolean6 = option1.equals((java.lang.Object) "hi!");
        java.lang.String str7 = option1.toString();
        java.lang.String str9 = option1.getValue(100);
        java.lang.String str10 = option1.getKey();
        org.apache.commons.cli.PosixParser posixParser11 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option14 = org.apache.commons.cli.OptionBuilder.create('4');
        option14.setDescription("");
        org.apache.commons.cli.Options options17 = options12.addOption(option14);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option21 = org.apache.commons.cli.OptionBuilder.create('4');
        option21.setDescription("");
        org.apache.commons.cli.Options options24 = options19.addOption(option21);
        org.apache.commons.cli.CommandLine commandLine25 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray27 = commandLine25.getOptionValues("hi!");
        java.lang.String[] strArray28 = commandLine25.getArgs();
        java.util.Properties properties29 = null;
        org.apache.commons.cli.CommandLine commandLine30 = posixParser18.parse(options19, strArray28, properties29);
        org.apache.commons.cli.CommandLine commandLine32 = posixParser11.parse(options17, strArray28, false);
        org.apache.commons.cli.Options options33 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option35 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup36 = options33.getOptionGroup(option35);
        org.apache.commons.cli.Option option38 = org.apache.commons.cli.OptionBuilder.create('4');
        char char39 = option38.getValueSeparator();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create('4');
        option41.setDescription("");
        option38.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup45 = options33.getOptionGroup(option38);
        boolean boolean47 = options33.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser48 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option51 = org.apache.commons.cli.OptionBuilder.create('4');
        option51.setDescription("");
        org.apache.commons.cli.Options options54 = options49.addOption(option51);
        org.apache.commons.cli.CommandLine commandLine55 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray57 = commandLine55.getOptionValues("hi!");
        java.lang.String[] strArray58 = commandLine55.getArgs();
        java.util.Properties properties59 = null;
        org.apache.commons.cli.CommandLine commandLine60 = posixParser48.parse(options49, strArray58, properties59);
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine63 = posixParser11.parse(options33, strArray58, properties61, true);
        org.apache.commons.cli.Options options64 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option66 = org.apache.commons.cli.OptionBuilder.create('4');
        option66.setDescription("");
        org.apache.commons.cli.Options options69 = options64.addOption(option66);
        java.util.Collection collection70 = options64.getOptions();
        java.lang.String[] strArray71 = null;
        org.apache.commons.cli.CommandLine commandLine73 = posixParser11.parse(options64, strArray71, true);
        org.apache.commons.cli.PosixParser posixParser74 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options75 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option77 = org.apache.commons.cli.OptionBuilder.create('4');
        option77.setDescription("");
        org.apache.commons.cli.Options options80 = options75.addOption(option77);
        org.apache.commons.cli.CommandLine commandLine81 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray83 = commandLine81.getOptionValues("hi!");
        java.lang.String[] strArray84 = commandLine81.getArgs();
        java.util.Properties properties85 = null;
        org.apache.commons.cli.CommandLine commandLine86 = posixParser74.parse(options75, strArray84, properties85);
        java.lang.String[] strArray89 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]", "hi!" };
        java.util.Properties properties90 = null;
        org.apache.commons.cli.CommandLine commandLine92 = posixParser11.parse(options75, strArray89, properties90, true);
        option1.setType((java.lang.Object) properties90);
        java.lang.String str94 = option1.getArgName();
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "arg" + "'", str3, "arg");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[ option: 4  :: null ]" + "'", str7, "[ option: 4  :: null ]");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "4" + "'", str10, "4");
        org.junit.Assert.assertNotNull(option14);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(option21);
        org.junit.Assert.assertNotNull(options24);
        org.junit.Assert.assertNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(commandLine30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(option35);
        org.junit.Assert.assertNull(optionGroup36);
        org.junit.Assert.assertNotNull(option38);
        org.junit.Assert.assertTrue("'" + char39 + "' != '" + '\000' + "'", char39 == '\000');
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(option51);
        org.junit.Assert.assertNotNull(options54);
        org.junit.Assert.assertNull(strArray57);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(commandLine60);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(option66);
        org.junit.Assert.assertNotNull(options69);
        org.junit.Assert.assertNotNull(collection70);
        org.junit.Assert.assertNotNull(commandLine73);
        org.junit.Assert.assertNotNull(option77);
        org.junit.Assert.assertNotNull(options80);
        org.junit.Assert.assertNull(strArray83);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(commandLine86);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(commandLine92);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "arg" + "'", str94, "arg");
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0746");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        java.util.Collection collection46 = options40.getOptionGroups();
        org.apache.commons.cli.Options options50 = options40.addOption("", false, "arg");
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup54 = options51.getOptionGroup(option53);
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        char char57 = option56.getValueSeparator();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create('4');
        option59.setDescription("");
        option56.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup63 = options51.getOptionGroup(option56);
        boolean boolean64 = option56.hasArgName();
        org.apache.commons.cli.Options options65 = options40.addOption(option56);
        org.apache.commons.cli.CommandLine commandLine66 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray68 = commandLine66.getOptionValues("hi!");
        java.lang.String str71 = commandLine66.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str73 = commandLine66.getOptionValue("arg");
        java.lang.String[] strArray74 = commandLine66.getArgs();
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options40, strArray74, properties75);
        org.apache.commons.cli.Options options77 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option79 = org.apache.commons.cli.OptionBuilder.create('4');
        char char80 = option79.getValueSeparator();
        org.apache.commons.cli.Option option82 = org.apache.commons.cli.OptionBuilder.create('4');
        option82.setDescription("");
        option79.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup86 = options77.getOptionGroup(option79);
        java.lang.String[] strArray89 = new java.lang.String[] { "4", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" };
        java.util.Properties properties90 = null;
        org.apache.commons.cli.CommandLine commandLine91 = posixParser0.parse(options77, strArray89, properties90);
        org.apache.commons.cli.OptionBuilder optionBuilder92 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) commandLine91);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertNotNull(options50);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertTrue("'" + char57 + "' != '" + '\000' + "'", char57 == '\000');
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertNull(optionGroup63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(options65);
        org.junit.Assert.assertNull(strArray68);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str71, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertNotNull(option79);
        org.junit.Assert.assertTrue("'" + char80 + "' != '" + '\000' + "'", char80 == '\000');
        org.junit.Assert.assertNotNull(option82);
        org.junit.Assert.assertNull(optionGroup86);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(commandLine91);
        org.junit.Assert.assertNotNull(optionBuilder92);
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1512");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptionGroups();
        org.apache.commons.cli.Option option61 = org.apache.commons.cli.OptionBuilder.create('4');
        option61.setDescription("");
        option61.setLongOpt("hi!");
        boolean boolean66 = option61.hasArgName();
        org.apache.commons.cli.Options options67 = options53.addOption(option61);
        org.apache.commons.cli.PosixParser posixParser68 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options69 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option71 = org.apache.commons.cli.OptionBuilder.create('4');
        option71.setDescription("");
        org.apache.commons.cli.Options options74 = options69.addOption(option71);
        org.apache.commons.cli.CommandLine commandLine75 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray77 = commandLine75.getOptionValues("hi!");
        java.lang.String str80 = commandLine75.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str82 = commandLine75.getOptionValue("arg");
        java.lang.String[] strArray83 = commandLine75.getArgs();
        java.lang.String[] strArray85 = posixParser68.flatten(options74, strArray83, false);
        org.apache.commons.cli.CommandLine commandLine86 = posixParser0.parse(options53, strArray85);
        java.lang.Object obj88 = commandLine86.getOptionObject('a');
        java.lang.String str90 = commandLine86.getOptionValue('=');
        java.lang.String str92 = commandLine86.getOptionValue('\000');
        java.lang.String str95 = commandLine86.getOptionValue("[ option: arg  :: [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ] ]", "");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(option61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(options67);
        org.junit.Assert.assertNotNull(option71);
        org.junit.Assert.assertNotNull(options74);
        org.junit.Assert.assertNull(strArray77);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str80, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(commandLine86);
        org.junit.Assert.assertNull(obj88);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0581");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String[] strArray10 = commandLine7.getArgs();
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = posixParser0.parse(options1, strArray10, properties11);
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option15 = org.apache.commons.cli.OptionBuilder.create('4');
        option15.setDescription("");
        org.apache.commons.cli.Options options18 = options13.addOption(option15);
        java.lang.String str19 = options13.toString();
        org.apache.commons.cli.CommandLine commandLine20 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray22 = commandLine20.getOptionValues("hi!");
        java.lang.String str25 = commandLine20.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str27 = commandLine20.getOptionValue("arg");
        java.lang.String[] strArray28 = commandLine20.getArgs();
        java.util.Properties properties29 = null;
        org.apache.commons.cli.CommandLine commandLine31 = posixParser0.parse(options13, strArray28, properties29, false);
        java.lang.String str34 = commandLine31.getOptionValue('4', "org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]");
        boolean boolean36 = commandLine31.hasOption("[ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ]");
        java.lang.String[] strArray38 = commandLine31.getOptionValues("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ], arg=[ option: arg  :: null ]} ] [ long {} ]");
        java.lang.Object obj40 = commandLine31.getOptionObject('=');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
        org.junit.Assert.assertNotNull(option15);
        org.junit.Assert.assertNotNull(options18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str19, "[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(strArray22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str25, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]" + "'", str34, "org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(strArray38);
        org.junit.Assert.assertNull(obj40);
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1177");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken("hi!", true);
        org.apache.commons.cli.PosixParser posixParser21 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create('4');
        option24.setDescription("");
        org.apache.commons.cli.Options options27 = options22.addOption(option24);
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option31 = org.apache.commons.cli.OptionBuilder.create('4');
        option31.setDescription("");
        org.apache.commons.cli.Options options34 = options29.addOption(option31);
        org.apache.commons.cli.CommandLine commandLine35 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray37 = commandLine35.getOptionValues("hi!");
        java.lang.String[] strArray38 = commandLine35.getArgs();
        java.util.Properties properties39 = null;
        org.apache.commons.cli.CommandLine commandLine40 = posixParser28.parse(options29, strArray38, properties39);
        org.apache.commons.cli.CommandLine commandLine42 = posixParser21.parse(options27, strArray38, false);
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup46 = options43.getOptionGroup(option45);
        org.apache.commons.cli.Option option48 = org.apache.commons.cli.OptionBuilder.create('4');
        char char49 = option48.getValueSeparator();
        org.apache.commons.cli.Option option51 = org.apache.commons.cli.OptionBuilder.create('4');
        option51.setDescription("");
        option48.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup55 = options43.getOptionGroup(option48);
        boolean boolean57 = options43.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser58 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options59 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option61 = org.apache.commons.cli.OptionBuilder.create('4');
        option61.setDescription("");
        org.apache.commons.cli.Options options64 = options59.addOption(option61);
        org.apache.commons.cli.CommandLine commandLine65 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray67 = commandLine65.getOptionValues("hi!");
        java.lang.String[] strArray68 = commandLine65.getArgs();
        java.util.Properties properties69 = null;
        org.apache.commons.cli.CommandLine commandLine70 = posixParser58.parse(options59, strArray68, properties69);
        java.util.Properties properties71 = null;
        org.apache.commons.cli.CommandLine commandLine73 = posixParser21.parse(options43, strArray68, properties71, true);
        java.lang.String str74 = options43.toString();
        org.apache.commons.cli.PosixParser posixParser75 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options76 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option78 = org.apache.commons.cli.OptionBuilder.create('4');
        option78.setDescription("");
        org.apache.commons.cli.Options options81 = options76.addOption(option78);
        java.util.Collection collection82 = options76.getOptions();
        boolean boolean84 = options76.hasOption("arg");
        java.lang.String[] strArray87 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" };
        org.apache.commons.cli.CommandLine commandLine88 = posixParser75.parse(options76, strArray87);
        org.apache.commons.cli.CommandLine commandLine90 = posixParser0.parse(options43, strArray87, false);
        boolean boolean92 = commandLine90.hasOption("");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNotNull(options27);
        org.junit.Assert.assertNotNull(option31);
        org.junit.Assert.assertNotNull(options34);
        org.junit.Assert.assertNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(commandLine40);
        org.junit.Assert.assertNotNull(commandLine42);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNull(optionGroup46);
        org.junit.Assert.assertNotNull(option48);
        org.junit.Assert.assertTrue("'" + char49 + "' != '" + '\000' + "'", char49 == '\000');
        org.junit.Assert.assertNotNull(option51);
        org.junit.Assert.assertNull(optionGroup55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(option61);
        org.junit.Assert.assertNotNull(options64);
        org.junit.Assert.assertNull(strArray67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(commandLine70);
        org.junit.Assert.assertNotNull(commandLine73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str74, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(option78);
        org.junit.Assert.assertNotNull(options81);
        org.junit.Assert.assertNotNull(collection82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(commandLine88);
        org.junit.Assert.assertNotNull(commandLine90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1422");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String[] strArray10 = commandLine7.getArgs();
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = posixParser0.parse(options1, strArray10, properties11);
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option15 = org.apache.commons.cli.OptionBuilder.create('4');
        option15.setDescription("");
        org.apache.commons.cli.Options options18 = options13.addOption(option15);
        java.lang.String str19 = options13.toString();
        org.apache.commons.cli.CommandLine commandLine20 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray22 = commandLine20.getOptionValues("hi!");
        java.lang.String str25 = commandLine20.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str27 = commandLine20.getOptionValue("arg");
        java.lang.String[] strArray28 = commandLine20.getArgs();
        java.util.Properties properties29 = null;
        org.apache.commons.cli.CommandLine commandLine31 = posixParser0.parse(options13, strArray28, properties29, false);
        java.lang.String str33 = commandLine31.getOptionValue('#');
        java.util.List list34 = commandLine31.getArgList();
        boolean boolean36 = commandLine31.hasOption("org.apache.commons.cli.ParseException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
        org.junit.Assert.assertNotNull(option15);
        org.junit.Assert.assertNotNull(options18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str19, "[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(strArray22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str25, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(list34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1450");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue("hi!");
        boolean boolean7 = commandLine0.hasOption("");
        commandLine0.addArg("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        boolean boolean11 = commandLine0.hasOption("[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str15 = option13.getValue("");
        commandLine0.addOption(option13);
        java.lang.String str17 = option13.getDescription();
        option13.setValueSeparator('\000');
        java.lang.String str20 = option13.getKey();
        char char21 = option13.getValueSeparator();
        option13.setArgs(10);
        boolean boolean24 = option13.hasArg();
        boolean boolean25 = option13.hasArg();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + char21 + "' != '" + '\000' + "'", char21 == '\000');
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1281");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String[] strArray10 = commandLine7.getArgs();
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = posixParser0.parse(options1, strArray10, properties11);
        posixParser0.burstToken("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  :: [ option: arg [ option: 4  :: null ] +ARG :: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ] ]} ] [ long {} ]", true);
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup20 = options17.getOptionGroup(option19);
        org.apache.commons.cli.Option option22 = org.apache.commons.cli.OptionBuilder.create('4');
        char char23 = option22.getValueSeparator();
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create('4');
        option25.setDescription("");
        option22.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup29 = options17.getOptionGroup(option22);
        boolean boolean31 = options17.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser32 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options33 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option35 = org.apache.commons.cli.OptionBuilder.create('4');
        option35.setDescription("");
        org.apache.commons.cli.Options options38 = options33.addOption(option35);
        org.apache.commons.cli.CommandLine commandLine39 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray41 = commandLine39.getOptionValues("hi!");
        java.lang.String str44 = commandLine39.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str46 = commandLine39.getOptionValue("arg");
        java.lang.String[] strArray47 = commandLine39.getArgs();
        java.lang.String[] strArray49 = posixParser32.flatten(options38, strArray47, false);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine51 = posixParser16.parse(options17, strArray49, properties50);
        java.lang.String str52 = options17.toString();
        org.apache.commons.cli.CommandLine commandLine53 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray55 = commandLine53.getOptionValues("hi!");
        java.lang.Object obj57 = commandLine53.getOptionObject('a');
        java.lang.String str60 = commandLine53.getOptionValue('\000', "org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        java.lang.String[] strArray61 = commandLine53.getArgs();
        java.lang.String[] strArray63 = posixParser0.flatten(options17, strArray61, false);
        posixParser0.burstToken("[ option: 4  :: null :: [ option: 4  ::  ] ]", true);
        posixParser0.burstToken("", true);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNull(optionGroup20);
        org.junit.Assert.assertNotNull(option22);
        org.junit.Assert.assertTrue("'" + char23 + "' != '" + '\000' + "'", char23 == '\000');
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(option35);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNull(strArray41);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str44, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str52, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNull(strArray55);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" + "'", str60, "org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(strArray63);
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1211");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptionGroups();
        org.apache.commons.cli.Option option61 = org.apache.commons.cli.OptionBuilder.create('4');
        option61.setDescription("");
        option61.setLongOpt("hi!");
        boolean boolean66 = option61.hasArgName();
        org.apache.commons.cli.Options options67 = options53.addOption(option61);
        org.apache.commons.cli.PosixParser posixParser68 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options69 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option71 = org.apache.commons.cli.OptionBuilder.create('4');
        option71.setDescription("");
        org.apache.commons.cli.Options options74 = options69.addOption(option71);
        org.apache.commons.cli.CommandLine commandLine75 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray77 = commandLine75.getOptionValues("hi!");
        java.lang.String str80 = commandLine75.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str82 = commandLine75.getOptionValue("arg");
        java.lang.String[] strArray83 = commandLine75.getArgs();
        java.lang.String[] strArray85 = posixParser68.flatten(options74, strArray83, false);
        org.apache.commons.cli.CommandLine commandLine86 = posixParser0.parse(options53, strArray85);
        java.lang.String str89 = commandLine86.getOptionValue("[ option: 4 hi!  ::  ]", "");
        java.util.List list90 = commandLine86.getArgList();
        java.lang.String[] strArray91 = commandLine86.getArgs();
        java.lang.String str93 = commandLine86.getOptionValue('=');
        boolean boolean95 = commandLine86.hasOption("[ option: 4  :: null :: [ option: arg [ option: 4  :: null ] +ARG :: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ] ]");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(option61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(options67);
        org.junit.Assert.assertNotNull(option71);
        org.junit.Assert.assertNotNull(options74);
        org.junit.Assert.assertNull(strArray77);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str80, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(commandLine86);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertNotNull(list90);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNull(str93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1613");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine8 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine8.getOptionValues("hi!");
        java.lang.String str13 = commandLine8.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str15 = commandLine8.getOptionValue("arg");
        java.lang.String[] strArray16 = commandLine8.getArgs();
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser0.parse(options1, strArray16, properties17);
        org.apache.commons.cli.Options options23 = options1.addOption(" ", "", true, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.util.List list24 = options23.helpOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str13, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(list24);
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0053");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options53, strArray60, true);
        java.lang.String str64 = commandLine62.getOptionValue('\000');
        java.lang.Object obj66 = commandLine62.getOptionObject("[ option:    :: null ]");
        org.apache.commons.cli.Option[] optionArray67 = commandLine62.getOptions();
        java.lang.String[] strArray68 = commandLine62.getArgs();
        java.util.Iterator iterator69 = commandLine62.iterator();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNotNull(optionArray67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(iterator69);
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1639");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String str5 = commandLine0.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str7 = commandLine0.getOptionValue("arg");
        java.lang.String str9 = commandLine0.getOptionValue('a');
        java.lang.String str12 = commandLine0.getOptionValue("[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        java.lang.String str15 = commandLine0.getOptionValue(' ', "[ option: 4 [ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ]  :: null ]");
        java.util.Iterator iterator16 = commandLine0.iterator();
        java.lang.Object obj18 = commandLine0.getOptionObject("");
        java.lang.String str21 = commandLine0.getOptionValue('=', "org.apache.commons.cli.ParseException: org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str5, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" + "'", str12, "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[ option: 4 [ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ]  :: null ]" + "'", str15, "[ option: 4 [ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ]  :: null ]");
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "org.apache.commons.cli.ParseException: org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]" + "'", str21, "org.apache.commons.cli.ParseException: org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]");
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0052");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option4 = org.apache.commons.cli.OptionBuilder.create('4');
        option4.setDescription("");
        org.apache.commons.cli.Options options7 = options2.addOption(option4);
        org.apache.commons.cli.PosixParser posixParser8 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option11 = org.apache.commons.cli.OptionBuilder.create('4');
        option11.setDescription("");
        org.apache.commons.cli.Options options14 = options9.addOption(option11);
        org.apache.commons.cli.CommandLine commandLine15 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray17 = commandLine15.getOptionValues("hi!");
        java.lang.String[] strArray18 = commandLine15.getArgs();
        java.util.Properties properties19 = null;
        org.apache.commons.cli.CommandLine commandLine20 = posixParser8.parse(options9, strArray18, properties19);
        org.apache.commons.cli.CommandLine commandLine22 = posixParser1.parse(options7, strArray18, false);
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup26 = options23.getOptionGroup(option25);
        org.apache.commons.cli.Option option28 = org.apache.commons.cli.OptionBuilder.create('4');
        char char29 = option28.getValueSeparator();
        org.apache.commons.cli.Option option31 = org.apache.commons.cli.OptionBuilder.create('4');
        option31.setDescription("");
        option28.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup35 = options23.getOptionGroup(option28);
        boolean boolean37 = options23.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser38 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create('4');
        option41.setDescription("");
        org.apache.commons.cli.Options options44 = options39.addOption(option41);
        org.apache.commons.cli.CommandLine commandLine45 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray47 = commandLine45.getOptionValues("hi!");
        java.lang.String[] strArray48 = commandLine45.getArgs();
        java.util.Properties properties49 = null;
        org.apache.commons.cli.CommandLine commandLine50 = posixParser38.parse(options39, strArray48, properties49);
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser1.parse(options23, strArray48, properties51, true);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        option56.setDescription("");
        org.apache.commons.cli.Options options59 = options54.addOption(option56);
        java.util.Collection collection60 = options54.getOptionGroups();
        org.apache.commons.cli.Option option62 = org.apache.commons.cli.OptionBuilder.create('4');
        option62.setDescription("");
        option62.setLongOpt("hi!");
        boolean boolean67 = option62.hasArgName();
        org.apache.commons.cli.Options options68 = options54.addOption(option62);
        org.apache.commons.cli.PosixParser posixParser69 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options70 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option72 = org.apache.commons.cli.OptionBuilder.create('4');
        option72.setDescription("");
        org.apache.commons.cli.Options options75 = options70.addOption(option72);
        org.apache.commons.cli.CommandLine commandLine76 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray78 = commandLine76.getOptionValues("hi!");
        java.lang.String str81 = commandLine76.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str83 = commandLine76.getOptionValue("arg");
        java.lang.String[] strArray84 = commandLine76.getArgs();
        java.lang.String[] strArray86 = posixParser69.flatten(options75, strArray84, false);
        org.apache.commons.cli.CommandLine commandLine87 = posixParser1.parse(options54, strArray86);
        java.lang.String[] strArray93 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]", "[ option:  +ARG ::  ]", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!", "[ option:    :: null ]" };
        java.util.Properties properties94 = null;
        org.apache.commons.cli.CommandLine commandLine96 = posixParser0.parse(options54, strArray93, properties94, false);
        java.lang.String[] strArray98 = commandLine96.getOptionValues("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]");
        org.junit.Assert.assertNotNull(option4);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option11);
        org.junit.Assert.assertNotNull(options14);
        org.junit.Assert.assertNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(commandLine20);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertNull(optionGroup26);
        org.junit.Assert.assertNotNull(option28);
        org.junit.Assert.assertTrue("'" + char29 + "' != '" + '\000' + "'", char29 == '\000');
        org.junit.Assert.assertNotNull(option31);
        org.junit.Assert.assertNull(optionGroup35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertNull(strArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNotNull(collection60);
        org.junit.Assert.assertNotNull(option62);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(options68);
        org.junit.Assert.assertNotNull(option72);
        org.junit.Assert.assertNotNull(options75);
        org.junit.Assert.assertNull(strArray78);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str81, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(commandLine87);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertNotNull(commandLine96);
        org.junit.Assert.assertNull(strArray98);
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0161");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        java.util.Collection collection46 = options40.getOptionGroups();
        org.apache.commons.cli.Options options50 = options40.addOption("", false, "arg");
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup54 = options51.getOptionGroup(option53);
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        char char57 = option56.getValueSeparator();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create('4');
        option59.setDescription("");
        option56.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup63 = options51.getOptionGroup(option56);
        boolean boolean64 = option56.hasArgName();
        org.apache.commons.cli.Options options65 = options40.addOption(option56);
        org.apache.commons.cli.CommandLine commandLine66 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray68 = commandLine66.getOptionValues("hi!");
        java.lang.String str71 = commandLine66.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str73 = commandLine66.getOptionValue("arg");
        java.lang.String[] strArray74 = commandLine66.getArgs();
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options40, strArray74, properties75);
        org.apache.commons.cli.Options options77 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option79 = org.apache.commons.cli.OptionBuilder.create('4');
        char char80 = option79.getValueSeparator();
        org.apache.commons.cli.Option option82 = org.apache.commons.cli.OptionBuilder.create('4');
        option82.setDescription("");
        option79.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup86 = options77.getOptionGroup(option79);
        java.lang.String[] strArray89 = new java.lang.String[] { "4", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" };
        java.util.Properties properties90 = null;
        org.apache.commons.cli.CommandLine commandLine91 = posixParser0.parse(options77, strArray89, properties90);
        java.lang.String str93 = commandLine91.getOptionValue('\000');
        java.lang.Object obj95 = commandLine91.getOptionObject('=');
        java.lang.String str98 = commandLine91.getOptionValue("[ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]", "[ option: 4  :: null :: [ option:   [ option: 4  ::  ]  :: null ] ]");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertNotNull(options50);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertTrue("'" + char57 + "' != '" + '\000' + "'", char57 == '\000');
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertNull(optionGroup63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(options65);
        org.junit.Assert.assertNull(strArray68);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str71, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertNotNull(option79);
        org.junit.Assert.assertTrue("'" + char80 + "' != '" + '\000' + "'", char80 == '\000');
        org.junit.Assert.assertNotNull(option82);
        org.junit.Assert.assertNull(optionGroup86);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(commandLine91);
        org.junit.Assert.assertNull(str93);
        org.junit.Assert.assertNull(obj95);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "[ option: 4  :: null :: [ option:   [ option: 4  ::  ]  :: null ] ]" + "'", str98, "[ option: 4  :: null :: [ option:   [ option: 4  ::  ]  :: null ] ]");
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1440");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options53, strArray60, true);
        java.lang.String str64 = commandLine62.getOptionValue('\000');
        java.lang.Object obj66 = commandLine62.getOptionObject("[ option:    :: null ]");
        org.apache.commons.cli.Option[] optionArray67 = commandLine62.getOptions();
        commandLine62.addArg("[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]");
        java.lang.String str72 = commandLine62.getOptionValue("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", "org.apache.commons.cli.MissingArgumentException: [ option:    :: null ]");
        commandLine62.addArg("4");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNotNull(optionArray67);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "org.apache.commons.cli.MissingArgumentException: [ option:    :: null ]" + "'", str72, "org.apache.commons.cli.MissingArgumentException: [ option:    :: null ]");
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1599");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create('4');
        option1.setDescription("");
        boolean boolean4 = option1.hasValueSeparator();
        java.util.List list5 = option1.getValuesList();
        int int6 = option1.getArgs();
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        option1.setType((java.lang.Object) commandLine7);
        commandLine7.addArg("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.util.List list13 = commandLine7.getArgList();
        boolean boolean15 = commandLine7.hasOption("[ Options: [ short {4=[ option: 4  ::  ], arg=[ option: arg org.apache.commons.cli.UnrecognizedOptionException: hi!  ::  ]} ] [ long {org.apache.commons.cli.UnrecognizedOptionException: hi!=[ option: arg org.apache.commons.cli.UnrecognizedOptionException: hi!  ::  ]} ]");
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(list5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1252");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue("hi!");
        boolean boolean7 = commandLine0.hasOption("");
        commandLine0.addArg("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        boolean boolean11 = commandLine0.hasOption("[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create('4');
        option13.setDescription("");
        org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = org.apache.commons.cli.OptionBuilder.create('4');
        option18.setDescription("");
        org.apache.commons.cli.Options options21 = options16.addOption(option18);
        boolean boolean22 = option13.equals((java.lang.Object) option18);
        option18.setDescription("[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
        commandLine0.addOption(option18);
        java.lang.String str26 = option18.toString();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertNotNull(option18);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[ option: 4  :: [ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ] ]" + "'", str26, "[ option: 4  :: [ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ] ]");
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0389");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        java.util.Collection collection22 = options6.getOptions();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create('4');
        option24.setArgs((int) (short) 100);
        option24.setArgName("[ option: 4  :: null ]");
        java.lang.String str29 = option24.getLongOpt();
        java.lang.String str31 = option24.getValue((int) (short) -1);
        org.apache.commons.cli.Options options32 = options6.addOption(option24);
        java.util.List list33 = option24.getValuesList();
        java.lang.String str35 = option24.getValue("[ option:    :: null ]");
        int int36 = option24.getArgs();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(collection22);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNotNull(list33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[ option:    :: null ]" + "'", str35, "[ option:    :: null ]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1209");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        java.util.List list36 = commandLine35.getArgList();
        java.lang.String[] strArray37 = commandLine35.getArgs();
        java.lang.String[] strArray38 = commandLine35.getArgs();
        commandLine35.addArg("");
        java.lang.Object obj42 = commandLine35.getOptionObject(" ");
        boolean boolean44 = commandLine35.hasOption('=');
        java.lang.Object obj46 = commandLine35.getOptionObject(' ');
        org.apache.commons.cli.Option[] optionArray47 = commandLine35.getOptions();
        java.util.List list48 = commandLine35.getArgList();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(list36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNotNull(optionArray47);
        org.junit.Assert.assertNotNull(list48);
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1618");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create('4');
        option1.setDescription("");
        boolean boolean4 = option1.hasValueSeparator();
        java.util.List list5 = option1.getValuesList();
        int int6 = option1.getArgs();
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        option1.setType((java.lang.Object) commandLine7);
        char char11 = option1.getValueSeparator();
        option1.setArgName("[ option: 4  :: null ::  ]");
        java.util.List list14 = option1.getValuesList();
        org.apache.commons.cli.OptionBuilder optionBuilder15 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) option1);
        boolean boolean16 = option1.hasOptionalArg();
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(list5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertTrue("'" + char11 + "' != '" + '\000' + "'", char11 == '\000');
        org.junit.Assert.assertNotNull(list14);
        org.junit.Assert.assertNotNull(optionBuilder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1036");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options53, strArray60, true);
        java.util.List list63 = options53.getRequiredOptions();
        org.apache.commons.cli.Option option65 = options53.getOption("[ Options: [ short {=[ option:  +ARG ::  ]} ] [ long {} ]");
        boolean boolean67 = options53.hasOption("org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.MissingOptionException: hi!");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(list63);
        org.junit.Assert.assertNull(option65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1631");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.util.Iterator iterator4 = commandLine0.iterator();
        boolean boolean6 = commandLine0.hasOption("[ option: 4  :: null ]");
        java.lang.String str9 = commandLine0.getOptionValue("[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        java.lang.String[] strArray10 = commandLine0.getArgs();
        java.lang.String str12 = commandLine0.getOptionValue("");
        java.lang.String str15 = commandLine0.getOptionValue('a', "org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.Option[] optionArray16 = commandLine0.getOptions();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(iterator4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" + "'", str9, "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org.apache.commons.cli.MissingOptionException: hi!" + "'", str15, "org.apache.commons.cli.MissingOptionException: hi!");
        org.junit.Assert.assertNotNull(optionArray16);
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0641");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create('4');
        option1.setDescription("");
        boolean boolean4 = option1.isRequired();
        boolean boolean5 = option1.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser6 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options7 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        org.apache.commons.cli.Options options12 = options7.addOption(option9);
        java.util.Collection collection13 = options7.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String str19 = commandLine14.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str21 = commandLine14.getOptionValue("arg");
        java.lang.String[] strArray22 = commandLine14.getArgs();
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine24 = posixParser6.parse(options7, strArray22, properties23);
        org.apache.commons.cli.Options options29 = options7.addOption(" ", "", true, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.Option option31 = org.apache.commons.cli.OptionBuilder.create('4');
        option31.setArgs((int) (short) 100);
        option31.setArgName("[ option: 4  :: null ]");
        java.lang.String str36 = option31.getLongOpt();
        boolean boolean37 = option31.hasLongOpt();
        java.lang.Object obj38 = option31.getType();
        boolean boolean39 = option31.hasLongOpt();
        option31.setLongOpt("[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
        org.apache.commons.cli.Options options42 = options29.addOption(option31);
        java.util.List list43 = options42.helpOptions();
        boolean boolean44 = option1.equals((java.lang.Object) list43);
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(collection13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str19, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine24);
        org.junit.Assert.assertNotNull(options29);
        org.junit.Assert.assertNotNull(option31);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(options42);
        org.junit.Assert.assertNotNull(list43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0340");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.util.Iterator iterator4 = commandLine0.iterator();
        boolean boolean6 = commandLine0.hasOption("[ option: 4  :: null ]");
        boolean boolean8 = commandLine0.hasOption('=');
        java.util.List list9 = commandLine0.getArgList();
        java.lang.String str12 = commandLine0.getOptionValue("[ option: 4  :: hi! ]", "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(iterator4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str12, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1143");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptions();
        boolean boolean9 = options1.hasOption("arg");
        java.lang.String[] strArray12 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" };
        org.apache.commons.cli.CommandLine commandLine13 = posixParser0.parse(options1, strArray12);
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = org.apache.commons.cli.OptionBuilder.create('4');
        option16.setDescription("");
        org.apache.commons.cli.Options options19 = options14.addOption(option16);
        java.util.Collection collection20 = options14.getOptionGroups();
        org.apache.commons.cli.Options options24 = options14.addOption("", false, "arg");
        java.util.List list25 = options24.getRequiredOptions();
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create("arg");
        org.apache.commons.cli.Options options28 = options24.addOption(option27);
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setArgs((int) (short) 100);
        option30.setArgName("[ option: 4  :: null ]");
        java.lang.String str35 = option30.getLongOpt();
        java.lang.String str37 = option30.getValue((int) (short) -1);
        org.apache.commons.cli.Options options38 = options28.addOption(option30);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup42 = options39.getOptionGroup(option41);
        boolean boolean43 = option41.hasLongOpt();
        boolean boolean44 = option41.isRequired();
        java.util.List list45 = option41.getValuesList();
        option41.setDescription("[ option: 4  ::  ]");
        org.apache.commons.cli.Options options48 = options38.addOption(option41);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        option52.setDescription("");
        org.apache.commons.cli.Options options55 = options50.addOption(option52);
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray58 = commandLine56.getOptionValues("hi!");
        java.lang.String str61 = commandLine56.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str63 = commandLine56.getOptionValue("arg");
        java.lang.String[] strArray64 = commandLine56.getArgs();
        java.lang.String[] strArray66 = posixParser49.flatten(options55, strArray64, false);
        org.apache.commons.cli.CommandLine commandLine68 = posixParser0.parse(options38, strArray64, true);
        org.apache.commons.cli.OptionBuilder optionBuilder69 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options38);
        java.lang.String str70 = options38.toString();
        org.apache.commons.cli.Option option74 = new org.apache.commons.cli.Option("4", true, "4");
        boolean boolean75 = option74.hasOptionalArg();
        org.apache.commons.cli.Options options76 = options38.addOption(option74);
        org.apache.commons.cli.Option option78 = org.apache.commons.cli.OptionBuilder.create('4');
        char char79 = option78.getValueSeparator();
        org.apache.commons.cli.Option option81 = org.apache.commons.cli.OptionBuilder.create('4');
        option81.setDescription("");
        option78.setType((java.lang.Object) "");
        boolean boolean85 = option78.hasLongOpt();
        int int86 = option78.getArgs();
        int int87 = option78.getId();
        org.apache.commons.cli.Options options88 = options38.addOption(option78);
        java.util.Collection collection89 = options38.getOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine13);
        org.junit.Assert.assertNotNull(option16);
        org.junit.Assert.assertNotNull(options19);
        org.junit.Assert.assertNotNull(collection20);
        org.junit.Assert.assertNotNull(options24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(list45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNull(strArray58);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str61, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertNotNull(optionBuilder69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "[ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]" + "'", str70, "[ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(options76);
        org.junit.Assert.assertNotNull(option78);
        org.junit.Assert.assertTrue("'" + char79 + "' != '" + '\000' + "'", char79 == '\000');
        org.junit.Assert.assertNotNull(option81);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 52 + "'", int87 == 52);
        org.junit.Assert.assertNotNull(options88);
        org.junit.Assert.assertNotNull(collection89);
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0068");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setArgs((int) (short) 100);
        java.lang.String str26 = option23.getKey();
        java.util.ListIterator listIterator27 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option23, listIterator27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "4" + "'", str26, "4");
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1050");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken("[ option: 4  :: null ::  ]", true);
        posixParser0.burstToken("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", false);
        org.apache.commons.cli.PosixParser posixParser42 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        option45.setDescription("");
        org.apache.commons.cli.Options options48 = options43.addOption(option45);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        option52.setDescription("");
        org.apache.commons.cli.Options options55 = options50.addOption(option52);
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray58 = commandLine56.getOptionValues("hi!");
        java.lang.String[] strArray59 = commandLine56.getArgs();
        java.util.Properties properties60 = null;
        org.apache.commons.cli.CommandLine commandLine61 = posixParser49.parse(options50, strArray59, properties60);
        org.apache.commons.cli.CommandLine commandLine63 = posixParser42.parse(options48, strArray59, false);
        java.util.Collection collection64 = options48.getOptionGroups();
        org.apache.commons.cli.PosixParser posixParser65 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options66 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option68 = org.apache.commons.cli.OptionBuilder.create('4');
        option68.setDescription("");
        org.apache.commons.cli.Options options71 = options66.addOption(option68);
        org.apache.commons.cli.CommandLine commandLine72 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray74 = commandLine72.getOptionValues("hi!");
        java.lang.String str77 = commandLine72.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str79 = commandLine72.getOptionValue("arg");
        java.lang.String[] strArray80 = commandLine72.getArgs();
        java.lang.String[] strArray82 = posixParser65.flatten(options71, strArray80, false);
        org.apache.commons.cli.CommandLine commandLine84 = posixParser0.parse(options48, strArray80, false);
        java.lang.Object obj86 = commandLine84.getOptionObject("[ option: 4  ::  ]");
        java.lang.Object obj88 = commandLine84.getOptionObject('#');
        java.lang.String str90 = commandLine84.getOptionValue('4');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNull(strArray58);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(commandLine61);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(collection64);
        org.junit.Assert.assertNotNull(option68);
        org.junit.Assert.assertNotNull(options71);
        org.junit.Assert.assertNull(strArray74);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str77, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(commandLine84);
        org.junit.Assert.assertNull(obj86);
        org.junit.Assert.assertNull(obj88);
        org.junit.Assert.assertNull(str90);
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0103");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptions();
        boolean boolean9 = options1.hasOption("arg");
        java.lang.String[] strArray12 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" };
        org.apache.commons.cli.CommandLine commandLine13 = posixParser0.parse(options1, strArray12);
        java.lang.Class<?> wildcardClass14 = options1.getClass();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1198");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.util.Iterator iterator4 = commandLine0.iterator();
        java.lang.String str6 = commandLine0.getOptionValue("[ option:    :: null ]");
        boolean boolean8 = commandLine0.hasOption("hi!");
        boolean boolean10 = commandLine0.hasOption("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]");
        boolean boolean12 = commandLine0.hasOption('=');
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(iterator4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0363");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptions();
        boolean boolean9 = options1.hasOption("arg");
        java.lang.String[] strArray12 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" };
        org.apache.commons.cli.CommandLine commandLine13 = posixParser0.parse(options1, strArray12);
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = org.apache.commons.cli.OptionBuilder.create('4');
        option16.setDescription("");
        org.apache.commons.cli.Options options19 = options14.addOption(option16);
        java.util.Collection collection20 = options14.getOptionGroups();
        org.apache.commons.cli.Options options24 = options14.addOption("", false, "arg");
        java.util.List list25 = options24.getRequiredOptions();
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create("arg");
        org.apache.commons.cli.Options options28 = options24.addOption(option27);
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setArgs((int) (short) 100);
        option30.setArgName("[ option: 4  :: null ]");
        java.lang.String str35 = option30.getLongOpt();
        java.lang.String str37 = option30.getValue((int) (short) -1);
        org.apache.commons.cli.Options options38 = options28.addOption(option30);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup42 = options39.getOptionGroup(option41);
        boolean boolean43 = option41.hasLongOpt();
        boolean boolean44 = option41.isRequired();
        java.util.List list45 = option41.getValuesList();
        option41.setDescription("[ option: 4  ::  ]");
        org.apache.commons.cli.Options options48 = options38.addOption(option41);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        option52.setDescription("");
        org.apache.commons.cli.Options options55 = options50.addOption(option52);
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray58 = commandLine56.getOptionValues("hi!");
        java.lang.String str61 = commandLine56.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str63 = commandLine56.getOptionValue("arg");
        java.lang.String[] strArray64 = commandLine56.getArgs();
        java.lang.String[] strArray66 = posixParser49.flatten(options55, strArray64, false);
        org.apache.commons.cli.CommandLine commandLine68 = posixParser0.parse(options38, strArray64, true);
        boolean boolean70 = commandLine68.hasOption("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]");
        java.lang.String[] strArray72 = commandLine68.getOptionValues("[ Options: [ short {4=[ option: 4  :: null ::  ]} ] [ long {} ]");
        org.apache.commons.cli.Option option74 = org.apache.commons.cli.OptionBuilder.create('4');
        java.lang.String str76 = option74.getValue("arg");
        org.apache.commons.cli.MissingOptionException missingOptionException78 = new org.apache.commons.cli.MissingOptionException("hi!");
        boolean boolean79 = option74.equals((java.lang.Object) "hi!");
        java.lang.String str80 = option74.toString();
        option74.setDescription("");
        commandLine68.addOption(option74);
        java.lang.Object obj85 = commandLine68.getOptionObject("[ option: 4  ::  :: [] ]");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine13);
        org.junit.Assert.assertNotNull(option16);
        org.junit.Assert.assertNotNull(options19);
        org.junit.Assert.assertNotNull(collection20);
        org.junit.Assert.assertNotNull(options24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(list45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNull(strArray58);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str61, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(strArray72);
        org.junit.Assert.assertNotNull(option74);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "arg" + "'", str76, "arg");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "[ option: 4  :: null ]" + "'", str80, "[ option: 4  :: null ]");
        org.junit.Assert.assertNull(obj85);
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1030");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", true);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create('4');
        option41.setDescription("");
        org.apache.commons.cli.Options options44 = options39.addOption(option41);
        java.util.Collection collection45 = options39.getOptionGroups();
        org.apache.commons.cli.Options options49 = options39.addOption("", false, "arg");
        java.util.List list50 = options49.getRequiredOptions();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create("arg");
        org.apache.commons.cli.Options options53 = options49.addOption(option52);
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setArgs((int) (short) 100);
        option55.setArgName("[ option: 4  :: null ]");
        java.lang.String str60 = option55.getLongOpt();
        java.lang.String str62 = option55.getValue((int) (short) -1);
        org.apache.commons.cli.Options options63 = options53.addOption(option55);
        org.apache.commons.cli.Option option65 = options63.getOption("[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
        java.util.List list66 = options63.helpOptions();
        org.apache.commons.cli.CommandLine commandLine67 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray69 = commandLine67.getOptionValues("hi!");
        java.lang.String[] strArray70 = commandLine67.getArgs();
        java.util.Iterator iterator71 = commandLine67.iterator();
        java.lang.Object obj73 = commandLine67.getOptionObject('#');
        java.lang.String str76 = commandLine67.getOptionValue('a', "[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray77 = commandLine67.getArgs();
        java.util.Properties properties78 = null;
        org.apache.commons.cli.CommandLine commandLine79 = posixParser0.parse(options63, strArray77, properties78);
        org.apache.commons.cli.Option option80 = null;
        java.util.ListIterator listIterator81 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option80, listIterator81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertNotNull(collection45);
        org.junit.Assert.assertNotNull(options49);
        org.junit.Assert.assertNotNull(list50);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertNotNull(options53);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(options63);
        org.junit.Assert.assertNull(option65);
        org.junit.Assert.assertNotNull(list66);
        org.junit.Assert.assertNull(strArray69);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(iterator71);
        org.junit.Assert.assertNull(obj73);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str76, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(commandLine79);
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1776");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.Object obj4 = commandLine0.getOptionObject('a');
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        option6.setDescription("");
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option11 = org.apache.commons.cli.OptionBuilder.create('4');
        option11.setDescription("");
        org.apache.commons.cli.Options options14 = options9.addOption(option11);
        boolean boolean15 = option11.hasOptionalArg();
        option6.setType((java.lang.Object) boolean15);
        java.lang.String str17 = option6.getArgName();
        java.lang.Object obj18 = option6.getType();
        java.lang.String[] strArray19 = option6.getValues();
        commandLine0.addOption(option6);
        org.apache.commons.cli.Option option22 = org.apache.commons.cli.OptionBuilder.create('4');
        option22.setDescription("");
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        option27.setDescription("");
        org.apache.commons.cli.Options options30 = options25.addOption(option27);
        boolean boolean31 = option27.hasOptionalArg();
        option22.setType((java.lang.Object) boolean31);
        commandLine0.addOption(option22);
        java.lang.Object obj35 = commandLine0.getOptionObject("[ option:   [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]  :: null ]");
        java.lang.String str37 = commandLine0.getOptionValue('=');
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertNotNull(option11);
        org.junit.Assert.assertNotNull(options14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "arg" + "'", str17, "arg");
        org.junit.Assert.assertEquals("'" + obj18 + "' != '" + false + "'", obj18, false);
        org.junit.Assert.assertNull(strArray19);
        org.junit.Assert.assertNotNull(option22);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertNotNull(options30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str37);
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1254");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create('4');
        option1.setArgs((int) (short) 100);
        option1.setArgName("[ option: 4  :: null ]");
        java.lang.String str6 = option1.getLongOpt();
        boolean boolean7 = option1.hasLongOpt();
        org.apache.commons.cli.PosixParser posixParser8 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option11 = org.apache.commons.cli.OptionBuilder.create('4');
        option11.setDescription("");
        org.apache.commons.cli.Options options14 = options9.addOption(option11);
        org.apache.commons.cli.PosixParser posixParser15 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = org.apache.commons.cli.OptionBuilder.create('4');
        option18.setDescription("");
        org.apache.commons.cli.Options options21 = options16.addOption(option18);
        org.apache.commons.cli.CommandLine commandLine22 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray24 = commandLine22.getOptionValues("hi!");
        java.lang.String[] strArray25 = commandLine22.getArgs();
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser15.parse(options16, strArray25, properties26);
        org.apache.commons.cli.CommandLine commandLine29 = posixParser8.parse(options14, strArray25, false);
        org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option32 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup33 = options30.getOptionGroup(option32);
        org.apache.commons.cli.Option option35 = org.apache.commons.cli.OptionBuilder.create('4');
        char char36 = option35.getValueSeparator();
        org.apache.commons.cli.Option option38 = org.apache.commons.cli.OptionBuilder.create('4');
        option38.setDescription("");
        option35.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup42 = options30.getOptionGroup(option35);
        boolean boolean44 = options30.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser45 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option48 = org.apache.commons.cli.OptionBuilder.create('4');
        option48.setDescription("");
        org.apache.commons.cli.Options options51 = options46.addOption(option48);
        org.apache.commons.cli.CommandLine commandLine52 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray54 = commandLine52.getOptionValues("hi!");
        java.lang.String[] strArray55 = commandLine52.getArgs();
        java.util.Properties properties56 = null;
        org.apache.commons.cli.CommandLine commandLine57 = posixParser45.parse(options46, strArray55, properties56);
        java.util.Properties properties58 = null;
        org.apache.commons.cli.CommandLine commandLine60 = posixParser8.parse(options30, strArray55, properties58, true);
        java.util.Collection collection61 = options30.getOptionGroups();
        org.apache.commons.cli.Options options62 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option64 = org.apache.commons.cli.OptionBuilder.create('4');
        option64.setDescription("");
        org.apache.commons.cli.Options options67 = options62.addOption(option64);
        java.util.Collection collection68 = options62.getOptionGroups();
        org.apache.commons.cli.Options options72 = options62.addOption("", false, "arg");
        org.apache.commons.cli.Options options73 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option75 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup76 = options73.getOptionGroup(option75);
        org.apache.commons.cli.Option option78 = org.apache.commons.cli.OptionBuilder.create('4');
        char char79 = option78.getValueSeparator();
        org.apache.commons.cli.Option option81 = org.apache.commons.cli.OptionBuilder.create('4');
        option81.setDescription("");
        option78.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup85 = options73.getOptionGroup(option78);
        boolean boolean86 = option78.hasArgName();
        org.apache.commons.cli.Options options87 = options62.addOption(option78);
        org.apache.commons.cli.Options options88 = options30.addOption(option78);
        boolean boolean89 = option1.equals((java.lang.Object) options30);
        org.apache.commons.cli.Option option93 = new org.apache.commons.cli.Option("", true, "");
        boolean boolean94 = option93.hasOptionalArg();
        java.lang.String str95 = option93.getOpt();
        org.apache.commons.cli.Options options96 = options30.addOption(option93);
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(option11);
        org.junit.Assert.assertNotNull(options14);
        org.junit.Assert.assertNotNull(option18);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(option32);
        org.junit.Assert.assertNull(optionGroup33);
        org.junit.Assert.assertNotNull(option35);
        org.junit.Assert.assertTrue("'" + char36 + "' != '" + '\000' + "'", char36 == '\000');
        org.junit.Assert.assertNotNull(option38);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(option48);
        org.junit.Assert.assertNotNull(options51);
        org.junit.Assert.assertNull(strArray54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(commandLine57);
        org.junit.Assert.assertNotNull(commandLine60);
        org.junit.Assert.assertNotNull(collection61);
        org.junit.Assert.assertNotNull(option64);
        org.junit.Assert.assertNotNull(options67);
        org.junit.Assert.assertNotNull(collection68);
        org.junit.Assert.assertNotNull(options72);
        org.junit.Assert.assertNotNull(option75);
        org.junit.Assert.assertNull(optionGroup76);
        org.junit.Assert.assertNotNull(option78);
        org.junit.Assert.assertTrue("'" + char79 + "' != '" + '\000' + "'", char79 == '\000');
        org.junit.Assert.assertNotNull(option81);
        org.junit.Assert.assertNull(optionGroup85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(options87);
        org.junit.Assert.assertNotNull(options88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
        org.junit.Assert.assertNotNull(options96);
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0106");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken("hi!", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptionGroups();
        org.apache.commons.cli.Options options31 = options21.addOption("", false, "arg");
        java.util.List list32 = options31.getRequiredOptions();
        org.apache.commons.cli.Option option34 = org.apache.commons.cli.OptionBuilder.create("arg");
        org.apache.commons.cli.Options options35 = options31.addOption(option34);
        boolean boolean37 = options31.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        java.util.Collection collection38 = options31.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine39 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray41 = commandLine39.getOptionValues("hi!");
        java.lang.String str44 = commandLine39.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str46 = commandLine39.getOptionValue("arg");
        java.lang.String[] strArray47 = commandLine39.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine50 = posixParser0.parse(options31, strArray47, properties48, true);
        commandLine50.addArg("org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        java.lang.String[] strArray54 = commandLine50.getOptionValues('#');
        java.lang.String[] strArray56 = commandLine50.getOptionValues("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str58 = commandLine50.getOptionValue("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(options31);
        org.junit.Assert.assertNotNull(list32);
        org.junit.Assert.assertNotNull(option34);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertNull(strArray41);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str44, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertNull(strArray54);
        org.junit.Assert.assertNull(strArray56);
        org.junit.Assert.assertNull(str58);
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1317");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken("hi!", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptionGroups();
        org.apache.commons.cli.Options options31 = options21.addOption("", false, "arg");
        java.util.List list32 = options31.getRequiredOptions();
        org.apache.commons.cli.Option option34 = org.apache.commons.cli.OptionBuilder.create("arg");
        org.apache.commons.cli.Options options35 = options31.addOption(option34);
        boolean boolean37 = options31.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        java.util.Collection collection38 = options31.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine39 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray41 = commandLine39.getOptionValues("hi!");
        java.lang.String str44 = commandLine39.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str46 = commandLine39.getOptionValue("arg");
        java.lang.String[] strArray47 = commandLine39.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine50 = posixParser0.parse(options31, strArray47, properties48, true);
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = org.apache.commons.cli.OptionBuilder.create('4');
        option53.setDescription("");
        org.apache.commons.cli.Options options56 = options51.addOption(option53);
        org.apache.commons.cli.CommandLine commandLine57 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray59 = commandLine57.getOptionValues("hi!");
        java.lang.String str62 = commandLine57.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str64 = commandLine57.getOptionValue("arg");
        java.lang.String[] strArray65 = commandLine57.getArgs();
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser0.parse(options51, strArray65, properties66);
        boolean boolean69 = commandLine67.hasOption('=');
        java.lang.String str71 = commandLine67.getOptionValue("[ Options: [ short { =[ option:    +ARG :: org.apache.commons.cli.UnrecognizedOptionException: hi! ], 4=[ option: 4  ::  ]} ] [ long {=[ option:    +ARG :: org.apache.commons.cli.UnrecognizedOptionException: hi! ]} ]");
        org.apache.commons.cli.Option[] optionArray72 = commandLine67.getOptions();
        java.lang.String[] strArray73 = commandLine67.getArgs();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(options31);
        org.junit.Assert.assertNotNull(list32);
        org.junit.Assert.assertNotNull(option34);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertNull(strArray41);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str44, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNotNull(options56);
        org.junit.Assert.assertNull(strArray59);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str62, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNotNull(optionArray72);
        org.junit.Assert.assertNotNull(strArray73);
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1771");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        java.util.Collection collection22 = options6.getOptionGroups();
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create('4');
        option25.setDescription("");
        org.apache.commons.cli.Options options28 = options23.addOption(option25);
        java.util.Collection collection29 = options23.getOptionGroups();
        org.apache.commons.cli.Options options33 = options23.addOption("", false, "arg");
        java.util.Collection collection34 = options23.getOptionGroups();
        org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option37 = org.apache.commons.cli.OptionBuilder.create('4');
        option37.setDescription("");
        org.apache.commons.cli.Options options40 = options35.addOption(option37);
        option37.setValueSeparator(' ');
        org.apache.commons.cli.OptionGroup optionGroup43 = options23.getOptionGroup(option37);
        option37.setRequired(false);
        org.apache.commons.cli.CommandLine commandLine46 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray48 = commandLine46.getOptionValues("hi!");
        java.lang.String[] strArray49 = commandLine46.getArgs();
        boolean boolean50 = option37.equals((java.lang.Object) strArray49);
        org.apache.commons.cli.OptionGroup optionGroup51 = options6.getOptionGroup(option37);
        org.apache.commons.cli.Options options56 = options6.addOption("arg", "org.apache.commons.cli.UnrecognizedOptionException: hi!", false, "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.Options options60 = options6.addOption(" ", false, "hi!");
        java.util.List list61 = options6.getRequiredOptions();
        org.apache.commons.cli.Options options62 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option64 = org.apache.commons.cli.OptionBuilder.create('4');
        option64.setDescription("");
        org.apache.commons.cli.Options options67 = options62.addOption(option64);
        java.util.Collection collection68 = options62.getOptionGroups();
        org.apache.commons.cli.Options options72 = options62.addOption("", false, "arg");
        java.util.Collection collection73 = options62.getOptionGroups();
        org.apache.commons.cli.Option option75 = org.apache.commons.cli.OptionBuilder.create('4');
        java.lang.String str77 = option75.getValue("arg");
        java.lang.String str78 = option75.getLongOpt();
        option75.setLongOpt("");
        java.lang.String str82 = option75.getValue("[ option: 4  :: null ]");
        org.apache.commons.cli.Options options83 = options62.addOption(option75);
        org.apache.commons.cli.Option option85 = org.apache.commons.cli.OptionBuilder.create('4');
        option85.setDescription("");
        boolean boolean88 = option85.hasValueSeparator();
        java.lang.String str89 = option85.getValue();
        java.lang.Object obj90 = option85.getType();
        org.apache.commons.cli.OptionGroup optionGroup91 = options62.getOptionGroup(option85);
        java.lang.String str92 = option85.getLongOpt();
        org.apache.commons.cli.Options options93 = options6.addOption(option85);
        org.apache.commons.cli.Option option95 = options93.getOption("org.apache.commons.cli.MissingOptionException: [ option:    :: null ]");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(collection22);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(collection29);
        org.junit.Assert.assertNotNull(options33);
        org.junit.Assert.assertNotNull(collection34);
        org.junit.Assert.assertNotNull(option37);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNull(strArray48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(options56);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(list61);
        org.junit.Assert.assertNotNull(option64);
        org.junit.Assert.assertNotNull(options67);
        org.junit.Assert.assertNotNull(collection68);
        org.junit.Assert.assertNotNull(options72);
        org.junit.Assert.assertNotNull(collection73);
        org.junit.Assert.assertNotNull(option75);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "arg" + "'", str77, "arg");
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "[ option: 4  :: null ]" + "'", str82, "[ option: 4  :: null ]");
        org.junit.Assert.assertNotNull(options83);
        org.junit.Assert.assertNotNull(option85);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertNull(optionGroup91);
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertNotNull(options93);
        org.junit.Assert.assertNull(option95);
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0895");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken("hi!", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup24 = options21.getOptionGroup(option23);
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        char char27 = option26.getValueSeparator();
        org.apache.commons.cli.Option option29 = org.apache.commons.cli.OptionBuilder.create('4');
        option29.setDescription("");
        option26.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup33 = options21.getOptionGroup(option26);
        java.lang.String[] strArray34 = null;
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser0.parse(options21, strArray34, properties35);
        org.apache.commons.cli.Option option38 = options21.getOption("[ option:    :: null ]");
        java.util.Collection collection39 = options21.getOptions();
        java.lang.String str40 = options21.toString();
        org.apache.commons.cli.Option option41 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options42 = options21.addOption(option41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNull(optionGroup24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + char27 + "' != '" + '\000' + "'", char27 == '\000');
        org.junit.Assert.assertNotNull(option29);
        org.junit.Assert.assertNull(optionGroup33);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNull(option38);
        org.junit.Assert.assertNotNull(collection39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str40, "[ Options: [ short {} ] [ long {} ]");
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0761");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.util.Iterator iterator4 = commandLine0.iterator();
        java.lang.String str7 = commandLine0.getOptionValue("[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]", "arg");
        java.lang.String str9 = commandLine0.getOptionValue("[ option:  +ARG ::  ]");
        org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option12 = org.apache.commons.cli.OptionBuilder.create('4');
        option12.setDescription("");
        org.apache.commons.cli.Options options15 = options10.addOption(option12);
        java.util.List list16 = option12.getValuesList();
        boolean boolean17 = option12.hasArgs();
        commandLine0.addOption(option12);
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setOptionalArg(true);
        option20.setRequired(false);
        commandLine0.addOption(option20);
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(iterator4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(option12);
        org.junit.Assert.assertNotNull(options15);
        org.junit.Assert.assertNotNull(list16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(option20);
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1154");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String[] strArray10 = commandLine7.getArgs();
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = posixParser0.parse(options1, strArray10, properties11);
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option15 = org.apache.commons.cli.OptionBuilder.create('4');
        option15.setDescription("");
        org.apache.commons.cli.Options options18 = options13.addOption(option15);
        java.util.Collection collection19 = options13.getOptionGroups();
        org.apache.commons.cli.Options options23 = options13.addOption("", false, "arg");
        org.apache.commons.cli.Option option27 = new org.apache.commons.cli.Option("", true, "");
        boolean boolean28 = option27.hasOptionalArg();
        option27.setOptionalArg(false);
        org.apache.commons.cli.OptionGroup optionGroup31 = options23.getOptionGroup(option27);
        java.util.Collection collection32 = options23.getOptionGroups();
        org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option36 = org.apache.commons.cli.OptionBuilder.create('4');
        option36.setDescription("");
        org.apache.commons.cli.Options options39 = options34.addOption(option36);
        java.util.Collection collection40 = options34.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine41 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray43 = commandLine41.getOptionValues("hi!");
        java.lang.String str46 = commandLine41.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str48 = commandLine41.getOptionValue("arg");
        java.lang.String[] strArray49 = commandLine41.getArgs();
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine51 = posixParser33.parse(options34, strArray49, properties50);
        java.lang.String[] strArray53 = posixParser0.flatten(options23, strArray49, true);
        java.lang.String str54 = options23.toString();
        java.util.List list55 = options23.helpOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
        org.junit.Assert.assertNotNull(option15);
        org.junit.Assert.assertNotNull(options18);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(optionGroup31);
        org.junit.Assert.assertNotNull(collection32);
        org.junit.Assert.assertNotNull(option36);
        org.junit.Assert.assertNotNull(options39);
        org.junit.Assert.assertNotNull(collection40);
        org.junit.Assert.assertNull(strArray43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str46, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str54, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNotNull(list55);
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0271");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option38 = org.apache.commons.cli.OptionBuilder.create('4');
        option38.setDescription("");
        org.apache.commons.cli.Options options41 = options36.addOption(option38);
        java.util.Collection collection42 = options36.getOptionGroups();
        org.apache.commons.cli.Options options46 = options36.addOption("", false, "arg");
        org.apache.commons.cli.Options options47 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option49 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup50 = options47.getOptionGroup(option49);
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        char char53 = option52.getValueSeparator();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        option52.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup59 = options47.getOptionGroup(option52);
        boolean boolean60 = option52.hasArgName();
        org.apache.commons.cli.Options options61 = options36.addOption(option52);
        java.util.List list62 = options36.helpOptions();
        org.apache.commons.cli.CommandLine commandLine63 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray65 = commandLine63.getOptionValues("hi!");
        java.lang.String str68 = commandLine63.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str70 = commandLine63.getOptionValue("arg");
        java.lang.String[] strArray71 = commandLine63.getArgs();
        java.lang.String[] strArray73 = posixParser0.flatten(options36, strArray71, false);
        posixParser0.burstToken("[ Options: [ short { =[ option:    +ARG :: org.apache.commons.cli.UnrecognizedOptionException: hi! ], 4=[ option: 4  ::  ]} ] [ long {=[ option:    +ARG :: org.apache.commons.cli.UnrecognizedOptionException: hi! ]} ]", false);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option38);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertNotNull(collection42);
        org.junit.Assert.assertNotNull(options46);
        org.junit.Assert.assertNotNull(option49);
        org.junit.Assert.assertNull(optionGroup50);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertTrue("'" + char53 + "' != '" + '\000' + "'", char53 == '\000');
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNull(optionGroup59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(options61);
        org.junit.Assert.assertNotNull(list62);
        org.junit.Assert.assertNull(strArray65);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str68, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray73);
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1215");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options53, strArray60, true);
        org.apache.commons.cli.PosixParser posixParser63 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options64 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option66 = org.apache.commons.cli.OptionBuilder.create('4');
        option66.setDescription("");
        org.apache.commons.cli.Options options69 = options64.addOption(option66);
        org.apache.commons.cli.CommandLine commandLine70 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray72 = commandLine70.getOptionValues("hi!");
        java.lang.String[] strArray73 = commandLine70.getArgs();
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine75 = posixParser63.parse(options64, strArray73, properties74);
        java.lang.String[] strArray78 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]", "hi!" };
        java.util.Properties properties79 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser0.parse(options64, strArray78, properties79, true);
        java.util.List list82 = commandLine81.getArgList();
        java.lang.String str84 = commandLine81.getOptionValue("[ option:  +ARG ::  ]");
        boolean boolean86 = commandLine81.hasOption("[ Options: [ short {=[ option:  +ARG ::  ], 4=[ option: 4  :: null ]} ] [ long {} ]");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(option66);
        org.junit.Assert.assertNotNull(options69);
        org.junit.Assert.assertNull(strArray72);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine75);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(list82);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0431");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        org.apache.commons.cli.Option option36 = org.apache.commons.cli.OptionBuilder.create('4');
        boolean boolean37 = option36.isRequired();
        org.apache.commons.cli.Options options38 = options22.addOption(option36);
        java.util.List list39 = options38.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser40 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options41 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option43 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup44 = options41.getOptionGroup(option43);
        org.apache.commons.cli.Option option46 = org.apache.commons.cli.OptionBuilder.create('4');
        char char47 = option46.getValueSeparator();
        org.apache.commons.cli.Option option49 = org.apache.commons.cli.OptionBuilder.create('4');
        option49.setDescription("");
        option46.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup53 = options41.getOptionGroup(option46);
        boolean boolean55 = options41.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create('4');
        option59.setDescription("");
        org.apache.commons.cli.Options options62 = options57.addOption(option59);
        org.apache.commons.cli.CommandLine commandLine63 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray65 = commandLine63.getOptionValues("hi!");
        java.lang.String str68 = commandLine63.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str70 = commandLine63.getOptionValue("arg");
        java.lang.String[] strArray71 = commandLine63.getArgs();
        java.lang.String[] strArray73 = posixParser56.flatten(options62, strArray71, false);
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine75 = posixParser40.parse(options41, strArray73, properties74);
        java.util.List list76 = commandLine75.getArgList();
        java.lang.String[] strArray77 = commandLine75.getArgs();
        java.util.Properties properties78 = null;
        org.apache.commons.cli.CommandLine commandLine80 = posixParser0.parse(options38, strArray77, properties78, false);
        org.apache.commons.cli.Options options81 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option83 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup84 = options81.getOptionGroup(option83);
        boolean boolean85 = option83.hasLongOpt();
        boolean boolean86 = option83.isRequired();
        java.util.List list87 = option83.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup88 = options38.getOptionGroup(option83);
        boolean boolean89 = option83.hasArgName();
        // The following exception was thrown during execution in test generation
        try {
            option83.addValue("org.apache.commons.cli.MissingOptionException: ");
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: NO_ARGS_ALLOWED");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertNotNull(option36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(list39);
        org.junit.Assert.assertNotNull(option43);
        org.junit.Assert.assertNull(optionGroup44);
        org.junit.Assert.assertNotNull(option46);
        org.junit.Assert.assertTrue("'" + char47 + "' != '" + '\000' + "'", char47 == '\000');
        org.junit.Assert.assertNotNull(option49);
        org.junit.Assert.assertNull(optionGroup53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertNotNull(options62);
        org.junit.Assert.assertNull(strArray65);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str68, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine75);
        org.junit.Assert.assertNotNull(list76);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(commandLine80);
        org.junit.Assert.assertNotNull(option83);
        org.junit.Assert.assertNull(optionGroup84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(list87);
        org.junit.Assert.assertNull(optionGroup88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1785");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine8 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine8.getOptionValues("hi!");
        java.lang.String str13 = commandLine8.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str15 = commandLine8.getOptionValue("arg");
        java.lang.String[] strArray16 = commandLine8.getArgs();
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser0.parse(options1, strArray16, properties17);
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option22 = org.apache.commons.cli.OptionBuilder.create('4');
        option22.setDescription("");
        org.apache.commons.cli.Options options25 = options20.addOption(option22);
        org.apache.commons.cli.CommandLine commandLine26 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray28 = commandLine26.getOptionValues("hi!");
        java.lang.String[] strArray29 = commandLine26.getArgs();
        java.util.Properties properties30 = null;
        org.apache.commons.cli.CommandLine commandLine31 = posixParser19.parse(options20, strArray29, properties30);
        org.apache.commons.cli.PosixParser posixParser32 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options33 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option35 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup36 = options33.getOptionGroup(option35);
        org.apache.commons.cli.Option option38 = org.apache.commons.cli.OptionBuilder.create('4');
        char char39 = option38.getValueSeparator();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create('4');
        option41.setDescription("");
        option38.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup45 = options33.getOptionGroup(option38);
        boolean boolean47 = options33.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser48 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option51 = org.apache.commons.cli.OptionBuilder.create('4');
        option51.setDescription("");
        org.apache.commons.cli.Options options54 = options49.addOption(option51);
        org.apache.commons.cli.CommandLine commandLine55 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray57 = commandLine55.getOptionValues("hi!");
        java.lang.String str60 = commandLine55.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str62 = commandLine55.getOptionValue("arg");
        java.lang.String[] strArray63 = commandLine55.getArgs();
        java.lang.String[] strArray65 = posixParser48.flatten(options54, strArray63, false);
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser32.parse(options33, strArray65, properties66);
        java.util.List list68 = commandLine67.getArgList();
        java.lang.String[] strArray69 = commandLine67.getArgs();
        java.lang.String[] strArray71 = posixParser0.flatten(options20, strArray69, false);
        org.apache.commons.cli.Options options76 = options20.addOption("", "[ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ]", true, "org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]");
        java.util.List list77 = options76.getRequiredOptions();
        java.util.Collection collection78 = options76.getOptions();
        java.util.Collection collection79 = options76.getOptionGroups();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str13, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNotNull(option22);
        org.junit.Assert.assertNotNull(options25);
        org.junit.Assert.assertNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(option35);
        org.junit.Assert.assertNull(optionGroup36);
        org.junit.Assert.assertNotNull(option38);
        org.junit.Assert.assertTrue("'" + char39 + "' != '" + '\000' + "'", char39 == '\000');
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(option51);
        org.junit.Assert.assertNotNull(options54);
        org.junit.Assert.assertNull(strArray57);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str60, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNotNull(list68);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(options76);
        org.junit.Assert.assertNotNull(list77);
        org.junit.Assert.assertNotNull(collection78);
        org.junit.Assert.assertNotNull(collection79);
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1775");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.util.Iterator iterator1 = commandLine0.iterator();
        boolean boolean3 = commandLine0.hasOption("[ option: 4  :: [ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ] ::  ]");
        java.lang.String str5 = commandLine0.getOptionValue("org.apache.commons.cli.MissingArgumentException: [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]");
        org.junit.Assert.assertNotNull(iterator1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0379");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptionGroups();
        org.apache.commons.cli.Option option61 = org.apache.commons.cli.OptionBuilder.create('4');
        option61.setDescription("");
        option61.setLongOpt("hi!");
        boolean boolean66 = option61.hasArgName();
        org.apache.commons.cli.Options options67 = options53.addOption(option61);
        org.apache.commons.cli.PosixParser posixParser68 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options69 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option71 = org.apache.commons.cli.OptionBuilder.create('4');
        option71.setDescription("");
        org.apache.commons.cli.Options options74 = options69.addOption(option71);
        org.apache.commons.cli.CommandLine commandLine75 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray77 = commandLine75.getOptionValues("hi!");
        java.lang.String str80 = commandLine75.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str82 = commandLine75.getOptionValue("arg");
        java.lang.String[] strArray83 = commandLine75.getArgs();
        java.lang.String[] strArray85 = posixParser68.flatten(options74, strArray83, false);
        org.apache.commons.cli.CommandLine commandLine86 = posixParser0.parse(options53, strArray85);
        java.util.Iterator iterator87 = commandLine86.iterator();
        java.util.List list88 = commandLine86.getArgList();
        java.lang.String[] strArray90 = commandLine86.getOptionValues("[ option: 4  :: null ]");
        java.lang.String[] strArray91 = commandLine86.getArgs();
        java.lang.String[] strArray93 = commandLine86.getOptionValues('a');
        java.util.Iterator iterator94 = commandLine86.iterator();
        java.lang.Object obj96 = commandLine86.getOptionObject("[ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ]");
        java.lang.Object obj98 = commandLine86.getOptionObject("arg");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(option61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(options67);
        org.junit.Assert.assertNotNull(option71);
        org.junit.Assert.assertNotNull(options74);
        org.junit.Assert.assertNull(strArray77);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str80, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(commandLine86);
        org.junit.Assert.assertNotNull(iterator87);
        org.junit.Assert.assertNotNull(list88);
        org.junit.Assert.assertNull(strArray90);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNull(strArray93);
        org.junit.Assert.assertNotNull(iterator94);
        org.junit.Assert.assertNull(obj96);
        org.junit.Assert.assertNull(obj98);
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0863");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine8 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine8.getOptionValues("hi!");
        java.lang.String str13 = commandLine8.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str15 = commandLine8.getOptionValue("arg");
        java.lang.String[] strArray16 = commandLine8.getArgs();
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser0.parse(options1, strArray16, properties17);
        java.lang.String str21 = commandLine18.getOptionValue('a', "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]");
        java.lang.String[] strArray23 = commandLine18.getOptionValues("org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str13, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]" + "'", str21, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]");
        org.junit.Assert.assertNull(strArray23);
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0224");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options53, strArray60, true);
        java.lang.String str64 = commandLine62.getOptionValue('\000');
        java.lang.Object obj66 = commandLine62.getOptionObject("[ option:    :: null ]");
        org.apache.commons.cli.Option[] optionArray67 = commandLine62.getOptions();
        commandLine62.addArg("[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]");
        java.lang.String str71 = commandLine62.getOptionValue("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4 org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!  ::  ]} ] [ long {org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!=[ option: 4 org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!  ::  ]} ]");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNotNull(optionArray67);
        org.junit.Assert.assertNull(str71);
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1589");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        boolean boolean41 = options18.hasOption("[ option: 4  :: org.apache.commons.cli.ParseException: arg ]");
        java.lang.Class<?> wildcardClass42 = options18.getClass();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0026");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options53, strArray60, true);
        org.apache.commons.cli.Options options63 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option65 = org.apache.commons.cli.OptionBuilder.create('4');
        option65.setDescription("");
        org.apache.commons.cli.Options options68 = options63.addOption(option65);
        java.util.Collection collection69 = options63.getOptionGroups();
        org.apache.commons.cli.Options options73 = options63.addOption("", false, "arg");
        java.util.List list74 = options73.getRequiredOptions();
        org.apache.commons.cli.Option option76 = org.apache.commons.cli.OptionBuilder.create("arg");
        org.apache.commons.cli.Options options77 = options73.addOption(option76);
        org.apache.commons.cli.Option option79 = org.apache.commons.cli.OptionBuilder.create('4');
        option79.setArgs((int) (short) 100);
        option79.setArgName("[ option: 4  :: null ]");
        java.lang.String str84 = option79.getLongOpt();
        java.lang.String str86 = option79.getValue((int) (short) -1);
        org.apache.commons.cli.Options options87 = options77.addOption(option79);
        org.apache.commons.cli.CommandLine commandLine88 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray90 = commandLine88.getOptionValues("hi!");
        java.lang.String str93 = commandLine88.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str95 = commandLine88.getOptionValue("arg");
        java.lang.String[] strArray96 = commandLine88.getArgs();
        org.apache.commons.cli.CommandLine commandLine98 = posixParser0.parse(options87, strArray96, false);
        java.util.Collection collection99 = options87.getOptionGroups();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(option65);
        org.junit.Assert.assertNotNull(options68);
        org.junit.Assert.assertNotNull(collection69);
        org.junit.Assert.assertNotNull(options73);
        org.junit.Assert.assertNotNull(list74);
        org.junit.Assert.assertNotNull(option76);
        org.junit.Assert.assertNotNull(options77);
        org.junit.Assert.assertNotNull(option79);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNotNull(options87);
        org.junit.Assert.assertNull(strArray90);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str93, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str95);
        org.junit.Assert.assertNotNull(strArray96);
        org.junit.Assert.assertNotNull(commandLine98);
        org.junit.Assert.assertNotNull(collection99);
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0924");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option38 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup39 = options36.getOptionGroup(option38);
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create('4');
        char char42 = option41.getValueSeparator();
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create('4');
        option44.setDescription("");
        option41.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup48 = options36.getOptionGroup(option41);
        org.apache.commons.cli.Option option50 = org.apache.commons.cli.OptionBuilder.create('4');
        boolean boolean51 = option50.isRequired();
        org.apache.commons.cli.Options options52 = options36.addOption(option50);
        java.util.List list53 = options52.getRequiredOptions();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setArgs((int) (short) 100);
        option55.setArgName("[ option: 4  :: null ]");
        java.lang.String str60 = option55.getLongOpt();
        java.lang.String str62 = option55.getValue((int) (short) -1);
        org.apache.commons.cli.CommandLine commandLine63 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray65 = commandLine63.getOptionValues("hi!");
        java.lang.String str68 = commandLine63.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str70 = commandLine63.getOptionValue("arg");
        java.lang.String[] strArray71 = commandLine63.getArgs();
        option55.setType((java.lang.Object) strArray71);
        java.util.Properties properties73 = null;
        org.apache.commons.cli.CommandLine commandLine74 = posixParser0.parse(options52, strArray71, properties73);
        org.apache.commons.cli.Options options75 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option77 = org.apache.commons.cli.OptionBuilder.create('4');
        option77.setDescription("");
        org.apache.commons.cli.Options options80 = options75.addOption(option77);
        java.util.Collection collection81 = options80.getOptions();
        java.util.Collection collection82 = options80.getOptions();
        org.apache.commons.cli.CommandLine commandLine83 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray85 = commandLine83.getOptionValues("hi!");
        java.lang.String str88 = commandLine83.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str90 = commandLine83.getOptionValue("arg");
        java.lang.Object obj92 = commandLine83.getOptionObject('a');
        java.lang.String[] strArray94 = commandLine83.getOptionValues('=');
        java.lang.String[] strArray95 = commandLine83.getArgs();
        java.lang.String[] strArray96 = commandLine83.getArgs();
        java.util.Properties properties97 = null;
        org.apache.commons.cli.CommandLine commandLine99 = posixParser0.parse(options80, strArray96, properties97, false);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option38);
        org.junit.Assert.assertNull(optionGroup39);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertTrue("'" + char42 + "' != '" + '\000' + "'", char42 == '\000');
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertNull(optionGroup48);
        org.junit.Assert.assertNotNull(option50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(list53);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(strArray65);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str68, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(commandLine74);
        org.junit.Assert.assertNotNull(option77);
        org.junit.Assert.assertNotNull(options80);
        org.junit.Assert.assertNotNull(collection81);
        org.junit.Assert.assertNotNull(collection82);
        org.junit.Assert.assertNull(strArray85);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str88, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertNull(obj92);
        org.junit.Assert.assertNull(strArray94);
        org.junit.Assert.assertNotNull(strArray95);
        org.junit.Assert.assertNotNull(strArray96);
        org.junit.Assert.assertNotNull(commandLine99);
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0466");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptions();
        boolean boolean9 = options1.hasOption("arg");
        java.lang.String[] strArray12 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" };
        org.apache.commons.cli.CommandLine commandLine13 = posixParser0.parse(options1, strArray12);
        commandLine13.addArg("[ option: 4  :: null ::  ]");
        java.util.Iterator iterator16 = commandLine13.iterator();
        java.lang.Object obj18 = commandLine13.getOptionObject("[ Options: [ short {4=[ option: 4  ::  :: [ option: arg [ option: 4  :: null ] +ARG :: 4 ] ]} ] [ long {} ]");
        java.lang.String str21 = commandLine13.getOptionValue(' ', "org.apache.commons.cli.MissingOptionException: [ option: 4  :: null ]");
        java.lang.String str23 = commandLine13.getOptionValue("[ option: 4  :: null :: [ option:   [ option: 4  ::  ]  :: null ] ]");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine13);
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "org.apache.commons.cli.MissingOptionException: [ option: 4  :: null ]" + "'", str21, "org.apache.commons.cli.MissingOptionException: [ option: 4  :: null ]");
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0305");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptions();
        boolean boolean9 = options1.hasOption("arg");
        java.lang.String[] strArray12 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" };
        org.apache.commons.cli.CommandLine commandLine13 = posixParser0.parse(options1, strArray12);
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = org.apache.commons.cli.OptionBuilder.create('4');
        option16.setDescription("");
        org.apache.commons.cli.Options options19 = options14.addOption(option16);
        java.util.Collection collection20 = options14.getOptionGroups();
        org.apache.commons.cli.Options options24 = options14.addOption("", false, "arg");
        java.util.List list25 = options24.getRequiredOptions();
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create("arg");
        org.apache.commons.cli.Options options28 = options24.addOption(option27);
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setArgs((int) (short) 100);
        option30.setArgName("[ option: 4  :: null ]");
        java.lang.String str35 = option30.getLongOpt();
        java.lang.String str37 = option30.getValue((int) (short) -1);
        org.apache.commons.cli.Options options38 = options28.addOption(option30);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup42 = options39.getOptionGroup(option41);
        boolean boolean43 = option41.hasLongOpt();
        boolean boolean44 = option41.isRequired();
        java.util.List list45 = option41.getValuesList();
        option41.setDescription("[ option: 4  ::  ]");
        org.apache.commons.cli.Options options48 = options38.addOption(option41);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        option52.setDescription("");
        org.apache.commons.cli.Options options55 = options50.addOption(option52);
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray58 = commandLine56.getOptionValues("hi!");
        java.lang.String str61 = commandLine56.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str63 = commandLine56.getOptionValue("arg");
        java.lang.String[] strArray64 = commandLine56.getArgs();
        java.lang.String[] strArray66 = posixParser49.flatten(options55, strArray64, false);
        org.apache.commons.cli.CommandLine commandLine68 = posixParser0.parse(options38, strArray64, true);
        commandLine68.addArg("[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]");
        boolean boolean72 = commandLine68.hasOption('\000');
        java.lang.Object obj74 = commandLine68.getOptionObject(' ');
        org.apache.commons.cli.OptionBuilder optionBuilder75 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) ' ');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine13);
        org.junit.Assert.assertNotNull(option16);
        org.junit.Assert.assertNotNull(options19);
        org.junit.Assert.assertNotNull(collection20);
        org.junit.Assert.assertNotNull(options24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(list45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNull(strArray58);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str61, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertNotNull(optionBuilder75);
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0017");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str6 = commandLine0.getOptionValue("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]", "[ option:    :: null ]");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[ option:    :: null ]" + "'", str6, "[ option:    :: null ]");
    }
}
