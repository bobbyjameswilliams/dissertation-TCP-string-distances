package com.fasterxml.jackson.core.util;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3625");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        long long93 = uTF8StreamJsonParser84.getTokenCharacterOffset();
        com.fasterxml.jackson.core.Version version94 = uTF8StreamJsonParser84.version();
        java.lang.String str95 = uTF8StreamJsonParser84.getText();
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.Version version97 = uTF8StreamJsonParser84.version();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonToken jsonToken98 = uTF8StreamJsonParser84.nextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
        org.junit.Assert.assertNotNull(version94);
        org.junit.Assert.assertNull(str95);
        org.junit.Assert.assertNotNull(version97);
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1163");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream4 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer5 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext3, outputStream4);
        com.fasterxml.jackson.core.sym.Name name6 = com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer.getEmptyName();
        int[] intArray13 = new int[] { (-1959036043), (short) 1, 0, (short) -1, 10, '4' };
        boolean boolean15 = name6.equals(intArray13, (-1));
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding16 = com.fasterxml.jackson.core.JsonEncoding.UTF16_BE;
        boolean boolean17 = name6.equals((java.lang.Object) jsonEncoding16);
        iOContext3.setEncoding(jsonEncoding16);
        byte[] byteArray19 = iOContext3.allocReadIOBuffer();
        boolean boolean20 = iOContext3.isResourceManaged();
        com.fasterxml.jackson.core.util.TextBuffer textBuffer21 = iOContext3.constructTextBuffer();
        char[] charArray22 = iOContext3.allocTokenBuffer();
        boolean boolean23 = iOContext3.isResourceManaged();
        com.fasterxml.jackson.core.io.SerializedString serializedString25 = new com.fasterxml.jackson.core.io.SerializedString("\n");
        java.lang.String str26 = serializedString25.toString();
        char[] charArray27 = new char[] {};
        int int29 = serializedString25.appendQuoted(charArray27, (int) (byte) 10);
        byte[] byteArray30 = serializedString25.asQuotedUTF8();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("\n");
        java.lang.String str33 = serializedString32.toString();
        int int34 = serializedString32.charLength();
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler35 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext38 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler35, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream39 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer40 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext38, outputStream39);
        byte[] byteArray41 = iOContext38.allocReadIOBuffer();
        int int43 = serializedString32.appendQuotedUTF8(byteArray41, 3);
        int int45 = serializedString25.appendQuotedUTF8(byteArray41, (int) (byte) 100);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper48 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, byteArray41, (-515348272), (-1958917315));
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding49 = byteSourceJsonBootstrapper48.detectEncoding();
        java.lang.String str50 = jsonEncoding49.getJavaName();
        org.junit.Assert.assertNotNull(name6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1959036043, 1, 0, -1, 10, 52]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + jsonEncoding16 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF16_BE + "'", jsonEncoding16.equals(com.fasterxml.jackson.core.JsonEncoding.UTF16_BE));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(textBuffer21);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\n" + "'", str26, "\n");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[92, 110]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\n" + "'", str33, "\n");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertTrue("'" + jsonEncoding49 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding49.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "UTF-8" + "'", str50, "UTF-8");
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1132");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("hi!");
        com.fasterxml.jackson.core.SerializableString serializableString2 = defaultPrettyPrinter1._rootSeparator;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter3 = defaultPrettyPrinter1._objectIndenter;
        com.fasterxml.jackson.core.ObjectCodec objectCodec4 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = new com.fasterxml.jackson.core.JsonFactory(objectCodec4);
        java.io.Reader reader6 = null;
        com.fasterxml.jackson.core.JsonParser jsonParser7 = jsonFactory5.createParser(reader6);
        boolean boolean8 = jsonParser7.requiresCustomCodec();
        java.lang.String str9 = jsonParser7.getText();
        java.lang.Object obj10 = jsonParser7.getObjectId();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter12 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("hi!");
        com.fasterxml.jackson.core.SerializableString serializableString13 = defaultPrettyPrinter12._rootSeparator;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler14 = null;
        com.fasterxml.jackson.core.util.TextBuffer textBuffer15 = new com.fasterxml.jackson.core.util.TextBuffer(bufferRecycler14);
        char[] charArray16 = com.fasterxml.jackson.core.util.TextBuffer.NO_CHARS;
        textBuffer15.resetWithShared(charArray16, 2000, 2000);
        int int21 = serializableString13.appendUnquoted(charArray16, 0);
        boolean boolean22 = jsonParser7.nextFieldName(serializableString13);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter1.withRootSeparator(serializableString13);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler24 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext27 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler24, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream28 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer29 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext27, outputStream28);
        com.fasterxml.jackson.core.ObjectCodec objectCodec31 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler32 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext35 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler32, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream36 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer37 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext35, outputStream36);
        uTF8Writer37.flush();
        java.io.Writer writer40 = uTF8Writer37.append('a');
        com.fasterxml.jackson.core.json.WriterBasedJsonGenerator writerBasedJsonGenerator41 = new com.fasterxml.jackson.core.json.WriterBasedJsonGenerator(iOContext27, (-1959034571), objectCodec31, (java.io.Writer) uTF8Writer37);
        com.fasterxml.jackson.core.Version version42 = writerBasedJsonGenerator41.version();
        writerBasedJsonGenerator41.writeNull();
        java.math.BigInteger bigInteger44 = null;
        writerBasedJsonGenerator41.writeNumber(bigInteger44);
        java.math.BigInteger bigInteger46 = null;
        writerBasedJsonGenerator41.writeNumber(bigInteger46);
        defaultPrettyPrinter1.writeRootValueSeparator((com.fasterxml.jackson.core.JsonGenerator) writerBasedJsonGenerator41);
        com.fasterxml.jackson.core.Version version49 = writerBasedJsonGenerator41.version();
        writerBasedJsonGenerator41.writeNumber((float) (-201512956));
        writerBasedJsonGenerator41.writeNumber((-475196604));
        writerBasedJsonGenerator41.writeNumber((short) (byte) 100);
        org.junit.Assert.assertNotNull(serializableString2);
        org.junit.Assert.assertNotNull(indenter3);
        org.junit.Assert.assertNotNull(jsonParser7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNotNull(serializableString13);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
        org.junit.Assert.assertNotNull(writer40);
        org.junit.Assert.assertNotNull(version42);
        org.junit.Assert.assertNotNull(version49);
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3111");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        java.lang.String str9 = serializedString1.getValue();
        com.fasterxml.jackson.core.JsonLocation jsonLocation11 = null;
        java.lang.Throwable throwable12 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException13 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation11, throwable12);
        boolean boolean14 = serializedString1.equals((java.lang.Object) jsonLocation11);
        byte[] byteArray15 = serializedString1.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.SerializedString serializedString17 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray22 = new char[] { 'a', ' ', '#', '4' };
        int int24 = serializedString17.appendUnquoted(charArray22, 0);
        java.lang.String str25 = serializedString17.getValue();
        com.fasterxml.jackson.core.JsonLocation jsonLocation27 = null;
        java.lang.Throwable throwable28 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException29 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation27, throwable28);
        boolean boolean30 = serializedString17.equals((java.lang.Object) jsonLocation27);
        byte[] byteArray31 = serializedString17.asUnquotedUTF8();
        int int33 = serializedString1.appendQuotedUTF8(byteArray31, 34);
        int int34 = serializedString1.charLength();
        char[] charArray35 = serializedString1.asQuotedChars();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal38 = com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(charArray35, (int) (short) 0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: Bad offset or len arguments for char[] input.");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str9, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str25, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 47 + "'", int34 == 47);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3102");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.Version version92 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext93 = uTF8StreamJsonParser84.getParsingContext();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray94 = uTF8StreamJsonParser84.getBinaryValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNotNull(version92);
        org.junit.Assert.assertNotNull(jsonReadContext93);
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3256");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        double double93 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) 10);
        com.fasterxml.jackson.core.ObjectCodec objectCodec94 = null;
        uTF8StreamJsonParser84.setCodec(objectCodec94);
        uTF8StreamJsonParser84.overrideCurrentName("");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean98 = uTF8StreamJsonParser84.getBooleanValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not of boolean type? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 10.0d + "'", double93 == 10.0d);
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2664");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        java.lang.String str9 = serializedString1.getValue();
        com.fasterxml.jackson.core.JsonLocation jsonLocation11 = null;
        java.lang.Throwable throwable12 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException13 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation11, throwable12);
        boolean boolean14 = serializedString1.equals((java.lang.Object) jsonLocation11);
        byte[] byteArray15 = serializedString1.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.SerializedString serializedString17 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray22 = new char[] { 'a', ' ', '#', '4' };
        int int24 = serializedString17.appendUnquoted(charArray22, 0);
        java.lang.String str25 = serializedString17.getValue();
        com.fasterxml.jackson.core.JsonLocation jsonLocation27 = null;
        java.lang.Throwable throwable28 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException29 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation27, throwable28);
        boolean boolean30 = serializedString17.equals((java.lang.Object) jsonLocation27);
        byte[] byteArray31 = serializedString17.asUnquotedUTF8();
        int int33 = serializedString1.appendQuotedUTF8(byteArray31, 34);
        int int34 = serializedString1.charLength();
        char[] charArray35 = serializedString1.asQuotedChars();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal38 = com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(charArray35, (int) (short) -1, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: Bad offset or len arguments for char[] input.");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str9, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str25, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 47 + "'", int34 == 47);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2910");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        com.fasterxml.jackson.core.ObjectCodec objectCodec87 = uTF8StreamJsonParser84.getCodec();
        java.lang.String str88 = uTF8StreamJsonParser84.getValueAsString();
        boolean boolean89 = uTF8StreamJsonParser84.isClosed();
        boolean boolean90 = uTF8StreamJsonParser84.getValueAsBoolean();
        boolean boolean92 = uTF8StreamJsonParser84.getValueAsBoolean(true);
        uTF8StreamJsonParser84.clearCurrentToken();
        long long95 = uTF8StreamJsonParser84.getValueAsLong((long) 13);
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonToken jsonToken96 = uTF8StreamJsonParser84.nextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertNull(objectCodec87);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 13L + "'", long95 == 13L);
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3130");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        int int10 = serializedString1.charLength();
        char[] charArray11 = serializedString1.asQuotedChars();
        java.lang.String str12 = serializedString1.getValue();
        java.lang.String str13 = serializedString1.getValue();
        com.fasterxml.jackson.core.io.SerializedString serializedString15 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray20 = new char[] { 'a', ' ', '#', '4' };
        int int22 = serializedString15.appendUnquoted(charArray20, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray29 = new char[] { 'a', ' ', '#', '4' };
        int int31 = serializedString24.appendUnquoted(charArray29, 0);
        boolean boolean32 = serializedString15.equals((java.lang.Object) serializedString24);
        char[] charArray33 = serializedString15.asQuotedChars();
        boolean boolean37 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray33, (int) (byte) 10, 10, true);
        int int40 = com.fasterxml.jackson.core.io.NumberInput.parseInt(charArray33, (int) (byte) 1, 0);
        int int42 = serializedString1.appendUnquoted(charArray33, (int) '#');
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 47 + "'", int10 == 47);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str12, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str13, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 63 + "'", int40 == 63);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3551");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.Version version92 = uTF8StreamJsonParser84.version();
        int int94 = uTF8StreamJsonParser84.getValueAsInt((int) '#');
        boolean boolean96 = uTF8StreamJsonParser84.getValueAsBoolean(false);
        java.lang.String str98 = uTF8StreamJsonParser84.getValueAsString("?");
        java.lang.String str99 = uTF8StreamJsonParser84.getCurrentName();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNotNull(version92);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 35 + "'", int94 == 35);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "?" + "'", str98, "?");
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "[Source: hi!; line: 52, column: 1]" + "'", str99, "[Source: hi!; line: 52, column: 1]");
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3286");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        byte[] byteArray57 = null;
        iOContext12.releaseBase64Buffer(byteArray57);
        java.lang.Object obj59 = iOContext12.getSourceReference();
        boolean boolean60 = iOContext12.isResourceManaged();
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding61 = iOContext12.getEncoding();
        java.io.InputStream inputStream62 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString64 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray69 = new char[] { 'a', ' ', '#', '4' };
        int int71 = serializedString64.appendUnquoted(charArray69, 0);
        byte[] byteArray78 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 0, (byte) 0 };
        int int80 = serializedString64.appendUnquotedUTF8(byteArray78, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader84 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, inputStream62, byteArray78, (int) '#', (int) (short) -1, true);
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding85 = iOContext12.getEncoding();
        java.io.Reader reader87 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec88 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer89 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser90 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext12, (int) (byte) -1, reader87, objectCodec88, charsToNameCanonicalizer89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(jsonEncoding61);
        org.junit.Assert.assertNotNull(charArray69);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray69), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray69), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray69), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[10, 1, 10, -1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertNull(jsonEncoding85);
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2880");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        defaultPrettyPrinter21.indentObjectsWith(indenter45);
        defaultPrettyPrinter21.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter49 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter50 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter51 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter50);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter52 = defaultPrettyPrinter50._arrayIndenter;
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter49);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter50);
        org.junit.Assert.assertNotNull(indenter52);
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3359");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        com.fasterxml.jackson.core.JsonLocation jsonLocation93 = uTF8StreamJsonParser84.getTokenLocation();
        java.lang.Object obj94 = uTF8StreamJsonParser84.getObjectId();
        char[] charArray95 = uTF8StreamJsonParser84.getTextCharacters();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number96 = uTF8StreamJsonParser84.getNumberValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(jsonLocation93);
        org.junit.Assert.assertNull(obj94);
        org.junit.Assert.assertNull(charArray95);
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3378");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        int int92 = uTF8StreamJsonParser84.getTextLength();
        boolean boolean93 = uTF8StreamJsonParser84.isClosed();
        // The following exception was thrown during execution in test generation
        try {
            double double94 = uTF8StreamJsonParser84.getDoubleValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3327");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.Version version92 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext93 = uTF8StreamJsonParser84.getParsingContext();
        com.fasterxml.jackson.core.JsonToken jsonToken94 = uTF8StreamJsonParser84.getCurrentToken();
        java.lang.String str96 = uTF8StreamJsonParser84.getValueAsString("[Source: true; line: 0, column: 100]");
        java.lang.String str97 = uTF8StreamJsonParser84.getText();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNotNull(version92);
        org.junit.Assert.assertNotNull(jsonStreamContext93);
        org.junit.Assert.assertNull(jsonToken94);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "[Source: true; line: 0, column: 100]" + "'", str96, "[Source: true; line: 0, column: 100]");
        org.junit.Assert.assertNull(str97);
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3154");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int27 = serializedString20.appendQuotedUTF8(byteArray25, 0);
        char[] charArray28 = serializedString20.asQuotedChars();
        boolean boolean29 = serializedString1.equals((java.lang.Object) serializedString20);
        int int30 = serializedString1.charLength();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter32 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonParseException: ");
        com.fasterxml.jackson.core.SerializableString serializableString33 = null;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter34 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter32, serializableString33);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter35 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter32);
        com.fasterxml.jackson.core.io.SerializedString serializedString37 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray38 = serializedString37.asUnquotedUTF8();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter39 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter32, (com.fasterxml.jackson.core.SerializableString) serializedString37);
        boolean boolean40 = serializedString1.equals((java.lang.Object) serializedString37);
        java.lang.String str41 = serializedString1.toString();
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 47 + "'", int30 == 47);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str41, "com.fasterxml.jackson.core.JsonParseException: ");
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3184");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int27 = serializedString20.appendQuotedUTF8(byteArray25, 0);
        char[] charArray28 = serializedString20.asQuotedChars();
        boolean boolean29 = serializedString1.equals((java.lang.Object) serializedString20);
        char[] charArray36 = new char[] { '#', '#', 'a', 'a', ' ', '#' };
        boolean boolean40 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray36, (int) (byte) -1, 0, true);
        int int42 = serializedString20.appendQuoted(charArray36, (int) '#');
        char[] charArray43 = serializedString20.asQuotedChars();
        byte[] byteArray44 = serializedString20.asUnquotedUTF8();
        java.lang.String str45 = serializedString20.getValue();
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "##aa #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "##aa #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[#, #, a, a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str45, "com.fasterxml.jackson.core.JsonParseException: ");
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2749");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        defaultPrettyPrinter21.indentObjectsWith(indenter45);
        defaultPrettyPrinter21.spacesInObjectEntries(false);
        defaultPrettyPrinter21.spacesInObjectEntries(true);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter51 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator52 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter51.writeObjectFieldValueSeparator(jsonGenerator52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter51);
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2965");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int27 = serializedString20.appendQuotedUTF8(byteArray25, 0);
        char[] charArray28 = serializedString20.asQuotedChars();
        boolean boolean29 = serializedString1.equals((java.lang.Object) serializedString20);
        int int30 = serializedString1.charLength();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter32 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonParseException: ");
        com.fasterxml.jackson.core.SerializableString serializableString33 = null;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter34 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter32, serializableString33);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter35 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter32);
        com.fasterxml.jackson.core.io.SerializedString serializedString37 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray38 = serializedString37.asUnquotedUTF8();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter39 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter32, (com.fasterxml.jackson.core.SerializableString) serializedString37);
        boolean boolean40 = serializedString1.equals((java.lang.Object) serializedString37);
        java.lang.String str41 = serializedString37.getValue();
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 47 + "'", int30 == 47);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str41, "com.fasterxml.jackson.core.JsonParseException: ");
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1415");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream4 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer5 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext3, outputStream4);
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding6 = com.fasterxml.jackson.core.JsonEncoding.UTF16_BE;
        iOContext3.setEncoding(jsonEncoding6);
        java.io.Reader reader9 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec10 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer11 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int13 = charsToNameCanonicalizer11.calcHash("false");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser14 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, (-1954973613), reader9, objectCodec10, charsToNameCanonicalizer11);
        int int15 = readerBasedJsonParser14.getTextOffset();
        java.lang.String str16 = readerBasedJsonParser14.getText();
        boolean boolean17 = readerBasedJsonParser14.hasCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec18 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory19 = new com.fasterxml.jackson.core.JsonFactory(objectCodec18);
        com.fasterxml.jackson.core.JsonFactory.Feature feature20 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean22 = feature20.enabledIn(3);
        boolean boolean23 = jsonFactory19.isEnabled(feature20);
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory25 = new com.fasterxml.jackson.core.JsonFactory(objectCodec24);
        com.fasterxml.jackson.core.JsonFactory.Feature feature26 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean28 = feature26.enabledIn(3);
        boolean boolean29 = jsonFactory25.isEnabled(feature26);
        com.fasterxml.jackson.core.JsonParser.Feature feature30 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
        com.fasterxml.jackson.core.JsonFactory jsonFactory31 = jsonFactory25.disable(feature30);
        com.fasterxml.jackson.core.JsonFactory jsonFactory32 = jsonFactory19.disable(feature30);
        com.fasterxml.jackson.core.JsonParser jsonParser34 = readerBasedJsonParser14.configure(feature30, false);
        boolean boolean35 = jsonParser34.canReadObjectId();
        com.fasterxml.jackson.core.Base64Variant base64Variant36 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray37 = jsonParser34.getBinaryValue(base64Variant36);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: -1; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + jsonEncoding6 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF16_BE + "'", jsonEncoding6.equals(com.fasterxml.jackson.core.JsonEncoding.UTF16_BE));
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-787413590) + "'", int13 == (-787413590));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature20.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature26.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES + "'", feature30.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES));
        org.junit.Assert.assertNotNull(jsonFactory31);
        org.junit.Assert.assertNotNull(jsonFactory32);
        org.junit.Assert.assertNotNull(jsonParser34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3426");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.Version version92 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.FormatSchema formatSchema93 = null;
        boolean boolean94 = uTF8StreamJsonParser84.canUseSchema(formatSchema93);
        java.lang.Object obj95 = uTF8StreamJsonParser84.getObjectId();
        // The following exception was thrown during execution in test generation
        try {
            uTF8StreamJsonParser84.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNotNull(version92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNull(obj95);
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3552");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        java.lang.String str9 = serializedString1.getValue();
        com.fasterxml.jackson.core.JsonLocation jsonLocation11 = null;
        java.lang.Throwable throwable12 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException13 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation11, throwable12);
        boolean boolean14 = serializedString1.equals((java.lang.Object) jsonLocation11);
        byte[] byteArray15 = serializedString1.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.SerializedString serializedString17 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray22 = new char[] { 'a', ' ', '#', '4' };
        int int24 = serializedString17.appendUnquoted(charArray22, 0);
        java.lang.String str25 = serializedString17.getValue();
        com.fasterxml.jackson.core.JsonLocation jsonLocation27 = null;
        java.lang.Throwable throwable28 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException29 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation27, throwable28);
        boolean boolean30 = serializedString17.equals((java.lang.Object) jsonLocation27);
        byte[] byteArray31 = serializedString17.asUnquotedUTF8();
        int int33 = serializedString1.appendQuotedUTF8(byteArray31, 34);
        int int34 = serializedString1.charLength();
        char[] charArray35 = serializedString1.asQuotedChars();
        byte[] byteArray36 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int38 = serializedString1.appendQuotedUTF8(byteArray36, 24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str9, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str25, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 47 + "'", int34 == 47);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3568");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.Version version92 = uTF8StreamJsonParser84.version();
        int int94 = uTF8StreamJsonParser84.getValueAsInt((int) '#');
        com.fasterxml.jackson.core.JsonLocation jsonLocation95 = uTF8StreamJsonParser84.getTokenLocation();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Boolean boolean96 = uTF8StreamJsonParser84.nextBooleanValue();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNotNull(version92);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 35 + "'", int94 == 35);
        org.junit.Assert.assertNotNull(jsonLocation95);
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1122");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream4 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer5 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext3, outputStream4);
        com.fasterxml.jackson.core.ObjectCodec objectCodec7 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler8 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext11 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler8, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream12 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer13 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext11, outputStream12);
        uTF8Writer13.flush();
        java.io.Writer writer16 = uTF8Writer13.append('a');
        com.fasterxml.jackson.core.json.WriterBasedJsonGenerator writerBasedJsonGenerator17 = new com.fasterxml.jackson.core.json.WriterBasedJsonGenerator(iOContext3, (-1959034571), objectCodec7, (java.io.Writer) uTF8Writer13);
        com.fasterxml.jackson.core.Version version18 = writerBasedJsonGenerator17.version();
        writerBasedJsonGenerator17.writeRaw("com.fasterxml.jackson.core.JsonParseException: \n\n at [Source: CANONICALIZE_FIELD_NAMES; line: 10, column: 100]");
        com.fasterxml.jackson.core.json.JsonWriteContext jsonWriteContext21 = writerBasedJsonGenerator17.getOutputContext();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator22 = writerBasedJsonGenerator17.useDefaultPrettyPrinter();
        boolean boolean23 = writerBasedJsonGenerator17.canWriteObjectId();
        boolean boolean24 = writerBasedJsonGenerator17.isClosed();
        writerBasedJsonGenerator17.writeRaw("");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext30 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream31 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer32 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext30, outputStream31);
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding33 = com.fasterxml.jackson.core.JsonEncoding.UTF16_BE;
        iOContext30.setEncoding(jsonEncoding33);
        java.io.Reader reader36 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec37 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer38 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int40 = charsToNameCanonicalizer38.calcHash("false");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser41 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext30, (-1954973613), reader36, objectCodec37, charsToNameCanonicalizer38);
        com.fasterxml.jackson.core.util.ByteArrayBuilder byteArrayBuilder42 = readerBasedJsonParser41._getByteArrayBuilder();
        com.fasterxml.jackson.core.JsonToken jsonToken43 = readerBasedJsonParser41.nextToken();
        com.fasterxml.jackson.core.JsonToken jsonToken44 = readerBasedJsonParser41.nextValue();
        readerBasedJsonParser41.overrideCurrentName("");
        com.fasterxml.jackson.core.ObjectCodec objectCodec47 = null;
        readerBasedJsonParser41.setCodec(objectCodec47);
        boolean boolean49 = readerBasedJsonParser41.isClosed();
        // The following exception was thrown during execution in test generation
        try {
            writerBasedJsonGenerator17.copyCurrentStructure((com.fasterxml.jackson.core.JsonParser) readerBasedJsonParser41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(writer16);
        org.junit.Assert.assertNotNull(version18);
        org.junit.Assert.assertNotNull(jsonWriteContext21);
        org.junit.Assert.assertNotNull(jsonGenerator22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + jsonEncoding33 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF16_BE + "'", jsonEncoding33.equals(com.fasterxml.jackson.core.JsonEncoding.UTF16_BE));
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer38);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1244664720 + "'", int40 == 1244664720);
        org.junit.Assert.assertNotNull(byteArrayBuilder42);
        org.junit.Assert.assertNull(jsonToken43);
        org.junit.Assert.assertNull(jsonToken44);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3075");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        int int89 = uTF8StreamJsonParser84.getTextOffset();
        double double91 = uTF8StreamJsonParser84.getValueAsDouble((double) 10.0f);
        com.fasterxml.jackson.core.JsonLocation jsonLocation92 = uTF8StreamJsonParser84.getCurrentLocation();
        boolean boolean93 = uTF8StreamJsonParser84.canReadObjectId();
        int int94 = uTF8StreamJsonParser84.getFeatureMask();
        java.lang.String str95 = uTF8StreamJsonParser84.getText();
        com.fasterxml.jackson.core.SerializableString serializableString96 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean97 = uTF8StreamJsonParser84.nextFieldName(serializableString96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 10.0d + "'", double91 == 10.0d);
        org.junit.Assert.assertNotNull(jsonLocation92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertNull(str95);
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2563");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        defaultPrettyPrinter21.indentObjectsWith(indenter45);
        defaultPrettyPrinter21.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter49 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator50 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.writeObjectEntrySeparator(jsonGenerator50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter49);
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3591");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.Version version92 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext93 = uTF8StreamJsonParser84.getParsingContext();
        com.fasterxml.jackson.core.JsonToken jsonToken94 = uTF8StreamJsonParser84.getCurrentToken();
        java.lang.String str96 = uTF8StreamJsonParser84.getValueAsString("[Source: true; line: 0, column: 100]");
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNotNull(version92);
        org.junit.Assert.assertNotNull(jsonStreamContext93);
        org.junit.Assert.assertNull(jsonToken94);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "[Source: true; line: 0, column: 100]" + "'", str96, "[Source: true; line: 0, column: 100]");
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2582");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        defaultPrettyPrinter21.indentObjectsWith(indenter45);
        defaultPrettyPrinter21.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter49 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator50 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.beforeObjectEntries(jsonGenerator50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter49);
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2548");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        defaultPrettyPrinter21.indentObjectsWith(indenter45);
        defaultPrettyPrinter21.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter49 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator50 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.writeEndArray(jsonGenerator50, 34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter49);
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2544");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        defaultPrettyPrinter21.indentObjectsWith(indenter45);
        defaultPrettyPrinter21.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter49 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator50 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.beforeArrayValues(jsonGenerator50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter49);
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2968");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        com.fasterxml.jackson.core.JsonLocation jsonLocation93 = uTF8StreamJsonParser84.getTokenLocation();
        boolean boolean95 = uTF8StreamJsonParser84.getValueAsBoolean(true);
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser.NumberType numberType96 = uTF8StreamJsonParser84.getNumberType();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(jsonLocation93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3481");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.Version version92 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.FormatSchema formatSchema93 = null;
        boolean boolean94 = uTF8StreamJsonParser84.canUseSchema(formatSchema93);
        com.fasterxml.jackson.core.JsonParser jsonParser95 = uTF8StreamJsonParser84.skipChildren();
        java.lang.String str96 = uTF8StreamJsonParser84.getText();
        boolean boolean97 = uTF8StreamJsonParser84.hasCurrentToken();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNotNull(version92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(jsonParser95);
        org.junit.Assert.assertNull(str96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3042");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int27 = serializedString20.appendQuotedUTF8(byteArray25, 0);
        char[] charArray28 = serializedString20.asQuotedChars();
        boolean boolean29 = serializedString1.equals((java.lang.Object) serializedString20);
        int int30 = serializedString1.charLength();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter32 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonParseException: ");
        com.fasterxml.jackson.core.SerializableString serializableString33 = null;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter34 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter32, serializableString33);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter35 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter32);
        com.fasterxml.jackson.core.io.SerializedString serializedString37 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray38 = serializedString37.asUnquotedUTF8();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter39 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter32, (com.fasterxml.jackson.core.SerializableString) serializedString37);
        boolean boolean40 = serializedString1.equals((java.lang.Object) serializedString37);
        java.lang.Class<?> wildcardClass41 = serializedString37.getClass();
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 47 + "'", int30 == 47);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2550");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        defaultPrettyPrinter21.indentObjectsWith(indenter45);
        defaultPrettyPrinter21.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter49 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator50 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter49.writeRootValueSeparator(jsonGenerator50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter49);
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3080");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        defaultPrettyPrinter21.indentObjectsWith(indenter45);
        defaultPrettyPrinter21.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter49 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator50 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.writeObjectEntrySeparator(jsonGenerator50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter49);
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3180");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        defaultPrettyPrinter21.indentObjectsWith(indenter45);
        defaultPrettyPrinter21.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter49 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator50 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.writeObjectEntrySeparator(jsonGenerator50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter49);
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1360");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream4 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer5 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext3, outputStream4);
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding6 = com.fasterxml.jackson.core.JsonEncoding.UTF16_BE;
        iOContext3.setEncoding(jsonEncoding6);
        java.io.Reader reader9 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec10 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer11 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int13 = charsToNameCanonicalizer11.calcHash("false");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser14 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, (-1954973613), reader9, objectCodec10, charsToNameCanonicalizer11);
        com.fasterxml.jackson.core.util.ByteArrayBuilder byteArrayBuilder15 = readerBasedJsonParser14._getByteArrayBuilder();
        com.fasterxml.jackson.core.Version version16 = readerBasedJsonParser14.version();
        com.fasterxml.jackson.core.ObjectCodec objectCodec17 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory18 = new com.fasterxml.jackson.core.JsonFactory(objectCodec17);
        com.fasterxml.jackson.core.ObjectCodec objectCodec19 = jsonFactory18.getCodec();
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler20 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext23 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler20, (java.lang.Object) (byte) -1, true);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler24 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext27 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler24, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream28 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer29 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext27, outputStream28);
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding30 = com.fasterxml.jackson.core.JsonEncoding.UTF16_BE;
        iOContext27.setEncoding(jsonEncoding30);
        java.io.Reader reader33 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec34 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer35 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int37 = charsToNameCanonicalizer35.calcHash("false");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser38 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext27, (-1954973613), reader33, objectCodec34, charsToNameCanonicalizer35);
        com.fasterxml.jackson.core.util.ByteArrayBuilder byteArrayBuilder39 = readerBasedJsonParser38._getByteArrayBuilder();
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer40 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext23, (java.io.OutputStream) byteArrayBuilder39);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator41 = jsonFactory18.createJsonGenerator((java.io.OutputStream) byteArrayBuilder39);
        // The following exception was thrown during execution in test generation
        try {
            int int42 = readerBasedJsonParser14.readBinaryValue((java.io.OutputStream) byteArrayBuilder39);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: -1; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + jsonEncoding6 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF16_BE + "'", jsonEncoding6.equals(com.fasterxml.jackson.core.JsonEncoding.UTF16_BE));
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 101901932 + "'", int13 == 101901932);
        org.junit.Assert.assertNotNull(byteArrayBuilder15);
        org.junit.Assert.assertNotNull(version16);
        org.junit.Assert.assertNull(objectCodec19);
        org.junit.Assert.assertTrue("'" + jsonEncoding30 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF16_BE + "'", jsonEncoding30.equals(com.fasterxml.jackson.core.JsonEncoding.UTF16_BE));
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer35);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 101901932 + "'", int37 == 101901932);
        org.junit.Assert.assertNotNull(byteArrayBuilder39);
        org.junit.Assert.assertNotNull(jsonGenerator41);
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3574");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        com.fasterxml.jackson.core.ObjectCodec objectCodec87 = uTF8StreamJsonParser84.getCodec();
        java.lang.String str88 = uTF8StreamJsonParser84.getValueAsString();
        boolean boolean89 = uTF8StreamJsonParser84.isClosed();
        boolean boolean90 = uTF8StreamJsonParser84.getValueAsBoolean();
        com.fasterxml.jackson.core.Version version91 = uTF8StreamJsonParser84.version();
        double double93 = uTF8StreamJsonParser84.getValueAsDouble((double) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonToken jsonToken94 = uTF8StreamJsonParser84.nextToken();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertNull(objectCodec87);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(version91);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 1.0d + "'", double93 == 1.0d);
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3105");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        com.fasterxml.jackson.core.Version version90 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.JsonLocation jsonLocation91 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.Version version92 = uTF8StreamJsonParser84.version();
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        double double95 = uTF8StreamJsonParser84.getValueAsDouble();
        com.fasterxml.jackson.core.JsonParser jsonParser96 = uTF8StreamJsonParser84.skipChildren();
        com.fasterxml.jackson.core.JsonToken jsonToken97 = uTF8StreamJsonParser84.getLastClearedToken();
        java.lang.String str98 = uTF8StreamJsonParser84.getCurrentName();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(version90);
        org.junit.Assert.assertNotNull(jsonLocation91);
        org.junit.Assert.assertNotNull(version92);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d);
        org.junit.Assert.assertNotNull(jsonParser96);
        org.junit.Assert.assertNull(jsonToken97);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "[Source: hi!; line: 52, column: 1]" + "'", str98, "[Source: hi!; line: 52, column: 1]");
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1111");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream4 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer5 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext3, outputStream4);
        com.fasterxml.jackson.core.ObjectCodec objectCodec7 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler8 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext11 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler8, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream12 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer13 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext11, outputStream12);
        uTF8Writer13.flush();
        java.io.Writer writer16 = uTF8Writer13.append('a');
        com.fasterxml.jackson.core.json.WriterBasedJsonGenerator writerBasedJsonGenerator17 = new com.fasterxml.jackson.core.json.WriterBasedJsonGenerator(iOContext3, (-1959034571), objectCodec7, (java.io.Writer) uTF8Writer13);
        com.fasterxml.jackson.core.Version version18 = writerBasedJsonGenerator17.version();
        writerBasedJsonGenerator17.writeRaw("com.fasterxml.jackson.core.JsonParseException: \n\n at [Source: CANONICALIZE_FIELD_NAMES; line: 10, column: 100]");
        com.fasterxml.jackson.core.json.JsonWriteContext jsonWriteContext21 = writerBasedJsonGenerator17.getOutputContext();
        int int22 = writerBasedJsonGenerator17.getHighestEscapedChar();
        int int23 = writerBasedJsonGenerator17.getFeatureMask();
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory25 = new com.fasterxml.jackson.core.JsonFactory(objectCodec24);
        java.io.Reader reader26 = null;
        com.fasterxml.jackson.core.JsonParser jsonParser27 = jsonFactory25.createParser(reader26);
        com.fasterxml.jackson.core.Version version28 = jsonFactory25.version();
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler29 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler29, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream33 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer34 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext32, outputStream33);
        com.fasterxml.jackson.core.ObjectCodec objectCodec36 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler37 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext40 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler37, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream41 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer42 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext40, outputStream41);
        uTF8Writer42.flush();
        java.io.Writer writer45 = uTF8Writer42.append('a');
        com.fasterxml.jackson.core.json.WriterBasedJsonGenerator writerBasedJsonGenerator46 = new com.fasterxml.jackson.core.json.WriterBasedJsonGenerator(iOContext32, (-1959034571), objectCodec36, (java.io.Writer) uTF8Writer42);
        uTF8Writer42.flush();
        java.io.Writer writer49 = uTF8Writer42.append('a');
        uTF8Writer42.close();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator51 = jsonFactory25.createJsonGenerator((java.io.Writer) uTF8Writer42);
        boolean boolean52 = jsonGenerator51.canWriteTypeId();
        writerBasedJsonGenerator17.writeObject((java.lang.Object) boolean52);
        com.fasterxml.jackson.core.FormatSchema formatSchema54 = null;
        // The following exception was thrown during execution in test generation
        try {
            writerBasedJsonGenerator17.setSchema(formatSchema54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(writer16);
        org.junit.Assert.assertNotNull(version18);
        org.junit.Assert.assertNotNull(jsonWriteContext21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1959034571) + "'", int23 == (-1959034571));
        org.junit.Assert.assertNotNull(jsonParser27);
        org.junit.Assert.assertNotNull(version28);
        org.junit.Assert.assertNotNull(writer45);
        org.junit.Assert.assertNotNull(writer49);
        org.junit.Assert.assertNotNull(jsonGenerator51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1130");
        int int2 = com.fasterxml.jackson.core.io.NumberInput.parseAsInt(" \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000", 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2895");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        com.fasterxml.jackson.core.ObjectCodec objectCodec87 = uTF8StreamJsonParser84.getCodec();
        java.lang.String str88 = uTF8StreamJsonParser84.getValueAsString();
        boolean boolean89 = uTF8StreamJsonParser84.isClosed();
        boolean boolean90 = uTF8StreamJsonParser84.getValueAsBoolean();
        boolean boolean92 = uTF8StreamJsonParser84.getValueAsBoolean(true);
        // The following exception was thrown during execution in test generation
        try {
            float float93 = uTF8StreamJsonParser84.getFloatValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertNull(objectCodec87);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3600");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        java.lang.String str80 = textBuffer76.toString();
        boolean boolean81 = textBuffer76.hasTextAsCharacters();
        char[] charArray82 = textBuffer76.finishCurrentSegment();
        java.lang.String str83 = textBuffer76.toString();
        textBuffer76.resetWithEmpty();
        char[] charArray85 = textBuffer76.expandCurrentSegment();
        char[] charArray86 = textBuffer76.emptyAndGetCurrentSegment();
        textBuffer76.setCurrentLength(35);
        int int89 = textBuffer76.getTextOffset();
        char[] charArray90 = textBuffer76.emptyAndGetCurrentSegment();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "a" + "'", str80, "a");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "a" + "'", str83, "a");
        org.junit.Assert.assertNotNull(charArray85);
        org.junit.Assert.assertNotNull(charArray86);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(charArray90);
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3064");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        com.fasterxml.jackson.core.ObjectCodec objectCodec87 = uTF8StreamJsonParser84.getCodec();
        java.lang.String str88 = uTF8StreamJsonParser84.getValueAsString();
        boolean boolean89 = uTF8StreamJsonParser84.isClosed();
        boolean boolean90 = uTF8StreamJsonParser84.getValueAsBoolean();
        int int92 = uTF8StreamJsonParser84.getValueAsInt((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number93 = uTF8StreamJsonParser84.getNumberValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertNull(objectCodec87);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3299");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        java.lang.String str80 = textBuffer76.toString();
        boolean boolean81 = textBuffer76.hasTextAsCharacters();
        char[] charArray82 = textBuffer76.finishCurrentSegment();
        java.lang.String str83 = textBuffer76.toString();
        boolean boolean84 = textBuffer76.hasTextAsCharacters();
        textBuffer76.releaseBuffers();
        // The following exception was thrown during execution in test generation
        try {
            double double86 = textBuffer76.contentsAsDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: empty String");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "a" + "'", str80, "a");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "a" + "'", str83, "a");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2739");
        com.fasterxml.jackson.core.io.IOContext iOContext0 = null;
        java.io.InputStream inputStream1 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString3 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray8 = new char[] { 'a', ' ', '#', '4' };
        int int10 = serializedString3.appendUnquoted(charArray8, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString12 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray17 = new char[] { 'a', ' ', '#', '4' };
        int int19 = serializedString12.appendUnquoted(charArray17, 0);
        boolean boolean20 = serializedString3.equals((java.lang.Object) serializedString12);
        com.fasterxml.jackson.core.io.SerializedString serializedString22 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int29 = serializedString22.appendQuotedUTF8(byteArray27, 0);
        char[] charArray30 = serializedString22.asQuotedChars();
        boolean boolean31 = serializedString3.equals((java.lang.Object) serializedString22);
        char[] charArray32 = serializedString3.asQuotedChars();
        byte[] byteArray33 = serializedString3.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream36 = new com.fasterxml.jackson.core.io.MergedStream(iOContext0, inputStream1, byteArray33, (int) (byte) 100, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            mergedStream36.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1253");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonFactory.Feature feature2 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean4 = feature2.enabledIn(3);
        boolean boolean5 = jsonFactory1.isEnabled(feature2);
        com.fasterxml.jackson.core.ObjectCodec objectCodec6 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = new com.fasterxml.jackson.core.JsonFactory(objectCodec6);
        com.fasterxml.jackson.core.JsonFactory.Feature feature8 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean10 = feature8.enabledIn(3);
        boolean boolean11 = jsonFactory7.isEnabled(feature8);
        com.fasterxml.jackson.core.JsonParser.Feature feature12 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
        com.fasterxml.jackson.core.JsonFactory jsonFactory13 = jsonFactory7.disable(feature12);
        com.fasterxml.jackson.core.JsonFactory jsonFactory14 = jsonFactory1.disable(feature12);
        java.lang.String str15 = jsonFactory1.getFormatName();
        com.fasterxml.jackson.core.JsonGenerator.Feature feature16 = com.fasterxml.jackson.core.JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
        com.fasterxml.jackson.core.JsonFactory jsonFactory18 = jsonFactory1.configure(feature16, true);
        com.fasterxml.jackson.core.JsonFactory.Feature feature19 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean20 = feature19.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory21 = jsonFactory1.disable(feature19);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("hi!");
        com.fasterxml.jackson.core.SerializableString serializableString24 = defaultPrettyPrinter23._rootSeparator;
        byte[] byteArray31 = new byte[] { (byte) -1, (byte) 0, (byte) -1, (byte) 1, (byte) 1, (byte) 1 };
        int int33 = serializableString24.appendQuotedUTF8(byteArray31, (int) (byte) 100);
        com.fasterxml.jackson.core.JsonParser jsonParser34 = jsonFactory21.createParser(byteArray31);
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator35 = jsonFactory21.getInputDecorator();
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature2.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature8.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES + "'", feature12.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES));
        org.junit.Assert.assertNotNull(jsonFactory13);
        org.junit.Assert.assertNotNull(jsonFactory14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "JSON" + "'", str15, "JSON");
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM + "'", feature16.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM));
        org.junit.Assert.assertNotNull(jsonFactory18);
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature19.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(jsonFactory21);
        org.junit.Assert.assertNotNull(serializableString24);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1, 0, -1, 1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(jsonParser34);
        org.junit.Assert.assertNull(inputDecorator35);
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3248");
        com.fasterxml.jackson.core.io.IOContext iOContext0 = null;
        java.io.InputStream inputStream1 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString3 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray8 = new char[] { 'a', ' ', '#', '4' };
        int int10 = serializedString3.appendUnquoted(charArray8, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString12 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray17 = new char[] { 'a', ' ', '#', '4' };
        int int19 = serializedString12.appendUnquoted(charArray17, 0);
        boolean boolean20 = serializedString3.equals((java.lang.Object) serializedString12);
        com.fasterxml.jackson.core.io.SerializedString serializedString22 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int29 = serializedString22.appendQuotedUTF8(byteArray27, 0);
        char[] charArray30 = serializedString22.asQuotedChars();
        boolean boolean31 = serializedString3.equals((java.lang.Object) serializedString22);
        char[] charArray32 = serializedString3.asQuotedChars();
        byte[] byteArray33 = serializedString3.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream36 = new com.fasterxml.jackson.core.io.MergedStream(iOContext0, inputStream1, byteArray33, (int) (byte) 100, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            int int37 = mergedStream36.read();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3323");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        java.lang.String str9 = serializedString1.getValue();
        com.fasterxml.jackson.core.JsonLocation jsonLocation11 = null;
        java.lang.Throwable throwable12 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException13 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation11, throwable12);
        boolean boolean14 = serializedString1.equals((java.lang.Object) jsonLocation11);
        byte[] byteArray15 = serializedString1.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.SerializedString serializedString17 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray22 = new char[] { 'a', ' ', '#', '4' };
        int int24 = serializedString17.appendUnquoted(charArray22, 0);
        java.lang.String str25 = serializedString17.getValue();
        com.fasterxml.jackson.core.JsonLocation jsonLocation27 = null;
        java.lang.Throwable throwable28 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException29 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation27, throwable28);
        boolean boolean30 = serializedString17.equals((java.lang.Object) jsonLocation27);
        byte[] byteArray31 = serializedString17.asUnquotedUTF8();
        int int33 = serializedString1.appendQuotedUTF8(byteArray31, 34);
        int int34 = serializedString1.charLength();
        char[] charArray35 = serializedString1.asQuotedChars();
        java.lang.String str36 = serializedString1.getValue();
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str9, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str25, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 47 + "'", int34 == 47);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str36, "com.fasterxml.jackson.core.JsonParseException: ");
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2963");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        defaultPrettyPrinter21.indentObjectsWith(indenter45);
        defaultPrettyPrinter21.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter49 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter50 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter51 = defaultPrettyPrinter50.createInstance();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter49);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter50);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter51);
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3171");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        defaultPrettyPrinter21.indentObjectsWith(indenter45);
        defaultPrettyPrinter21.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter49 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter50 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter51 = defaultPrettyPrinter21.createInstance();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter49);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter50);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter51);
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3594");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        int int89 = uTF8StreamJsonParser84.getTextOffset();
        double double91 = uTF8StreamJsonParser84.getValueAsDouble((double) 10.0f);
        com.fasterxml.jackson.core.JsonLocation jsonLocation92 = uTF8StreamJsonParser84.getCurrentLocation();
        boolean boolean93 = uTF8StreamJsonParser84.canReadObjectId();
        int int94 = uTF8StreamJsonParser84.getFeatureMask();
        int int95 = uTF8StreamJsonParser84.getTextLength();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonToken jsonToken96 = uTF8StreamJsonParser84.nextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 10.0d + "'", double91 == 10.0d);
        org.junit.Assert.assertNotNull(jsonLocation92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3453");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.Version version92 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext93 = uTF8StreamJsonParser84.getParsingContext();
        boolean boolean94 = uTF8StreamJsonParser84.hasTextCharacters();
        int int96 = uTF8StreamJsonParser84.getValueAsInt(72);
        com.fasterxml.jackson.core.JsonToken jsonToken97 = uTF8StreamJsonParser84.getLastClearedToken();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNotNull(version92);
        org.junit.Assert.assertNotNull(jsonReadContext93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 72 + "'", int96 == 72);
        org.junit.Assert.assertNull(jsonToken97);
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3150");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        com.fasterxml.jackson.core.ObjectCodec objectCodec87 = uTF8StreamJsonParser84.getCodec();
        java.lang.String str88 = uTF8StreamJsonParser84.getValueAsString();
        boolean boolean89 = uTF8StreamJsonParser84.isClosed();
        boolean boolean90 = uTF8StreamJsonParser84.getValueAsBoolean();
        com.fasterxml.jackson.core.JsonToken jsonToken91 = uTF8StreamJsonParser84.getCurrentToken();
        // The following exception was thrown during execution in test generation
        try {
            int int92 = uTF8StreamJsonParser84.getIntValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertNull(objectCodec87);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNull(jsonToken91);
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2800");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int27 = serializedString20.appendQuotedUTF8(byteArray25, 0);
        char[] charArray28 = serializedString20.asQuotedChars();
        boolean boolean29 = serializedString1.equals((java.lang.Object) serializedString20);
        char[] charArray36 = new char[] { '#', '#', 'a', 'a', ' ', '#' };
        boolean boolean40 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray36, (int) (byte) -1, 0, true);
        int int42 = serializedString20.appendQuoted(charArray36, (int) '#');
        char[] charArray43 = serializedString20.asQuotedChars();
        int int44 = serializedString20.charLength();
        java.nio.ByteBuffer byteBuffer45 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int46 = serializedString20.putQuotedUTF8(byteBuffer45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "##aa #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "##aa #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[#, #, a, a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 47 + "'", int44 == 47);
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3128");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.Version version92 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.FormatSchema formatSchema93 = null;
        boolean boolean94 = uTF8StreamJsonParser84.canUseSchema(formatSchema93);
        com.fasterxml.jackson.core.JsonParser jsonParser95 = uTF8StreamJsonParser84.skipChildren();
        java.lang.Object obj96 = uTF8StreamJsonParser84.getInputSource();
        char[] charArray97 = uTF8StreamJsonParser84.getTextCharacters();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNotNull(version92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(jsonParser95);
        org.junit.Assert.assertNull(obj96);
        org.junit.Assert.assertNull(charArray97);
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3101");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        java.lang.String str88 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]\n at [Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.JsonLocation jsonLocation89 = uTF8StreamJsonParser84.getCurrentLocation();
        com.fasterxml.jackson.core.FormatSchema formatSchema90 = null;
        // The following exception was thrown during execution in test generation
        try {
            uTF8StreamJsonParser84.setSchema(formatSchema90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]\n at [Source: hi!; line: 52, column: 1]" + "'", str88, "com.fasterxml.jackson.core.JsonParseException: com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]\n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNotNull(jsonLocation89);
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3460");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.Version version92 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext93 = uTF8StreamJsonParser84.getParsingContext();
        java.lang.Object obj94 = uTF8StreamJsonParser84.getInputSource();
        // The following exception was thrown during execution in test generation
        try {
            uTF8StreamJsonParser84.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNotNull(version92);
        org.junit.Assert.assertNotNull(jsonStreamContext93);
        org.junit.Assert.assertNull(obj94);
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1169");
        com.fasterxml.jackson.core.io.IOContext iOContext0 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec1 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory2 = new com.fasterxml.jackson.core.JsonFactory(objectCodec1);
        com.fasterxml.jackson.core.JsonFactory.Feature feature3 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean5 = feature3.enabledIn(3);
        boolean boolean6 = jsonFactory2.isEnabled(feature3);
        com.fasterxml.jackson.core.JsonParser.Feature feature7 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
        com.fasterxml.jackson.core.JsonFactory jsonFactory8 = jsonFactory2.disable(feature7);
        java.io.OutputStream outputStream9 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator10 = jsonFactory2.createGenerator(outputStream9);
        com.fasterxml.jackson.core.io.IOContext iOContext11 = null;
        byte[] byteArray12 = com.fasterxml.jackson.core.io.CharTypes.copyHexBytes();
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper15 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext11, byteArray12, 0, 0);
        com.fasterxml.jackson.core.JsonParser jsonParser18 = jsonFactory2.createJsonParser(byteArray12, 1, (int) (short) 100);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper21 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext0, byteArray12, 1, (int) (byte) 1);
        com.fasterxml.jackson.core.ObjectCodec objectCodec23 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer24 = com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer.createRoot();
        int int25 = bytesToNameCanonicalizer24.hashSeed();
        int int26 = bytesToNameCanonicalizer24.maxCollisionLength();
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer29 = bytesToNameCanonicalizer24.makeChild(false, true);
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer30 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int32 = charsToNameCanonicalizer30.calcHash("false");
        int int33 = charsToNameCanonicalizer30.maxCollisionLength();
        int int35 = charsToNameCanonicalizer30._hashToIndex((-478365840));
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser jsonParser38 = byteSourceJsonBootstrapper21.constructParser((-805089216), objectCodec23, bytesToNameCanonicalizer24, charsToNameCanonicalizer30, false, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature3.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + feature7 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES + "'", feature7.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES));
        org.junit.Assert.assertNotNull(jsonFactory8);
        org.junit.Assert.assertNotNull(jsonGenerator10);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70]");
        org.junit.Assert.assertNotNull(jsonParser18);
        org.junit.Assert.assertNotNull(bytesToNameCanonicalizer24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1958802487) + "'", int25 == (-1958802487));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(bytesToNameCanonicalizer29);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer30);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-274227148) + "'", int32 == (-274227148));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 41 + "'", int35 == 41);
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2931");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        com.fasterxml.jackson.core.JsonLocation jsonLocation93 = uTF8StreamJsonParser84.getTokenLocation();
        boolean boolean95 = uTF8StreamJsonParser84.getValueAsBoolean(true);
        // The following exception was thrown during execution in test generation
        try {
            float float96 = uTF8StreamJsonParser84.getFloatValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(jsonLocation93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3309");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext89 = uTF8StreamJsonParser84.getParsingContext();
        com.fasterxml.jackson.core.JsonParser jsonParser91 = uTF8StreamJsonParser84.setFeatureMask(10);
        int int92 = uTF8StreamJsonParser84.getFeatureMask();
        com.fasterxml.jackson.core.JsonToken jsonToken93 = uTF8StreamJsonParser84.getCurrentToken();
        char[] charArray94 = uTF8StreamJsonParser84.getTextCharacters();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger95 = uTF8StreamJsonParser84.getBigIntegerValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNotNull(jsonStreamContext89);
        org.junit.Assert.assertNotNull(jsonParser91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 10 + "'", int92 == 10);
        org.junit.Assert.assertNull(jsonToken93);
        org.junit.Assert.assertNull(charArray94);
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3313");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        long long93 = uTF8StreamJsonParser84.getTokenCharacterOffset();
        double double94 = uTF8StreamJsonParser84.getValueAsDouble();
        // The following exception was thrown during execution in test generation
        try {
            double double95 = uTF8StreamJsonParser84.getDoubleValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d);
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3643");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        java.lang.String str80 = textBuffer76.toString();
        char[] charArray81 = textBuffer76.getTextBuffer();
        char[] charArray82 = textBuffer76.getTextBuffer();
        textBuffer76.ensureNotShared();
        textBuffer76.resetWithEmpty();
        int int85 = textBuffer76.getCurrentSegmentSize();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "a" + "'", str80, "a");
        org.junit.Assert.assertNotNull(charArray81);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray81), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray81), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray81), "[a]");
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray82), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray82), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray82), "[a]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3634");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext89 = uTF8StreamJsonParser84.getParsingContext();
        com.fasterxml.jackson.core.JsonParser jsonParser91 = uTF8StreamJsonParser84.setFeatureMask(10);
        int int92 = uTF8StreamJsonParser84.getTokenColumnNr();
        double double93 = uTF8StreamJsonParser84.getValueAsDouble();
        char[] charArray94 = uTF8StreamJsonParser84.getTextCharacters();
        // The following exception was thrown during execution in test generation
        try {
            short short95 = uTF8StreamJsonParser84.getShortValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNotNull(jsonStreamContext89);
        org.junit.Assert.assertNotNull(jsonParser91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
        org.junit.Assert.assertNull(charArray94);
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1110");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream4 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer5 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext3, outputStream4);
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding6 = com.fasterxml.jackson.core.JsonEncoding.UTF16_BE;
        iOContext3.setEncoding(jsonEncoding6);
        java.io.Reader reader9 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec10 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer11 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int13 = charsToNameCanonicalizer11.calcHash("false");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser14 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, (-1954973613), reader9, objectCodec10, charsToNameCanonicalizer11);
        int int15 = readerBasedJsonParser14.getTextOffset();
        java.lang.String str16 = readerBasedJsonParser14.getText();
        boolean boolean17 = readerBasedJsonParser14.hasCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec18 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory19 = new com.fasterxml.jackson.core.JsonFactory(objectCodec18);
        com.fasterxml.jackson.core.JsonFactory.Feature feature20 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean22 = feature20.enabledIn(3);
        boolean boolean23 = jsonFactory19.isEnabled(feature20);
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory25 = new com.fasterxml.jackson.core.JsonFactory(objectCodec24);
        com.fasterxml.jackson.core.JsonFactory.Feature feature26 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean28 = feature26.enabledIn(3);
        boolean boolean29 = jsonFactory25.isEnabled(feature26);
        com.fasterxml.jackson.core.JsonParser.Feature feature30 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
        com.fasterxml.jackson.core.JsonFactory jsonFactory31 = jsonFactory25.disable(feature30);
        com.fasterxml.jackson.core.JsonFactory jsonFactory32 = jsonFactory19.disable(feature30);
        com.fasterxml.jackson.core.JsonParser jsonParser34 = readerBasedJsonParser14.configure(feature30, false);
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser.NumberType numberType35 = readerBasedJsonParser14.getNumberType();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: -1; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + jsonEncoding6 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF16_BE + "'", jsonEncoding6.equals(com.fasterxml.jackson.core.JsonEncoding.UTF16_BE));
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 585310572 + "'", int13 == 585310572);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature20.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature26.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES + "'", feature30.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES));
        org.junit.Assert.assertNotNull(jsonFactory31);
        org.junit.Assert.assertNotNull(jsonFactory32);
        org.junit.Assert.assertNotNull(jsonParser34);
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1196");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream4 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer5 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext3, outputStream4);
        com.fasterxml.jackson.core.sym.Name name6 = com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer.getEmptyName();
        int[] intArray13 = new int[] { (-1959036043), (short) 1, 0, (short) -1, 10, '4' };
        boolean boolean15 = name6.equals(intArray13, (-1));
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding16 = com.fasterxml.jackson.core.JsonEncoding.UTF16_BE;
        boolean boolean17 = name6.equals((java.lang.Object) jsonEncoding16);
        iOContext3.setEncoding(jsonEncoding16);
        byte[] byteArray19 = iOContext3.allocReadIOBuffer();
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding20 = iOContext3.getEncoding();
        com.fasterxml.jackson.core.ObjectCodec objectCodec21 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory22 = new com.fasterxml.jackson.core.JsonFactory(objectCodec21);
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.JsonParser jsonParser24 = jsonFactory22.createParser(reader23);
        com.fasterxml.jackson.core.Version version25 = jsonFactory22.version();
        java.io.OutputStream outputStream26 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator27 = jsonFactory22.createGenerator(outputStream26);
        com.fasterxml.jackson.core.JsonToken jsonToken28 = com.fasterxml.jackson.core.JsonToken.START_ARRAY;
        byte[] byteArray29 = jsonToken28.asByteArray();
        com.fasterxml.jackson.core.JsonParser jsonParser32 = jsonFactory22.createJsonParser(byteArray29, 937615808, (-1521438212));
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper35 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, byteArray29, (-1), (-706679178));
        char[] charArray36 = iOContext3.allocTokenBuffer();
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler37 = null;
        com.fasterxml.jackson.core.util.TextBuffer textBuffer38 = new com.fasterxml.jackson.core.util.TextBuffer(bufferRecycler37);
        char[] charArray39 = textBuffer38.contentsAsArray();
        boolean boolean43 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray39, (-23230658), (-1959036043), true);
        // The following exception was thrown during execution in test generation
        try {
            iOContext3.releaseNameCopyBuffer(charArray39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Trying to release buffer not owned by the context");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(name6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1959036043, 1, 0, -1, 10, 52]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + jsonEncoding16 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF16_BE + "'", jsonEncoding16.equals(com.fasterxml.jackson.core.JsonEncoding.UTF16_BE));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertTrue("'" + jsonEncoding20 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF16_BE + "'", jsonEncoding20.equals(com.fasterxml.jackson.core.JsonEncoding.UTF16_BE));
        org.junit.Assert.assertNotNull(jsonParser24);
        org.junit.Assert.assertNotNull(version25);
        org.junit.Assert.assertNotNull(jsonGenerator27);
        org.junit.Assert.assertTrue("'" + jsonToken28 + "' != '" + com.fasterxml.jackson.core.JsonToken.START_ARRAY + "'", jsonToken28.equals(com.fasterxml.jackson.core.JsonToken.START_ARRAY));
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[91]");
        org.junit.Assert.assertNotNull(jsonParser32);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2943");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.Version version92 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.FormatSchema formatSchema93 = null;
        boolean boolean94 = uTF8StreamJsonParser84.canUseSchema(formatSchema93);
        com.fasterxml.jackson.core.JsonParser jsonParser95 = uTF8StreamJsonParser84.skipChildren();
        double double97 = uTF8StreamJsonParser84.getValueAsDouble((double) 73844676736L);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNotNull(version92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(jsonParser95);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 7.3844676736E10d + "'", double97 == 7.3844676736E10d);
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2932");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        com.fasterxml.jackson.core.ObjectCodec objectCodec87 = uTF8StreamJsonParser84.getCodec();
        java.lang.String str88 = uTF8StreamJsonParser84.getValueAsString();
        boolean boolean89 = uTF8StreamJsonParser84.isClosed();
        boolean boolean90 = uTF8StreamJsonParser84.getValueAsBoolean();
        com.fasterxml.jackson.core.Base64Variant base64Variant91 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray92 = uTF8StreamJsonParser84.getBinaryValue(base64Variant91);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertNull(objectCodec87);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3561");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.ObjectCodec objectCodec58 = null;
        java.io.OutputStream outputStream59 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString61 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray66 = new char[] { 'a', ' ', '#', '4' };
        int int68 = serializedString61.appendUnquoted(charArray66, 0);
        java.lang.String str69 = serializedString61.getValue();
        char[] charArray70 = serializedString61.asQuotedChars();
        byte[] byteArray71 = serializedString61.asUnquotedUTF8();
        byte[] byteArray72 = serializedString61.asUnquotedUTF8();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator75 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext12, 0, objectCodec58, outputStream59, byteArray72, 0, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str69, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray70);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray70), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray70), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray70), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3440");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 0, (byte) 0 };
        int int17 = serializedString1.appendUnquotedUTF8(byteArray15, (int) (short) -1);
        byte[] byteArray18 = serializedString1.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = serializedString20.asUnquotedUTF8();
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext24 = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext((-1), 10);
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext27 = jsonReadContext24.createChildArrayContext((int) (short) 1, 10);
        boolean boolean28 = jsonReadContext27.inArray();
        boolean boolean29 = serializedString20.equals((java.lang.Object) boolean28);
        char[] charArray30 = serializedString20.asQuotedChars();
        int int32 = serializedString1.appendUnquoted(charArray30, 13);
        char[] charArray33 = serializedString1.asQuotedChars();
        // The following exception was thrown during execution in test generation
        try {
            int int36 = com.fasterxml.jackson.core.io.NumberInput.parseInt(charArray33, (-1), (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 1, 10, -1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonReadContext24);
        org.junit.Assert.assertNotNull(jsonReadContext27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1313");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream4 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer5 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext3, outputStream4);
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding6 = com.fasterxml.jackson.core.JsonEncoding.UTF16_BE;
        iOContext3.setEncoding(jsonEncoding6);
        java.io.Reader reader9 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec10 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer11 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int13 = charsToNameCanonicalizer11.calcHash("false");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser14 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, (-1954973613), reader9, objectCodec10, charsToNameCanonicalizer11);
        int int15 = readerBasedJsonParser14.getTextOffset();
        java.lang.String str16 = readerBasedJsonParser14.getText();
        boolean boolean17 = readerBasedJsonParser14.hasCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec18 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory19 = new com.fasterxml.jackson.core.JsonFactory(objectCodec18);
        com.fasterxml.jackson.core.JsonFactory.Feature feature20 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean22 = feature20.enabledIn(3);
        boolean boolean23 = jsonFactory19.isEnabled(feature20);
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory25 = new com.fasterxml.jackson.core.JsonFactory(objectCodec24);
        com.fasterxml.jackson.core.JsonFactory.Feature feature26 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean28 = feature26.enabledIn(3);
        boolean boolean29 = jsonFactory25.isEnabled(feature26);
        com.fasterxml.jackson.core.JsonParser.Feature feature30 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
        com.fasterxml.jackson.core.JsonFactory jsonFactory31 = jsonFactory25.disable(feature30);
        com.fasterxml.jackson.core.JsonFactory jsonFactory32 = jsonFactory19.disable(feature30);
        com.fasterxml.jackson.core.JsonParser jsonParser34 = readerBasedJsonParser14.configure(feature30, false);
        boolean boolean36 = readerBasedJsonParser14.getValueAsBoolean(true);
        long long38 = readerBasedJsonParser14.getValueAsLong((long) 1374454034);
        boolean boolean39 = readerBasedJsonParser14.isClosed();
        org.junit.Assert.assertTrue("'" + jsonEncoding6 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF16_BE + "'", jsonEncoding6.equals(com.fasterxml.jackson.core.JsonEncoding.UTF16_BE));
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1609296980) + "'", int13 == (-1609296980));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature20.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature26.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES + "'", feature30.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES));
        org.junit.Assert.assertNotNull(jsonFactory31);
        org.junit.Assert.assertNotNull(jsonFactory32);
        org.junit.Assert.assertNotNull(jsonParser34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1374454034L + "'", long38 == 1374454034L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3243");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        java.lang.String str80 = textBuffer76.toString();
        boolean boolean81 = textBuffer76.hasTextAsCharacters();
        char[] charArray82 = textBuffer76.finishCurrentSegment();
        java.lang.String str83 = textBuffer76.toString();
        boolean boolean84 = textBuffer76.hasTextAsCharacters();
        textBuffer76.ensureNotShared();
        int int86 = textBuffer76.getCurrentSegmentSize();
        boolean boolean87 = textBuffer76.hasTextAsCharacters();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "a" + "'", str80, "a");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "a" + "'", str83, "a");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2925");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        int int93 = uTF8StreamJsonParser84.getValueAsInt();
        long long95 = uTF8StreamJsonParser84.getValueAsLong((long) 47);
        // The following exception was thrown during execution in test generation
        try {
            float float96 = uTF8StreamJsonParser84.getFloatValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 47L + "'", long95 == 47L);
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2552");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int27 = serializedString20.appendQuotedUTF8(byteArray25, 0);
        char[] charArray28 = serializedString20.asQuotedChars();
        boolean boolean29 = serializedString1.equals((java.lang.Object) serializedString20);
        char[] charArray36 = new char[] { '#', '#', 'a', 'a', ' ', '#' };
        boolean boolean40 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray36, (int) (byte) -1, 0, true);
        int int42 = serializedString20.appendQuoted(charArray36, (int) '#');
        char[] charArray43 = serializedString20.asQuotedChars();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal46 = com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(charArray43, 0, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "##aa #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "##aa #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[#, #, a, a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3596");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        java.lang.String str80 = textBuffer76.toString();
        char[] charArray81 = textBuffer76.getTextBuffer();
        char[] charArray82 = textBuffer76.getTextBuffer();
        textBuffer76.ensureNotShared();
        java.lang.String str84 = textBuffer76.contentsAsString();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "a" + "'", str80, "a");
        org.junit.Assert.assertNotNull(charArray81);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray81), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray81), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray81), "[a]");
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray82), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray82), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray82), "[a]");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "a" + "'", str84, "a");
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1069");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream4 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer5 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext3, outputStream4);
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding6 = com.fasterxml.jackson.core.JsonEncoding.UTF16_BE;
        iOContext3.setEncoding(jsonEncoding6);
        java.io.Reader reader9 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec10 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer11 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int13 = charsToNameCanonicalizer11.calcHash("false");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser14 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, (-1954973613), reader9, objectCodec10, charsToNameCanonicalizer11);
        int int15 = readerBasedJsonParser14.getTextOffset();
        java.lang.String str16 = readerBasedJsonParser14.getText();
        boolean boolean17 = readerBasedJsonParser14.hasCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec18 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory19 = new com.fasterxml.jackson.core.JsonFactory(objectCodec18);
        com.fasterxml.jackson.core.JsonFactory.Feature feature20 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean22 = feature20.enabledIn(3);
        boolean boolean23 = jsonFactory19.isEnabled(feature20);
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory25 = new com.fasterxml.jackson.core.JsonFactory(objectCodec24);
        com.fasterxml.jackson.core.JsonFactory.Feature feature26 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean28 = feature26.enabledIn(3);
        boolean boolean29 = jsonFactory25.isEnabled(feature26);
        com.fasterxml.jackson.core.JsonParser.Feature feature30 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
        com.fasterxml.jackson.core.JsonFactory jsonFactory31 = jsonFactory25.disable(feature30);
        com.fasterxml.jackson.core.JsonFactory jsonFactory32 = jsonFactory19.disable(feature30);
        com.fasterxml.jackson.core.JsonParser jsonParser34 = readerBasedJsonParser14.configure(feature30, false);
        // The following exception was thrown during execution in test generation
        try {
            long long35 = readerBasedJsonParser14.getLongValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: -1; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + jsonEncoding6 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF16_BE + "'", jsonEncoding6.equals(com.fasterxml.jackson.core.JsonEncoding.UTF16_BE));
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1584450436) + "'", int13 == (-1584450436));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature20.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature26.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES + "'", feature30.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES));
        org.junit.Assert.assertNotNull(jsonFactory31);
        org.junit.Assert.assertNotNull(jsonFactory32);
        org.junit.Assert.assertNotNull(jsonParser34);
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2803");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        boolean boolean92 = uTF8StreamJsonParser84.getValueAsBoolean();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger93 = uTF8StreamJsonParser84.getBigIntegerValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1203");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream4 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer5 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext3, outputStream4);
        com.fasterxml.jackson.core.ObjectCodec objectCodec7 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler8 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext11 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler8, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream12 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer13 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext11, outputStream12);
        uTF8Writer13.flush();
        java.io.Writer writer16 = uTF8Writer13.append('a');
        com.fasterxml.jackson.core.json.WriterBasedJsonGenerator writerBasedJsonGenerator17 = new com.fasterxml.jackson.core.json.WriterBasedJsonGenerator(iOContext3, (-1959034571), objectCodec7, (java.io.Writer) uTF8Writer13);
        com.fasterxml.jackson.core.JsonGenerator.Feature feature18 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
        boolean boolean19 = writerBasedJsonGenerator17.isEnabled(feature18);
        java.math.BigInteger bigInteger20 = null;
        writerBasedJsonGenerator17.writeNumber(bigInteger20);
        com.fasterxml.jackson.core.io.SerializedString serializedString23 = new com.fasterxml.jackson.core.io.SerializedString("\n");
        java.lang.String str24 = serializedString23.toString();
        int int25 = serializedString23.charLength();
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler26 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext29 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler26, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream30 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer31 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext29, outputStream30);
        byte[] byteArray32 = iOContext29.allocReadIOBuffer();
        int int34 = serializedString23.appendQuotedUTF8(byteArray32, 3);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator35 = writerBasedJsonGenerator17.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString23);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler36 = null;
        com.fasterxml.jackson.core.util.TextBuffer textBuffer37 = new com.fasterxml.jackson.core.util.TextBuffer(bufferRecycler36);
        textBuffer37.append(' ');
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler40 = null;
        com.fasterxml.jackson.core.util.TextBuffer textBuffer41 = new com.fasterxml.jackson.core.util.TextBuffer(bufferRecycler40);
        textBuffer41.append(' ');
        textBuffer41.resetWithString("hi!");
        char[] charArray46 = textBuffer41.finishCurrentSegment();
        textBuffer37.append(charArray46, (int) (short) 1, 100);
        writerBasedJsonGenerator17.writeRawValue(charArray46, (int) '#', (int) (byte) 100);
        com.fasterxml.jackson.core.JsonGenerator.Feature feature53 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator54 = writerBasedJsonGenerator17.disable(feature53);
        boolean boolean55 = feature53.enabledByDefault();
        org.junit.Assert.assertNotNull(writer16);
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT + "'", feature18.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\n" + "'", str24, "\n");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(jsonGenerator35);
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertTrue("'" + feature53 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature53.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertNotNull(jsonGenerator54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3398");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        defaultPrettyPrinter21.indentObjectsWith(indenter45);
        defaultPrettyPrinter21.spacesInObjectEntries(false);
        defaultPrettyPrinter21.spacesInObjectEntries(true);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter51 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter52 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter21);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter51);
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3379");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        double double93 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) 10);
        com.fasterxml.jackson.core.ObjectCodec objectCodec94 = null;
        uTF8StreamJsonParser84.setCodec(objectCodec94);
        uTF8StreamJsonParser84.overrideCurrentName("");
        // The following exception was thrown during execution in test generation
        try {
            long long99 = uTF8StreamJsonParser84.nextLongValue((long) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 10.0d + "'", double93 == 10.0d);
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3336");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        int int89 = uTF8StreamJsonParser84.getTextOffset();
        double double91 = uTF8StreamJsonParser84.getValueAsDouble((double) 10.0f);
        com.fasterxml.jackson.core.JsonLocation jsonLocation92 = uTF8StreamJsonParser84.getCurrentLocation();
        boolean boolean93 = uTF8StreamJsonParser84.canReadObjectId();
        int int94 = uTF8StreamJsonParser84.getFeatureMask();
        int int95 = uTF8StreamJsonParser84.getTextLength();
        // The following exception was thrown during execution in test generation
        try {
            uTF8StreamJsonParser84.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 10.0d + "'", double91 == 10.0d);
        org.junit.Assert.assertNotNull(jsonLocation92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3251");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        com.fasterxml.jackson.core.Version version90 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.JsonLocation jsonLocation91 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.Version version92 = uTF8StreamJsonParser84.version();
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        double double95 = uTF8StreamJsonParser84.getValueAsDouble();
        com.fasterxml.jackson.core.JsonParser jsonParser96 = uTF8StreamJsonParser84.skipChildren();
        char[] charArray97 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean98 = uTF8StreamJsonParser84.isExpectedStartArrayToken();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(version90);
        org.junit.Assert.assertNotNull(jsonLocation91);
        org.junit.Assert.assertNotNull(version92);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d);
        org.junit.Assert.assertNotNull(jsonParser96);
        org.junit.Assert.assertNull(charArray97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2950");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        int int93 = uTF8StreamJsonParser84.getValueAsInt((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger94 = uTF8StreamJsonParser84.getBigIntegerValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2987");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        long long93 = uTF8StreamJsonParser84.getTokenCharacterOffset();
        com.fasterxml.jackson.core.Version version94 = uTF8StreamJsonParser84.version();
        java.lang.String str95 = uTF8StreamJsonParser84.getText();
        uTF8StreamJsonParser84.clearCurrentToken();
        // The following exception was thrown during execution in test generation
        try {
            int int98 = uTF8StreamJsonParser84.nextIntValue((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
        org.junit.Assert.assertNotNull(version94);
        org.junit.Assert.assertNull(str95);
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3586");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        java.lang.String str80 = textBuffer76.toString();
        char[] charArray81 = textBuffer76.getTextBuffer();
        textBuffer76.setCurrentLength((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            textBuffer76.append("com.fasterxml.jackson.core.JsonParseException: hi!\n at [Source: /; line: 0, column: 0]", (int) 'a', 34);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 131");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "a" + "'", str80, "a");
        org.junit.Assert.assertNotNull(charArray81);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray81), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray81), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray81), "[a]");
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3176");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext89 = uTF8StreamJsonParser84.getParsingContext();
        com.fasterxml.jackson.core.JsonParser jsonParser91 = uTF8StreamJsonParser84.setFeatureMask(10);
        int int92 = uTF8StreamJsonParser84.getTokenColumnNr();
        java.lang.String str93 = uTF8StreamJsonParser84.getCurrentName();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal94 = uTF8StreamJsonParser84.getDecimalValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNotNull(jsonStreamContext89);
        org.junit.Assert.assertNotNull(jsonParser91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "[Source: hi!; line: 52, column: 1]" + "'", str93, "[Source: hi!; line: 52, column: 1]");
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3404");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        int int89 = uTF8StreamJsonParser84.getTextOffset();
        double double91 = uTF8StreamJsonParser84.getValueAsDouble((double) 10.0f);
        com.fasterxml.jackson.core.JsonLocation jsonLocation92 = uTF8StreamJsonParser84.getCurrentLocation();
        boolean boolean93 = uTF8StreamJsonParser84.canReadObjectId();
        int int94 = uTF8StreamJsonParser84.getFeatureMask();
        int int95 = uTF8StreamJsonParser84.getTextLength();
        com.fasterxml.jackson.core.JsonToken jsonToken96 = uTF8StreamJsonParser84.getCurrentToken();
        boolean boolean97 = uTF8StreamJsonParser84.isExpectedStartArrayToken();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 10.0d + "'", double91 == 10.0d);
        org.junit.Assert.assertNotNull(jsonLocation92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertNull(jsonToken96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2683");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        defaultPrettyPrinter21.indentObjectsWith(indenter45);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator47 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.writeEndObject(jsonGenerator47, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2543");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        defaultPrettyPrinter21.indentObjectsWith(indenter45);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator47 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.writeEndArray(jsonGenerator47, 34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2906");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        defaultPrettyPrinter21.indentObjectsWith(indenter45);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator47 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.writeEndObject(jsonGenerator47, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2554");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        defaultPrettyPrinter21.indentObjectsWith(indenter45);
        defaultPrettyPrinter21.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter49 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.SerializableString serializableString50 = defaultPrettyPrinter21._rootSeparator;
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter49);
        org.junit.Assert.assertNotNull(serializableString50);
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2575");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        defaultPrettyPrinter21.indentObjectsWith(indenter45);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator47 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.writeStartArray(jsonGenerator47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3099");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext89 = uTF8StreamJsonParser84.getParsingContext();
        com.fasterxml.jackson.core.JsonParser jsonParser91 = uTF8StreamJsonParser84.setFeatureMask(10);
        int int92 = uTF8StreamJsonParser84.getTokenColumnNr();
        java.lang.String str93 = uTF8StreamJsonParser84.getCurrentName();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number94 = uTF8StreamJsonParser84.getNumberValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNotNull(jsonStreamContext89);
        org.junit.Assert.assertNotNull(jsonParser91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "[Source: hi!; line: 52, column: 1]" + "'", str93, "[Source: hi!; line: 52, column: 1]");
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2587");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        defaultPrettyPrinter21.indentObjectsWith(indenter45);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator47 = null;
        // The following exception was thrown during execution in test generation
        try {
            indenter45.writeIndentation(jsonGenerator47, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1172");
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer0 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int2 = charsToNameCanonicalizer0._hashToIndex((-1954983162));
        int int3 = charsToNameCanonicalizer0.hashSeed();
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer6 = charsToNameCanonicalizer0.makeChild(false, false);
        int int8 = charsToNameCanonicalizer0._hashToIndex(0);
        char[] charArray9 = null;
        java.lang.String str13 = charsToNameCanonicalizer0.findSymbol(charArray9, (-1959028781), (-1715105908), 1473616244);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler14 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext17 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler14, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream18 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer19 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext17, outputStream18);
        com.fasterxml.jackson.core.ObjectCodec objectCodec21 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler22 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext25 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler22, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream26 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer27 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext25, outputStream26);
        uTF8Writer27.flush();
        java.io.Writer writer30 = uTF8Writer27.append('a');
        com.fasterxml.jackson.core.json.WriterBasedJsonGenerator writerBasedJsonGenerator31 = new com.fasterxml.jackson.core.json.WriterBasedJsonGenerator(iOContext17, (-1959034571), objectCodec21, (java.io.Writer) uTF8Writer27);
        com.fasterxml.jackson.core.ObjectCodec objectCodec32 = writerBasedJsonGenerator31.getCodec();
        writerBasedJsonGenerator31.writeNumber((short) (byte) 0);
        writerBasedJsonGenerator31.writeNumber((long) (-1954995464));
        com.fasterxml.jackson.core.io.SerializedString serializedString38 = new com.fasterxml.jackson.core.io.SerializedString("\n");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler39 = null;
        com.fasterxml.jackson.core.util.TextBuffer textBuffer40 = new com.fasterxml.jackson.core.util.TextBuffer(bufferRecycler39);
        textBuffer40.append(' ');
        textBuffer40.resetWithString("hi!");
        char[] charArray45 = textBuffer40.finishCurrentSegment();
        int int47 = serializedString38.appendUnquoted(charArray45, 0);
        char[] charArray48 = serializedString38.asQuotedChars();
        writerBasedJsonGenerator31.writeRaw(charArray48, 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str55 = charsToNameCanonicalizer0.findSymbol(charArray48, (-1521438212), 1214709514, 589840460);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1521438212");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 56 + "'", int2 == 56);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1958801971) + "'", int3 == (-1958801971));
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(writer30);
        org.junit.Assert.assertNull(objectCodec32);
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), "\\n");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), "\\n");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[\\, n]");
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2567");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        defaultPrettyPrinter21.indentObjectsWith(indenter45);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator47 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.writeStartObject(jsonGenerator47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2546");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        defaultPrettyPrinter21.indentObjectsWith(indenter45);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator47 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.writeStartObject(jsonGenerator47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3525");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int27 = serializedString20.appendQuotedUTF8(byteArray25, 0);
        char[] charArray28 = serializedString20.asQuotedChars();
        boolean boolean29 = serializedString1.equals((java.lang.Object) serializedString20);
        com.fasterxml.jackson.core.io.SerializedString serializedString31 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int38 = serializedString31.appendQuotedUTF8(byteArray36, 0);
        byte[] byteArray39 = serializedString31.asUnquotedUTF8();
        int int41 = serializedString20.appendQuotedUTF8(byteArray39, (int) '#');
        java.lang.String str42 = serializedString20.getValue();
        java.lang.String str43 = serializedString20.getValue();
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str42, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str43, "com.fasterxml.jackson.core.JsonParseException: ");
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2547");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        defaultPrettyPrinter21.indentObjectsWith(indenter45);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator47 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.beforeObjectEntries(jsonGenerator47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3217");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        com.fasterxml.jackson.core.JsonLocation jsonLocation93 = uTF8StreamJsonParser84.getTokenLocation();
        boolean boolean95 = uTF8StreamJsonParser84.getValueAsBoolean(true);
        com.fasterxml.jackson.core.JsonParser.Feature feature96 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser jsonParser97 = uTF8StreamJsonParser84.enable(feature96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(jsonLocation93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3082");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.Version version92 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.FormatSchema formatSchema93 = null;
        boolean boolean94 = uTF8StreamJsonParser84.canUseSchema(formatSchema93);
        com.fasterxml.jackson.core.JsonParser jsonParser95 = uTF8StreamJsonParser84.skipChildren();
        java.lang.String str96 = uTF8StreamJsonParser84.getText();
        uTF8StreamJsonParser84.overrideCurrentName("");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNotNull(version92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(jsonParser95);
        org.junit.Assert.assertNull(str96);
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3583");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec88 = uTF8StreamJsonParser84.getCodec();
        int int89 = uTF8StreamJsonParser84.getTextOffset();
        java.lang.Object obj90 = uTF8StreamJsonParser84.getEmbeddedObject();
        boolean boolean91 = uTF8StreamJsonParser84.hasTextCharacters();
        java.lang.String str93 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.ObjectCodec objectCodec94 = uTF8StreamJsonParser84.getCodec();
        java.lang.Object obj95 = uTF8StreamJsonParser84.getTypeId();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(objectCodec88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str93, "com.fasterxml.jackson.core.JsonParseException: com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNull(objectCodec94);
        org.junit.Assert.assertNull(obj95);
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3572");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext91 = uTF8StreamJsonParser84.getParsingContext();
        java.lang.String str92 = uTF8StreamJsonParser84.getCurrentName();
        com.fasterxml.jackson.core.Base64Variant base64Variant93 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray94 = uTF8StreamJsonParser84.getBinaryValue(base64Variant93);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNotNull(jsonStreamContext91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "[Source: hi!; line: 52, column: 1]" + "'", str92, "[Source: hi!; line: 52, column: 1]");
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2605");
        com.fasterxml.jackson.core.io.IOContext iOContext0 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec2 = null;
        java.io.OutputStream outputStream3 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString5 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray10 = new char[] { 'a', ' ', '#', '4' };
        int int12 = serializedString5.appendUnquoted(charArray10, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString14 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray19 = new char[] { 'a', ' ', '#', '4' };
        int int21 = serializedString14.appendUnquoted(charArray19, 0);
        boolean boolean22 = serializedString5.equals((java.lang.Object) serializedString14);
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        int int45 = serializedString14.appendQuotedUTF8(byteArray39, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator48 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext0, 35, objectCodec2, outputStream3, byteArray39, 35, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3410");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        int int92 = uTF8StreamJsonParser84.getTextLength();
        boolean boolean93 = uTF8StreamJsonParser84.isClosed();
        java.lang.String str94 = uTF8StreamJsonParser84.getText();
        double double95 = uTF8StreamJsonParser84.getValueAsDouble();
        java.lang.Object obj96 = uTF8StreamJsonParser84.getInputSource();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNull(str94);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d);
        org.junit.Assert.assertNull(obj96);
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3372");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        java.lang.String str80 = textBuffer76.toString();
        boolean boolean81 = textBuffer76.hasTextAsCharacters();
        char[] charArray82 = textBuffer76.finishCurrentSegment();
        java.lang.String str83 = textBuffer76.toString();
        boolean boolean84 = textBuffer76.hasTextAsCharacters();
        char[] charArray85 = textBuffer76.getCurrentSegment();
        int int86 = textBuffer76.getTextOffset();
        textBuffer76.append('4');
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "a" + "'", str80, "a");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "a" + "'", str83, "a");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(charArray85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3266");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int9 = serializedString2.appendQuotedUTF8(byteArray7, 0);
        char[] charArray10 = serializedString2.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString12 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int19 = serializedString12.appendQuotedUTF8(byteArray17, 0);
        int int21 = serializedString2.appendUnquotedUTF8(byteArray17, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString2);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter22.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter24 = defaultPrettyPrinter22.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter25 = defaultPrettyPrinter22.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter26 = defaultPrettyPrinter22.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter lf2SpacesIndenter28 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter lf2SpacesIndenter30 = lf2SpacesIndenter28.withLinefeed("[Source: hi!; line: 52, column: 1]");
        defaultPrettyPrinter26.indentObjectsWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) lf2SpacesIndenter28);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter33 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonParseException: ");
        com.fasterxml.jackson.core.SerializableString serializableString34 = null;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter35 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter33, serializableString34);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter36 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter33);
        com.fasterxml.jackson.core.SerializableString serializableString37 = defaultPrettyPrinter36._rootSeparator;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter38 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter26, serializableString37);
        com.fasterxml.jackson.core.io.IOContext iOContext40 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) defaultPrettyPrinter26, true);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter24);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter25);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter26);
        org.junit.Assert.assertNotNull(lf2SpacesIndenter30);
        org.junit.Assert.assertNotNull(serializableString37);
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3411");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext89 = uTF8StreamJsonParser84.getParsingContext();
        com.fasterxml.jackson.core.JsonParser jsonParser91 = uTF8StreamJsonParser84.setFeatureMask(10);
        int int92 = uTF8StreamJsonParser84.getFeatureMask();
        com.fasterxml.jackson.core.JsonToken jsonToken93 = uTF8StreamJsonParser84.getCurrentToken();
        char[] charArray94 = uTF8StreamJsonParser84.getTextCharacters();
        com.fasterxml.jackson.core.JsonParser.Feature feature95 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser jsonParser97 = uTF8StreamJsonParser84.configure(feature95, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNotNull(jsonStreamContext89);
        org.junit.Assert.assertNotNull(jsonParser91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 10 + "'", int92 == 10);
        org.junit.Assert.assertNull(jsonToken93);
        org.junit.Assert.assertNull(charArray94);
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3164");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.Version version92 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.FormatSchema formatSchema93 = null;
        boolean boolean94 = uTF8StreamJsonParser84.canUseSchema(formatSchema93);
        com.fasterxml.jackson.core.JsonParser jsonParser95 = uTF8StreamJsonParser84.skipChildren();
        com.fasterxml.jackson.core.ObjectCodec objectCodec96 = uTF8StreamJsonParser84.getCodec();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNotNull(version92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(jsonParser95);
        org.junit.Assert.assertNull(objectCodec96);
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3258");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.ObjectCodec objectCodec92 = uTF8StreamJsonParser84.getCodec();
        // The following exception was thrown during execution in test generation
        try {
            float float93 = uTF8StreamJsonParser84.getFloatValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNull(objectCodec92);
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3331");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        java.lang.Object obj89 = uTF8StreamJsonParser84.getObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: ");
        java.lang.String str92 = uTF8StreamJsonParser84.getValueAsString();
        boolean boolean93 = uTF8StreamJsonParser84.hasTextCharacters();
        // The following exception was thrown during execution in test generation
        try {
            int int94 = uTF8StreamJsonParser84.getIntValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNull(obj89);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str91, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3658");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int27 = serializedString20.appendQuotedUTF8(byteArray25, 0);
        char[] charArray28 = serializedString20.asQuotedChars();
        boolean boolean29 = serializedString1.equals((java.lang.Object) serializedString20);
        com.fasterxml.jackson.core.io.SerializedString serializedString31 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int38 = serializedString31.appendQuotedUTF8(byteArray36, 0);
        byte[] byteArray39 = serializedString31.asUnquotedUTF8();
        int int41 = serializedString20.appendQuotedUTF8(byteArray39, (int) '#');
        java.lang.String str42 = serializedString20.getValue();
        int int43 = serializedString20.charLength();
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str42, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 47 + "'", int43 == 47);
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3004");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        int int92 = uTF8StreamJsonParser84.getTextLength();
        boolean boolean93 = uTF8StreamJsonParser84.isClosed();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Boolean boolean94 = uTF8StreamJsonParser84.nextBooleanValue();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1311");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter lf2SpacesIndenter0 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter.instance;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter lf2SpacesIndenter2 = lf2SpacesIndenter0.withLinefeed("");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler3 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext6 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler3, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream7 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer8 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext6, outputStream7);
        com.fasterxml.jackson.core.ObjectCodec objectCodec10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext14 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream15 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer16 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext14, outputStream15);
        uTF8Writer16.flush();
        java.io.Writer writer19 = uTF8Writer16.append('a');
        com.fasterxml.jackson.core.json.WriterBasedJsonGenerator writerBasedJsonGenerator20 = new com.fasterxml.jackson.core.json.WriterBasedJsonGenerator(iOContext6, (-1959034571), objectCodec10, (java.io.Writer) uTF8Writer16);
        com.fasterxml.jackson.core.io.SerializedString serializedString22 = new com.fasterxml.jackson.core.io.SerializedString("\n");
        java.lang.String str23 = serializedString22.toString();
        char[] charArray24 = new char[] {};
        int int26 = serializedString22.appendQuoted(charArray24, (int) (byte) 10);
        byte[] byteArray27 = serializedString22.asQuotedUTF8();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator28 = writerBasedJsonGenerator20.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString22);
        lf2SpacesIndenter2.writeIndentation(jsonGenerator28, (-1959034571));
        jsonGenerator28.writeNumber((double) 0L);
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("\n");
        java.lang.String str35 = serializedString34.toString();
        int int36 = serializedString34.charLength();
        byte[] byteArray37 = serializedString34.asUnquotedUTF8();
        byte[] byteArray38 = serializedString34.asQuotedUTF8();
        jsonGenerator28.writeBinary(byteArray38);
        com.fasterxml.jackson.core.ObjectCodec objectCodec40 = jsonGenerator28.getCodec();
        boolean boolean41 = jsonGenerator28.canWriteTypeId();
        org.junit.Assert.assertNotNull(lf2SpacesIndenter0);
        org.junit.Assert.assertNotNull(lf2SpacesIndenter2);
        org.junit.Assert.assertNotNull(writer19);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\n" + "'", str23, "\n");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[92, 110]");
        org.junit.Assert.assertNotNull(jsonGenerator28);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\n" + "'", str35, "\n");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[10]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[92, 110]");
        org.junit.Assert.assertNull(objectCodec40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2897");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        char[] charArray13 = serializedString2.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString15 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int22 = serializedString15.appendQuotedUTF8(byteArray20, 0);
        char[] charArray23 = serializedString15.asQuotedChars();
        byte[] byteArray28 = new byte[] { (byte) 10, (byte) 1, (byte) 0, (byte) 100 };
        int int30 = serializedString15.appendUnquotedUTF8(byteArray28, (int) (short) 10);
        byte[] byteArray31 = serializedString15.asQuotedUTF8();
        int int33 = serializedString2.appendUnquotedUTF8(byteArray31, (int) (byte) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int42 = serializedString35.appendQuotedUTF8(byteArray40, 0);
        byte[] byteArray43 = serializedString35.asUnquotedUTF8();
        int int45 = serializedString2.appendQuotedUTF8(byteArray43, 0);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[10, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 47 + "'", int45 == 47);
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3239");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        int int92 = uTF8StreamJsonParser84.getTextLength();
        boolean boolean93 = uTF8StreamJsonParser84.isClosed();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str94 = uTF8StreamJsonParser84.nextTextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3187");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        int int89 = uTF8StreamJsonParser84.getTextOffset();
        double double91 = uTF8StreamJsonParser84.getValueAsDouble((double) 10.0f);
        com.fasterxml.jackson.core.JsonLocation jsonLocation92 = uTF8StreamJsonParser84.getCurrentLocation();
        long long94 = uTF8StreamJsonParser84.getValueAsLong((long) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger95 = uTF8StreamJsonParser84.getBigIntegerValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 10.0d + "'", double91 == 10.0d);
        org.junit.Assert.assertNotNull(jsonLocation92);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 0L + "'", long94 == 0L);
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3124");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int27 = serializedString20.appendQuotedUTF8(byteArray25, 0);
        char[] charArray28 = serializedString20.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString30 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int37 = serializedString30.appendQuotedUTF8(byteArray35, 0);
        int int39 = serializedString20.appendUnquotedUTF8(byteArray35, (int) (short) -1);
        int int41 = serializedString10.appendQuotedUTF8(byteArray35, (int) (byte) 1);
        java.lang.String str42 = serializedString10.toString();
        char[] charArray43 = serializedString10.asQuotedChars();
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str42, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2969");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        int int92 = uTF8StreamJsonParser84.getTextLength();
        java.lang.String str94 = uTF8StreamJsonParser84.getValueAsString("");
        // The following exception was thrown during execution in test generation
        try {
            int int96 = uTF8StreamJsonParser84.nextIntValue((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3312");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        java.lang.String str80 = textBuffer76.toString();
        boolean boolean81 = textBuffer76.hasTextAsCharacters();
        char[] charArray82 = textBuffer76.finishCurrentSegment();
        java.lang.String str83 = textBuffer76.toString();
        textBuffer76.resetWithEmpty();
        char[] charArray85 = textBuffer76.expandCurrentSegment();
        char[] charArray86 = textBuffer76.emptyAndGetCurrentSegment();
        int int87 = textBuffer76.getCurrentSegmentSize();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "a" + "'", str80, "a");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "a" + "'", str83, "a");
        org.junit.Assert.assertNotNull(charArray85);
        org.junit.Assert.assertNotNull(charArray86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1206");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonFactory.Feature feature2 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean4 = feature2.enabledIn(3);
        boolean boolean5 = jsonFactory1.isEnabled(feature2);
        com.fasterxml.jackson.core.ObjectCodec objectCodec6 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = new com.fasterxml.jackson.core.JsonFactory(objectCodec6);
        com.fasterxml.jackson.core.JsonFactory.Feature feature8 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean10 = feature8.enabledIn(3);
        boolean boolean11 = jsonFactory7.isEnabled(feature8);
        com.fasterxml.jackson.core.JsonParser.Feature feature12 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
        com.fasterxml.jackson.core.JsonFactory jsonFactory13 = jsonFactory7.disable(feature12);
        com.fasterxml.jackson.core.JsonFactory jsonFactory14 = jsonFactory1.disable(feature12);
        com.fasterxml.jackson.core.JsonFactory.Feature feature15 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        com.fasterxml.jackson.core.JsonLocation jsonLocation20 = new com.fasterxml.jackson.core.JsonLocation((java.lang.Object) feature15, 0L, (long) (byte) 1, 10, (int) (short) -1);
        com.fasterxml.jackson.core.JsonFactory jsonFactory22 = jsonFactory14.configure(feature15, true);
        com.fasterxml.jackson.core.JsonParser.Feature feature23 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
        com.fasterxml.jackson.core.JsonFactory jsonFactory24 = jsonFactory22.enable(feature23);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes25 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory26 = jsonFactory22.setCharacterEscapes(characterEscapes25);
        com.fasterxml.jackson.core.JsonParser jsonParser28 = jsonFactory26.createJsonParser("2.2250738585072012e-308");
        com.fasterxml.jackson.core.FormatSchema formatSchema29 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean30 = jsonFactory26.canUseSchema(formatSchema29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature2.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature8.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES + "'", feature12.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES));
        org.junit.Assert.assertNotNull(jsonFactory13);
        org.junit.Assert.assertNotNull(jsonFactory14);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature15.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertNotNull(jsonFactory22);
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES + "'", feature23.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES));
        org.junit.Assert.assertNotNull(jsonFactory24);
        org.junit.Assert.assertNotNull(jsonFactory26);
        org.junit.Assert.assertNotNull(jsonParser28);
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1022");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream4 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer5 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext3, outputStream4);
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding6 = com.fasterxml.jackson.core.JsonEncoding.UTF16_BE;
        iOContext3.setEncoding(jsonEncoding6);
        java.io.Reader reader9 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec10 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer11 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int13 = charsToNameCanonicalizer11.calcHash("false");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser14 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, (-1954973613), reader9, objectCodec10, charsToNameCanonicalizer11);
        java.lang.String str15 = readerBasedJsonParser14.nextTextValue();
        int int16 = readerBasedJsonParser14.getTextLength();
        java.lang.String str17 = readerBasedJsonParser14.nextTextValue();
        long long19 = readerBasedJsonParser14.getValueAsLong((long) (-749104218));
        com.fasterxml.jackson.core.Base64Variant base64Variant20 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler21 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext24 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler21, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream25 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer26 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext24, outputStream25);
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding27 = com.fasterxml.jackson.core.JsonEncoding.UTF16_BE;
        iOContext24.setEncoding(jsonEncoding27);
        java.io.Reader reader30 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec31 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer32 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int34 = charsToNameCanonicalizer32.calcHash("false");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser35 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext24, (-1954973613), reader30, objectCodec31, charsToNameCanonicalizer32);
        int int36 = readerBasedJsonParser35.getTextOffset();
        int int37 = readerBasedJsonParser35.getTextLength();
        com.fasterxml.jackson.core.util.ByteArrayBuilder byteArrayBuilder38 = readerBasedJsonParser35._getByteArrayBuilder();
        // The following exception was thrown during execution in test generation
        try {
            int int39 = readerBasedJsonParser14.readBinaryValue(base64Variant20, (java.io.OutputStream) byteArrayBuilder38);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: -1; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + jsonEncoding6 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF16_BE + "'", jsonEncoding6.equals(com.fasterxml.jackson.core.JsonEncoding.UTF16_BE));
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 452559132 + "'", int13 == 452559132);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-749104218L) + "'", long19 == (-749104218L));
        org.junit.Assert.assertTrue("'" + jsonEncoding27 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF16_BE + "'", jsonEncoding27.equals(com.fasterxml.jackson.core.JsonEncoding.UTF16_BE));
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer32);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 452559132 + "'", int34 == 452559132);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArrayBuilder38);
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3393");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        java.lang.String str80 = textBuffer76.toString();
        char[] charArray81 = textBuffer76.getTextBuffer();
        char[] charArray82 = textBuffer76.getTextBuffer();
        textBuffer76.ensureNotShared();
        textBuffer76.ensureNotShared();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "a" + "'", str80, "a");
        org.junit.Assert.assertNotNull(charArray81);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray81), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray81), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray81), "[a]");
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray82), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray82), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray82), "[a]");
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2573");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        mergedStream64.mark((int) (short) 10);
        mergedStream64.reset();
        com.fasterxml.jackson.core.io.SerializedString serializedString69 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int76 = serializedString69.appendQuotedUTF8(byteArray74, 0);
        char[] charArray77 = serializedString69.asQuotedChars();
        byte[] byteArray82 = new byte[] { (byte) 10, (byte) 1, (byte) 0, (byte) 100 };
        int int84 = serializedString69.appendUnquotedUTF8(byteArray82, (int) (short) 10);
        com.fasterxml.jackson.core.io.MergedStream mergedStream87 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray82, (int) ' ', 34);
        java.io.Reader reader89 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec90 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer91 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser92 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext12, (int) (short) 1, reader89, objectCodec90, charsToNameCanonicalizer91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[10, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1067");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream4 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer5 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext3, outputStream4);
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding6 = com.fasterxml.jackson.core.JsonEncoding.UTF16_BE;
        iOContext3.setEncoding(jsonEncoding6);
        java.io.Reader reader9 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec10 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer11 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int13 = charsToNameCanonicalizer11.calcHash("false");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser14 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, (-1954973613), reader9, objectCodec10, charsToNameCanonicalizer11);
        com.fasterxml.jackson.core.Version version15 = readerBasedJsonParser14.version();
        boolean boolean16 = readerBasedJsonParser14.hasTextCharacters();
        int int18 = readerBasedJsonParser14.nextIntValue(366154140);
        java.lang.String str19 = readerBasedJsonParser14.getText();
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext20 = readerBasedJsonParser14.getParsingContext();
        boolean boolean21 = jsonReadContext20.expectComma();
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler22 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext25 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler22, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream26 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer27 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext25, outputStream26);
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding28 = com.fasterxml.jackson.core.JsonEncoding.UTF16_BE;
        iOContext25.setEncoding(jsonEncoding28);
        java.io.Reader reader31 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec32 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer33 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int35 = charsToNameCanonicalizer33.calcHash("false");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser36 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext25, (-1954973613), reader31, objectCodec32, charsToNameCanonicalizer33);
        com.fasterxml.jackson.core.JsonToken jsonToken37 = readerBasedJsonParser36.nextToken();
        boolean boolean38 = readerBasedJsonParser36.isClosed();
        int int40 = readerBasedJsonParser36.nextIntValue(0);
        com.fasterxml.jackson.core.JsonLocation jsonLocation41 = jsonReadContext20.getStartLocation((java.lang.Object) int40);
        org.junit.Assert.assertTrue("'" + jsonEncoding6 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF16_BE + "'", jsonEncoding6.equals(com.fasterxml.jackson.core.JsonEncoding.UTF16_BE));
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1750917942) + "'", int13 == (-1750917942));
        org.junit.Assert.assertNotNull(version15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 366154140 + "'", int18 == 366154140);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(jsonReadContext20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + jsonEncoding28 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF16_BE + "'", jsonEncoding28.equals(com.fasterxml.jackson.core.JsonEncoding.UTF16_BE));
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer33);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1750917942) + "'", int35 == (-1750917942));
        org.junit.Assert.assertNull(jsonToken37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(jsonLocation41);
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3659");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        boolean boolean93 = uTF8StreamJsonParser84.isClosed();
        java.lang.String str94 = uTF8StreamJsonParser84.getText();
        com.fasterxml.jackson.core.JsonParser.Feature feature95 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser jsonParser96 = uTF8StreamJsonParser84.enable(feature95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNull(str94);
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1459");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.ObjectCodec objectCodec2 = jsonFactory1.getCodec();
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler3 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext6 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler3, (java.lang.Object) (byte) -1, true);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler7 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext10 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler7, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream11 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer12 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext10, outputStream11);
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding13 = com.fasterxml.jackson.core.JsonEncoding.UTF16_BE;
        iOContext10.setEncoding(jsonEncoding13);
        java.io.Reader reader16 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec17 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer18 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int20 = charsToNameCanonicalizer18.calcHash("false");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser21 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext10, (-1954973613), reader16, objectCodec17, charsToNameCanonicalizer18);
        com.fasterxml.jackson.core.util.ByteArrayBuilder byteArrayBuilder22 = readerBasedJsonParser21._getByteArrayBuilder();
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer23 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext6, (java.io.OutputStream) byteArrayBuilder22);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator24 = jsonFactory1.createJsonGenerator((java.io.OutputStream) byteArrayBuilder22);
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext26 = null;
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext30 = new com.fasterxml.jackson.core.json.JsonReadContext(jsonReadContext26, 0, 1000, (int) (short) 10);
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext33 = jsonReadContext30.createChildObjectContext(0, (int) 'a');
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext34 = jsonReadContext30.getParent();
        java.lang.String str35 = jsonReadContext30.toString();
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext39 = new com.fasterxml.jackson.core.json.JsonReadContext(jsonReadContext30, 128, (-1421874632), 1608256542);
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator24.writeObjectField("com.fasterxml.jackson.core.JsonParseException: \n\n at [Source: CANONICALIZE_FIELD_NAMES; line: 10, column: 100]", (java.lang.Object) jsonReadContext39);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonGenerationException; message: Can not write a field name, expecting a value");
        } catch (com.fasterxml.jackson.core.JsonGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(objectCodec2);
        org.junit.Assert.assertTrue("'" + jsonEncoding13 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF16_BE + "'", jsonEncoding13.equals(com.fasterxml.jackson.core.JsonEncoding.UTF16_BE));
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer18);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 209422314 + "'", int20 == 209422314);
        org.junit.Assert.assertNotNull(byteArrayBuilder22);
        org.junit.Assert.assertNotNull(jsonGenerator24);
        org.junit.Assert.assertNotNull(jsonReadContext33);
        org.junit.Assert.assertNull(jsonStreamContext34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "/" + "'", str35, "/");
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1019");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream4 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer5 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext3, outputStream4);
        com.fasterxml.jackson.core.ObjectCodec objectCodec7 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler8 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext11 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler8, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream12 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer13 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext11, outputStream12);
        uTF8Writer13.flush();
        java.io.Writer writer16 = uTF8Writer13.append('a');
        com.fasterxml.jackson.core.json.WriterBasedJsonGenerator writerBasedJsonGenerator17 = new com.fasterxml.jackson.core.json.WriterBasedJsonGenerator(iOContext3, (-1959034571), objectCodec7, (java.io.Writer) uTF8Writer13);
        com.fasterxml.jackson.core.Version version18 = writerBasedJsonGenerator17.version();
        writerBasedJsonGenerator17.writeRaw("com.fasterxml.jackson.core.JsonParseException: \n\n at [Source: CANONICALIZE_FIELD_NAMES; line: 10, column: 100]");
        com.fasterxml.jackson.core.json.JsonWriteContext jsonWriteContext21 = writerBasedJsonGenerator17.getOutputContext();
        writerBasedJsonGenerator17.writeStartObject();
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("\n");
        java.lang.String str25 = serializedString24.toString();
        int int26 = serializedString24.charLength();
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext30 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream31 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer32 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext30, outputStream31);
        byte[] byteArray33 = iOContext30.allocReadIOBuffer();
        int int35 = serializedString24.appendQuotedUTF8(byteArray33, 3);
        writerBasedJsonGenerator17.writeFieldName((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter37 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.JsonToken jsonToken38 = com.fasterxml.jackson.core.JsonToken.VALUE_NULL;
        byte[] byteArray39 = jsonToken38.asByteArray();
        int int41 = serializedString24.appendUnquotedUTF8(byteArray39, 677572392);
        java.lang.String str42 = serializedString24.getValue();
        java.nio.ByteBuffer byteBuffer43 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int44 = serializedString24.putUnquotedUTF8(byteBuffer43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(writer16);
        org.junit.Assert.assertNotNull(version18);
        org.junit.Assert.assertNotNull(jsonWriteContext21);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\n" + "'", str25, "\n");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertTrue("'" + jsonToken38 + "' != '" + com.fasterxml.jackson.core.JsonToken.VALUE_NULL + "'", jsonToken38.equals(com.fasterxml.jackson.core.JsonToken.VALUE_NULL));
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[110, 117, 108, 108]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\n" + "'", str42, "\n");
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2549");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        mergedStream64.mark((int) (short) 10);
        mergedStream64.reset();
        com.fasterxml.jackson.core.io.SerializedString serializedString69 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int76 = serializedString69.appendQuotedUTF8(byteArray74, 0);
        char[] charArray77 = serializedString69.asQuotedChars();
        byte[] byteArray82 = new byte[] { (byte) 10, (byte) 1, (byte) 0, (byte) 100 };
        int int84 = serializedString69.appendUnquotedUTF8(byteArray82, (int) (short) 10);
        com.fasterxml.jackson.core.io.MergedStream mergedStream87 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray82, (int) ' ', 34);
        java.io.Reader reader89 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec90 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer91 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser92 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext12, 0, reader89, objectCodec90, charsToNameCanonicalizer91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[10, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2940");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        java.lang.String str80 = textBuffer76.toString();
        boolean boolean81 = textBuffer76.hasTextAsCharacters();
        char[] charArray82 = textBuffer76.finishCurrentSegment();
        java.lang.String str83 = textBuffer76.toString();
        // The following exception was thrown during execution in test generation
        try {
            double double84 = textBuffer76.contentsAsDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"a\"");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "a" + "'", str80, "a");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "a" + "'", str83, "a");
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3076");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        java.lang.String str88 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]\n at [Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.JsonLocation jsonLocation89 = uTF8StreamJsonParser84.getCurrentLocation();
        int int90 = uTF8StreamJsonParser84.getTextLength();
        int int91 = uTF8StreamJsonParser84.getValueAsInt();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]\n at [Source: hi!; line: 52, column: 1]" + "'", str88, "com.fasterxml.jackson.core.JsonParseException: com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]\n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNotNull(jsonLocation89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2801");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = defaultPrettyPrinter1._withSpaces(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter5 = defaultPrettyPrinter1._withSpaces(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter7 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonParseException: ");
        com.fasterxml.jackson.core.io.SerializedString serializedString9 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int16 = serializedString9.appendQuotedUTF8(byteArray14, 0);
        char[] charArray17 = serializedString9.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString19 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int26 = serializedString19.appendQuotedUTF8(byteArray24, 0);
        int int28 = serializedString9.appendUnquotedUTF8(byteArray24, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter29 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString9);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter30 = defaultPrettyPrinter29._objectIndenter;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter31 = defaultPrettyPrinter29.withSpacesInObjectEntries();
        com.fasterxml.jackson.core.SerializableString serializableString32 = defaultPrettyPrinter29._rootSeparator;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter33 = defaultPrettyPrinter29._objectIndenter;
        defaultPrettyPrinter7.indentArraysWith(indenter33);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter35 = defaultPrettyPrinter5.withObjectIndenter(indenter33);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter5.writeEndObject(jsonGenerator36, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultPrettyPrinter3);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter5);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(indenter30);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter31);
        org.junit.Assert.assertNotNull(serializableString32);
        org.junit.Assert.assertNotNull(indenter33);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter35);
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2861");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = defaultPrettyPrinter1._withSpaces(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter5 = defaultPrettyPrinter1._withSpaces(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter7 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonParseException: ");
        com.fasterxml.jackson.core.io.SerializedString serializedString9 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int16 = serializedString9.appendQuotedUTF8(byteArray14, 0);
        char[] charArray17 = serializedString9.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString19 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int26 = serializedString19.appendQuotedUTF8(byteArray24, 0);
        int int28 = serializedString9.appendUnquotedUTF8(byteArray24, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter29 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString9);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter30 = defaultPrettyPrinter29._objectIndenter;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter31 = defaultPrettyPrinter29.withSpacesInObjectEntries();
        com.fasterxml.jackson.core.SerializableString serializableString32 = defaultPrettyPrinter29._rootSeparator;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter33 = defaultPrettyPrinter29._objectIndenter;
        defaultPrettyPrinter7.indentArraysWith(indenter33);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter35 = defaultPrettyPrinter5.withObjectIndenter(indenter33);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter35.writeStartObject(jsonGenerator36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultPrettyPrinter3);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter5);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(indenter30);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter31);
        org.junit.Assert.assertNotNull(serializableString32);
        org.junit.Assert.assertNotNull(indenter33);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter35);
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3649");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        int int10 = serializedString1.charLength();
        char[] charArray11 = serializedString1.asQuotedChars();
        byte[] byteArray12 = serializedString1.asQuotedUTF8();
        com.fasterxml.jackson.core.io.SerializedString serializedString14 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray19 = new char[] { 'a', ' ', '#', '4' };
        int int21 = serializedString14.appendUnquoted(charArray19, 0);
        java.lang.String str22 = serializedString14.getValue();
        char[] charArray23 = serializedString14.asQuotedChars();
        byte[] byteArray24 = serializedString14.asUnquotedUTF8();
        int int26 = serializedString1.appendQuotedUTF8(byteArray24, 24);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 47 + "'", int10 == 47);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str22, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3036");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        com.fasterxml.jackson.core.ObjectCodec objectCodec87 = uTF8StreamJsonParser84.getCodec();
        java.lang.String str88 = uTF8StreamJsonParser84.getValueAsString();
        boolean boolean89 = uTF8StreamJsonParser84.isClosed();
        boolean boolean90 = uTF8StreamJsonParser84.getValueAsBoolean();
        // The following exception was thrown during execution in test generation
        try {
            int int91 = uTF8StreamJsonParser84.getIntValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertNull(objectCodec87);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3536");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonParseException: ");
        com.fasterxml.jackson.core.SerializableString serializableString2 = null;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter1, serializableString2);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter4 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter1);
        com.fasterxml.jackson.core.SerializableString serializableString5 = defaultPrettyPrinter4._rootSeparator;
        com.fasterxml.jackson.core.io.SerializedString serializedString7 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray12 = new char[] { 'a', ' ', '#', '4' };
        int int14 = serializedString7.appendUnquoted(charArray12, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray21 = new char[] { 'a', ' ', '#', '4' };
        int int23 = serializedString16.appendUnquoted(charArray21, 0);
        boolean boolean24 = serializedString7.equals((java.lang.Object) serializedString16);
        com.fasterxml.jackson.core.io.SerializedString serializedString26 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int33 = serializedString26.appendQuotedUTF8(byteArray31, 0);
        char[] charArray34 = serializedString26.asQuotedChars();
        boolean boolean35 = serializedString7.equals((java.lang.Object) serializedString26);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter36 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter4, (com.fasterxml.jackson.core.SerializableString) serializedString7);
        boolean boolean37 = defaultPrettyPrinter36._spacesInObjectEntries;
        org.junit.Assert.assertNotNull(serializableString5);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2888");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = defaultPrettyPrinter1._withSpaces(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter5 = defaultPrettyPrinter1._withSpaces(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter7 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonParseException: ");
        com.fasterxml.jackson.core.io.SerializedString serializedString9 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int16 = serializedString9.appendQuotedUTF8(byteArray14, 0);
        char[] charArray17 = serializedString9.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString19 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int26 = serializedString19.appendQuotedUTF8(byteArray24, 0);
        int int28 = serializedString9.appendUnquotedUTF8(byteArray24, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter29 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString9);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter30 = defaultPrettyPrinter29._objectIndenter;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter31 = defaultPrettyPrinter29.withSpacesInObjectEntries();
        com.fasterxml.jackson.core.SerializableString serializableString32 = defaultPrettyPrinter29._rootSeparator;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter33 = defaultPrettyPrinter29._objectIndenter;
        defaultPrettyPrinter7.indentArraysWith(indenter33);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter35 = defaultPrettyPrinter5.withObjectIndenter(indenter33);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter35.writeArrayValueSeparator(jsonGenerator36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultPrettyPrinter3);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter5);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(indenter30);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter31);
        org.junit.Assert.assertNotNull(serializableString32);
        org.junit.Assert.assertNotNull(indenter33);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter35);
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3332");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        com.fasterxml.jackson.core.JsonLocation jsonLocation93 = uTF8StreamJsonParser84.getTokenLocation();
        boolean boolean95 = uTF8StreamJsonParser84.getValueAsBoolean(true);
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonToken jsonToken96 = uTF8StreamJsonParser84.nextToken();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(jsonLocation93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3620");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = defaultPrettyPrinter1._withSpaces(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter5 = defaultPrettyPrinter1._withSpaces(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter7 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonParseException: ");
        com.fasterxml.jackson.core.io.SerializedString serializedString9 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int16 = serializedString9.appendQuotedUTF8(byteArray14, 0);
        char[] charArray17 = serializedString9.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString19 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int26 = serializedString19.appendQuotedUTF8(byteArray24, 0);
        int int28 = serializedString9.appendUnquotedUTF8(byteArray24, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter29 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString9);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter30 = defaultPrettyPrinter29._objectIndenter;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter31 = defaultPrettyPrinter29.withSpacesInObjectEntries();
        com.fasterxml.jackson.core.SerializableString serializableString32 = defaultPrettyPrinter29._rootSeparator;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter33 = defaultPrettyPrinter29._objectIndenter;
        defaultPrettyPrinter7.indentArraysWith(indenter33);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter35 = defaultPrettyPrinter5.withObjectIndenter(indenter33);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter5.beforeObjectEntries(jsonGenerator36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultPrettyPrinter3);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter5);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(indenter30);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter31);
        org.junit.Assert.assertNotNull(serializableString32);
        org.junit.Assert.assertNotNull(indenter33);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter35);
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2953");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        int int93 = uTF8StreamJsonParser84.getValueAsInt();
        long long95 = uTF8StreamJsonParser84.getValueAsLong((long) 47);
        com.fasterxml.jackson.core.FormatSchema formatSchema96 = null;
        // The following exception was thrown during execution in test generation
        try {
            uTF8StreamJsonParser84.setSchema(formatSchema96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 47L + "'", long95 == 47L);
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2814");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext89 = uTF8StreamJsonParser84.getParsingContext();
        com.fasterxml.jackson.core.JsonParser jsonParser91 = uTF8StreamJsonParser84.setFeatureMask(10);
        com.fasterxml.jackson.core.util.ByteArrayBuilder byteArrayBuilder92 = uTF8StreamJsonParser84._getByteArrayBuilder();
        com.fasterxml.jackson.core.Base64Variant base64Variant93 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray94 = uTF8StreamJsonParser84.getBinaryValue(base64Variant93);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNotNull(jsonStreamContext89);
        org.junit.Assert.assertNotNull(jsonParser91);
        org.junit.Assert.assertNotNull(byteArrayBuilder92);
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3386");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        long long93 = uTF8StreamJsonParser84.getTokenCharacterOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger94 = uTF8StreamJsonParser84.getBigIntegerValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1075");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonFactory.Feature feature2 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean4 = feature2.enabledIn(3);
        boolean boolean5 = jsonFactory1.isEnabled(feature2);
        com.fasterxml.jackson.core.ObjectCodec objectCodec6 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = new com.fasterxml.jackson.core.JsonFactory(objectCodec6);
        com.fasterxml.jackson.core.JsonFactory.Feature feature8 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean10 = feature8.enabledIn(3);
        boolean boolean11 = jsonFactory7.isEnabled(feature8);
        com.fasterxml.jackson.core.JsonParser.Feature feature12 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
        com.fasterxml.jackson.core.JsonFactory jsonFactory13 = jsonFactory7.disable(feature12);
        com.fasterxml.jackson.core.JsonFactory jsonFactory14 = jsonFactory1.disable(feature12);
        java.io.OutputStream outputStream15 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator16 = jsonFactory1.createGenerator(outputStream15);
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext17 = jsonGenerator16.getOutputContext();
        jsonGenerator16.writeNumber((float) (-1959034571));
        jsonGenerator16.writeNumber((double) '4');
        com.fasterxml.jackson.core.io.SerializedString serializedString23 = new com.fasterxml.jackson.core.io.SerializedString("\n");
        java.lang.String str24 = serializedString23.toString();
        java.lang.String str25 = serializedString23.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator26 = jsonGenerator16.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString23);
        char[] charArray27 = com.fasterxml.jackson.core.io.CharTypes.copyHexChars();
        // The following exception was thrown during execution in test generation
        try {
            int int29 = serializedString23.appendQuoted(charArray27, (-823724124));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature2.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature8.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES + "'", feature12.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES));
        org.junit.Assert.assertNotNull(jsonFactory13);
        org.junit.Assert.assertNotNull(jsonFactory14);
        org.junit.Assert.assertNotNull(jsonGenerator16);
        org.junit.Assert.assertNotNull(jsonStreamContext17);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\n" + "'", str24, "\n");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\n" + "'", str25, "\n");
        org.junit.Assert.assertNotNull(jsonGenerator26);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "0123456789ABCDEF");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "0123456789ABCDEF");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F]");
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1239");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream4 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer5 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext3, outputStream4);
        com.fasterxml.jackson.core.ObjectCodec objectCodec7 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler8 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext11 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler8, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream12 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer13 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext11, outputStream12);
        uTF8Writer13.flush();
        java.io.Writer writer16 = uTF8Writer13.append('a');
        com.fasterxml.jackson.core.json.WriterBasedJsonGenerator writerBasedJsonGenerator17 = new com.fasterxml.jackson.core.json.WriterBasedJsonGenerator(iOContext3, (-1959034571), objectCodec7, (java.io.Writer) uTF8Writer13);
        com.fasterxml.jackson.core.Version version18 = writerBasedJsonGenerator17.version();
        writerBasedJsonGenerator17.writeRaw("com.fasterxml.jackson.core.JsonParseException: \n\n at [Source: CANONICALIZE_FIELD_NAMES; line: 10, column: 100]");
        com.fasterxml.jackson.core.json.JsonWriteContext jsonWriteContext21 = writerBasedJsonGenerator17.getOutputContext();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator22 = writerBasedJsonGenerator17.useDefaultPrettyPrinter();
        com.fasterxml.jackson.core.JsonGenerator.Feature feature23 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
        boolean boolean24 = feature23.enabledByDefault();
        boolean boolean25 = feature23.enabledByDefault();
        int int26 = feature23.getMask();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator27 = writerBasedJsonGenerator17.disable(feature23);
        com.fasterxml.jackson.core.JsonFactory jsonFactory28 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.OutputDecorator outputDecorator29 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = jsonFactory28.setOutputDecorator(outputDecorator29);
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("\n");
        byte[] byteArray33 = serializedString32.asQuotedUTF8();
        byte[] byteArray34 = serializedString32.asUnquotedUTF8();
        com.fasterxml.jackson.core.JsonParser jsonParser37 = jsonFactory30.createJsonParser(byteArray34, 233178734, (-1958944223));
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator27.writeRawUTF8String(byteArray34, 1447856980, (-1958904185));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(writer16);
        org.junit.Assert.assertNotNull(version18);
        org.junit.Assert.assertNotNull(jsonWriteContext21);
        org.junit.Assert.assertNotNull(jsonGenerator22);
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT + "'", feature23.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(jsonGenerator27);
        org.junit.Assert.assertNotNull(jsonFactory30);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[92, 110]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10]");
        org.junit.Assert.assertNotNull(jsonParser37);
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3344");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter24 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter25 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter lf2SpacesIndenter27 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter lf2SpacesIndenter29 = lf2SpacesIndenter27.withLinefeed("[Source: hi!; line: 52, column: 1]");
        defaultPrettyPrinter25.indentObjectsWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) lf2SpacesIndenter27);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter32 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonParseException: ");
        com.fasterxml.jackson.core.SerializableString serializableString33 = null;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter34 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter32, serializableString33);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter35 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter32);
        com.fasterxml.jackson.core.SerializableString serializableString36 = defaultPrettyPrinter35._rootSeparator;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter37 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter25, serializableString36);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter38 = defaultPrettyPrinter37.createInstance();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter24);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter25);
        org.junit.Assert.assertNotNull(lf2SpacesIndenter29);
        org.junit.Assert.assertNotNull(serializableString36);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter38);
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3433");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        java.lang.String str80 = textBuffer76.toString();
        boolean boolean81 = textBuffer76.hasTextAsCharacters();
        char[] charArray82 = textBuffer76.finishCurrentSegment();
        java.lang.String str83 = textBuffer76.toString();
        boolean boolean84 = textBuffer76.hasTextAsCharacters();
        textBuffer76.ensureNotShared();
        java.lang.String str86 = textBuffer76.toString();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "a" + "'", str80, "a");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "a" + "'", str83, "a");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "a" + "'", str86, "a");
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1016");
        com.fasterxml.jackson.core.JsonFactory.Feature feature0 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        com.fasterxml.jackson.core.JsonLocation jsonLocation5 = new com.fasterxml.jackson.core.JsonLocation((java.lang.Object) feature0, 0L, (long) (byte) 1, 10, (int) (short) -1);
        long long6 = jsonLocation5.getByteOffset();
        com.fasterxml.jackson.core.ObjectCodec objectCodec7 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory8 = new com.fasterxml.jackson.core.JsonFactory(objectCodec7);
        com.fasterxml.jackson.core.JsonFactory.Feature feature9 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean11 = feature9.enabledIn(3);
        boolean boolean12 = jsonFactory8.isEnabled(feature9);
        com.fasterxml.jackson.core.ObjectCodec objectCodec13 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory14 = new com.fasterxml.jackson.core.JsonFactory(objectCodec13);
        com.fasterxml.jackson.core.JsonFactory.Feature feature15 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean17 = feature15.enabledIn(3);
        boolean boolean18 = jsonFactory14.isEnabled(feature15);
        com.fasterxml.jackson.core.JsonParser.Feature feature19 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
        com.fasterxml.jackson.core.JsonFactory jsonFactory20 = jsonFactory14.disable(feature19);
        com.fasterxml.jackson.core.JsonFactory jsonFactory21 = jsonFactory8.disable(feature19);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler22 = jsonFactory21._getBufferRecycler();
        com.fasterxml.jackson.core.util.TextBuffer textBuffer23 = new com.fasterxml.jackson.core.util.TextBuffer(bufferRecycler22);
        java.lang.String str24 = textBuffer23.contentsAsString();
        textBuffer23.setCurrentLength((int) (short) 1);
        char[] charArray27 = textBuffer23.contentsAsArray();
        textBuffer23.resetWithEmpty();
        textBuffer23.setCurrentLength(56);
        boolean boolean31 = jsonLocation5.equals((java.lang.Object) textBuffer23);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature0.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature9.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature15.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES + "'", feature19.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES));
        org.junit.Assert.assertNotNull(jsonFactory20);
        org.junit.Assert.assertNotNull(jsonFactory21);
        org.junit.Assert.assertNotNull(bufferRecycler22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1310");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream4 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer5 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext3, outputStream4);
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding6 = com.fasterxml.jackson.core.JsonEncoding.UTF16_BE;
        iOContext3.setEncoding(jsonEncoding6);
        java.io.Reader reader9 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec10 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer11 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int13 = charsToNameCanonicalizer11.calcHash("false");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser14 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, (-1954973613), reader9, objectCodec10, charsToNameCanonicalizer11);
        int int15 = readerBasedJsonParser14.getTextOffset();
        java.lang.String str16 = readerBasedJsonParser14.getText();
        com.fasterxml.jackson.core.io.SerializedString serializedString18 = new com.fasterxml.jackson.core.io.SerializedString("\n");
        int int19 = serializedString18.charLength();
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler20 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext23 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler20, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream24 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer25 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext23, outputStream24);
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding26 = com.fasterxml.jackson.core.JsonEncoding.UTF16_BE;
        iOContext23.setEncoding(jsonEncoding26);
        java.io.Reader reader29 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec30 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer31 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int33 = charsToNameCanonicalizer31.calcHash("false");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser34 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext23, (-1954973613), reader29, objectCodec30, charsToNameCanonicalizer31);
        java.lang.String str35 = readerBasedJsonParser34.nextTextValue();
        com.fasterxml.jackson.core.util.ByteArrayBuilder byteArrayBuilder36 = readerBasedJsonParser34._getByteArrayBuilder();
        int int37 = serializedString18.writeUnquotedUTF8((java.io.OutputStream) byteArrayBuilder36);
        int int38 = readerBasedJsonParser14.releaseBuffered((java.io.OutputStream) byteArrayBuilder36);
        double double40 = readerBasedJsonParser14.getValueAsDouble((double) 1170843548);
        java.lang.Object obj41 = readerBasedJsonParser14.getEmbeddedObject();
        org.junit.Assert.assertTrue("'" + jsonEncoding6 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF16_BE + "'", jsonEncoding6.equals(com.fasterxml.jackson.core.JsonEncoding.UTF16_BE));
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 767467716 + "'", int13 == 767467716);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + jsonEncoding26 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF16_BE + "'", jsonEncoding26.equals(com.fasterxml.jackson.core.JsonEncoding.UTF16_BE));
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer31);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 767467716 + "'", int33 == 767467716);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(byteArrayBuilder36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.170843548E9d + "'", double40 == 1.170843548E9d);
        org.junit.Assert.assertNull(obj41);
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2975");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        defaultPrettyPrinter21.indentObjectsWith(indenter45);
        boolean boolean47 = indenter45.isInline();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3357");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        java.lang.String str88 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]\n at [Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.FormatSchema formatSchema89 = null;
        boolean boolean90 = uTF8StreamJsonParser84.canUseSchema(formatSchema89);
        com.fasterxml.jackson.core.JsonLocation jsonLocation94 = new com.fasterxml.jackson.core.JsonLocation((java.lang.Object) boolean90, (long) 100, 34, (int) (short) 100);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]\n at [Source: hi!; line: 52, column: 1]" + "'", str88, "com.fasterxml.jackson.core.JsonParseException: com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]\n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3290");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 0, (byte) 0 };
        int int17 = serializedString1.appendUnquotedUTF8(byteArray15, (int) (short) -1);
        com.fasterxml.jackson.core.io.SerializedString serializedString19 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int26 = serializedString19.appendQuotedUTF8(byteArray24, 0);
        char[] charArray27 = serializedString19.asQuotedChars();
        int int28 = serializedString19.charLength();
        char[] charArray29 = serializedString19.asQuotedChars();
        int int31 = serializedString1.appendUnquoted(charArray29, (int) (short) 10);
        char[] charArray32 = serializedString1.asQuotedChars();
        byte[] byteArray33 = serializedString1.asUnquotedUTF8();
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 1, 10, -1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 47 + "'", int28 == 47);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3524");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        boolean boolean93 = uTF8StreamJsonParser84.canReadObjectId();
        // The following exception was thrown during execution in test generation
        try {
            byte byte94 = uTF8StreamJsonParser84.getByteValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3010");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        com.fasterxml.jackson.core.JsonLocation jsonLocation93 = uTF8StreamJsonParser84.getTokenLocation();
        // The following exception was thrown during execution in test generation
        try {
            double double94 = uTF8StreamJsonParser84.getDoubleValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(jsonLocation93);
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2680");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        java.lang.String str9 = serializedString1.getValue();
        char[] charArray10 = serializedString1.asQuotedChars();
        byte[] byteArray11 = serializedString1.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.SerializedString serializedString13 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray14 = serializedString13.asUnquotedUTF8();
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext17 = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext((-1), 10);
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext20 = jsonReadContext17.createChildArrayContext((int) (short) 1, 10);
        boolean boolean21 = jsonReadContext20.inArray();
        boolean boolean22 = serializedString13.equals((java.lang.Object) boolean21);
        char[] charArray23 = serializedString13.asQuotedChars();
        int int25 = serializedString1.appendUnquoted(charArray23, 100);
        boolean boolean29 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray23, (int) (short) 1, 35, true);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str9, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonReadContext17);
        org.junit.Assert.assertNotNull(jsonReadContext20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2869");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        com.fasterxml.jackson.core.JsonLocation jsonLocation93 = uTF8StreamJsonParser84.getTokenLocation();
        // The following exception was thrown during execution in test generation
        try {
            long long94 = uTF8StreamJsonParser84.getLongValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(jsonLocation93);
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1410");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream4 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer5 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext3, outputStream4);
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding6 = com.fasterxml.jackson.core.JsonEncoding.UTF16_BE;
        iOContext3.setEncoding(jsonEncoding6);
        java.io.Reader reader9 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec10 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer11 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int13 = charsToNameCanonicalizer11.calcHash("false");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser14 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, (-1954973613), reader9, objectCodec10, charsToNameCanonicalizer11);
        int int15 = readerBasedJsonParser14.getTextOffset();
        java.lang.String str16 = readerBasedJsonParser14.getText();
        com.fasterxml.jackson.core.JsonLocation jsonLocation17 = readerBasedJsonParser14.getTokenLocation();
        java.lang.String str18 = readerBasedJsonParser14.getCurrentName();
        java.lang.Object obj19 = readerBasedJsonParser14.getTypeId();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext20 = readerBasedJsonParser14.getParsingContext();
        java.lang.Object obj21 = readerBasedJsonParser14.getEmbeddedObject();
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler22 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext25 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler22, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream26 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer27 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext25, outputStream26);
        com.fasterxml.jackson.core.ObjectCodec objectCodec29 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler30 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext33 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler30, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream34 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer35 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext33, outputStream34);
        uTF8Writer35.flush();
        java.io.Writer writer38 = uTF8Writer35.append('a');
        com.fasterxml.jackson.core.json.WriterBasedJsonGenerator writerBasedJsonGenerator39 = new com.fasterxml.jackson.core.json.WriterBasedJsonGenerator(iOContext25, (-1959034571), objectCodec29, (java.io.Writer) uTF8Writer35);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler40 = null;
        com.fasterxml.jackson.core.util.TextBuffer textBuffer41 = new com.fasterxml.jackson.core.util.TextBuffer(bufferRecycler40);
        textBuffer41.append(' ');
        int int44 = textBuffer41.size();
        char[] charArray45 = textBuffer41.finishCurrentSegment();
        uTF8Writer35.write(charArray45, (-1958953807), (-18278106));
        uTF8Writer35.write((-1958956225));
        int int51 = readerBasedJsonParser14.releaseBuffered((java.io.Writer) uTF8Writer35);
        org.junit.Assert.assertTrue("'" + jsonEncoding6 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF16_BE + "'", jsonEncoding6.equals(com.fasterxml.jackson.core.JsonEncoding.UTF16_BE));
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 453856366 + "'", int13 == 453856366);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(jsonLocation17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(jsonStreamContext20);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(writer38);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2789");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        com.fasterxml.jackson.core.Version version90 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.JsonLocation jsonLocation91 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.Version version92 = uTF8StreamJsonParser84.version();
        boolean boolean93 = uTF8StreamJsonParser84.isExpectedStartArrayToken();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonToken jsonToken94 = uTF8StreamJsonParser84.nextToken();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(version90);
        org.junit.Assert.assertNotNull(jsonLocation91);
        org.junit.Assert.assertNotNull(version92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3429");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        mergedStream64.mark((int) (short) 10);
        mergedStream64.reset();
        com.fasterxml.jackson.core.io.SerializedString serializedString69 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int76 = serializedString69.appendQuotedUTF8(byteArray74, 0);
        char[] charArray77 = serializedString69.asQuotedChars();
        byte[] byteArray82 = new byte[] { (byte) 10, (byte) 1, (byte) 0, (byte) 100 };
        int int84 = serializedString69.appendUnquotedUTF8(byteArray82, (int) (short) 10);
        com.fasterxml.jackson.core.io.MergedStream mergedStream87 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray82, (int) ' ', 34);
        mergedStream64.mark(1);
        long long91 = mergedStream64.skip(0L);
        mergedStream64.mark(63);
        int int94 = mergedStream64.available();
        // The following exception was thrown during execution in test generation
        try {
            mergedStream64.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[10, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 0L + "'", long91 == 0L);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 35 + "'", int94 == 35);
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3522");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        java.lang.String str80 = textBuffer76.toString();
        boolean boolean81 = textBuffer76.hasTextAsCharacters();
        char[] charArray82 = textBuffer76.finishCurrentSegment();
        java.lang.String str83 = textBuffer76.toString();
        boolean boolean84 = textBuffer76.hasTextAsCharacters();
        textBuffer76.releaseBuffers();
        char[] charArray86 = textBuffer76.finishCurrentSegment();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "a" + "'", str80, "a");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "a" + "'", str83, "a");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(charArray86);
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3335");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        com.fasterxml.jackson.core.Version version90 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.JsonLocation jsonLocation91 = uTF8StreamJsonParser84.getTokenLocation();
        int int92 = uTF8StreamJsonParser84.getTextOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger93 = uTF8StreamJsonParser84.getBigIntegerValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(version90);
        org.junit.Assert.assertNotNull(jsonLocation91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3423");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        int int92 = uTF8StreamJsonParser84.getTextLength();
        boolean boolean93 = uTF8StreamJsonParser84.isClosed();
        java.lang.String str94 = uTF8StreamJsonParser84.getText();
        boolean boolean95 = uTF8StreamJsonParser84.isExpectedStartArrayToken();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNull(str94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1097");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream4 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer5 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext3, outputStream4);
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding6 = com.fasterxml.jackson.core.JsonEncoding.UTF16_BE;
        iOContext3.setEncoding(jsonEncoding6);
        java.io.Reader reader9 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec10 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer11 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int13 = charsToNameCanonicalizer11.calcHash("false");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser14 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, (-1954973613), reader9, objectCodec10, charsToNameCanonicalizer11);
        java.lang.String str15 = readerBasedJsonParser14.nextTextValue();
        com.fasterxml.jackson.core.ObjectCodec objectCodec16 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory17 = new com.fasterxml.jackson.core.JsonFactory(objectCodec16);
        java.io.Reader reader18 = null;
        com.fasterxml.jackson.core.JsonParser jsonParser19 = jsonFactory17.createParser(reader18);
        com.fasterxml.jackson.core.Version version20 = jsonFactory17.version();
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler21 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext24 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler21, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream25 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer26 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext24, outputStream25);
        com.fasterxml.jackson.core.ObjectCodec objectCodec28 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler29 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler29, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream33 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer34 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext32, outputStream33);
        uTF8Writer34.flush();
        java.io.Writer writer37 = uTF8Writer34.append('a');
        com.fasterxml.jackson.core.json.WriterBasedJsonGenerator writerBasedJsonGenerator38 = new com.fasterxml.jackson.core.json.WriterBasedJsonGenerator(iOContext24, (-1959034571), objectCodec28, (java.io.Writer) uTF8Writer34);
        uTF8Writer34.flush();
        java.io.Writer writer41 = uTF8Writer34.append('a');
        uTF8Writer34.close();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator43 = jsonFactory17.createJsonGenerator((java.io.Writer) uTF8Writer34);
        int int44 = readerBasedJsonParser14.releaseBuffered((java.io.Writer) uTF8Writer34);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray45 = readerBasedJsonParser14.getBinaryValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: -1; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + jsonEncoding6 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF16_BE + "'", jsonEncoding6.equals(com.fasterxml.jackson.core.JsonEncoding.UTF16_BE));
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 631530184 + "'", int13 == 631530184);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertNotNull(version20);
        org.junit.Assert.assertNotNull(writer37);
        org.junit.Assert.assertNotNull(writer41);
        org.junit.Assert.assertNotNull(jsonGenerator43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3380");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter2 = defaultPrettyPrinter1.withSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = defaultPrettyPrinter1.withSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter4 = defaultPrettyPrinter1.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter6 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonParseException: ");
        com.fasterxml.jackson.core.io.SerializedString serializedString8 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int15 = serializedString8.appendQuotedUTF8(byteArray13, 0);
        char[] charArray16 = serializedString8.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString18 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int25 = serializedString18.appendQuotedUTF8(byteArray23, 0);
        int int27 = serializedString8.appendUnquotedUTF8(byteArray23, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter28 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString8);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter29 = defaultPrettyPrinter28._objectIndenter;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter30 = defaultPrettyPrinter28.withSpacesInObjectEntries();
        com.fasterxml.jackson.core.SerializableString serializableString31 = defaultPrettyPrinter28._rootSeparator;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter32 = defaultPrettyPrinter28._objectIndenter;
        defaultPrettyPrinter6.indentArraysWith(indenter32);
        defaultPrettyPrinter4.indentObjectsWith(indenter32);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter35 = defaultPrettyPrinter4.createInstance();
        org.junit.Assert.assertNotNull(defaultPrettyPrinter2);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter3);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter4);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(indenter29);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter30);
        org.junit.Assert.assertNotNull(serializableString31);
        org.junit.Assert.assertNotNull(indenter32);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter35);
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3400");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext91 = uTF8StreamJsonParser84.getParsingContext();
        java.lang.String str92 = uTF8StreamJsonParser84.getCurrentName();
        // The following exception was thrown during execution in test generation
        try {
            long long93 = uTF8StreamJsonParser84.getLongValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNotNull(jsonStreamContext91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "[Source: hi!; line: 52, column: 1]" + "'", str92, "[Source: hi!; line: 52, column: 1]");
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3216");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        java.lang.String str88 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]\n at [Source: hi!; line: 52, column: 1]");
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonToken jsonToken89 = uTF8StreamJsonParser84.nextToken();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]\n at [Source: hi!; line: 52, column: 1]" + "'", str88, "com.fasterxml.jackson.core.JsonParseException: com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]\n at [Source: hi!; line: 52, column: 1]");
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1392");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream4 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer5 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext3, outputStream4);
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding6 = com.fasterxml.jackson.core.JsonEncoding.UTF16_BE;
        iOContext3.setEncoding(jsonEncoding6);
        java.io.Reader reader9 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec10 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer11 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int13 = charsToNameCanonicalizer11.calcHash("false");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser14 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, (-1954973613), reader9, objectCodec10, charsToNameCanonicalizer11);
        java.lang.String str15 = readerBasedJsonParser14.nextTextValue();
        com.fasterxml.jackson.core.ObjectCodec objectCodec16 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory17 = new com.fasterxml.jackson.core.JsonFactory(objectCodec16);
        java.io.Reader reader18 = null;
        com.fasterxml.jackson.core.JsonParser jsonParser19 = jsonFactory17.createParser(reader18);
        com.fasterxml.jackson.core.Version version20 = jsonFactory17.version();
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler21 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext24 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler21, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream25 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer26 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext24, outputStream25);
        com.fasterxml.jackson.core.ObjectCodec objectCodec28 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler29 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler29, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream33 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer34 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext32, outputStream33);
        uTF8Writer34.flush();
        java.io.Writer writer37 = uTF8Writer34.append('a');
        com.fasterxml.jackson.core.json.WriterBasedJsonGenerator writerBasedJsonGenerator38 = new com.fasterxml.jackson.core.json.WriterBasedJsonGenerator(iOContext24, (-1959034571), objectCodec28, (java.io.Writer) uTF8Writer34);
        uTF8Writer34.flush();
        java.io.Writer writer41 = uTF8Writer34.append('a');
        uTF8Writer34.close();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator43 = jsonFactory17.createJsonGenerator((java.io.Writer) uTF8Writer34);
        int int44 = readerBasedJsonParser14.releaseBuffered((java.io.Writer) uTF8Writer34);
        // The following exception was thrown during execution in test generation
        try {
            short short45 = readerBasedJsonParser14.getShortValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: -1; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + jsonEncoding6 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF16_BE + "'", jsonEncoding6.equals(com.fasterxml.jackson.core.JsonEncoding.UTF16_BE));
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-890082988) + "'", int13 == (-890082988));
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertNotNull(version20);
        org.junit.Assert.assertNotNull(writer37);
        org.junit.Assert.assertNotNull(writer41);
        org.junit.Assert.assertNotNull(jsonGenerator43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3553");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        com.fasterxml.jackson.core.ObjectCodec objectCodec87 = uTF8StreamJsonParser84.getCodec();
        java.lang.String str88 = uTF8StreamJsonParser84.getValueAsString();
        boolean boolean89 = uTF8StreamJsonParser84.isClosed();
        boolean boolean90 = uTF8StreamJsonParser84.getValueAsBoolean();
        boolean boolean92 = uTF8StreamJsonParser84.getValueAsBoolean(true);
        int int93 = uTF8StreamJsonParser84.getTextOffset();
        boolean boolean94 = uTF8StreamJsonParser84.hasCurrentToken();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertNull(objectCodec87);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3191");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        java.lang.String str88 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]\n at [Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.FormatSchema formatSchema89 = null;
        boolean boolean90 = uTF8StreamJsonParser84.canUseSchema(formatSchema89);
        com.fasterxml.jackson.core.Version version91 = uTF8StreamJsonParser84.version();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]\n at [Source: hi!; line: 52, column: 1]" + "'", str88, "com.fasterxml.jackson.core.JsonParseException: com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]\n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(version91);
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3399");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        java.lang.String str88 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]\n at [Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.FormatSchema formatSchema89 = null;
        boolean boolean90 = uTF8StreamJsonParser84.canUseSchema(formatSchema89);
        com.fasterxml.jackson.core.Version version91 = uTF8StreamJsonParser84.version();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]\n at [Source: hi!; line: 52, column: 1]" + "'", str88, "com.fasterxml.jackson.core.JsonParseException: com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]\n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(version91);
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2684");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        mergedStream64.mark((int) (short) 10);
        mergedStream64.reset();
        com.fasterxml.jackson.core.io.SerializedString serializedString69 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int76 = serializedString69.appendQuotedUTF8(byteArray74, 0);
        char[] charArray77 = serializedString69.asQuotedChars();
        byte[] byteArray82 = new byte[] { (byte) 10, (byte) 1, (byte) 0, (byte) 100 };
        int int84 = serializedString69.appendUnquotedUTF8(byteArray82, (int) (short) 10);
        com.fasterxml.jackson.core.io.MergedStream mergedStream87 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray82, (int) ' ', 34);
        com.fasterxml.jackson.core.io.IOContext iOContext88 = null;
        java.io.InputStream inputStream89 = null;
        byte[] byteArray92 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream95 = new com.fasterxml.jackson.core.io.MergedStream(iOContext88, inputStream89, byteArray92, 0, (int) '#');
        int int96 = mergedStream64.read(byteArray92);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[10, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[10, 0]");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 2 + "'", int96 == 2);
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1276");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream4 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer5 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext3, outputStream4);
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding6 = com.fasterxml.jackson.core.JsonEncoding.UTF16_BE;
        iOContext3.setEncoding(jsonEncoding6);
        java.io.Reader reader9 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec10 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer11 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int13 = charsToNameCanonicalizer11.calcHash("false");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser14 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, (-1954973613), reader9, objectCodec10, charsToNameCanonicalizer11);
        int int15 = readerBasedJsonParser14.getTextOffset();
        java.lang.String str16 = readerBasedJsonParser14.getText();
        char[] charArray17 = readerBasedJsonParser14.getTextCharacters();
        readerBasedJsonParser14.overrideCurrentName("\n");
        int int20 = readerBasedJsonParser14.getTextLength();
        com.fasterxml.jackson.core.ObjectCodec objectCodec21 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory22 = new com.fasterxml.jackson.core.JsonFactory(objectCodec21);
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.JsonParser jsonParser24 = jsonFactory22.createParser(reader23);
        com.fasterxml.jackson.core.Version version25 = jsonFactory22.version();
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler26 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext29 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler26, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream30 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer31 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext29, outputStream30);
        com.fasterxml.jackson.core.ObjectCodec objectCodec33 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler34 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext37 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler34, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream38 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer39 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext37, outputStream38);
        uTF8Writer39.flush();
        java.io.Writer writer42 = uTF8Writer39.append('a');
        com.fasterxml.jackson.core.json.WriterBasedJsonGenerator writerBasedJsonGenerator43 = new com.fasterxml.jackson.core.json.WriterBasedJsonGenerator(iOContext29, (-1959034571), objectCodec33, (java.io.Writer) uTF8Writer39);
        uTF8Writer39.flush();
        java.io.Writer writer46 = uTF8Writer39.append('a');
        uTF8Writer39.close();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator48 = jsonFactory22.createJsonGenerator((java.io.Writer) uTF8Writer39);
        int int49 = readerBasedJsonParser14.releaseBuffered((java.io.Writer) uTF8Writer39);
        org.junit.Assert.assertTrue("'" + jsonEncoding6 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF16_BE + "'", jsonEncoding6.equals(com.fasterxml.jackson.core.JsonEncoding.UTF16_BE));
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-325217470) + "'", int13 == (-325217470));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(charArray17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(jsonParser24);
        org.junit.Assert.assertNotNull(version25);
        org.junit.Assert.assertNotNull(writer42);
        org.junit.Assert.assertNotNull(writer46);
        org.junit.Assert.assertNotNull(jsonGenerator48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3571");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        java.lang.String str80 = textBuffer76.toString();
        boolean boolean81 = textBuffer76.hasTextAsCharacters();
        char[] charArray82 = textBuffer76.finishCurrentSegment();
        java.lang.String str83 = textBuffer76.toString();
        textBuffer76.resetWithEmpty();
        textBuffer76.append("com.fasterxml.jackson.core.JsonParseException: hi!\n at [Source: /; line: 0, column: 0]", 0, (int) ' ');
        char[] charArray89 = textBuffer76.finishCurrentSegment();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "a" + "'", str80, "a");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "a" + "'", str83, "a");
        org.junit.Assert.assertNotNull(charArray89);
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3052");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        int int92 = uTF8StreamJsonParser84.getTextLength();
        boolean boolean93 = uTF8StreamJsonParser84.isClosed();
        java.lang.String str94 = uTF8StreamJsonParser84.getText();
        com.fasterxml.jackson.core.JsonToken jsonToken95 = uTF8StreamJsonParser84.getCurrentToken();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNull(str94);
        org.junit.Assert.assertNull(jsonToken95);
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2794");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int27 = serializedString20.appendQuotedUTF8(byteArray25, 0);
        char[] charArray28 = serializedString20.asQuotedChars();
        boolean boolean29 = serializedString1.equals((java.lang.Object) serializedString20);
        char[] charArray36 = new char[] { '#', '#', 'a', 'a', ' ', '#' };
        boolean boolean40 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray36, (int) (byte) -1, 0, true);
        int int42 = serializedString20.appendQuoted(charArray36, (int) '#');
        com.fasterxml.jackson.core.JsonLocation jsonLocation47 = new com.fasterxml.jackson.core.JsonLocation((java.lang.Object) '#', (long) 47, 1L, (int) (byte) 1, (int) (short) 1);
        long long48 = jsonLocation47.getByteOffset();
        long long49 = jsonLocation47.getCharOffset();
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "##aa #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "##aa #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[#, #, a, a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 47L + "'", long48 == 47L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2962");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getValueAsInt();
        int int87 = uTF8StreamJsonParser84.getValueAsInt((int) 'a');
        boolean boolean89 = uTF8StreamJsonParser84.getValueAsBoolean(true);
        double double91 = uTF8StreamJsonParser84.getValueAsDouble((double) 47L);
        boolean boolean92 = uTF8StreamJsonParser84.isClosed();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal93 = uTF8StreamJsonParser84.getDecimalValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 97 + "'", int87 == 97);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 47.0d + "'", double91 == 47.0d);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2562");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 0, (byte) 0 };
        int int17 = serializedString1.appendUnquotedUTF8(byteArray15, (int) (short) -1);
        byte[] byteArray18 = serializedString1.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray25 = new char[] { 'a', ' ', '#', '4' };
        int int27 = serializedString20.appendUnquoted(charArray25, 0);
        java.lang.String str28 = serializedString20.getValue();
        char[] charArray29 = serializedString20.asQuotedChars();
        char[] charArray30 = serializedString20.asQuotedChars();
        // The following exception was thrown during execution in test generation
        try {
            int int32 = serializedString1.appendUnquoted(charArray30, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 1, 10, -1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str28, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2815");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        com.fasterxml.jackson.core.Version version90 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.JsonLocation jsonLocation91 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.Version version92 = uTF8StreamJsonParser84.version();
        // The following exception was thrown during execution in test generation
        try {
            byte byte93 = uTF8StreamJsonParser84.getByteValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(version90);
        org.junit.Assert.assertNotNull(jsonLocation91);
        org.junit.Assert.assertNotNull(version92);
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2540");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        mergedStream64.mark((int) (short) 10);
        mergedStream64.reset();
        com.fasterxml.jackson.core.io.SerializedString serializedString69 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int76 = serializedString69.appendQuotedUTF8(byteArray74, 0);
        char[] charArray77 = serializedString69.asQuotedChars();
        byte[] byteArray82 = new byte[] { (byte) 10, (byte) 1, (byte) 0, (byte) 100 };
        int int84 = serializedString69.appendUnquotedUTF8(byteArray82, (int) (short) 10);
        com.fasterxml.jackson.core.io.MergedStream mergedStream87 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray82, (int) ' ', 34);
        com.fasterxml.jackson.core.ObjectCodec objectCodec89 = null;
        java.io.Writer writer90 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.json.WriterBasedJsonGenerator writerBasedJsonGenerator91 = new com.fasterxml.jackson.core.json.WriterBasedJsonGenerator(iOContext12, (int) '#', objectCodec89, writer90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[10, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1136");
        com.fasterxml.jackson.core.io.IOContext iOContext0 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec1 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory2 = new com.fasterxml.jackson.core.JsonFactory(objectCodec1);
        com.fasterxml.jackson.core.JsonFactory.Feature feature3 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean5 = feature3.enabledIn(3);
        boolean boolean6 = jsonFactory2.isEnabled(feature3);
        com.fasterxml.jackson.core.JsonParser.Feature feature7 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
        com.fasterxml.jackson.core.JsonFactory jsonFactory8 = jsonFactory2.disable(feature7);
        java.io.OutputStream outputStream9 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator10 = jsonFactory2.createGenerator(outputStream9);
        com.fasterxml.jackson.core.io.IOContext iOContext11 = null;
        byte[] byteArray12 = com.fasterxml.jackson.core.io.CharTypes.copyHexBytes();
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper15 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext11, byteArray12, 0, 0);
        com.fasterxml.jackson.core.JsonParser jsonParser18 = jsonFactory2.createJsonParser(byteArray12, 1, (int) (short) 100);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper21 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext0, byteArray12, 1, (int) (byte) 1);
        com.fasterxml.jackson.core.ObjectCodec objectCodec23 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer24 = com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer.createRoot();
        int int25 = bytesToNameCanonicalizer24.hashSeed();
        int int26 = bytesToNameCanonicalizer24.maxCollisionLength();
        int int28 = bytesToNameCanonicalizer24.calcHash((-1959025107));
        bytesToNameCanonicalizer24.release();
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer30 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser jsonParser33 = byteSourceJsonBootstrapper21.constructParser((-51854918), objectCodec23, bytesToNameCanonicalizer24, charsToNameCanonicalizer30, false, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature3.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + feature7 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES + "'", feature7.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES));
        org.junit.Assert.assertNotNull(jsonFactory8);
        org.junit.Assert.assertNotNull(jsonGenerator10);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70]");
        org.junit.Assert.assertNotNull(jsonParser18);
        org.junit.Assert.assertNotNull(bytesToNameCanonicalizer24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1958807255) + "'", int25 == (-1958807255));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 351649 + "'", int28 == 351649);
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3156");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.Version version92 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext93 = uTF8StreamJsonParser84.getParsingContext();
        com.fasterxml.jackson.core.JsonToken jsonToken94 = uTF8StreamJsonParser84.getCurrentToken();
        uTF8StreamJsonParser84.overrideCurrentName("[Source: true; line: 0, column: 100]");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNotNull(version92);
        org.junit.Assert.assertNotNull(jsonStreamContext93);
        org.junit.Assert.assertNull(jsonToken94);
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2597");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int27 = serializedString20.appendQuotedUTF8(byteArray25, 0);
        char[] charArray28 = serializedString20.asQuotedChars();
        boolean boolean29 = serializedString1.equals((java.lang.Object) serializedString20);
        char[] charArray30 = serializedString20.asQuotedChars();
        long long33 = com.fasterxml.jackson.core.io.NumberInput.parseLong(charArray30, 10, 1);
        // The following exception was thrown during execution in test generation
        try {
            int int36 = com.fasterxml.jackson.core.io.NumberInput.parseInt(charArray30, (int) (byte) -1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 73844676736L + "'", long33 == 73844676736L);
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3630");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter24 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter25 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter lf2SpacesIndenter27 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter lf2SpacesIndenter29 = lf2SpacesIndenter27.withLinefeed("[Source: hi!; line: 52, column: 1]");
        defaultPrettyPrinter25.indentObjectsWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) lf2SpacesIndenter27);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter32 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonParseException: ");
        com.fasterxml.jackson.core.SerializableString serializableString33 = null;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter34 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter32, serializableString33);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter35 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter32);
        com.fasterxml.jackson.core.SerializableString serializableString36 = defaultPrettyPrinter35._rootSeparator;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter37 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter25, serializableString36);
        defaultPrettyPrinter25._nesting = 0;
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter24);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter25);
        org.junit.Assert.assertNotNull(lf2SpacesIndenter29);
        org.junit.Assert.assertNotNull(serializableString36);
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1320");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream4 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer5 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext3, outputStream4);
        com.fasterxml.jackson.core.ObjectCodec objectCodec7 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler8 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext11 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler8, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream12 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer13 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext11, outputStream12);
        uTF8Writer13.flush();
        java.io.Writer writer16 = uTF8Writer13.append('a');
        com.fasterxml.jackson.core.json.WriterBasedJsonGenerator writerBasedJsonGenerator17 = new com.fasterxml.jackson.core.json.WriterBasedJsonGenerator(iOContext3, (-1959034571), objectCodec7, (java.io.Writer) uTF8Writer13);
        com.fasterxml.jackson.core.Version version18 = writerBasedJsonGenerator17.version();
        writerBasedJsonGenerator17.writeNumber((float) 10L);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes21 = writerBasedJsonGenerator17.getCharacterEscapes();
        com.fasterxml.jackson.core.ObjectCodec objectCodec22 = writerBasedJsonGenerator17.getCodec();
        writerBasedJsonGenerator17.writeRawValue(" ");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler25 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext28 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler25, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream29 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer30 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext28, outputStream29);
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding31 = com.fasterxml.jackson.core.JsonEncoding.UTF16_BE;
        iOContext28.setEncoding(jsonEncoding31);
        java.io.Reader reader34 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec35 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer36 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int38 = charsToNameCanonicalizer36.calcHash("false");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser39 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext28, (-1954973613), reader34, objectCodec35, charsToNameCanonicalizer36);
        com.fasterxml.jackson.core.Version version40 = readerBasedJsonParser39.version();
        java.lang.String str41 = readerBasedJsonParser39.getText();
        readerBasedJsonParser39.clearCurrentToken();
        com.fasterxml.jackson.core.JsonToken jsonToken43 = readerBasedJsonParser39.nextValue();
        // The following exception was thrown during execution in test generation
        try {
            writerBasedJsonGenerator17.copyCurrentStructure((com.fasterxml.jackson.core.JsonParser) readerBasedJsonParser39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(writer16);
        org.junit.Assert.assertNotNull(version18);
        org.junit.Assert.assertNull(characterEscapes21);
        org.junit.Assert.assertNull(objectCodec22);
        org.junit.Assert.assertTrue("'" + jsonEncoding31 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF16_BE + "'", jsonEncoding31.equals(com.fasterxml.jackson.core.JsonEncoding.UTF16_BE));
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer36);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 241697454 + "'", int38 == 241697454);
        org.junit.Assert.assertNotNull(version40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(jsonToken43);
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3544");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.JsonParser jsonParser90 = uTF8StreamJsonParser84.skipChildren();
        com.fasterxml.jackson.core.Version version91 = uTF8StreamJsonParser84.version();
        boolean boolean92 = uTF8StreamJsonParser84.canReadObjectId();
        long long93 = uTF8StreamJsonParser84.getTokenCharacterOffset();
        // The following exception was thrown during execution in test generation
        try {
            double double94 = uTF8StreamJsonParser84.getDoubleValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonParser90);
        org.junit.Assert.assertNotNull(version91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1340");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream4 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer5 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext3, outputStream4);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer6 = iOContext3.constructTextBuffer();
        int int7 = textBuffer6.getCurrentSegmentSize();
        char[] charArray8 = textBuffer6.emptyAndGetCurrentSegment();
        int int9 = textBuffer6.getCurrentSegmentSize();
        org.junit.Assert.assertNotNull(textBuffer6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3421");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        long long93 = uTF8StreamJsonParser84.getTokenCharacterOffset();
        com.fasterxml.jackson.core.Version version94 = uTF8StreamJsonParser84.version();
        java.lang.String str95 = uTF8StreamJsonParser84.getText();
        com.fasterxml.jackson.core.FormatSchema formatSchema96 = null;
        boolean boolean97 = uTF8StreamJsonParser84.canUseSchema(formatSchema96);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
        org.junit.Assert.assertNotNull(version94);
        org.junit.Assert.assertNull(str95);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3437");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        com.fasterxml.jackson.core.ObjectCodec objectCodec87 = uTF8StreamJsonParser84.getCodec();
        java.lang.String str88 = uTF8StreamJsonParser84.getValueAsString();
        boolean boolean89 = uTF8StreamJsonParser84.isClosed();
        uTF8StreamJsonParser84.overrideCurrentName("com.fasterxml.jackson.core.JsonParseException: com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        java.io.OutputStream outputStream92 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int93 = uTF8StreamJsonParser84.releaseBuffered(outputStream92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertNull(objectCodec87);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2730");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int27 = serializedString20.appendQuotedUTF8(byteArray25, 0);
        char[] charArray28 = serializedString20.asQuotedChars();
        boolean boolean29 = serializedString1.equals((java.lang.Object) serializedString20);
        char[] charArray36 = new char[] { '#', '#', 'a', 'a', ' ', '#' };
        boolean boolean40 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray36, (int) (byte) -1, 0, true);
        int int42 = serializedString20.appendQuoted(charArray36, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal45 = com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(charArray36, 0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: Bad offset or len arguments for char[] input.");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "##aa #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "##aa #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[#, #, a, a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3523");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        java.lang.Object obj89 = uTF8StreamJsonParser84.getObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: ");
        java.lang.String str92 = uTF8StreamJsonParser84.getValueAsString();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger93 = uTF8StreamJsonParser84.getBigIntegerValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNull(obj89);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str91, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNull(str92);
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1457");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonFactory.Feature feature2 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean4 = feature2.enabledIn(3);
        boolean boolean5 = jsonFactory1.isEnabled(feature2);
        com.fasterxml.jackson.core.ObjectCodec objectCodec6 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = new com.fasterxml.jackson.core.JsonFactory(objectCodec6);
        com.fasterxml.jackson.core.JsonFactory.Feature feature8 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean10 = feature8.enabledIn(3);
        boolean boolean11 = jsonFactory7.isEnabled(feature8);
        com.fasterxml.jackson.core.JsonParser.Feature feature12 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
        com.fasterxml.jackson.core.JsonFactory jsonFactory13 = jsonFactory7.disable(feature12);
        com.fasterxml.jackson.core.JsonFactory jsonFactory14 = jsonFactory1.disable(feature12);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes15 = jsonFactory14.getCharacterEscapes();
        com.fasterxml.jackson.core.io.OutputDecorator outputDecorator16 = jsonFactory14.getOutputDecorator();
        java.io.Writer writer17 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator18 = jsonFactory14.createGenerator(writer17);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler19 = jsonFactory14._getBufferRecycler();
        com.fasterxml.jackson.core.JsonFactory jsonFactory20 = jsonFactory14.copy();
        com.fasterxml.jackson.core.JsonParser jsonParser22 = jsonFactory14.createJsonParser("[Source: -1; line: 1, column: 1]");
        java.io.File file23 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding24 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonGenerator jsonGenerator25 = jsonFactory14.createJsonGenerator(file23, jsonEncoding24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature2.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature8.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES + "'", feature12.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES));
        org.junit.Assert.assertNotNull(jsonFactory13);
        org.junit.Assert.assertNotNull(jsonFactory14);
        org.junit.Assert.assertNull(characterEscapes15);
        org.junit.Assert.assertNull(outputDecorator16);
        org.junit.Assert.assertNotNull(jsonGenerator18);
        org.junit.Assert.assertNotNull(bufferRecycler19);
        org.junit.Assert.assertNotNull(jsonFactory20);
        org.junit.Assert.assertNotNull(jsonParser22);
        org.junit.Assert.assertTrue("'" + jsonEncoding24 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding24.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3543");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        java.lang.String str80 = textBuffer76.toString();
        boolean boolean81 = textBuffer76.hasTextAsCharacters();
        char[] charArray82 = textBuffer76.finishCurrentSegment();
        java.lang.String str83 = textBuffer76.toString();
        textBuffer76.resetWithEmpty();
        textBuffer76.append("com.fasterxml.jackson.core.JsonParseException: hi!\n at [Source: /; line: 0, column: 0]", 0, (int) ' ');
        textBuffer76.append("[Source: true; line: 0, column: 100]", 0, (int) (byte) 10);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "a" + "'", str80, "a");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "a" + "'", str83, "a");
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1285");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("hi!");
        com.fasterxml.jackson.core.SerializableString serializableString2 = null;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter1, serializableString2);
        boolean boolean4 = defaultPrettyPrinter3._spacesInObjectEntries;
        int int5 = defaultPrettyPrinter3._nesting;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter6 = defaultPrettyPrinter3.createInstance();
        defaultPrettyPrinter3._spacesInObjectEntries = false;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator9 = null;
        defaultPrettyPrinter3.writeRootValueSeparator(jsonGenerator9);
        com.fasterxml.jackson.core.io.SerializedString serializedString12 = new com.fasterxml.jackson.core.io.SerializedString("\n");
        int int13 = serializedString12.charLength();
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler14 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext17 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler14, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream18 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer19 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext17, outputStream18);
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding20 = com.fasterxml.jackson.core.JsonEncoding.UTF16_BE;
        iOContext17.setEncoding(jsonEncoding20);
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer25 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int27 = charsToNameCanonicalizer25.calcHash("false");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser28 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext17, (-1954973613), reader23, objectCodec24, charsToNameCanonicalizer25);
        java.lang.String str29 = readerBasedJsonParser28.nextTextValue();
        com.fasterxml.jackson.core.util.ByteArrayBuilder byteArrayBuilder30 = readerBasedJsonParser28._getByteArrayBuilder();
        int int31 = serializedString12.writeUnquotedUTF8((java.io.OutputStream) byteArrayBuilder30);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter32 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter3, (com.fasterxml.jackson.core.SerializableString) serializedString12);
        byte[] byteArray33 = serializedString12.asQuotedUTF8();
        java.lang.String str34 = serializedString12.toString();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + jsonEncoding20 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF16_BE + "'", jsonEncoding20.equals(com.fasterxml.jackson.core.JsonEncoding.UTF16_BE));
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 909536610 + "'", int27 == 909536610);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(byteArrayBuilder30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[92, 110]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\n" + "'", str34, "\n");
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1245");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("hi!");
        com.fasterxml.jackson.core.SerializableString serializableString2 = null;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter1, serializableString2);
        boolean boolean4 = defaultPrettyPrinter3._spacesInObjectEntries;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter5 = null;
        defaultPrettyPrinter3._arrayIndenter = indenter5;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter fixedSpaceIndenter7 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter.instance;
        defaultPrettyPrinter3._objectIndenter = fixedSpaceIndenter7;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler9 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler9, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream13 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer14 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext12, outputStream13);
        com.fasterxml.jackson.core.ObjectCodec objectCodec16 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler17 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler17, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream21 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer22 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext20, outputStream21);
        uTF8Writer22.flush();
        java.io.Writer writer25 = uTF8Writer22.append('a');
        com.fasterxml.jackson.core.json.WriterBasedJsonGenerator writerBasedJsonGenerator26 = new com.fasterxml.jackson.core.json.WriterBasedJsonGenerator(iOContext12, (-1959034571), objectCodec16, (java.io.Writer) uTF8Writer22);
        defaultPrettyPrinter3.beforeObjectEntries((com.fasterxml.jackson.core.JsonGenerator) writerBasedJsonGenerator26);
        boolean boolean28 = writerBasedJsonGenerator26.isClosed();
        com.fasterxml.jackson.core.ObjectCodec objectCodec29 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory(objectCodec29);
        java.io.Reader reader31 = null;
        com.fasterxml.jackson.core.JsonParser jsonParser32 = jsonFactory30.createParser(reader31);
        boolean boolean33 = jsonParser32.requiresCustomCodec();
        java.lang.String str34 = jsonParser32.getText();
        int int36 = jsonParser32.nextIntValue(0);
        java.lang.String str37 = jsonParser32.getValueAsString();
        // The following exception was thrown during execution in test generation
        try {
            writerBasedJsonGenerator26.copyCurrentEvent(jsonParser32);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonGenerationException; message: No current event to copy");
        } catch (com.fasterxml.jackson.core.JsonGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(fixedSpaceIndenter7);
        org.junit.Assert.assertNotNull(writer25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(jsonParser32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNull(str37);
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3476");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 0, (byte) 0 };
        int int17 = serializedString1.appendUnquotedUTF8(byteArray15, (int) (short) -1);
        byte[] byteArray18 = serializedString1.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = serializedString20.asUnquotedUTF8();
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext24 = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext((-1), 10);
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext27 = jsonReadContext24.createChildArrayContext((int) (short) 1, 10);
        boolean boolean28 = jsonReadContext27.inArray();
        boolean boolean29 = serializedString20.equals((java.lang.Object) boolean28);
        char[] charArray30 = serializedString20.asQuotedChars();
        int int32 = serializedString1.appendUnquoted(charArray30, 13);
        java.nio.ByteBuffer byteBuffer33 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int34 = serializedString1.putQuotedUTF8(byteBuffer33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 1, 10, -1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonReadContext24);
        org.junit.Assert.assertNotNull(jsonReadContext27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3032");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.Version version92 = uTF8StreamJsonParser84.version();
        int int94 = uTF8StreamJsonParser84.getValueAsInt((int) '#');
        com.fasterxml.jackson.core.FormatSchema formatSchema95 = null;
        boolean boolean96 = uTF8StreamJsonParser84.canUseSchema(formatSchema95);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNotNull(version92);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 35 + "'", int94 == 35);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3308");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        char[] charArray92 = uTF8StreamJsonParser84.getTextCharacters();
        java.lang.String str93 = uTF8StreamJsonParser84.getValueAsString();
        // The following exception was thrown during execution in test generation
        try {
            short short94 = uTF8StreamJsonParser84.getShortValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertNull(charArray92);
        org.junit.Assert.assertNull(str93);
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3077");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        int int93 = uTF8StreamJsonParser84.getValueAsInt();
        long long95 = uTF8StreamJsonParser84.getValueAsLong((long) 47);
        // The following exception was thrown during execution in test generation
        try {
            uTF8StreamJsonParser84.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 47L + "'", long95 == 47L);
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1269");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("hi!");
        com.fasterxml.jackson.core.SerializableString serializableString2 = null;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter1, serializableString2);
        boolean boolean4 = defaultPrettyPrinter1._spacesInObjectEntries;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler5 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext8 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler5, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream9 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer10 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext8, outputStream9);
        com.fasterxml.jackson.core.ObjectCodec objectCodec12 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler13 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext16 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler13, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream17 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer18 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext16, outputStream17);
        uTF8Writer18.flush();
        java.io.Writer writer21 = uTF8Writer18.append('a');
        com.fasterxml.jackson.core.json.WriterBasedJsonGenerator writerBasedJsonGenerator22 = new com.fasterxml.jackson.core.json.WriterBasedJsonGenerator(iOContext8, (-1959034571), objectCodec12, (java.io.Writer) uTF8Writer18);
        com.fasterxml.jackson.core.JsonGenerator.Feature feature23 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
        boolean boolean24 = writerBasedJsonGenerator22.isEnabled(feature23);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes25 = writerBasedJsonGenerator22.getCharacterEscapes();
        writerBasedJsonGenerator22.flush();
        com.fasterxml.jackson.core.Version version27 = writerBasedJsonGenerator22.version();
        defaultPrettyPrinter1.writeArrayValueSeparator((com.fasterxml.jackson.core.JsonGenerator) writerBasedJsonGenerator22);
        boolean boolean29 = writerBasedJsonGenerator22.isClosed();
        com.fasterxml.jackson.core.io.SerializedString serializedString31 = new com.fasterxml.jackson.core.io.SerializedString("true");
        char[] charArray32 = serializedString31.asQuotedChars();
        // The following exception was thrown during execution in test generation
        try {
            writerBasedJsonGenerator22.writeRawValue(charArray32, (-1955040021), (-1954973613));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(writer21);
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT + "'", feature23.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(characterEscapes25);
        org.junit.Assert.assertNotNull(version27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "true");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "true");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[t, r, u, e]");
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3264");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        int int89 = uTF8StreamJsonParser84.getTextOffset();
        double double91 = uTF8StreamJsonParser84.getValueAsDouble((double) 10.0f);
        com.fasterxml.jackson.core.JsonLocation jsonLocation92 = uTF8StreamJsonParser84.getCurrentLocation();
        boolean boolean93 = uTF8StreamJsonParser84.canReadObjectId();
        int int94 = uTF8StreamJsonParser84.getFeatureMask();
        int int95 = uTF8StreamJsonParser84.getTextLength();
        int int97 = uTF8StreamJsonParser84.getValueAsInt(47);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 10.0d + "'", double91 == 10.0d);
        org.junit.Assert.assertNotNull(jsonLocation92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 47 + "'", int97 == 47);
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3301");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        double double93 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) 10);
        com.fasterxml.jackson.core.ObjectCodec objectCodec94 = null;
        uTF8StreamJsonParser84.setCodec(objectCodec94);
        uTF8StreamJsonParser84.overrideCurrentName("");
        boolean boolean98 = uTF8StreamJsonParser84.hasTextCharacters();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 10.0d + "'", double93 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2867");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int27 = serializedString20.appendQuotedUTF8(byteArray25, 0);
        char[] charArray28 = serializedString20.asQuotedChars();
        boolean boolean29 = serializedString1.equals((java.lang.Object) serializedString20);
        char[] charArray36 = new char[] { '#', '#', 'a', 'a', ' ', '#' };
        boolean boolean40 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray36, (int) (byte) -1, 0, true);
        int int42 = serializedString20.appendQuoted(charArray36, (int) '#');
        java.nio.ByteBuffer byteBuffer43 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int44 = serializedString20.putQuotedUTF8(byteBuffer43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "##aa #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "##aa #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[#, #, a, a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2583");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int27 = serializedString20.appendQuotedUTF8(byteArray25, 0);
        char[] charArray28 = serializedString20.asQuotedChars();
        boolean boolean29 = serializedString1.equals((java.lang.Object) serializedString20);
        char[] charArray36 = new char[] { '#', '#', 'a', 'a', ' ', '#' };
        boolean boolean40 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray36, (int) (byte) -1, 0, true);
        int int42 = serializedString20.appendQuoted(charArray36, (int) '#');
        com.fasterxml.jackson.core.JsonLocation jsonLocation47 = new com.fasterxml.jackson.core.JsonLocation((java.lang.Object) '#', (long) 47, 1L, (int) (byte) 1, (int) (short) 1);
        java.lang.String str48 = jsonLocation47.toString();
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "##aa #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "##aa #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[#, #, a, a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[Source: #; line: 1, column: 1]" + "'", str48, "[Source: #; line: 1, column: 1]");
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2979");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        java.lang.String str80 = textBuffer76.toString();
        boolean boolean81 = textBuffer76.hasTextAsCharacters();
        char[] charArray82 = textBuffer76.finishCurrentSegment();
        // The following exception was thrown during execution in test generation
        try {
            double double83 = textBuffer76.contentsAsDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"a\"");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "a" + "'", str80, "a");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(charArray82);
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3599");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        java.lang.String str89 = uTF8StreamJsonParser84.getCurrentName();
        boolean boolean90 = uTF8StreamJsonParser84.getValueAsBoolean();
        int int91 = uTF8StreamJsonParser84.getTokenLineNr();
        // The following exception was thrown during execution in test generation
        try {
            float float92 = uTF8StreamJsonParser84.getFloatValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "[Source: hi!; line: 52, column: 1]" + "'", str89, "[Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2904");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int27 = serializedString20.appendQuotedUTF8(byteArray25, 0);
        char[] charArray28 = serializedString20.asQuotedChars();
        boolean boolean29 = serializedString1.equals((java.lang.Object) serializedString20);
        char[] charArray30 = serializedString1.asQuotedChars();
        byte[] byteArray31 = serializedString1.asUnquotedUTF8();
        java.lang.Class<?> wildcardClass32 = byteArray31.getClass();
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3215");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        java.lang.String str80 = textBuffer76.toString();
        boolean boolean81 = textBuffer76.hasTextAsCharacters();
        char[] charArray82 = textBuffer76.finishCurrentSegment();
        java.lang.String str83 = textBuffer76.toString();
        textBuffer76.resetWithEmpty();
        textBuffer76.releaseBuffers();
        int int86 = textBuffer76.size();
        textBuffer76.releaseBuffers();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "a" + "'", str80, "a");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "a" + "'", str83, "a");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1287");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler1 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext4 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler1, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream5 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer6 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext4, outputStream5);
        com.fasterxml.jackson.core.ObjectCodec objectCodec8 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler9 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler9, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream13 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer14 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext12, outputStream13);
        uTF8Writer14.flush();
        java.io.Writer writer17 = uTF8Writer14.append('a');
        com.fasterxml.jackson.core.json.WriterBasedJsonGenerator writerBasedJsonGenerator18 = new com.fasterxml.jackson.core.json.WriterBasedJsonGenerator(iOContext4, (-1959034571), objectCodec8, (java.io.Writer) uTF8Writer14);
        com.fasterxml.jackson.core.Version version19 = writerBasedJsonGenerator18.version();
        writerBasedJsonGenerator18.writeNumber((float) 10L);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes22 = writerBasedJsonGenerator18.getCharacterEscapes();
        com.fasterxml.jackson.core.ObjectCodec objectCodec23 = writerBasedJsonGenerator18.getCodec();
        defaultPrettyPrinter0.writeStartArray((com.fasterxml.jackson.core.JsonGenerator) writerBasedJsonGenerator18);
        com.fasterxml.jackson.core.io.SerializedString serializedString26 = new com.fasterxml.jackson.core.io.SerializedString("\n");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.util.TextBuffer textBuffer28 = new com.fasterxml.jackson.core.util.TextBuffer(bufferRecycler27);
        textBuffer28.append(' ');
        textBuffer28.resetWithString("hi!");
        char[] charArray33 = textBuffer28.finishCurrentSegment();
        int int35 = serializedString26.appendUnquoted(charArray33, 0);
        java.lang.String str36 = serializedString26.getValue();
        byte[] byteArray37 = serializedString26.asQuotedUTF8();
        java.lang.String str38 = serializedString26.getValue();
        writerBasedJsonGenerator18.writeString((com.fasterxml.jackson.core.SerializableString) serializedString26);
        // The following exception was thrown during execution in test generation
        try {
            writerBasedJsonGenerator18.writeEndObject();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonGenerationException; message: Current context not an object but ROOT");
        } catch (com.fasterxml.jackson.core.JsonGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(writer17);
        org.junit.Assert.assertNotNull(version19);
        org.junit.Assert.assertNull(characterEscapes22);
        org.junit.Assert.assertNull(objectCodec23);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\n" + "'", str36, "\n");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[92, 110]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\n" + "'", str38, "\n");
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3055");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        com.fasterxml.jackson.core.io.SerializedString serializedString81 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray86 = new char[] { 'a', ' ', '#', '4' };
        int int88 = serializedString81.appendUnquoted(charArray86, 0);
        textBuffer76.resetWithShared(charArray86, 97, 97);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertNotNull(charArray86);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray86), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray86), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray86), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1413");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonFactory.Feature feature2 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean4 = feature2.enabledIn(3);
        boolean boolean5 = jsonFactory1.isEnabled(feature2);
        com.fasterxml.jackson.core.ObjectCodec objectCodec6 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = new com.fasterxml.jackson.core.JsonFactory(objectCodec6);
        com.fasterxml.jackson.core.JsonFactory.Feature feature8 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean10 = feature8.enabledIn(3);
        boolean boolean11 = jsonFactory7.isEnabled(feature8);
        com.fasterxml.jackson.core.JsonParser.Feature feature12 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
        com.fasterxml.jackson.core.JsonFactory jsonFactory13 = jsonFactory7.disable(feature12);
        com.fasterxml.jackson.core.JsonFactory jsonFactory14 = jsonFactory1.disable(feature12);
        com.fasterxml.jackson.core.JsonFactory.Feature feature15 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        com.fasterxml.jackson.core.JsonLocation jsonLocation20 = new com.fasterxml.jackson.core.JsonLocation((java.lang.Object) feature15, 0L, (long) (byte) 1, 10, (int) (short) -1);
        com.fasterxml.jackson.core.JsonFactory jsonFactory22 = jsonFactory14.configure(feature15, true);
        byte[] byteArray23 = null;
        com.fasterxml.jackson.core.JsonParser jsonParser26 = jsonFactory22.createParser(byteArray23, (-1111897306), 0);
        com.fasterxml.jackson.core.JsonGenerator.Feature feature27 = com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
        int int28 = feature27.getMask();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = jsonFactory22.configure(feature27, false);
        com.fasterxml.jackson.core.JsonParser jsonParser32 = jsonFactory22.createJsonParser("]");
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature2.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature8.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES + "'", feature12.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES));
        org.junit.Assert.assertNotNull(jsonFactory13);
        org.junit.Assert.assertNotNull(jsonFactory14);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature15.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertNotNull(jsonFactory22);
        org.junit.Assert.assertNotNull(jsonParser26);
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS + "'", feature27.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 16 + "'", int28 == 16);
        org.junit.Assert.assertNotNull(jsonFactory30);
        org.junit.Assert.assertNotNull(jsonParser32);
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3341");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.ObjectCodec objectCodec92 = uTF8StreamJsonParser84.getCodec();
        // The following exception was thrown during execution in test generation
        try {
            long long94 = uTF8StreamJsonParser84.nextLongValue(52L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNull(objectCodec92);
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2980");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        long long93 = uTF8StreamJsonParser84.getTokenCharacterOffset();
        double double94 = uTF8StreamJsonParser84.getValueAsDouble();
        int int95 = uTF8StreamJsonParser84.getTextLength();
        com.fasterxml.jackson.core.JsonToken jsonToken96 = uTF8StreamJsonParser84.getLastClearedToken();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertNull(jsonToken96);
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3235");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        java.lang.Object obj88 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int89 = uTF8StreamJsonParser84.getTokenColumnNr();
        java.lang.Object obj90 = uTF8StreamJsonParser84.getTypeId();
        java.lang.Object obj91 = uTF8StreamJsonParser84.getInputSource();
        com.fasterxml.jackson.core.Base64Variant base64Variant92 = null;
        java.io.OutputStream outputStream93 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int94 = uTF8StreamJsonParser84.readBinaryValue(base64Variant92, outputStream93);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(obj88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertNull(obj91);
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3374");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        double double93 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) 10);
        boolean boolean94 = uTF8StreamJsonParser84.canReadObjectId();
        long long96 = uTF8StreamJsonParser84.getValueAsLong((long) 47);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 10.0d + "'", double93 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 47L + "'", long96 == 47L);
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3387");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getValueAsInt();
        int int87 = uTF8StreamJsonParser84.getValueAsInt((int) 'a');
        boolean boolean89 = uTF8StreamJsonParser84.getValueAsBoolean(true);
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext90 = uTF8StreamJsonParser84.getParsingContext();
        com.fasterxml.jackson.core.JsonToken jsonToken91 = uTF8StreamJsonParser84.getCurrentToken();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean92 = uTF8StreamJsonParser84.getBooleanValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not of boolean type? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 97 + "'", int87 == 97);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(jsonStreamContext90);
        org.junit.Assert.assertNull(jsonToken91);
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3288");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.ObjectCodec objectCodec92 = uTF8StreamJsonParser84.getCodec();
        // The following exception was thrown during execution in test generation
        try {
            int int94 = uTF8StreamJsonParser84.nextIntValue(10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNull(objectCodec92);
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3601");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        mergedStream64.mark((int) (short) 10);
        mergedStream64.reset();
        com.fasterxml.jackson.core.io.SerializedString serializedString69 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int76 = serializedString69.appendQuotedUTF8(byteArray74, 0);
        char[] charArray77 = serializedString69.asQuotedChars();
        byte[] byteArray82 = new byte[] { (byte) 10, (byte) 1, (byte) 0, (byte) 100 };
        int int84 = serializedString69.appendUnquotedUTF8(byteArray82, (int) (short) 10);
        com.fasterxml.jackson.core.io.MergedStream mergedStream87 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray82, (int) ' ', 34);
        boolean boolean88 = iOContext12.isResourceManaged();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray89 = iOContext12.allocWriteEncodingBuffer();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[10, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3653");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        com.fasterxml.jackson.core.Version version90 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.JsonLocation jsonLocation91 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.Version version92 = uTF8StreamJsonParser84.version();
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        double double95 = uTF8StreamJsonParser84.getValueAsDouble();
        java.lang.String str96 = uTF8StreamJsonParser84.getCurrentName();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(version90);
        org.junit.Assert.assertNotNull(jsonLocation91);
        org.junit.Assert.assertNotNull(version92);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "[Source: hi!; line: 52, column: 1]" + "'", str96, "[Source: hi!; line: 52, column: 1]");
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3623");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        java.lang.String str88 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]\n at [Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.JsonLocation jsonLocation89 = uTF8StreamJsonParser84.getCurrentLocation();
        long long90 = jsonLocation89.getCharOffset();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]\n at [Source: hi!; line: 52, column: 1]" + "'", str88, "com.fasterxml.jackson.core.JsonParseException: com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]\n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNotNull(jsonLocation89);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + (-2L) + "'", long90 == (-2L));
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3360");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray16 = new char[] { 'a', ' ', '#', '4' };
        int int18 = serializedString11.appendUnquoted(charArray16, 0);
        boolean boolean19 = serializedString2.equals((java.lang.Object) serializedString11);
        com.fasterxml.jackson.core.io.SerializedString serializedString21 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int28 = serializedString21.appendQuotedUTF8(byteArray26, 0);
        char[] charArray29 = serializedString21.asQuotedChars();
        boolean boolean30 = serializedString2.equals((java.lang.Object) serializedString21);
        char[] charArray37 = new char[] { '#', '#', 'a', 'a', ' ', '#' };
        boolean boolean41 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray37, (int) (byte) -1, 0, true);
        int int43 = serializedString21.appendQuoted(charArray37, (int) '#');
        com.fasterxml.jackson.core.io.IOContext iOContext45 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) '#', true);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray46 = iOContext45.allocTokenBuffer();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "##aa #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "##aa #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[#, #, a, a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3078");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        double double93 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) 10);
        com.fasterxml.jackson.core.ObjectCodec objectCodec94 = null;
        uTF8StreamJsonParser84.setCodec(objectCodec94);
        uTF8StreamJsonParser84.overrideCurrentName("");
        char[] charArray98 = uTF8StreamJsonParser84.getTextCharacters();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 10.0d + "'", double93 == 10.0d);
        org.junit.Assert.assertNull(charArray98);
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3276");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int27 = serializedString20.appendQuotedUTF8(byteArray25, 0);
        char[] charArray28 = serializedString20.asQuotedChars();
        boolean boolean29 = serializedString1.equals((java.lang.Object) serializedString20);
        char[] charArray30 = serializedString20.asQuotedChars();
        // The following exception was thrown during execution in test generation
        try {
            long long33 = com.fasterxml.jackson.core.io.NumberInput.parseLong(charArray30, (-1), 35);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3054");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 0, (byte) 0 };
        int int17 = serializedString1.appendUnquotedUTF8(byteArray15, (int) (short) -1);
        com.fasterxml.jackson.core.io.SerializedString serializedString19 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int26 = serializedString19.appendQuotedUTF8(byteArray24, 0);
        char[] charArray27 = serializedString19.asQuotedChars();
        int int28 = serializedString19.charLength();
        char[] charArray29 = serializedString19.asQuotedChars();
        int int31 = serializedString1.appendUnquoted(charArray29, (int) (short) 10);
        byte[] byteArray32 = serializedString1.asUnquotedUTF8();
        java.lang.String str33 = serializedString1.getValue();
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 1, 10, -1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 47 + "'", int28 == 47);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str33, "com.fasterxml.jackson.core.JsonParseException: ");
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2602");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler16 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString18 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray23 = new char[] { 'a', ' ', '#', '4' };
        int int25 = serializedString18.appendUnquoted(charArray23, 0);
        java.lang.String str26 = serializedString18.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext28 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler16, (java.lang.Object) serializedString18, false);
        byte[] byteArray29 = null;
        iOContext28.releaseReadIOBuffer(byteArray29);
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray37 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int39 = serializedString32.appendQuotedUTF8(byteArray37, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper42 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext28, byteArray37, 1, (int) (short) 1);
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding43 = byteSourceJsonBootstrapper42.detectEncoding();
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding44 = byteSourceJsonBootstrapper42.detectEncoding();
        java.io.Reader reader45 = byteSourceJsonBootstrapper42.constructReader();
        com.fasterxml.jackson.core.ObjectCodec objectCodec46 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer47 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser48 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext12, (int) (short) 1, reader45, objectCodec46, charsToNameCanonicalizer47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str26, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + jsonEncoding43 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding43.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertTrue("'" + jsonEncoding44 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding44.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(reader45);
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3011");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 0, (byte) 0 };
        int int17 = serializedString1.appendUnquotedUTF8(byteArray15, (int) (short) -1);
        byte[] byteArray18 = serializedString1.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = serializedString20.asUnquotedUTF8();
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext24 = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext((-1), 10);
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext27 = jsonReadContext24.createChildArrayContext((int) (short) 1, 10);
        boolean boolean28 = jsonReadContext27.inArray();
        boolean boolean29 = serializedString20.equals((java.lang.Object) boolean28);
        char[] charArray30 = serializedString20.asQuotedChars();
        int int32 = serializedString1.appendUnquoted(charArray30, 13);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter33 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 1, 10, -1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonReadContext24);
        org.junit.Assert.assertNotNull(jsonReadContext27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3483");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext89 = uTF8StreamJsonParser84.getParsingContext();
        com.fasterxml.jackson.core.JsonParser jsonParser91 = uTF8StreamJsonParser84.setFeatureMask(10);
        int int92 = uTF8StreamJsonParser84.getTokenColumnNr();
        boolean boolean93 = uTF8StreamJsonParser84.hasCurrentToken();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str94 = uTF8StreamJsonParser84.nextTextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNotNull(jsonStreamContext89);
        org.junit.Assert.assertNotNull(jsonParser91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3284");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.JsonParser jsonParser90 = uTF8StreamJsonParser84.skipChildren();
        com.fasterxml.jackson.core.Version version91 = uTF8StreamJsonParser84.version();
        java.lang.Object obj92 = uTF8StreamJsonParser84.getObjectId();
        java.lang.String str93 = uTF8StreamJsonParser84.getValueAsString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number94 = uTF8StreamJsonParser84.getNumberValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonParser90);
        org.junit.Assert.assertNotNull(version91);
        org.junit.Assert.assertNull(obj92);
        org.junit.Assert.assertNull(str93);
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3189");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        java.lang.String str80 = textBuffer76.toString();
        boolean boolean81 = textBuffer76.hasTextAsCharacters();
        char[] charArray82 = textBuffer76.contentsAsArray();
        textBuffer76.setCurrentLength((int) 'a');
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "a" + "'", str80, "a");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray82), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray82), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray82), "[a]");
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3027");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter24 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter25 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter lf2SpacesIndenter27 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter lf2SpacesIndenter29 = lf2SpacesIndenter27.withLinefeed("[Source: hi!; line: 52, column: 1]");
        defaultPrettyPrinter25.indentObjectsWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) lf2SpacesIndenter27);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter lf2SpacesIndenter32 = lf2SpacesIndenter27.withLinefeed("");
        boolean boolean33 = lf2SpacesIndenter32.isInline();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator34 = null;
        // The following exception was thrown during execution in test generation
        try {
            lf2SpacesIndenter32.writeIndentation(jsonGenerator34, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter24);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter25);
        org.junit.Assert.assertNotNull(lf2SpacesIndenter29);
        org.junit.Assert.assertNotNull(lf2SpacesIndenter32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3087");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext89 = uTF8StreamJsonParser84.getParsingContext();
        com.fasterxml.jackson.core.JsonParser jsonParser91 = uTF8StreamJsonParser84.setFeatureMask(10);
        int int92 = uTF8StreamJsonParser84.getFeatureMask();
        java.lang.String str94 = uTF8StreamJsonParser84.getValueAsString("a");
        // The following exception was thrown during execution in test generation
        try {
            long long96 = uTF8StreamJsonParser84.nextLongValue((long) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNotNull(jsonStreamContext89);
        org.junit.Assert.assertNotNull(jsonParser91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 10 + "'", int92 == 10);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "a" + "'", str94, "a");
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1009");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("\n");
        java.lang.String str2 = serializedString1.toString();
        int int3 = serializedString1.charLength();
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler4 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler4, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream8 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer9 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext7, outputStream8);
        byte[] byteArray10 = iOContext7.allocReadIOBuffer();
        int int12 = serializedString1.appendQuotedUTF8(byteArray10, 3);
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext13 = null;
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext17 = new com.fasterxml.jackson.core.json.JsonReadContext(jsonReadContext13, 0, 1000, (int) (short) 10);
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext20 = jsonReadContext17.createChildObjectContext(0, (int) 'a');
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext21 = jsonReadContext17.getParent();
        java.lang.String str22 = jsonReadContext17.toString();
        boolean boolean23 = serializedString1.equals((java.lang.Object) jsonReadContext17);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter25 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("hi!");
        com.fasterxml.jackson.core.SerializableString serializableString26 = defaultPrettyPrinter25._rootSeparator;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.util.TextBuffer textBuffer28 = new com.fasterxml.jackson.core.util.TextBuffer(bufferRecycler27);
        char[] charArray29 = com.fasterxml.jackson.core.util.TextBuffer.NO_CHARS;
        textBuffer28.resetWithShared(charArray29, 2000, 2000);
        int int34 = serializableString26.appendUnquoted(charArray29, 0);
        int int36 = serializedString1.appendUnquoted(charArray29, (int) (short) 100);
        char[] charArray37 = serializedString1.asQuotedChars();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(jsonReadContext20);
        org.junit.Assert.assertNull(jsonStreamContext21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "/" + "'", str22, "/");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(serializableString26);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "\\n");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "\\n");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[\\, n]");
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1465");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonFactory.Feature feature2 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean4 = feature2.enabledIn(3);
        boolean boolean5 = jsonFactory1.isEnabled(feature2);
        com.fasterxml.jackson.core.ObjectCodec objectCodec6 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = new com.fasterxml.jackson.core.JsonFactory(objectCodec6);
        com.fasterxml.jackson.core.JsonFactory.Feature feature8 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean10 = feature8.enabledIn(3);
        boolean boolean11 = jsonFactory7.isEnabled(feature8);
        com.fasterxml.jackson.core.JsonParser.Feature feature12 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
        com.fasterxml.jackson.core.JsonFactory jsonFactory13 = jsonFactory7.disable(feature12);
        com.fasterxml.jackson.core.JsonFactory jsonFactory14 = jsonFactory1.disable(feature12);
        java.lang.String str15 = jsonFactory1.getFormatName();
        com.fasterxml.jackson.core.JsonFactory jsonFactory17 = jsonFactory1.setRootValueSeparator("/");
        com.fasterxml.jackson.core.JsonFactory.Feature feature18 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        com.fasterxml.jackson.core.JsonFactory jsonFactory19 = jsonFactory1.disable(feature18);
        com.fasterxml.jackson.core.JsonParser jsonParser21 = jsonFactory19.createParser("com.fasterxml.jackson.core.JsonParseException: \n\n at [Source: CANONICALIZE_FIELD_NAMES; line: 10, column: 100]");
        java.io.File file22 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser jsonParser23 = jsonFactory19.createJsonParser(file22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature2.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature8.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES + "'", feature12.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES));
        org.junit.Assert.assertNotNull(jsonFactory13);
        org.junit.Assert.assertNotNull(jsonFactory14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "JSON" + "'", str15, "JSON");
        org.junit.Assert.assertNotNull(jsonFactory17);
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature18.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertNotNull(jsonFactory19);
        org.junit.Assert.assertNotNull(jsonParser21);
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3226");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext89 = uTF8StreamJsonParser84.getParsingContext();
        com.fasterxml.jackson.core.JsonParser jsonParser91 = uTF8StreamJsonParser84.setFeatureMask(97);
        com.fasterxml.jackson.core.JsonParser jsonParser93 = jsonParser91.setFeatureMask(35);
        // The following exception was thrown during execution in test generation
        try {
            float float94 = jsonParser91.getFloatValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNotNull(jsonStreamContext89);
        org.junit.Assert.assertNotNull(jsonParser91);
        org.junit.Assert.assertNotNull(jsonParser93);
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3247");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int27 = serializedString20.appendQuotedUTF8(byteArray25, 0);
        char[] charArray28 = serializedString20.asQuotedChars();
        boolean boolean29 = serializedString1.equals((java.lang.Object) serializedString20);
        char[] charArray36 = new char[] { '#', '#', 'a', 'a', ' ', '#' };
        boolean boolean40 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray36, (int) (byte) -1, 0, true);
        int int42 = serializedString20.appendQuoted(charArray36, (int) '#');
        com.fasterxml.jackson.core.JsonLocation jsonLocation47 = new com.fasterxml.jackson.core.JsonLocation((java.lang.Object) serializedString20, (long) (byte) 1, (long) (short) 100, 10, (int) (byte) 100);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "##aa #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "##aa #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[#, #, a, a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2929");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        java.lang.String str80 = textBuffer76.toString();
        boolean boolean81 = textBuffer76.hasTextAsCharacters();
        char[] charArray82 = textBuffer76.contentsAsArray();
        textBuffer76.resetWithEmpty();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "a" + "'", str80, "a");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray82), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray82), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray82), "[a]");
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3337");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getValueAsInt();
        int int87 = uTF8StreamJsonParser84.getValueAsInt((int) 'a');
        java.lang.String str89 = uTF8StreamJsonParser84.getValueAsString("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.util.ByteArrayBuilder byteArrayBuilder90 = uTF8StreamJsonParser84._getByteArrayBuilder();
        com.fasterxml.jackson.core.JsonToken jsonToken91 = uTF8StreamJsonParser84.getLastClearedToken();
        // The following exception was thrown during execution in test generation
        try {
            int int93 = uTF8StreamJsonParser84.nextIntValue((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 97 + "'", int87 == 97);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "[Source: hi!; line: 52, column: 1]" + "'", str89, "[Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNotNull(byteArrayBuilder90);
        org.junit.Assert.assertNull(jsonToken91);
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3315");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        long long93 = uTF8StreamJsonParser84.getTokenCharacterOffset();
        com.fasterxml.jackson.core.Version version94 = uTF8StreamJsonParser84.version();
        java.lang.String str95 = uTF8StreamJsonParser84.getText();
        long long96 = uTF8StreamJsonParser84.getTokenCharacterOffset();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
        org.junit.Assert.assertNotNull(version94);
        org.junit.Assert.assertNull(str95);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 0L + "'", long96 == 0L);
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3445");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getValueAsInt();
        int int87 = uTF8StreamJsonParser84.getValueAsInt((int) 'a');
        com.fasterxml.jackson.core.Version version88 = uTF8StreamJsonParser84.version();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble(47.0d);
        boolean boolean91 = uTF8StreamJsonParser84.hasTextCharacters();
        com.fasterxml.jackson.core.JsonParser.Feature feature92 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser jsonParser94 = uTF8StreamJsonParser84.configure(feature92, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 97 + "'", int87 == 97);
        org.junit.Assert.assertNotNull(version88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 47.0d + "'", double90 == 47.0d);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3170");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        boolean boolean89 = uTF8StreamJsonParser84.hasTextCharacters();
        java.lang.String str90 = uTF8StreamJsonParser84.getValueAsString();
        boolean boolean91 = uTF8StreamJsonParser84.hasCurrentToken();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number92 = uTF8StreamJsonParser84.getNumberValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3240");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        boolean boolean89 = uTF8StreamJsonParser84.hasTextCharacters();
        boolean boolean90 = uTF8StreamJsonParser84.isClosed();
        int int92 = uTF8StreamJsonParser84.getValueAsInt(47);
        // The following exception was thrown during execution in test generation
        try {
            float float93 = uTF8StreamJsonParser84.getFloatValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 47 + "'", int92 == 47);
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1449");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonFactory.Feature feature2 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean4 = feature2.enabledIn(3);
        boolean boolean5 = jsonFactory1.isEnabled(feature2);
        com.fasterxml.jackson.core.JsonParser.Feature feature6 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = jsonFactory1.disable(feature6);
        java.io.OutputStream outputStream8 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator9 = jsonFactory1.createGenerator(outputStream8);
        com.fasterxml.jackson.core.io.IOContext iOContext10 = null;
        byte[] byteArray11 = com.fasterxml.jackson.core.io.CharTypes.copyHexBytes();
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper14 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext10, byteArray11, 0, 0);
        com.fasterxml.jackson.core.JsonParser jsonParser17 = jsonFactory1.createJsonParser(byteArray11, 1, (int) (short) 100);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter19 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("hi!");
        com.fasterxml.jackson.core.SerializableString serializableString20 = defaultPrettyPrinter19._rootSeparator;
        byte[] byteArray27 = new byte[] { (byte) -1, (byte) 0, (byte) -1, (byte) 1, (byte) 1, (byte) 1 };
        int int29 = serializableString20.appendQuotedUTF8(byteArray27, (int) (byte) 100);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory1.createJsonParser(byteArray27);
        java.lang.String str31 = jsonParser30.getValueAsString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str32 = jsonParser30.nextTextValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Unrecognized token 'y???a?': was expecting ? at [Source: [B@5fbf2507; line: 1, column: 7]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature2.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + feature6 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES + "'", feature6.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES));
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertNotNull(jsonGenerator9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70]");
        org.junit.Assert.assertNotNull(jsonParser17);
        org.junit.Assert.assertNotNull(serializableString20);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1, 0, -1, 1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNull(str31);
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3559");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        int int89 = uTF8StreamJsonParser84.getTextOffset();
        double double91 = uTF8StreamJsonParser84.getValueAsDouble((double) 10.0f);
        com.fasterxml.jackson.core.JsonLocation jsonLocation92 = uTF8StreamJsonParser84.getCurrentLocation();
        long long93 = uTF8StreamJsonParser84.getValueAsLong();
        com.fasterxml.jackson.core.JsonLocation jsonLocation94 = uTF8StreamJsonParser84.getTokenLocation();
        java.io.Writer writer95 = null;
        int int96 = uTF8StreamJsonParser84.releaseBuffered(writer95);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 10.0d + "'", double91 == 10.0d);
        org.junit.Assert.assertNotNull(jsonLocation92);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
        org.junit.Assert.assertNotNull(jsonLocation94);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3203");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        int int89 = uTF8StreamJsonParser84.getTextOffset();
        double double91 = uTF8StreamJsonParser84.getValueAsDouble((double) 10.0f);
        com.fasterxml.jackson.core.JsonLocation jsonLocation92 = uTF8StreamJsonParser84.getCurrentLocation();
        long long93 = uTF8StreamJsonParser84.getValueAsLong();
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext94 = uTF8StreamJsonParser84.getParsingContext();
        double double96 = uTF8StreamJsonParser84.getValueAsDouble((double) 100L);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 10.0d + "'", double91 == 10.0d);
        org.junit.Assert.assertNotNull(jsonLocation92);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
        org.junit.Assert.assertNotNull(jsonReadContext94);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 100.0d + "'", double96 == 100.0d);
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2863");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = defaultPrettyPrinter1._withSpaces(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter5 = defaultPrettyPrinter1._withSpaces(false);
        com.fasterxml.jackson.core.io.SerializedString serializedString7 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray12 = new char[] { 'a', ' ', '#', '4' };
        int int14 = serializedString7.appendUnquoted(charArray12, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray21 = new char[] { 'a', ' ', '#', '4' };
        int int23 = serializedString16.appendUnquoted(charArray21, 0);
        boolean boolean24 = serializedString7.equals((java.lang.Object) serializedString16);
        char[] charArray25 = serializedString7.asQuotedChars();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter26 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter1, (com.fasterxml.jackson.core.SerializableString) serializedString7);
        defaultPrettyPrinter26.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter29 = defaultPrettyPrinter26._objectIndenter;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator30 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter26.writeStartObject(jsonGenerator30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultPrettyPrinter3);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter5);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(indenter29);
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2736");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        com.fasterxml.jackson.core.Version version90 = uTF8StreamJsonParser84.version();
        boolean boolean91 = uTF8StreamJsonParser84.hasCurrentToken();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number92 = uTF8StreamJsonParser84.getNumberValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(version90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3190");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = defaultPrettyPrinter1._withSpaces(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter5 = defaultPrettyPrinter1._withSpaces(false);
        com.fasterxml.jackson.core.io.SerializedString serializedString7 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray12 = new char[] { 'a', ' ', '#', '4' };
        int int14 = serializedString7.appendUnquoted(charArray12, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray21 = new char[] { 'a', ' ', '#', '4' };
        int int23 = serializedString16.appendUnquoted(charArray21, 0);
        boolean boolean24 = serializedString7.equals((java.lang.Object) serializedString16);
        char[] charArray25 = serializedString7.asQuotedChars();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter26 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter1, (com.fasterxml.jackson.core.SerializableString) serializedString7);
        defaultPrettyPrinter26.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter29 = defaultPrettyPrinter26.withSpacesInObjectEntries();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator30 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter26.writeStartArray(jsonGenerator30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultPrettyPrinter3);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter5);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(defaultPrettyPrinter29);
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3363");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        int int10 = serializedString1.charLength();
        char[] charArray11 = serializedString1.asQuotedChars();
        java.lang.String str12 = serializedString1.getValue();
        com.fasterxml.jackson.core.io.SerializedString serializedString14 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray19 = new char[] { 'a', ' ', '#', '4' };
        int int21 = serializedString14.appendUnquoted(charArray19, 0);
        byte[] byteArray28 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 0, (byte) 0 };
        int int30 = serializedString14.appendUnquotedUTF8(byteArray28, (int) (short) -1);
        byte[] byteArray31 = serializedString14.asUnquotedUTF8();
        int int33 = serializedString1.appendUnquotedUTF8(byteArray31, 47);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 47 + "'", int10 == 47);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str12, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[10, 1, 10, -1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3652");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext89 = uTF8StreamJsonParser84.getParsingContext();
        com.fasterxml.jackson.core.JsonParser jsonParser91 = uTF8StreamJsonParser84.setFeatureMask(10);
        int int92 = uTF8StreamJsonParser84.getTokenColumnNr();
        double double93 = uTF8StreamJsonParser84.getValueAsDouble();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext94 = uTF8StreamJsonParser84.getParsingContext();
        boolean boolean95 = uTF8StreamJsonParser84.hasTextCharacters();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNotNull(jsonStreamContext89);
        org.junit.Assert.assertNotNull(jsonParser91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
        org.junit.Assert.assertNotNull(jsonStreamContext94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1441");
        com.fasterxml.jackson.core.ObjectCodec objectCodec1 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory2 = new com.fasterxml.jackson.core.JsonFactory(objectCodec1);
        java.io.Reader reader3 = null;
        com.fasterxml.jackson.core.JsonParser jsonParser4 = jsonFactory2.createParser(reader3);
        boolean boolean5 = jsonParser4.requiresCustomCodec();
        java.lang.String str6 = jsonParser4.getText();
        java.lang.Object obj7 = jsonParser4.getObjectId();
        boolean boolean8 = jsonParser4.isExpectedStartArrayToken();
        boolean boolean9 = jsonParser4.hasCurrentToken();
        int int11 = jsonParser4.getValueAsInt(33);
        com.fasterxml.jackson.core.JsonLocation jsonLocation12 = jsonParser4.getTokenLocation();
        com.fasterxml.jackson.core.JsonFactory.Feature feature14 = com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
        com.fasterxml.jackson.core.JsonLocation jsonLocation19 = new com.fasterxml.jackson.core.JsonLocation((java.lang.Object) feature14, (long) (short) 0, (long) (byte) -1, (int) (short) 10, 100);
        com.fasterxml.jackson.core.JsonParseException jsonParseException20 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation19);
        java.lang.String str21 = jsonParseException20.toString();
        java.lang.String str22 = jsonParseException20.getOriginalMessage();
        com.fasterxml.jackson.core.JsonParseException jsonParseException23 = new com.fasterxml.jackson.core.JsonParseException("[Source: INTERN_FIELD_NAMES; line: 10, column: -1]", jsonLocation12, (java.lang.Throwable) jsonParseException20);
        java.lang.String str24 = jsonParseException23.toString();
        java.lang.String str25 = jsonParseException23.toString();
        org.junit.Assert.assertNotNull(jsonParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 33 + "'", int11 == 33);
        org.junit.Assert.assertNotNull(jsonLocation12);
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES + "'", feature14.equals(com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: CANONICALIZE_FIELD_NAMES; line: 10, column: 100]" + "'", str21, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: CANONICALIZE_FIELD_NAMES; line: 10, column: 100]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: [Source: INTERN_FIELD_NAMES; line: 10, column: -1]\n at [Source: UNKNOWN; line: 1, column: 1]" + "'", str24, "com.fasterxml.jackson.core.JsonParseException: [Source: INTERN_FIELD_NAMES; line: 10, column: -1]\n at [Source: UNKNOWN; line: 1, column: 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: [Source: INTERN_FIELD_NAMES; line: 10, column: -1]\n at [Source: UNKNOWN; line: 1, column: 1]" + "'", str25, "com.fasterxml.jackson.core.JsonParseException: [Source: INTERN_FIELD_NAMES; line: 10, column: -1]\n at [Source: UNKNOWN; line: 1, column: 1]");
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2933");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        long long93 = uTF8StreamJsonParser84.getTokenCharacterOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Boolean boolean94 = uTF8StreamJsonParser84.nextBooleanValue();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3160");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray16 = new char[] { 'a', ' ', '#', '4' };
        int int18 = serializedString11.appendUnquoted(charArray16, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray25 = new char[] { 'a', ' ', '#', '4' };
        int int27 = serializedString20.appendUnquoted(charArray25, 0);
        boolean boolean28 = serializedString11.equals((java.lang.Object) serializedString20);
        char[] charArray29 = serializedString11.asQuotedChars();
        boolean boolean33 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray29, (int) (byte) 10, 10, true);
        int int36 = com.fasterxml.jackson.core.io.NumberInput.parseInt(charArray29, (int) (byte) 1, 0);
        int int38 = serializedString1.appendQuoted(charArray29, (int) (byte) 10);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 63 + "'", int36 == 63);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3495");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        java.lang.String str80 = textBuffer76.toString();
        boolean boolean81 = textBuffer76.hasTextAsCharacters();
        char[] charArray82 = textBuffer76.finishCurrentSegment();
        java.lang.String str83 = textBuffer76.toString();
        char[] charArray84 = textBuffer76.getCurrentSegment();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "a" + "'", str80, "a");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "a" + "'", str83, "a");
        org.junit.Assert.assertNotNull(charArray84);
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3654");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.JsonLocation jsonLocation7 = new com.fasterxml.jackson.core.JsonLocation((java.lang.Object) "hi!", 0L, (long) (-1), (int) '4', (int) (byte) 1);
        com.fasterxml.jackson.core.JsonParseException jsonParseException8 = new com.fasterxml.jackson.core.JsonParseException("com.fasterxml.jackson.core.JsonParseException: ", jsonLocation7);
        com.fasterxml.jackson.core.JsonLocation jsonLocation9 = jsonParseException8.getLocation();
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext12 = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext((-1), 10);
        int int13 = jsonReadContext12.getCurrentIndex();
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext16 = jsonReadContext12.createChildArrayContext(0, 0);
        boolean boolean17 = jsonLocation9.equals((java.lang.Object) jsonReadContext12);
        com.fasterxml.jackson.core.io.IOContext iOContext19 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonReadContext12, false);
        com.fasterxml.jackson.core.io.SerializedString serializedString21 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray22 = serializedString21.asUnquotedUTF8();
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext25 = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext((-1), 10);
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext28 = jsonReadContext25.createChildArrayContext((int) (short) 1, 10);
        boolean boolean29 = jsonReadContext28.inArray();
        boolean boolean30 = serializedString21.equals((java.lang.Object) boolean29);
        char[] charArray31 = serializedString21.asQuotedChars();
        // The following exception was thrown during execution in test generation
        try {
            iOContext19.releaseConcatBuffer(charArray31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Trying to release buffer not owned by the context");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(jsonLocation9);
        org.junit.Assert.assertNotNull(jsonReadContext12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(jsonReadContext16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonReadContext25);
        org.junit.Assert.assertNotNull(jsonReadContext28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3110");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        com.fasterxml.jackson.core.ObjectCodec objectCodec87 = uTF8StreamJsonParser84.getCodec();
        java.lang.String str88 = uTF8StreamJsonParser84.getValueAsString();
        boolean boolean89 = uTF8StreamJsonParser84.isClosed();
        boolean boolean90 = uTF8StreamJsonParser84.getValueAsBoolean();
        boolean boolean92 = uTF8StreamJsonParser84.getValueAsBoolean(true);
        boolean boolean93 = uTF8StreamJsonParser84.isClosed();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertNull(objectCodec87);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3558");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        com.fasterxml.jackson.core.Version version90 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.JsonLocation jsonLocation91 = uTF8StreamJsonParser84.getTokenLocation();
        java.lang.String str92 = uTF8StreamJsonParser84.getValueAsString();
        java.lang.Object obj93 = uTF8StreamJsonParser84.getInputSource();
        java.lang.String str95 = uTF8StreamJsonParser84.getValueAsString("");
        com.fasterxml.jackson.core.ObjectCodec objectCodec96 = uTF8StreamJsonParser84.getCodec();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(version90);
        org.junit.Assert.assertNotNull(jsonLocation91);
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertNull(obj93);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
        org.junit.Assert.assertNull(objectCodec96);
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3367");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        java.lang.String str80 = textBuffer76.toString();
        char[] charArray81 = textBuffer76.getTextBuffer();
        int int82 = textBuffer76.size();
        textBuffer76.append('a');
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "a" + "'", str80, "a");
        org.junit.Assert.assertNotNull(charArray81);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray81), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray81), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray81), "[a]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3060");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        java.lang.String str80 = textBuffer76.toString();
        char[] charArray81 = textBuffer76.getTextBuffer();
        int int82 = textBuffer76.size();
        textBuffer76.setCurrentLength(0);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "a" + "'", str80, "a");
        org.junit.Assert.assertNotNull(charArray81);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray81), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray81), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray81), "[a]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2946");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        com.fasterxml.jackson.core.Version version90 = uTF8StreamJsonParser84.version();
        boolean boolean91 = uTF8StreamJsonParser84.hasCurrentToken();
        // The following exception was thrown during execution in test generation
        try {
            int int92 = uTF8StreamJsonParser84.getIntValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(version90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2585");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        mergedStream64.mark((int) (short) 10);
        mergedStream64.reset();
        com.fasterxml.jackson.core.io.SerializedString serializedString69 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int76 = serializedString69.appendQuotedUTF8(byteArray74, 0);
        char[] charArray77 = serializedString69.asQuotedChars();
        byte[] byteArray82 = new byte[] { (byte) 10, (byte) 1, (byte) 0, (byte) 100 };
        int int84 = serializedString69.appendUnquotedUTF8(byteArray82, (int) (short) 10);
        com.fasterxml.jackson.core.io.MergedStream mergedStream87 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray82, (int) ' ', 34);
        // The following exception was thrown during execution in test generation
        try {
            long long89 = mergedStream87.skip((long) 34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Trying to release buffer not owned by the context");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[10, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3549");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        int int78 = textBuffer76.getTextOffset();
        int int79 = textBuffer76.getCurrentSegmentSize();
        char[] charArray80 = textBuffer76.contentsAsArray();
        textBuffer76.resetWithEmpty();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(charArray80);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray80), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray80), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray80), "[]");
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1488");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) (byte) -1, true);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler4 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler4, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream8 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer9 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext7, outputStream8);
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding10 = com.fasterxml.jackson.core.JsonEncoding.UTF16_BE;
        iOContext7.setEncoding(jsonEncoding10);
        java.io.Reader reader13 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec14 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer15 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int17 = charsToNameCanonicalizer15.calcHash("false");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser18 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (-1954973613), reader13, objectCodec14, charsToNameCanonicalizer15);
        com.fasterxml.jackson.core.util.ByteArrayBuilder byteArrayBuilder19 = readerBasedJsonParser18._getByteArrayBuilder();
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer20 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext3, (java.io.OutputStream) byteArrayBuilder19);
        char[] charArray21 = iOContext3.allocConcatBuffer();
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler22 = null;
        com.fasterxml.jackson.core.util.TextBuffer textBuffer23 = new com.fasterxml.jackson.core.util.TextBuffer(bufferRecycler22);
        textBuffer23.resetWithEmpty();
        textBuffer23.releaseBuffers();
        char[] charArray26 = textBuffer23.contentsAsArray();
        char[] charArray27 = com.fasterxml.jackson.core.util.TextBuffer.NO_CHARS;
        textBuffer23.resetWithShared(charArray27, (int) (short) -1, 1884838898);
        // The following exception was thrown during execution in test generation
        try {
            iOContext3.releaseConcatBuffer(charArray27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Trying to release buffer not owned by the context");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + jsonEncoding10 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF16_BE + "'", jsonEncoding10.equals(com.fasterxml.jackson.core.JsonEncoding.UTF16_BE));
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer15);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1790447398 + "'", int17 == 1790447398);
        org.junit.Assert.assertNotNull(byteArrayBuilder19);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[]");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[]");
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2782");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        com.fasterxml.jackson.core.ObjectCodec objectCodec87 = uTF8StreamJsonParser84.getCodec();
        java.lang.String str88 = uTF8StreamJsonParser84.getValueAsString();
        boolean boolean89 = uTF8StreamJsonParser84.isClosed();
        com.fasterxml.jackson.core.JsonParser.Feature feature90 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser jsonParser92 = uTF8StreamJsonParser84.configure(feature90, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertNull(objectCodec87);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2875");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        int int89 = uTF8StreamJsonParser84.getValueAsInt();
        java.lang.Object obj90 = uTF8StreamJsonParser84.getEmbeddedObject();
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser.NumberType numberType92 = uTF8StreamJsonParser84.getNumberType();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertNull(obj91);
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2957");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        char[] charArray92 = uTF8StreamJsonParser84.getTextCharacters();
        int int93 = uTF8StreamJsonParser84.getTokenColumnNr();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonToken jsonToken94 = uTF8StreamJsonParser84.nextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertNull(charArray92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3119");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        com.fasterxml.jackson.core.ObjectCodec objectCodec87 = uTF8StreamJsonParser84.getCodec();
        java.lang.String str88 = uTF8StreamJsonParser84.getValueAsString();
        boolean boolean89 = uTF8StreamJsonParser84.isClosed();
        boolean boolean90 = uTF8StreamJsonParser84.getValueAsBoolean();
        boolean boolean92 = uTF8StreamJsonParser84.getValueAsBoolean(true);
        int int93 = uTF8StreamJsonParser84.getTextLength();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertNull(objectCodec87);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2767");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean93 = uTF8StreamJsonParser84.getBooleanValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not of boolean type? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3157");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext89 = uTF8StreamJsonParser84.getParsingContext();
        com.fasterxml.jackson.core.JsonParser jsonParser91 = uTF8StreamJsonParser84.setFeatureMask(10);
        int int92 = uTF8StreamJsonParser84.getTokenColumnNr();
        double double93 = uTF8StreamJsonParser84.getValueAsDouble();
        char[] charArray94 = uTF8StreamJsonParser84.getTextCharacters();
        java.io.Writer writer95 = null;
        int int96 = uTF8StreamJsonParser84.releaseBuffered(writer95);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNotNull(jsonStreamContext89);
        org.junit.Assert.assertNotNull(jsonParser91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
        org.junit.Assert.assertNull(charArray94);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2844");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 0, (byte) 0 };
        int int17 = serializedString1.appendUnquotedUTF8(byteArray15, (int) (short) -1);
        com.fasterxml.jackson.core.io.SerializedString serializedString19 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray24 = new char[] { 'a', ' ', '#', '4' };
        int int26 = serializedString19.appendUnquoted(charArray24, 0);
        java.lang.String str27 = serializedString19.getValue();
        char[] charArray28 = serializedString19.asQuotedChars();
        char[] charArray29 = serializedString19.asQuotedChars();
        // The following exception was thrown during execution in test generation
        try {
            int int31 = serializedString1.appendQuoted(charArray29, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 1, 10, -1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str27, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3009");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter24 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter25 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter lf2SpacesIndenter27 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter lf2SpacesIndenter29 = lf2SpacesIndenter27.withLinefeed("[Source: hi!; line: 52, column: 1]");
        defaultPrettyPrinter25.indentObjectsWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) lf2SpacesIndenter27);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter lf2SpacesIndenter32 = lf2SpacesIndenter27.withLinefeed("");
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator33 = null;
        // The following exception was thrown during execution in test generation
        try {
            lf2SpacesIndenter27.writeIndentation(jsonGenerator33, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter24);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter25);
        org.junit.Assert.assertNotNull(lf2SpacesIndenter29);
        org.junit.Assert.assertNotNull(lf2SpacesIndenter32);
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2983");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getValueAsInt();
        int int87 = uTF8StreamJsonParser84.getValueAsInt((int) 'a');
        boolean boolean89 = uTF8StreamJsonParser84.getValueAsBoolean(true);
        com.fasterxml.jackson.core.JsonToken jsonToken90 = uTF8StreamJsonParser84.getCurrentToken();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser.NumberType numberType91 = uTF8StreamJsonParser84.getNumberType();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 97 + "'", int87 == 97);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNull(jsonToken90);
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3193");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        int int78 = textBuffer76.getTextOffset();
        int int79 = textBuffer76.getCurrentSegmentSize();
        textBuffer76.resetWithEmpty();
        // The following exception was thrown during execution in test generation
        try {
            textBuffer76.append("", 13, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3008");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        com.fasterxml.jackson.core.Version version90 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.JsonLocation jsonLocation91 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.Version version92 = uTF8StreamJsonParser84.version();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Boolean boolean93 = uTF8StreamJsonParser84.nextBooleanValue();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(version90);
        org.junit.Assert.assertNotNull(jsonLocation91);
        org.junit.Assert.assertNotNull(version92);
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3238");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        int int89 = uTF8StreamJsonParser84.getValueAsInt();
        java.lang.Object obj90 = uTF8StreamJsonParser84.getEmbeddedObject();
        uTF8StreamJsonParser84.overrideCurrentName("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number93 = uTF8StreamJsonParser84.getNumberValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNull(obj90);
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3459");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter24 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter25 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter lf2SpacesIndenter27 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter lf2SpacesIndenter29 = lf2SpacesIndenter27.withLinefeed("[Source: hi!; line: 52, column: 1]");
        defaultPrettyPrinter25.indentObjectsWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) lf2SpacesIndenter27);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter31 = defaultPrettyPrinter25.withSpacesInObjectEntries();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter31.writeArrayValueSeparator(jsonGenerator32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter24);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter25);
        org.junit.Assert.assertNotNull(lf2SpacesIndenter29);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter31);
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2847");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        mergedStream64.mark((int) (short) 10);
        mergedStream64.reset();
        com.fasterxml.jackson.core.io.SerializedString serializedString69 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int76 = serializedString69.appendQuotedUTF8(byteArray74, 0);
        char[] charArray77 = serializedString69.asQuotedChars();
        byte[] byteArray82 = new byte[] { (byte) 10, (byte) 1, (byte) 0, (byte) 100 };
        int int84 = serializedString69.appendUnquotedUTF8(byteArray82, (int) (short) 10);
        com.fasterxml.jackson.core.io.MergedStream mergedStream87 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray82, (int) ' ', 34);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray88 = iOContext12.allocBase64Buffer();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[10, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2713");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        mergedStream64.mark((int) (short) 10);
        mergedStream64.reset();
        com.fasterxml.jackson.core.io.SerializedString serializedString69 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int76 = serializedString69.appendQuotedUTF8(byteArray74, 0);
        char[] charArray77 = serializedString69.asQuotedChars();
        byte[] byteArray82 = new byte[] { (byte) 10, (byte) 1, (byte) 0, (byte) 100 };
        int int84 = serializedString69.appendUnquotedUTF8(byteArray82, (int) (short) 10);
        com.fasterxml.jackson.core.io.MergedStream mergedStream87 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray82, (int) ' ', 34);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray88 = iOContext12.allocTokenBuffer();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[10, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2993");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        java.lang.String str80 = textBuffer76.toString();
        boolean boolean81 = textBuffer76.hasTextAsCharacters();
        char[] charArray82 = textBuffer76.finishCurrentSegment();
        int int85 = com.fasterxml.jackson.core.io.NumberInput.parseInt(charArray82, 97, (int) (byte) -1);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "a" + "'", str80, "a");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-48) + "'", int85 == (-48));
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3293");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding27 = byteSourceJsonBootstrapper26.detectEncoding();
        java.io.Reader reader28 = byteSourceJsonBootstrapper26.constructReader();
        com.fasterxml.jackson.core.io.SerializedString serializedString30 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray35 = new char[] { 'a', ' ', '#', '4' };
        int int37 = serializedString30.appendUnquoted(charArray35, 0);
        java.lang.String str38 = serializedString30.getValue();
        char[] charArray39 = serializedString30.asQuotedChars();
        char[] charArray40 = serializedString30.asQuotedChars();
        int int41 = reader28.read(charArray40);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal44 = com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(charArray40, 0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: Bad offset or len arguments for char[] input.");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + jsonEncoding27 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding27.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(reader28);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str38, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "ddm.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "ddm.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[d, d, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), "ddm.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), "ddm.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[d, d, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3096");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        com.fasterxml.jackson.core.JsonLocation jsonLocation93 = uTF8StreamJsonParser84.getTokenLocation();
        boolean boolean95 = uTF8StreamJsonParser84.getValueAsBoolean(true);
        com.fasterxml.jackson.core.JsonLocation jsonLocation96 = uTF8StreamJsonParser84.getCurrentLocation();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(jsonLocation93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertNotNull(jsonLocation96);
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3592");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        int int89 = uTF8StreamJsonParser84.getTextOffset();
        double double91 = uTF8StreamJsonParser84.getValueAsDouble((double) 10.0f);
        com.fasterxml.jackson.core.JsonLocation jsonLocation92 = uTF8StreamJsonParser84.getCurrentLocation();
        long long94 = uTF8StreamJsonParser84.getValueAsLong((long) (byte) 0);
        com.fasterxml.jackson.core.ObjectCodec objectCodec95 = null;
        uTF8StreamJsonParser84.setCodec(objectCodec95);
        com.fasterxml.jackson.core.JsonLocation jsonLocation97 = uTF8StreamJsonParser84.getCurrentLocation();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 10.0d + "'", double91 == 10.0d);
        org.junit.Assert.assertNotNull(jsonLocation92);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 0L + "'", long94 == 0L);
        org.junit.Assert.assertNotNull(jsonLocation97);
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2835");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        int int89 = uTF8StreamJsonParser84.getValueAsInt();
        com.fasterxml.jackson.core.JsonToken jsonToken90 = uTF8StreamJsonParser84.getCurrentToken();
        com.fasterxml.jackson.core.Base64Variant base64Variant91 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray92 = uTF8StreamJsonParser84.getBinaryValue(base64Variant91);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNull(jsonToken90);
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3145");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext89 = uTF8StreamJsonParser84.getParsingContext();
        com.fasterxml.jackson.core.JsonParser jsonParser91 = uTF8StreamJsonParser84.setFeatureMask(10);
        int int92 = uTF8StreamJsonParser84.getTokenColumnNr();
        boolean boolean93 = uTF8StreamJsonParser84.hasCurrentToken();
        char[] charArray94 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean96 = uTF8StreamJsonParser84.getValueAsBoolean(true);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNotNull(jsonStreamContext89);
        org.junit.Assert.assertNotNull(jsonParser91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNull(charArray94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3241");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        int int89 = uTF8StreamJsonParser84.getValueAsInt();
        java.lang.Object obj90 = uTF8StreamJsonParser84.getEmbeddedObject();
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number92 = uTF8StreamJsonParser84.getNumberValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertNull(obj91);
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2901");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext91 = uTF8StreamJsonParser84.getParsingContext();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal92 = uTF8StreamJsonParser84.getDecimalValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNotNull(jsonStreamContext91);
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3094");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        int int93 = uTF8StreamJsonParser84.getValueAsInt();
        // The following exception was thrown during execution in test generation
        try {
            uTF8StreamJsonParser84.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3520");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        com.fasterxml.jackson.core.Version version90 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.JsonLocation jsonLocation91 = uTF8StreamJsonParser84.getTokenLocation();
        long long92 = uTF8StreamJsonParser84.getValueAsLong();
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext93 = uTF8StreamJsonParser84.getParsingContext();
        boolean boolean94 = uTF8StreamJsonParser84.hasCurrentToken();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(version90);
        org.junit.Assert.assertNotNull(jsonLocation91);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 0L + "'", long92 == 0L);
        org.junit.Assert.assertNotNull(jsonReadContext93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1191");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream4 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer5 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext3, outputStream4);
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding6 = com.fasterxml.jackson.core.JsonEncoding.UTF16_BE;
        iOContext3.setEncoding(jsonEncoding6);
        java.io.Reader reader9 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec10 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer11 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int13 = charsToNameCanonicalizer11.calcHash("false");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser14 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, (-1954973613), reader9, objectCodec10, charsToNameCanonicalizer11);
        int int15 = readerBasedJsonParser14.getTextOffset();
        java.lang.String str16 = readerBasedJsonParser14.getText();
        java.lang.String str17 = readerBasedJsonParser14.getText();
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler18 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext21 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler18, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream22 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer23 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext21, outputStream22);
        com.fasterxml.jackson.core.ObjectCodec objectCodec25 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler26 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext29 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler26, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream30 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer31 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext29, outputStream30);
        uTF8Writer31.flush();
        java.io.Writer writer34 = uTF8Writer31.append('a');
        com.fasterxml.jackson.core.json.WriterBasedJsonGenerator writerBasedJsonGenerator35 = new com.fasterxml.jackson.core.json.WriterBasedJsonGenerator(iOContext21, (-1959034571), objectCodec25, (java.io.Writer) uTF8Writer31);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler36 = null;
        com.fasterxml.jackson.core.util.TextBuffer textBuffer37 = new com.fasterxml.jackson.core.util.TextBuffer(bufferRecycler36);
        textBuffer37.append(' ');
        int int40 = textBuffer37.size();
        char[] charArray41 = textBuffer37.finishCurrentSegment();
        uTF8Writer31.write(charArray41, (-1958953807), (-18278106));
        int int45 = readerBasedJsonParser14.releaseBuffered((java.io.Writer) uTF8Writer31);
        org.junit.Assert.assertTrue("'" + jsonEncoding6 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF16_BE + "'", jsonEncoding6.equals(com.fasterxml.jackson.core.JsonEncoding.UTF16_BE));
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 778754302 + "'", int13 == 778754302);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(writer34);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3070");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        boolean boolean91 = uTF8StreamJsonParser84.hasTextCharacters();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal92 = uTF8StreamJsonParser84.getDecimalValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2985");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = serializedString20.asUnquotedUTF8();
        int int23 = serializedString1.appendQuotedUTF8(byteArray21, (int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString25 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray30 = new char[] { 'a', ' ', '#', '4' };
        int int32 = serializedString25.appendUnquoted(charArray30, 0);
        int int34 = serializedString1.appendUnquoted(charArray30, (int) 'a');
        char[] charArray35 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int37 = serializedString1.appendQuoted(charArray35, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1292");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonFactory.Feature feature2 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean4 = feature2.enabledIn(3);
        boolean boolean5 = jsonFactory1.isEnabled(feature2);
        com.fasterxml.jackson.core.JsonParser.Feature feature6 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = jsonFactory1.disable(feature6);
        java.io.OutputStream outputStream8 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator9 = jsonFactory1.createGenerator(outputStream8);
        com.fasterxml.jackson.core.io.IOContext iOContext10 = null;
        byte[] byteArray11 = com.fasterxml.jackson.core.io.CharTypes.copyHexBytes();
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper14 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext10, byteArray11, 0, 0);
        com.fasterxml.jackson.core.JsonParser jsonParser17 = jsonFactory1.createJsonParser(byteArray11, 1, (int) (short) 100);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter19 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("hi!");
        com.fasterxml.jackson.core.SerializableString serializableString20 = defaultPrettyPrinter19._rootSeparator;
        byte[] byteArray27 = new byte[] { (byte) -1, (byte) 0, (byte) -1, (byte) 1, (byte) 1, (byte) 1 };
        int int29 = serializableString20.appendQuotedUTF8(byteArray27, (int) (byte) 100);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory1.createJsonParser(byteArray27);
        java.lang.String str31 = jsonParser30.getValueAsString();
        java.lang.Object obj32 = jsonParser30.getInputSource();
        com.fasterxml.jackson.core.Version version33 = jsonParser30.version();
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature2.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + feature6 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES + "'", feature6.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES));
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertNotNull(jsonGenerator9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70]");
        org.junit.Assert.assertNotNull(jsonParser17);
        org.junit.Assert.assertNotNull(serializableString20);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1, 0, -1, 1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertNotNull(version33);
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3466");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        com.fasterxml.jackson.core.Version version90 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.JsonLocation jsonLocation91 = uTF8StreamJsonParser84.getTokenLocation();
        long long92 = uTF8StreamJsonParser84.getValueAsLong();
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext93 = uTF8StreamJsonParser84.getParsingContext();
        boolean boolean94 = uTF8StreamJsonParser84.isClosed();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(version90);
        org.junit.Assert.assertNotNull(jsonLocation91);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 0L + "'", long92 == 0L);
        org.junit.Assert.assertNotNull(jsonReadContext93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3131");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        int int92 = uTF8StreamJsonParser84.getTextLength();
        java.lang.String str93 = uTF8StreamJsonParser84.getCurrentName();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "[Source: hi!; line: 52, column: 1]" + "'", str93, "[Source: hi!; line: 52, column: 1]");
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3607");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        char[] charArray89 = uTF8StreamJsonParser84.getTextCharacters();
        java.lang.String str90 = uTF8StreamJsonParser84.getText();
        int int91 = uTF8StreamJsonParser84.getFeatureMask();
        // The following exception was thrown during execution in test generation
        try {
            byte byte92 = uTF8StreamJsonParser84.getByteValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNull(charArray89);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2998");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        int int89 = uTF8StreamJsonParser84.getTextOffset();
        double double91 = uTF8StreamJsonParser84.getValueAsDouble((double) 10.0f);
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser.NumberType numberType92 = uTF8StreamJsonParser84.getNumberType();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 10.0d + "'", double91 == 10.0d);
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2928");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        int int89 = uTF8StreamJsonParser84.getValueAsInt();
        com.fasterxml.jackson.core.JsonToken jsonToken90 = uTF8StreamJsonParser84.getCurrentToken();
        com.fasterxml.jackson.core.JsonToken jsonToken91 = uTF8StreamJsonParser84.getCurrentToken();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        // The following exception was thrown during execution in test generation
        try {
            uTF8StreamJsonParser84.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNull(jsonToken90);
        org.junit.Assert.assertNull(jsonToken91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3514");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonToken jsonToken88 = uTF8StreamJsonParser84.getCurrentToken();
        uTF8StreamJsonParser84.clearCurrentToken();
        uTF8StreamJsonParser84.overrideCurrentName("[Source: #; line: 1, column: 1]");
        double double93 = uTF8StreamJsonParser84.getValueAsDouble((double) 10L);
        int int94 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext95 = uTF8StreamJsonParser84.getParsingContext();
        com.fasterxml.jackson.core.JsonLocation jsonLocation96 = uTF8StreamJsonParser84.getCurrentLocation();
        java.lang.Object obj97 = uTF8StreamJsonParser84.getObjectId();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(jsonToken88);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 10.0d + "'", double93 == 10.0d);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertNotNull(jsonReadContext95);
        org.junit.Assert.assertNotNull(jsonLocation96);
        org.junit.Assert.assertNull(obj97);
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1481");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonFactory.Feature feature2 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean4 = feature2.enabledIn(3);
        boolean boolean5 = jsonFactory1.isEnabled(feature2);
        com.fasterxml.jackson.core.ObjectCodec objectCodec6 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = new com.fasterxml.jackson.core.JsonFactory(objectCodec6);
        com.fasterxml.jackson.core.JsonFactory.Feature feature8 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean10 = feature8.enabledIn(3);
        boolean boolean11 = jsonFactory7.isEnabled(feature8);
        com.fasterxml.jackson.core.JsonParser.Feature feature12 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
        com.fasterxml.jackson.core.JsonFactory jsonFactory13 = jsonFactory7.disable(feature12);
        com.fasterxml.jackson.core.JsonFactory jsonFactory14 = jsonFactory1.disable(feature12);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler15 = jsonFactory14._getBufferRecycler();
        com.fasterxml.jackson.core.util.TextBuffer textBuffer16 = new com.fasterxml.jackson.core.util.TextBuffer(bufferRecycler15);
        char[] charArray17 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter.SPACES;
        textBuffer16.append(charArray17, (int) (byte) 0, (int) (short) 1);
        textBuffer16.resetWithString("com.fasterxml.jackson.core.JsonParseException: \n\n at [Source: CANONICALIZE_FIELD_NAMES; line: 10, column: 100]");
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature2.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature8.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES + "'", feature12.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES));
        org.junit.Assert.assertNotNull(jsonFactory13);
        org.junit.Assert.assertNotNull(jsonFactory14);
        org.junit.Assert.assertNotNull(bufferRecycler15);
        org.junit.Assert.assertNotNull(charArray17);
// flaky:         org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), " \n                                                              ");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), " \n                                                              ");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[ , \n,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ]");
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2949");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext89 = uTF8StreamJsonParser84.getParsingContext();
        com.fasterxml.jackson.core.JsonParser jsonParser91 = uTF8StreamJsonParser84.setFeatureMask(10);
        com.fasterxml.jackson.core.util.ByteArrayBuilder byteArrayBuilder92 = uTF8StreamJsonParser84._getByteArrayBuilder();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonToken jsonToken93 = uTF8StreamJsonParser84.nextToken();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNotNull(jsonStreamContext89);
        org.junit.Assert.assertNotNull(jsonParser91);
        org.junit.Assert.assertNotNull(byteArrayBuilder92);
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2781");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        com.fasterxml.jackson.core.JsonToken jsonToken89 = uTF8StreamJsonParser84.getCurrentToken();
        java.lang.Object obj90 = uTF8StreamJsonParser84.getTypeId();
        com.fasterxml.jackson.core.Base64Variant base64Variant91 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray92 = uTF8StreamJsonParser84.getBinaryValue(base64Variant91);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNull(jsonToken89);
        org.junit.Assert.assertNull(obj90);
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1485");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream4 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer5 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext3, outputStream4);
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding6 = com.fasterxml.jackson.core.JsonEncoding.UTF16_BE;
        iOContext3.setEncoding(jsonEncoding6);
        java.io.Reader reader9 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec10 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer11 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int13 = charsToNameCanonicalizer11.calcHash("false");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser14 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, (-1954973613), reader9, objectCodec10, charsToNameCanonicalizer11);
        com.fasterxml.jackson.core.Version version15 = readerBasedJsonParser14.version();
        java.lang.String str16 = readerBasedJsonParser14.getText();
        com.fasterxml.jackson.core.JsonToken jsonToken17 = readerBasedJsonParser14.nextToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation18 = readerBasedJsonParser14.getTokenLocation();
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler19 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext22 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler19, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream23 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer24 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext22, outputStream23);
        byte[] byteArray25 = iOContext22.allocReadIOBuffer();
        char[] charArray26 = iOContext22.allocTokenBuffer();
        com.fasterxml.jackson.core.ObjectCodec objectCodec28 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler29 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler29, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream33 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer34 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext32, outputStream33);
        uTF8Writer34.flush();
        java.io.Writer writer37 = uTF8Writer34.append('a');
        com.fasterxml.jackson.core.json.WriterBasedJsonGenerator writerBasedJsonGenerator38 = new com.fasterxml.jackson.core.json.WriterBasedJsonGenerator(iOContext22, (int) (byte) -1, objectCodec28, writer37);
        int int39 = readerBasedJsonParser14.releaseBuffered(writer37);
        java.lang.Object obj40 = readerBasedJsonParser14.getObjectId();
        org.junit.Assert.assertTrue("'" + jsonEncoding6 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF16_BE + "'", jsonEncoding6.equals(com.fasterxml.jackson.core.JsonEncoding.UTF16_BE));
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1339537864 + "'", int13 == 1339537864);
        org.junit.Assert.assertNotNull(version15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(jsonToken17);
        org.junit.Assert.assertNotNull(jsonLocation18);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertNotNull(writer37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNull(obj40);
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3589");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter24 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter25 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter26 = defaultPrettyPrinter25.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter27 = defaultPrettyPrinter25.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter28 = defaultPrettyPrinter27.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter29 = defaultPrettyPrinter28.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter lf2SpacesIndenter31 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter("a");
        defaultPrettyPrinter29.indentArraysWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) lf2SpacesIndenter31);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter24);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter25);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter26);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter27);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter28);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter29);
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3220");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        textBuffer76.setCurrentLength((int) (byte) 0);
        java.lang.String str82 = textBuffer76.toString();
        // The following exception was thrown during execution in test generation
        try {
            double double83 = textBuffer76.contentsAsDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: empty String");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1218");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonFactory.Feature feature2 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean4 = feature2.enabledIn(3);
        boolean boolean5 = jsonFactory1.isEnabled(feature2);
        com.fasterxml.jackson.core.JsonParser.Feature feature6 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = jsonFactory1.disable(feature6);
        java.io.OutputStream outputStream8 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator9 = jsonFactory1.createGenerator(outputStream8);
        com.fasterxml.jackson.core.io.IOContext iOContext10 = null;
        byte[] byteArray11 = com.fasterxml.jackson.core.io.CharTypes.copyHexBytes();
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper14 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext10, byteArray11, 0, 0);
        com.fasterxml.jackson.core.JsonParser jsonParser17 = jsonFactory1.createJsonParser(byteArray11, 1, (int) (short) 100);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter19 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("hi!");
        com.fasterxml.jackson.core.SerializableString serializableString20 = defaultPrettyPrinter19._rootSeparator;
        byte[] byteArray27 = new byte[] { (byte) -1, (byte) 0, (byte) -1, (byte) 1, (byte) 1, (byte) 1 };
        int int29 = serializableString20.appendQuotedUTF8(byteArray27, (int) (byte) 100);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory1.createJsonParser(byteArray27);
        java.lang.String str31 = jsonParser30.getValueAsString();
        java.lang.Object obj32 = jsonParser30.getInputSource();
        com.fasterxml.jackson.core.JsonToken jsonToken33 = jsonParser30.getLastClearedToken();
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature2.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + feature6 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES + "'", feature6.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES));
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertNotNull(jsonGenerator9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70]");
        org.junit.Assert.assertNotNull(jsonParser17);
        org.junit.Assert.assertNotNull(serializableString20);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1, 0, -1, 1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertNull(jsonToken33);
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2666");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = defaultPrettyPrinter1._withSpaces(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter5 = defaultPrettyPrinter1._withSpaces(false);
        com.fasterxml.jackson.core.io.SerializedString serializedString7 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray12 = new char[] { 'a', ' ', '#', '4' };
        int int14 = serializedString7.appendUnquoted(charArray12, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray21 = new char[] { 'a', ' ', '#', '4' };
        int int23 = serializedString16.appendUnquoted(charArray21, 0);
        boolean boolean24 = serializedString7.equals((java.lang.Object) serializedString16);
        char[] charArray25 = serializedString7.asQuotedChars();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter26 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter1, (com.fasterxml.jackson.core.SerializableString) serializedString7);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator27 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter1.writeStartObject(jsonGenerator27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultPrettyPrinter3);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter5);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2716");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonParseException: ");
        com.fasterxml.jackson.core.SerializableString serializableString2 = null;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter1, serializableString2);
        com.fasterxml.jackson.core.io.SerializedString serializedString5 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int12 = serializedString5.appendQuotedUTF8(byteArray10, 0);
        char[] charArray13 = serializedString5.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString15 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int22 = serializedString15.appendQuotedUTF8(byteArray20, 0);
        int int24 = serializedString5.appendUnquotedUTF8(byteArray20, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter25 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString5);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter26 = defaultPrettyPrinter25._objectIndenter;
        defaultPrettyPrinter3._arrayIndenter = indenter26;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter28 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter3);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator29 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter28.writeStartObject(jsonGenerator29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(indenter26);
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2657");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        mergedStream64.mark((int) (short) 10);
        mergedStream64.reset();
        com.fasterxml.jackson.core.io.SerializedString serializedString69 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int76 = serializedString69.appendQuotedUTF8(byteArray74, 0);
        char[] charArray77 = serializedString69.asQuotedChars();
        byte[] byteArray82 = new byte[] { (byte) 10, (byte) 1, (byte) 0, (byte) 100 };
        int int84 = serializedString69.appendUnquotedUTF8(byteArray82, (int) (short) 10);
        com.fasterxml.jackson.core.io.MergedStream mergedStream87 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray82, (int) ' ', 34);
        mergedStream64.mark(1);
        long long91 = mergedStream64.skip(0L);
        int int92 = mergedStream64.available();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[10, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 0L + "'", long91 == 0L);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 35 + "'", int92 == 35);
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2938");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonParseException: ");
        com.fasterxml.jackson.core.SerializableString serializableString2 = null;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter1, serializableString2);
        com.fasterxml.jackson.core.io.SerializedString serializedString5 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int12 = serializedString5.appendQuotedUTF8(byteArray10, 0);
        char[] charArray13 = serializedString5.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString15 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int22 = serializedString15.appendQuotedUTF8(byteArray20, 0);
        int int24 = serializedString5.appendUnquotedUTF8(byteArray20, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter25 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString5);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter26 = defaultPrettyPrinter25._objectIndenter;
        defaultPrettyPrinter3._arrayIndenter = indenter26;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter28 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter3);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator29 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter28.beforeArrayValues(jsonGenerator29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(indenter26);
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3231");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.JsonParser jsonParser90 = uTF8StreamJsonParser84.skipChildren();
        com.fasterxml.jackson.core.Version version91 = uTF8StreamJsonParser84.version();
        java.lang.Object obj92 = uTF8StreamJsonParser84.getObjectId();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number93 = uTF8StreamJsonParser84.getNumberValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonParser90);
        org.junit.Assert.assertNotNull(version91);
        org.junit.Assert.assertNull(obj92);
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2930");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        char[] charArray89 = uTF8StreamJsonParser84.getTextCharacters();
        java.lang.Object obj90 = uTF8StreamJsonParser84.getInputSource();
        com.fasterxml.jackson.core.Base64Variant base64Variant91 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray92 = uTF8StreamJsonParser84.getBinaryValue(base64Variant91);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNull(charArray89);
        org.junit.Assert.assertNull(obj90);
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3646");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext89 = uTF8StreamJsonParser84.getParsingContext();
        com.fasterxml.jackson.core.JsonParser jsonParser91 = uTF8StreamJsonParser84.setFeatureMask(97);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray92 = uTF8StreamJsonParser84.getBinaryValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNotNull(jsonStreamContext89);
        org.junit.Assert.assertNotNull(jsonParser91);
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2924");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getValueAsInt();
        int int87 = uTF8StreamJsonParser84.getValueAsInt((int) 'a');
        java.lang.String str89 = uTF8StreamJsonParser84.getValueAsString("[Source: hi!; line: 52, column: 1]");
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser.NumberType numberType90 = uTF8StreamJsonParser84.getNumberType();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 97 + "'", int87 == 97);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "[Source: hi!; line: 52, column: 1]" + "'", str89, "[Source: hi!; line: 52, column: 1]");
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3595");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        int int89 = uTF8StreamJsonParser84.getTextOffset();
        double double91 = uTF8StreamJsonParser84.getValueAsDouble((double) 10.0f);
        com.fasterxml.jackson.core.JsonLocation jsonLocation92 = uTF8StreamJsonParser84.getCurrentLocation();
        long long93 = uTF8StreamJsonParser84.getValueAsLong();
        com.fasterxml.jackson.core.Version version94 = uTF8StreamJsonParser84.version();
        char[] charArray95 = uTF8StreamJsonParser84.getTextCharacters();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 10.0d + "'", double91 == 10.0d);
        org.junit.Assert.assertNotNull(jsonLocation92);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
        org.junit.Assert.assertNotNull(version94);
        org.junit.Assert.assertNull(charArray95);
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2817");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter24 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter25 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter lf2SpacesIndenter27 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter lf2SpacesIndenter29 = lf2SpacesIndenter27.withLinefeed("[Source: hi!; line: 52, column: 1]");
        defaultPrettyPrinter25.indentObjectsWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) lf2SpacesIndenter27);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator31 = null;
        // The following exception was thrown during execution in test generation
        try {
            lf2SpacesIndenter27.writeIndentation(jsonGenerator31, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter24);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter25);
        org.junit.Assert.assertNotNull(lf2SpacesIndenter29);
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3328");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        com.fasterxml.jackson.core.io.SerializedString serializedString3 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int10 = serializedString3.appendQuotedUTF8(byteArray8, 0);
        int int12 = serializedString1.appendQuotedUTF8(byteArray8, 0);
        int int13 = serializedString1.charLength();
        com.fasterxml.jackson.core.io.SerializedString serializedString15 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray20 = new char[] { 'a', ' ', '#', '4' };
        int int22 = serializedString15.appendUnquoted(charArray20, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray29 = new char[] { 'a', ' ', '#', '4' };
        int int31 = serializedString24.appendUnquoted(charArray29, 0);
        boolean boolean32 = serializedString15.equals((java.lang.Object) serializedString24);
        char[] charArray33 = serializedString15.asQuotedChars();
        int int35 = serializedString1.appendQuoted(charArray33, 10);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 47 + "'", int13 == 47);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3137");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        boolean boolean92 = uTF8StreamJsonParser84.getValueAsBoolean();
        boolean boolean94 = uTF8StreamJsonParser84.getValueAsBoolean(false);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3441");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        com.fasterxml.jackson.core.JsonLocation jsonLocation93 = uTF8StreamJsonParser84.getTokenLocation();
        java.lang.Object obj94 = uTF8StreamJsonParser84.getObjectId();
        boolean boolean95 = uTF8StreamJsonParser84.hasTextCharacters();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(jsonLocation93);
        org.junit.Assert.assertNull(obj94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3126");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getValueAsInt();
        int int87 = uTF8StreamJsonParser84.getValueAsInt((int) 'a');
        boolean boolean89 = uTF8StreamJsonParser84.getValueAsBoolean(true);
        double double91 = uTF8StreamJsonParser84.getValueAsDouble((double) 47L);
        boolean boolean92 = uTF8StreamJsonParser84.isClosed();
        // The following exception was thrown during execution in test generation
        try {
            uTF8StreamJsonParser84.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 97 + "'", int87 == 97);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 47.0d + "'", double91 == 47.0d);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3383");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        double double88 = uTF8StreamJsonParser84.getValueAsDouble((double) 63);
        char[] charArray89 = uTF8StreamJsonParser84.getTextCharacters();
        // The following exception was thrown during execution in test generation
        try {
            float float90 = uTF8StreamJsonParser84.getFloatValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 63.0d + "'", double88 == 63.0d);
        org.junit.Assert.assertNull(charArray89);
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2846");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext89 = uTF8StreamJsonParser84.getParsingContext();
        com.fasterxml.jackson.core.JsonParser jsonParser91 = uTF8StreamJsonParser84.setFeatureMask(10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number92 = uTF8StreamJsonParser84.getNumberValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNotNull(jsonStreamContext89);
        org.junit.Assert.assertNotNull(jsonParser91);
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3618");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        com.fasterxml.jackson.core.JsonLocation jsonLocation93 = uTF8StreamJsonParser84.getTokenLocation();
        java.lang.Object obj94 = uTF8StreamJsonParser84.getObjectId();
        com.fasterxml.jackson.core.JsonLocation jsonLocation95 = uTF8StreamJsonParser84.getCurrentLocation();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(jsonLocation93);
        org.junit.Assert.assertNull(obj94);
        org.junit.Assert.assertNotNull(jsonLocation95);
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3121");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getValueAsInt();
        int int87 = uTF8StreamJsonParser84.getValueAsInt((int) 'a');
        boolean boolean89 = uTF8StreamJsonParser84.getValueAsBoolean(true);
        com.fasterxml.jackson.core.JsonToken jsonToken90 = uTF8StreamJsonParser84.getCurrentToken();
        long long92 = uTF8StreamJsonParser84.getValueAsLong(1L);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str93 = uTF8StreamJsonParser84.nextTextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 97 + "'", int87 == 97);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNull(jsonToken90);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 1L + "'", long92 == 1L);
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3035");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        int int93 = uTF8StreamJsonParser84.getValueAsInt((int) (short) -1);
        boolean boolean94 = uTF8StreamJsonParser84.hasTextCharacters();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3494");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.JsonParser jsonParser90 = uTF8StreamJsonParser84.skipChildren();
        com.fasterxml.jackson.core.Version version91 = uTF8StreamJsonParser84.version();
        boolean boolean92 = uTF8StreamJsonParser84.canReadObjectId();
        long long93 = uTF8StreamJsonParser84.getTokenCharacterOffset();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext94 = uTF8StreamJsonParser84.getParsingContext();
        int int95 = uTF8StreamJsonParser84.getTextOffset();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonParser90);
        org.junit.Assert.assertNotNull(version91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
        org.junit.Assert.assertNotNull(jsonStreamContext94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3233");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        long long93 = uTF8StreamJsonParser84.getTokenCharacterOffset();
        com.fasterxml.jackson.core.Version version94 = uTF8StreamJsonParser84.version();
        int int95 = uTF8StreamJsonParser84.getTextLength();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
        org.junit.Assert.assertNotNull(version94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3346");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        int int89 = uTF8StreamJsonParser84.getValueAsInt();
        com.fasterxml.jackson.core.JsonToken jsonToken90 = uTF8StreamJsonParser84.getCurrentToken();
        com.fasterxml.jackson.core.JsonToken jsonToken91 = uTF8StreamJsonParser84.getCurrentToken();
        com.fasterxml.jackson.core.JsonParser.Feature feature92 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean93 = uTF8StreamJsonParser84.isEnabled(feature92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNull(jsonToken90);
        org.junit.Assert.assertNull(jsonToken91);
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3428");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        char[] charArray89 = uTF8StreamJsonParser84.getTextCharacters();
        java.lang.Object obj90 = uTF8StreamJsonParser84.getInputSource();
        boolean boolean91 = uTF8StreamJsonParser84.isClosed();
        com.fasterxml.jackson.core.JsonParser.Feature feature92 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser jsonParser93 = uTF8StreamJsonParser84.disable(feature92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNull(charArray89);
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3277");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        boolean boolean91 = uTF8StreamJsonParser84.hasTextCharacters();
        com.fasterxml.jackson.core.Version version92 = uTF8StreamJsonParser84.version();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Boolean boolean93 = uTF8StreamJsonParser84.nextBooleanValue();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(version92);
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3167");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getValueAsInt();
        int int87 = uTF8StreamJsonParser84.getValueAsInt((int) 'a');
        boolean boolean89 = uTF8StreamJsonParser84.getValueAsBoolean(true);
        com.fasterxml.jackson.core.Version version90 = uTF8StreamJsonParser84.version();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean91 = uTF8StreamJsonParser84.getBooleanValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not of boolean type? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 97 + "'", int87 == 97);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(version90);
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3234");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.Version version92 = uTF8StreamJsonParser84.version();
        double double94 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) 100);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNotNull(version92);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 100.0d + "'", double94 == 100.0d);
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1486");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonFactory.Feature feature2 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean4 = feature2.enabledIn(3);
        boolean boolean5 = jsonFactory1.isEnabled(feature2);
        com.fasterxml.jackson.core.ObjectCodec objectCodec6 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = new com.fasterxml.jackson.core.JsonFactory(objectCodec6);
        com.fasterxml.jackson.core.JsonFactory.Feature feature8 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean10 = feature8.enabledIn(3);
        boolean boolean11 = jsonFactory7.isEnabled(feature8);
        com.fasterxml.jackson.core.JsonParser.Feature feature12 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
        com.fasterxml.jackson.core.JsonFactory jsonFactory13 = jsonFactory7.disable(feature12);
        com.fasterxml.jackson.core.JsonFactory jsonFactory14 = jsonFactory1.disable(feature12);
        java.io.OutputStream outputStream15 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator16 = jsonFactory1.createGenerator(outputStream15);
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator17 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory18 = jsonFactory1.setInputDecorator(inputDecorator17);
        com.fasterxml.jackson.core.JsonParser jsonParser20 = jsonFactory18.createJsonParser("false");
        boolean boolean21 = jsonParser20.requiresCustomCodec();
        long long23 = jsonParser20.nextLongValue(0L);
        jsonParser20.close();
        int int26 = jsonParser20.nextIntValue((-1419584404));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature2.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature8.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES + "'", feature12.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES));
        org.junit.Assert.assertNotNull(jsonFactory13);
        org.junit.Assert.assertNotNull(jsonFactory14);
        org.junit.Assert.assertNotNull(jsonGenerator16);
        org.junit.Assert.assertNotNull(jsonFactory18);
        org.junit.Assert.assertNotNull(jsonParser20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1419584404) + "'", int26 == (-1419584404));
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3037");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        boolean boolean92 = uTF8StreamJsonParser84.getValueAsBoolean();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonToken jsonToken93 = uTF8StreamJsonParser84.nextToken();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2751");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext89 = uTF8StreamJsonParser84.getParsingContext();
        com.fasterxml.jackson.core.JsonParser jsonParser91 = uTF8StreamJsonParser84.setFeatureMask(10);
        // The following exception was thrown during execution in test generation
        try {
            int int92 = uTF8StreamJsonParser84.getIntValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNotNull(jsonStreamContext89);
        org.junit.Assert.assertNotNull(jsonParser91);
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3265");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext89 = uTF8StreamJsonParser84.getParsingContext();
        com.fasterxml.jackson.core.JsonParser jsonParser91 = uTF8StreamJsonParser84.setFeatureMask(10);
        int int92 = uTF8StreamJsonParser84.getTokenColumnNr();
        java.lang.String str93 = uTF8StreamJsonParser84.getCurrentName();
        com.fasterxml.jackson.core.JsonParser jsonParser95 = uTF8StreamJsonParser84.setFeatureMask((int) '#');
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNotNull(jsonStreamContext89);
        org.junit.Assert.assertNotNull(jsonParser91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "[Source: hi!; line: 52, column: 1]" + "'", str93, "[Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNotNull(jsonParser95);
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2810");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonToken jsonToken88 = uTF8StreamJsonParser84.getCurrentToken();
        int int89 = uTF8StreamJsonParser84.getTextOffset();
        int int91 = uTF8StreamJsonParser84.getValueAsInt((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal92 = uTF8StreamJsonParser84.getDecimalValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(jsonToken88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3632");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext89 = uTF8StreamJsonParser84.getParsingContext();
        com.fasterxml.jackson.core.JsonParser jsonParser91 = uTF8StreamJsonParser84.setFeatureMask(97);
        // The following exception was thrown during execution in test generation
        try {
            byte byte92 = jsonParser91.getByteValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNotNull(jsonStreamContext89);
        org.junit.Assert.assertNotNull(jsonParser91);
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3257");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = defaultPrettyPrinter1._withSpaces(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter5 = defaultPrettyPrinter1._withSpaces(false);
        com.fasterxml.jackson.core.io.SerializedString serializedString7 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray12 = new char[] { 'a', ' ', '#', '4' };
        int int14 = serializedString7.appendUnquoted(charArray12, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray21 = new char[] { 'a', ' ', '#', '4' };
        int int23 = serializedString16.appendUnquoted(charArray21, 0);
        boolean boolean24 = serializedString7.equals((java.lang.Object) serializedString16);
        char[] charArray25 = serializedString7.asQuotedChars();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter26 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter1, (com.fasterxml.jackson.core.SerializableString) serializedString7);
        int int27 = defaultPrettyPrinter26._nesting;
        int int28 = defaultPrettyPrinter26._nesting;
        org.junit.Assert.assertNotNull(defaultPrettyPrinter3);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter5);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3498");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter24 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.SerializableString serializableString25 = defaultPrettyPrinter21._rootSeparator;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter lf2SpacesIndenter27 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter28 = defaultPrettyPrinter21.withObjectIndenter((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) lf2SpacesIndenter27);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator29 = null;
        // The following exception was thrown during execution in test generation
        try {
            lf2SpacesIndenter27.writeIndentation(jsonGenerator29, 63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter24);
        org.junit.Assert.assertNotNull(serializableString25);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter28);
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3479");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getValueAsInt();
        int int87 = uTF8StreamJsonParser84.getValueAsInt((int) 'a');
        boolean boolean89 = uTF8StreamJsonParser84.getValueAsBoolean(true);
        double double91 = uTF8StreamJsonParser84.getValueAsDouble((double) 47L);
        uTF8StreamJsonParser84.overrideCurrentName("");
        long long95 = uTF8StreamJsonParser84.getValueAsLong(0L);
        java.lang.Object obj96 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int97 = uTF8StreamJsonParser84.getValueAsInt();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 97 + "'", int87 == 97);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 47.0d + "'", double91 == 47.0d);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 0L + "'", long95 == 0L);
        org.junit.Assert.assertNull(obj96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3242");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        int int92 = uTF8StreamJsonParser84.getTextLength();
        boolean boolean93 = uTF8StreamJsonParser84.getValueAsBoolean();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3375");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter24 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.SerializableString serializableString25 = defaultPrettyPrinter21._rootSeparator;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter lf2SpacesIndenter27 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter28 = defaultPrettyPrinter21.withObjectIndenter((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) lf2SpacesIndenter27);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator29 = null;
        // The following exception was thrown during execution in test generation
        try {
            lf2SpacesIndenter27.writeIndentation(jsonGenerator29, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter24);
        org.junit.Assert.assertNotNull(serializableString25);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter28);
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3325");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec88 = uTF8StreamJsonParser84.getCodec();
        char[] charArray89 = uTF8StreamJsonParser84.getTextCharacters();
        double double91 = uTF8StreamJsonParser84.getValueAsDouble((double) (-1));
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal92 = uTF8StreamJsonParser84.getDecimalValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(objectCodec88);
        org.junit.Assert.assertNull(charArray89);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + (-1.0d) + "'", double91 == (-1.0d));
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3413");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        com.fasterxml.jackson.core.Version version90 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.JsonLocation jsonLocation91 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.Version version92 = uTF8StreamJsonParser84.version();
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.Version version95 = uTF8StreamJsonParser84.version();
        uTF8StreamJsonParser84.overrideCurrentName("hi!");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(version90);
        org.junit.Assert.assertNotNull(jsonLocation91);
        org.junit.Assert.assertNotNull(version92);
        org.junit.Assert.assertNotNull(version95);
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3304");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext89 = uTF8StreamJsonParser84.getParsingContext();
        com.fasterxml.jackson.core.JsonParser jsonParser91 = uTF8StreamJsonParser84.setFeatureMask(10);
        int int92 = uTF8StreamJsonParser84.getTokenColumnNr();
        java.lang.String str93 = uTF8StreamJsonParser84.getCurrentName();
        com.fasterxml.jackson.core.FormatSchema formatSchema94 = uTF8StreamJsonParser84.getSchema();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNotNull(jsonStreamContext89);
        org.junit.Assert.assertNotNull(jsonParser91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "[Source: hi!; line: 52, column: 1]" + "'", str93, "[Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNull(formatSchema94);
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2902");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonParseException: ");
        com.fasterxml.jackson.core.io.SerializedString serializedString3 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray8 = new char[] { 'a', ' ', '#', '4' };
        int int10 = serializedString3.appendUnquoted(charArray8, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString12 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray17 = new char[] { 'a', ' ', '#', '4' };
        int int19 = serializedString12.appendUnquoted(charArray17, 0);
        boolean boolean20 = serializedString3.equals((java.lang.Object) serializedString12);
        char[] charArray27 = new char[] { '#', '#', 'a', 'a', ' ', '#' };
        boolean boolean31 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray27, (int) (byte) -1, 0, true);
        int int33 = serializedString3.appendUnquoted(charArray27, (-1));
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter34 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter1, (com.fasterxml.jackson.core.SerializableString) serializedString3);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator35 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter1.writeObjectFieldValueSeparator(jsonGenerator35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "##aa #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "##aa #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[#, #, a, a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1082");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonFactory.Feature feature2 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean4 = feature2.enabledIn(3);
        boolean boolean5 = jsonFactory1.isEnabled(feature2);
        com.fasterxml.jackson.core.ObjectCodec objectCodec6 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = new com.fasterxml.jackson.core.JsonFactory(objectCodec6);
        com.fasterxml.jackson.core.JsonFactory.Feature feature8 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean10 = feature8.enabledIn(3);
        boolean boolean11 = jsonFactory7.isEnabled(feature8);
        com.fasterxml.jackson.core.JsonParser.Feature feature12 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
        com.fasterxml.jackson.core.JsonFactory jsonFactory13 = jsonFactory7.disable(feature12);
        com.fasterxml.jackson.core.JsonFactory jsonFactory14 = jsonFactory1.disable(feature12);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes15 = jsonFactory14.getCharacterEscapes();
        com.fasterxml.jackson.core.io.OutputDecorator outputDecorator16 = jsonFactory14.getOutputDecorator();
        java.io.Writer writer17 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator18 = jsonFactory14.createGenerator(writer17);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler19 = jsonFactory14._getBufferRecycler();
        com.fasterxml.jackson.core.JsonFactory jsonFactory20 = jsonFactory14.copy();
        com.fasterxml.jackson.core.JsonParser jsonParser22 = jsonFactory14.createJsonParser("[Source: -1; line: 1, column: 1]");
        jsonParser22.overrideCurrentName("[0]");
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature2.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature8.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES + "'", feature12.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES));
        org.junit.Assert.assertNotNull(jsonFactory13);
        org.junit.Assert.assertNotNull(jsonFactory14);
        org.junit.Assert.assertNull(characterEscapes15);
        org.junit.Assert.assertNull(outputDecorator16);
        org.junit.Assert.assertNotNull(jsonGenerator18);
        org.junit.Assert.assertNotNull(bufferRecycler19);
        org.junit.Assert.assertNotNull(jsonFactory20);
        org.junit.Assert.assertNotNull(jsonParser22);
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3019");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonParseException: ");
        com.fasterxml.jackson.core.SerializableString serializableString2 = null;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter1, serializableString2);
        com.fasterxml.jackson.core.io.SerializedString serializedString5 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int12 = serializedString5.appendQuotedUTF8(byteArray10, 0);
        char[] charArray13 = serializedString5.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString15 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int22 = serializedString15.appendQuotedUTF8(byteArray20, 0);
        int int24 = serializedString5.appendUnquotedUTF8(byteArray20, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter25 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString5);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter26 = defaultPrettyPrinter25._objectIndenter;
        defaultPrettyPrinter3._arrayIndenter = indenter26;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator28 = null;
        // The following exception was thrown during execution in test generation
        try {
            indenter26.writeIndentation(jsonGenerator28, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(indenter26);
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3582");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext89 = uTF8StreamJsonParser84.getParsingContext();
        com.fasterxml.jackson.core.JsonParser jsonParser91 = uTF8StreamJsonParser84.setFeatureMask(10);
        com.fasterxml.jackson.core.util.ByteArrayBuilder byteArrayBuilder92 = uTF8StreamJsonParser84._getByteArrayBuilder();
        boolean boolean93 = uTF8StreamJsonParser84.canReadTypeId();
        java.lang.String str95 = uTF8StreamJsonParser84.getValueAsString("hi!");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNotNull(jsonStreamContext89);
        org.junit.Assert.assertNotNull(jsonParser91);
        org.junit.Assert.assertNotNull(byteArrayBuilder92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "hi!" + "'", str95, "hi!");
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2820");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonToken jsonToken88 = uTF8StreamJsonParser84.getCurrentToken();
        int int89 = uTF8StreamJsonParser84.getTextOffset();
        int int91 = uTF8StreamJsonParser84.getValueAsInt((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number92 = uTF8StreamJsonParser84.getNumberValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(jsonToken88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3165");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        com.fasterxml.jackson.core.JsonLocation jsonLocation93 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.FormatSchema formatSchema94 = null;
        boolean boolean95 = uTF8StreamJsonParser84.canUseSchema(formatSchema94);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(jsonLocation93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3502");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        boolean boolean93 = uTF8StreamJsonParser84.isClosed();
        java.lang.String str94 = uTF8StreamJsonParser84.getText();
        com.fasterxml.jackson.core.Version version95 = uTF8StreamJsonParser84.version();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNull(str94);
        org.junit.Assert.assertNotNull(version95);
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3469");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        com.fasterxml.jackson.core.Version version90 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.JsonLocation jsonLocation91 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.Version version92 = uTF8StreamJsonParser84.version();
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.Version version95 = uTF8StreamJsonParser84.version();
        uTF8StreamJsonParser84.clearCurrentToken();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(version90);
        org.junit.Assert.assertNotNull(jsonLocation91);
        org.junit.Assert.assertNotNull(version92);
        org.junit.Assert.assertNotNull(version95);
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3018");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec88 = uTF8StreamJsonParser84.getCodec();
        char[] charArray89 = uTF8StreamJsonParser84.getTextCharacters();
        int int90 = uTF8StreamJsonParser84.getTokenColumnNr();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser.NumberType numberType91 = uTF8StreamJsonParser84.getNumberType();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(objectCodec88);
        org.junit.Assert.assertNull(charArray89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3319");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        int int10 = serializedString1.charLength();
        com.fasterxml.jackson.core.io.SerializedString serializedString12 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray17 = new char[] { 'a', ' ', '#', '4' };
        int int19 = serializedString12.appendUnquoted(charArray17, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString21 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray26 = new char[] { 'a', ' ', '#', '4' };
        int int28 = serializedString21.appendUnquoted(charArray26, 0);
        boolean boolean29 = serializedString12.equals((java.lang.Object) serializedString21);
        byte[] byteArray30 = serializedString12.asUnquotedUTF8();
        int int32 = serializedString1.appendQuotedUTF8(byteArray30, 34);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 47 + "'", int10 == 47);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2704");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        mergedStream64.mark((int) (short) 10);
        mergedStream64.reset();
        com.fasterxml.jackson.core.io.SerializedString serializedString69 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int76 = serializedString69.appendQuotedUTF8(byteArray74, 0);
        char[] charArray77 = serializedString69.asQuotedChars();
        byte[] byteArray82 = new byte[] { (byte) 10, (byte) 1, (byte) 0, (byte) 100 };
        int int84 = serializedString69.appendUnquotedUTF8(byteArray82, (int) (short) 10);
        com.fasterxml.jackson.core.io.MergedStream mergedStream87 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray82, (int) ' ', 34);
        mergedStream64.mark(1);
        boolean boolean90 = mergedStream64.markSupported();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[10, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3061");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        byte[] byteArray57 = null;
        iOContext12.releaseBase64Buffer(byteArray57);
        java.lang.Object obj59 = iOContext12.getSourceReference();
        boolean boolean60 = iOContext12.isResourceManaged();
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding61 = iOContext12.getEncoding();
        com.fasterxml.jackson.core.io.SerializedString serializedString63 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray68 = new char[] { 'a', ' ', '#', '4' };
        int int70 = serializedString63.appendUnquoted(charArray68, 0);
        boolean boolean74 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray68, 1, (int) (byte) 1, false);
        // The following exception was thrown during execution in test generation
        try {
            iOContext12.releaseConcatBuffer(charArray68);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Trying to release buffer not owned by the context");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(jsonEncoding61);
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray68), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray68), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray68), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2795");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonParseException: ");
        com.fasterxml.jackson.core.io.SerializedString serializedString3 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray8 = new char[] { 'a', ' ', '#', '4' };
        int int10 = serializedString3.appendUnquoted(charArray8, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString12 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray17 = new char[] { 'a', ' ', '#', '4' };
        int int19 = serializedString12.appendUnquoted(charArray17, 0);
        boolean boolean20 = serializedString3.equals((java.lang.Object) serializedString12);
        char[] charArray27 = new char[] { '#', '#', 'a', 'a', ' ', '#' };
        boolean boolean31 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray27, (int) (byte) -1, 0, true);
        int int33 = serializedString3.appendUnquoted(charArray27, (-1));
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter34 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter1, (com.fasterxml.jackson.core.SerializableString) serializedString3);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator35 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter34.writeStartObject(jsonGenerator35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "##aa #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "##aa #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[#, #, a, a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3388");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        // The following exception was thrown during execution in test generation
        try {
            float float92 = uTF8StreamJsonParser84.getFloatValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1419");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonFactory.Feature feature2 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean4 = feature2.enabledIn(3);
        boolean boolean5 = jsonFactory1.isEnabled(feature2);
        com.fasterxml.jackson.core.ObjectCodec objectCodec6 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = new com.fasterxml.jackson.core.JsonFactory(objectCodec6);
        com.fasterxml.jackson.core.JsonFactory.Feature feature8 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean10 = feature8.enabledIn(3);
        boolean boolean11 = jsonFactory7.isEnabled(feature8);
        com.fasterxml.jackson.core.JsonParser.Feature feature12 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
        com.fasterxml.jackson.core.JsonFactory jsonFactory13 = jsonFactory7.disable(feature12);
        com.fasterxml.jackson.core.JsonFactory jsonFactory14 = jsonFactory1.disable(feature12);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler15 = jsonFactory14._getBufferRecycler();
        com.fasterxml.jackson.core.util.TextBuffer textBuffer16 = new com.fasterxml.jackson.core.util.TextBuffer(bufferRecycler15);
        java.lang.Object obj17 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext19 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler15, obj17, false);
        byte[] byteArray20 = null;
        iOContext19.releaseBase64Buffer(byteArray20);
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding22 = com.fasterxml.jackson.core.JsonEncoding.UTF16_BE;
        iOContext19.setEncoding(jsonEncoding22);
        char[] charArray24 = iOContext19.allocConcatBuffer();
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature2.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature8.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES + "'", feature12.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES));
        org.junit.Assert.assertNotNull(jsonFactory13);
        org.junit.Assert.assertNotNull(jsonFactory14);
        org.junit.Assert.assertNotNull(bufferRecycler15);
        org.junit.Assert.assertTrue("'" + jsonEncoding22 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF16_BE + "'", jsonEncoding22.equals(com.fasterxml.jackson.core.JsonEncoding.UTF16_BE));
        org.junit.Assert.assertNotNull(charArray24);
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3139");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext89 = uTF8StreamJsonParser84.getParsingContext();
        com.fasterxml.jackson.core.JsonParser jsonParser91 = uTF8StreamJsonParser84.setFeatureMask(10);
        int int92 = uTF8StreamJsonParser84.getTokenColumnNr();
        java.lang.String str93 = uTF8StreamJsonParser84.getCurrentName();
        com.fasterxml.jackson.core.Version version94 = uTF8StreamJsonParser84.version();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNotNull(jsonStreamContext89);
        org.junit.Assert.assertNotNull(jsonParser91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "[Source: hi!; line: 52, column: 1]" + "'", str93, "[Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNotNull(version94);
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2864");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonParseException: ");
        com.fasterxml.jackson.core.io.SerializedString serializedString3 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray8 = new char[] { 'a', ' ', '#', '4' };
        int int10 = serializedString3.appendUnquoted(charArray8, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString12 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray17 = new char[] { 'a', ' ', '#', '4' };
        int int19 = serializedString12.appendUnquoted(charArray17, 0);
        boolean boolean20 = serializedString3.equals((java.lang.Object) serializedString12);
        char[] charArray27 = new char[] { '#', '#', 'a', 'a', ' ', '#' };
        boolean boolean31 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray27, (int) (byte) -1, 0, true);
        int int33 = serializedString3.appendUnquoted(charArray27, (-1));
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter34 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter1, (com.fasterxml.jackson.core.SerializableString) serializedString3);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator35 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter1.writeStartArray(jsonGenerator35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "##aa #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "##aa #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[#, #, a, a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2768");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonParseException: ");
        com.fasterxml.jackson.core.io.SerializedString serializedString3 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray8 = new char[] { 'a', ' ', '#', '4' };
        int int10 = serializedString3.appendUnquoted(charArray8, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString12 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray17 = new char[] { 'a', ' ', '#', '4' };
        int int19 = serializedString12.appendUnquoted(charArray17, 0);
        boolean boolean20 = serializedString3.equals((java.lang.Object) serializedString12);
        char[] charArray27 = new char[] { '#', '#', 'a', 'a', ' ', '#' };
        boolean boolean31 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray27, (int) (byte) -1, 0, true);
        int int33 = serializedString3.appendUnquoted(charArray27, (-1));
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter34 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter1, (com.fasterxml.jackson.core.SerializableString) serializedString3);
        java.io.OutputStream outputStream35 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int36 = serializedString3.writeQuotedUTF8(outputStream35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "##aa #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "##aa #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[#, #, a, a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3482");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        com.fasterxml.jackson.core.JsonParser jsonParser87 = uTF8StreamJsonParser84.skipChildren();
        java.lang.Object obj88 = uTF8StreamJsonParser84.getTypeId();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean89 = uTF8StreamJsonParser84.getBooleanValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not of boolean type? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertNotNull(jsonParser87);
        org.junit.Assert.assertNull(obj88);
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3223");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        double double93 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) 10);
        java.lang.String str94 = uTF8StreamJsonParser84.getText();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 10.0d + "'", double93 == 10.0d);
        org.junit.Assert.assertNull(str94);
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3246");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        java.lang.String str80 = textBuffer76.toString();
        boolean boolean81 = textBuffer76.hasTextAsCharacters();
        char[] charArray82 = textBuffer76.finishCurrentSegment();
        textBuffer76.ensureNotShared();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "a" + "'", str80, "a");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(charArray82);
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2922");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        boolean boolean89 = uTF8StreamJsonParser84.hasTextCharacters();
        boolean boolean90 = uTF8StreamJsonParser84.isClosed();
        int int92 = uTF8StreamJsonParser84.getValueAsInt(47);
        // The following exception was thrown during execution in test generation
        try {
            long long94 = uTF8StreamJsonParser84.nextLongValue((long) 72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 47 + "'", int92 == 47);
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2612");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        char[] charArray81 = new char[] { '4', 'a', '4', '#', ' ' };
        int int84 = com.fasterxml.jackson.core.io.NumberInput.parseInt(charArray81, 0, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            iOContext12.releaseTokenBuffer(charArray81);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Trying to release buffer not owned by the context");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(charArray81);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray81), "4a4# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray81), "4a4# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray81), "[4, a, 4, #,  ]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 4 + "'", int84 == 4);
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2920");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        com.fasterxml.jackson.core.Version version90 = uTF8StreamJsonParser84.version();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger91 = uTF8StreamJsonParser84.getBigIntegerValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(version90);
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3417");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        int int89 = uTF8StreamJsonParser84.getTextOffset();
        double double91 = uTF8StreamJsonParser84.getValueAsDouble((double) 10.0f);
        com.fasterxml.jackson.core.JsonLocation jsonLocation92 = uTF8StreamJsonParser84.getCurrentLocation();
        boolean boolean93 = uTF8StreamJsonParser84.canReadObjectId();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext94 = uTF8StreamJsonParser84.getParsingContext();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 10.0d + "'", double91 == 10.0d);
        org.junit.Assert.assertNotNull(jsonLocation92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(jsonStreamContext94);
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2964");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        double double88 = uTF8StreamJsonParser84.getValueAsDouble((double) 63);
        char[] charArray89 = uTF8StreamJsonParser84.getTextCharacters();
        com.fasterxml.jackson.core.JsonLocation jsonLocation90 = uTF8StreamJsonParser84.getCurrentLocation();
        com.fasterxml.jackson.core.JsonLocation jsonLocation91 = uTF8StreamJsonParser84.getCurrentLocation();
        int int92 = uTF8StreamJsonParser84.getTokenColumnNr();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 63.0d + "'", double88 == 63.0d);
        org.junit.Assert.assertNull(charArray89);
        org.junit.Assert.assertNotNull(jsonLocation90);
        org.junit.Assert.assertNotNull(jsonLocation91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3382");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        java.lang.String str80 = textBuffer76.toString();
        boolean boolean81 = textBuffer76.hasTextAsCharacters();
        int int82 = textBuffer76.getTextOffset();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "a" + "'", str80, "a");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3384");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        com.fasterxml.jackson.core.Version version90 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.JsonLocation jsonLocation91 = uTF8StreamJsonParser84.getTokenLocation();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonToken jsonToken92 = uTF8StreamJsonParser84.nextToken();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(version90);
        org.junit.Assert.assertNotNull(jsonLocation91);
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3147");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int27 = serializedString20.appendQuotedUTF8(byteArray25, 0);
        char[] charArray28 = serializedString20.asQuotedChars();
        boolean boolean29 = serializedString1.equals((java.lang.Object) serializedString20);
        java.nio.ByteBuffer byteBuffer30 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int31 = serializedString20.putQuotedUTF8(byteBuffer30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2742");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        com.fasterxml.jackson.core.Version version90 = uTF8StreamJsonParser84.version();
        boolean boolean91 = uTF8StreamJsonParser84.hasCurrentToken();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonToken jsonToken92 = uTF8StreamJsonParser84.nextToken();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(version90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1462");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonFactory.Feature feature2 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean4 = feature2.enabledIn(3);
        boolean boolean5 = jsonFactory1.isEnabled(feature2);
        com.fasterxml.jackson.core.ObjectCodec objectCodec6 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = new com.fasterxml.jackson.core.JsonFactory(objectCodec6);
        com.fasterxml.jackson.core.JsonFactory.Feature feature8 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean10 = feature8.enabledIn(3);
        boolean boolean11 = jsonFactory7.isEnabled(feature8);
        com.fasterxml.jackson.core.JsonParser.Feature feature12 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
        com.fasterxml.jackson.core.JsonFactory jsonFactory13 = jsonFactory7.disable(feature12);
        com.fasterxml.jackson.core.JsonFactory jsonFactory14 = jsonFactory1.disable(feature12);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler15 = jsonFactory14._getBufferRecycler();
        com.fasterxml.jackson.core.util.TextBuffer textBuffer16 = new com.fasterxml.jackson.core.util.TextBuffer(bufferRecycler15);
        java.lang.String str17 = textBuffer16.contentsAsString();
        textBuffer16.setCurrentLength((int) (short) 1);
        char[] charArray20 = textBuffer16.contentsAsArray();
        textBuffer16.resetWithEmpty();
        textBuffer16.setCurrentLength(56);
        textBuffer16.resetWithEmpty();
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature2.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature8.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES + "'", feature12.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES));
        org.junit.Assert.assertNotNull(jsonFactory13);
        org.junit.Assert.assertNotNull(jsonFactory14);
        org.junit.Assert.assertNotNull(bufferRecycler15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[]");
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2747");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = serializedString20.asUnquotedUTF8();
        int int23 = serializedString1.appendQuotedUTF8(byteArray21, (int) (short) 1);
        char[] charArray24 = serializedString1.asQuotedChars();
        // The following exception was thrown during execution in test generation
        try {
            long long27 = com.fasterxml.jackson.core.io.NumberInput.parseLong(charArray24, (int) 'a', 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2686");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = defaultPrettyPrinter1._withSpaces(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter5 = defaultPrettyPrinter1._withSpaces(false);
        com.fasterxml.jackson.core.io.SerializedString serializedString7 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray12 = new char[] { 'a', ' ', '#', '4' };
        int int14 = serializedString7.appendUnquoted(charArray12, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray21 = new char[] { 'a', ' ', '#', '4' };
        int int23 = serializedString16.appendUnquoted(charArray21, 0);
        boolean boolean24 = serializedString7.equals((java.lang.Object) serializedString16);
        char[] charArray25 = serializedString7.asQuotedChars();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter26 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter1, (com.fasterxml.jackson.core.SerializableString) serializedString7);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter27 = null;
        defaultPrettyPrinter1.indentObjectsWith(indenter27);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter3);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter5);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3562");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter24 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter25 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter26 = defaultPrettyPrinter25.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter27 = defaultPrettyPrinter25.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator28 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter27.writeRootValueSeparator(jsonGenerator28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter24);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter25);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter26);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter27);
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2786");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = serializedString20.asUnquotedUTF8();
        int int23 = serializedString1.appendQuotedUTF8(byteArray21, (int) (short) 1);
        char[] charArray24 = serializedString1.asQuotedChars();
        // The following exception was thrown during execution in test generation
        try {
            int int27 = com.fasterxml.jackson.core.io.NumberInput.parseInt(charArray24, (int) (byte) 100, 35);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1347");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) (byte) -1, true);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler4 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler4, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream8 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer9 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext7, outputStream8);
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding10 = com.fasterxml.jackson.core.JsonEncoding.UTF16_BE;
        iOContext7.setEncoding(jsonEncoding10);
        java.io.Reader reader13 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec14 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer15 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int17 = charsToNameCanonicalizer15.calcHash("false");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser18 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (-1954973613), reader13, objectCodec14, charsToNameCanonicalizer15);
        com.fasterxml.jackson.core.util.ByteArrayBuilder byteArrayBuilder19 = readerBasedJsonParser18._getByteArrayBuilder();
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer20 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext3, (java.io.OutputStream) byteArrayBuilder19);
        char[] charArray21 = iOContext3.allocConcatBuffer();
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler22 = null;
        com.fasterxml.jackson.core.util.TextBuffer textBuffer23 = new com.fasterxml.jackson.core.util.TextBuffer(bufferRecycler22);
        textBuffer23.append(' ');
        textBuffer23.resetWithString("hi!");
        char[] charArray28 = textBuffer23.expandCurrentSegment();
        char[] charArray29 = textBuffer23.finishCurrentSegment();
        textBuffer23.releaseBuffers();
        char[] charArray31 = textBuffer23.expandCurrentSegment();
        // The following exception was thrown during execution in test generation
        try {
            iOContext3.releaseTokenBuffer(charArray31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Trying to release buffer not owned by the context");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + jsonEncoding10 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF16_BE + "'", jsonEncoding10.equals(com.fasterxml.jackson.core.JsonEncoding.UTF16_BE));
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer15);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 981595760 + "'", int17 == 981595760);
        org.junit.Assert.assertNotNull(byteArrayBuilder19);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertNotNull(charArray31);
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2894");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        java.lang.String str80 = textBuffer76.toString();
        boolean boolean81 = textBuffer76.hasTextAsCharacters();
        int int82 = textBuffer76.size();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "a" + "'", str80, "a");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2978");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int27 = serializedString20.appendQuotedUTF8(byteArray25, 0);
        char[] charArray28 = serializedString20.asQuotedChars();
        boolean boolean29 = serializedString1.equals((java.lang.Object) serializedString20);
        java.nio.ByteBuffer byteBuffer30 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int31 = serializedString20.putUnquotedUTF8(byteBuffer30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2534");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int27 = serializedString20.appendQuotedUTF8(byteArray25, 0);
        char[] charArray28 = serializedString20.asQuotedChars();
        boolean boolean29 = serializedString1.equals((java.lang.Object) serializedString20);
        byte[] byteArray30 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int32 = serializedString20.appendQuotedUTF8(byteArray30, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2696");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        mergedStream64.mark((int) (short) 10);
        mergedStream64.reset();
        com.fasterxml.jackson.core.io.SerializedString serializedString69 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int76 = serializedString69.appendQuotedUTF8(byteArray74, 0);
        char[] charArray77 = serializedString69.asQuotedChars();
        byte[] byteArray82 = new byte[] { (byte) 10, (byte) 1, (byte) 0, (byte) 100 };
        int int84 = serializedString69.appendUnquotedUTF8(byteArray82, (int) (short) 10);
        com.fasterxml.jackson.core.io.MergedStream mergedStream87 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray82, (int) ' ', 34);
        mergedStream64.mark(1);
        int int90 = mergedStream64.read();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[10, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 10 + "'", int90 == 10);
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3638");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter24 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter25 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter lf2SpacesIndenter27 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter lf2SpacesIndenter29 = lf2SpacesIndenter27.withLinefeed("[Source: hi!; line: 52, column: 1]");
        defaultPrettyPrinter25.indentObjectsWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) lf2SpacesIndenter27);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter lf2SpacesIndenter32 = lf2SpacesIndenter27.withLinefeed("[Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter24);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter25);
        org.junit.Assert.assertNotNull(lf2SpacesIndenter29);
        org.junit.Assert.assertNotNull(lf2SpacesIndenter32);
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1120");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream4 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer5 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext3, outputStream4);
        com.fasterxml.jackson.core.ObjectCodec objectCodec7 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler8 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext11 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler8, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream12 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer13 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext11, outputStream12);
        uTF8Writer13.flush();
        java.io.Writer writer16 = uTF8Writer13.append('a');
        com.fasterxml.jackson.core.json.WriterBasedJsonGenerator writerBasedJsonGenerator17 = new com.fasterxml.jackson.core.json.WriterBasedJsonGenerator(iOContext3, (-1959034571), objectCodec7, (java.io.Writer) uTF8Writer13);
        com.fasterxml.jackson.core.Version version18 = writerBasedJsonGenerator17.version();
        writerBasedJsonGenerator17.writeRaw("com.fasterxml.jackson.core.JsonParseException: \n\n at [Source: CANONICALIZE_FIELD_NAMES; line: 10, column: 100]");
        com.fasterxml.jackson.core.json.JsonWriteContext jsonWriteContext21 = writerBasedJsonGenerator17.getOutputContext();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator22 = writerBasedJsonGenerator17.useDefaultPrettyPrinter();
        boolean boolean23 = writerBasedJsonGenerator17.canWriteObjectId();
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator25 = writerBasedJsonGenerator17.setCodec(objectCodec24);
        com.fasterxml.jackson.core.ObjectCodec objectCodec26 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory27 = new com.fasterxml.jackson.core.JsonFactory(objectCodec26);
        java.io.Reader reader28 = null;
        com.fasterxml.jackson.core.JsonParser jsonParser29 = jsonFactory27.createParser(reader28);
        com.fasterxml.jackson.core.Version version30 = jsonParser29.version();
        int int32 = jsonParser29.getValueAsInt(0);
        com.fasterxml.jackson.core.ObjectCodec objectCodec33 = jsonParser29.getCodec();
        // The following exception was thrown during execution in test generation
        try {
            writerBasedJsonGenerator17.writeTypeId((java.lang.Object) jsonParser29);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonGenerationException; message: No native support for writing Type Ids");
        } catch (com.fasterxml.jackson.core.JsonGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(writer16);
        org.junit.Assert.assertNotNull(version18);
        org.junit.Assert.assertNotNull(jsonWriteContext21);
        org.junit.Assert.assertNotNull(jsonGenerator22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(jsonGenerator25);
        org.junit.Assert.assertNotNull(jsonParser29);
        org.junit.Assert.assertNotNull(version30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNull(objectCodec33);
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3538");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        com.fasterxml.jackson.core.ObjectCodec objectCodec87 = uTF8StreamJsonParser84.getCodec();
        java.lang.String str88 = uTF8StreamJsonParser84.getValueAsString();
        boolean boolean89 = uTF8StreamJsonParser84.isClosed();
        uTF8StreamJsonParser84.overrideCurrentName("com.fasterxml.jackson.core.JsonParseException: com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.Version version92 = uTF8StreamJsonParser84.version();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertNull(objectCodec87);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(version92);
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3252");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec88 = uTF8StreamJsonParser84.getCodec();
        int int89 = uTF8StreamJsonParser84.getTextOffset();
        java.lang.String str90 = uTF8StreamJsonParser84.getText();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray91 = uTF8StreamJsonParser84.getBinaryValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(objectCodec88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNull(str90);
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2866");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        com.fasterxml.jackson.core.Version version90 = uTF8StreamJsonParser84.version();
        // The following exception was thrown during execution in test generation
        try {
            float float91 = uTF8StreamJsonParser84.getFloatValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(version90);
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3435");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        com.fasterxml.jackson.core.FormatSchema formatSchema89 = null;
        boolean boolean90 = uTF8StreamJsonParser84.canUseSchema(formatSchema89);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal91 = uTF8StreamJsonParser84.getDecimalValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2916");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        boolean boolean89 = uTF8StreamJsonParser84.hasTextCharacters();
        boolean boolean90 = uTF8StreamJsonParser84.isClosed();
        com.fasterxml.jackson.core.JsonParser.Feature feature91 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser jsonParser93 = uTF8StreamJsonParser84.configure(feature91, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3320");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonToken jsonToken88 = uTF8StreamJsonParser84.getCurrentToken();
        uTF8StreamJsonParser84.clearCurrentToken();
        int int90 = uTF8StreamJsonParser84.getTextOffset();
        uTF8StreamJsonParser84.clearCurrentToken();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal92 = uTF8StreamJsonParser84.getDecimalValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(jsonToken88);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3269");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter24 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter25 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter21);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter27 = defaultPrettyPrinter25._withSpaces(true);
        boolean boolean28 = defaultPrettyPrinter25._spacesInObjectEntries;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator29 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter25.writeStartObject(jsonGenerator29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter24);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3613");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        java.lang.Object obj89 = uTF8StreamJsonParser84.getObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: ");
        int int93 = uTF8StreamJsonParser84.getValueAsInt(0);
        com.fasterxml.jackson.core.FormatSchema formatSchema94 = null;
        boolean boolean95 = uTF8StreamJsonParser84.canUseSchema(formatSchema94);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNull(obj89);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str91, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3280");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        java.lang.Object obj89 = uTF8StreamJsonParser84.getObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: ");
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonToken jsonToken92 = uTF8StreamJsonParser84.nextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNull(obj89);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str91, "com.fasterxml.jackson.core.JsonParseException: ");
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2912");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        com.fasterxml.jackson.core.JsonToken jsonToken89 = uTF8StreamJsonParser84.getLastClearedToken();
        java.lang.String str90 = uTF8StreamJsonParser84.getValueAsString();
        // The following exception was thrown during execution in test generation
        try {
            int int91 = uTF8StreamJsonParser84.getIntValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNull(jsonToken89);
        org.junit.Assert.assertNull(str90);
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2935");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext89 = uTF8StreamJsonParser84.getParsingContext();
        com.fasterxml.jackson.core.JsonParser jsonParser91 = uTF8StreamJsonParser84.setFeatureMask(10);
        int int92 = uTF8StreamJsonParser84.getFeatureMask();
        java.lang.String str94 = uTF8StreamJsonParser84.getValueAsString("a");
        boolean boolean95 = uTF8StreamJsonParser84.canReadTypeId();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNotNull(jsonStreamContext89);
        org.junit.Assert.assertNotNull(jsonParser91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 10 + "'", int92 == 10);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "a" + "'", str94, "a");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1037");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream4 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer5 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext3, outputStream4);
        com.fasterxml.jackson.core.ObjectCodec objectCodec7 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler8 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext11 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler8, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream12 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer13 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext11, outputStream12);
        uTF8Writer13.flush();
        java.io.Writer writer16 = uTF8Writer13.append('a');
        com.fasterxml.jackson.core.json.WriterBasedJsonGenerator writerBasedJsonGenerator17 = new com.fasterxml.jackson.core.json.WriterBasedJsonGenerator(iOContext3, (-1959034571), objectCodec7, (java.io.Writer) uTF8Writer13);
        com.fasterxml.jackson.core.Version version18 = writerBasedJsonGenerator17.version();
        writerBasedJsonGenerator17.writeNumber((float) 10L);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes21 = writerBasedJsonGenerator17.getCharacterEscapes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator23 = writerBasedJsonGenerator17.setFeatureMask((-1954983162));
        jsonGenerator23.writeRaw("false");
        com.fasterxml.jackson.core.io.SerializedString serializedString27 = new com.fasterxml.jackson.core.io.SerializedString("\n");
        java.lang.String str28 = serializedString27.toString();
        char[] charArray29 = new char[] {};
        int int31 = serializedString27.appendQuoted(charArray29, (int) (byte) 10);
        int int32 = serializedString27.charLength();
        int int33 = serializedString27.charLength();
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator23.writeFieldName((com.fasterxml.jackson.core.SerializableString) serializedString27);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonGenerationException; message: Can not write a field name, expecting a value");
        } catch (com.fasterxml.jackson.core.JsonGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(writer16);
        org.junit.Assert.assertNotNull(version18);
        org.junit.Assert.assertNull(characterEscapes21);
        org.junit.Assert.assertNotNull(jsonGenerator23);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\n" + "'", str28, "\n");
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3115");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        java.lang.Object obj89 = uTF8StreamJsonParser84.getObjectId();
        java.lang.Object obj90 = uTF8StreamJsonParser84.getObjectId();
        int int92 = uTF8StreamJsonParser84.getValueAsInt((int) (byte) 1);
        com.fasterxml.jackson.core.FormatSchema formatSchema93 = null;
        // The following exception was thrown during execution in test generation
        try {
            uTF8StreamJsonParser84.setSchema(formatSchema93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNull(obj89);
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3534");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter24 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter25 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter lf2SpacesIndenter27 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter lf2SpacesIndenter29 = lf2SpacesIndenter27.withLinefeed("[Source: hi!; line: 52, column: 1]");
        defaultPrettyPrinter25.indentObjectsWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) lf2SpacesIndenter27);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter31 = defaultPrettyPrinter25.createInstance();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter24);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter25);
        org.junit.Assert.assertNotNull(lf2SpacesIndenter29);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter31);
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3473");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextLength();
        boolean boolean86 = uTF8StreamJsonParser84.canReadTypeId();
        boolean boolean87 = uTF8StreamJsonParser84.requiresCustomCodec();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray88 = uTF8StreamJsonParser84.getBinaryValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2858");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.setCurrentLength(63);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal80 = textBuffer76.contentsAsDecimal();
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3129");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.JsonParser jsonParser90 = uTF8StreamJsonParser84.skipChildren();
        com.fasterxml.jackson.core.Version version91 = uTF8StreamJsonParser84.version();
        double double93 = uTF8StreamJsonParser84.getValueAsDouble(0.0d);
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonToken jsonToken94 = uTF8StreamJsonParser84.nextToken();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonParser90);
        org.junit.Assert.assertNotNull(version91);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2936");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.getTextBuffer();
        boolean boolean78 = textBuffer76.hasTextAsCharacters();
        java.lang.String str79 = textBuffer76.contentsAsString();
        char[] charArray80 = textBuffer76.contentsAsArray();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNull(charArray77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(charArray80);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray80), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray80), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray80), "[]");
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3058");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonToken jsonToken88 = uTF8StreamJsonParser84.getCurrentToken();
        uTF8StreamJsonParser84.clearCurrentToken();
        int int90 = uTF8StreamJsonParser84.getTextOffset();
        uTF8StreamJsonParser84.clearCurrentToken();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number92 = uTF8StreamJsonParser84.getNumberValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(jsonToken88);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3043");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        int int89 = uTF8StreamJsonParser84.getTextOffset();
        double double91 = uTF8StreamJsonParser84.getValueAsDouble((double) 10.0f);
        com.fasterxml.jackson.core.JsonLocation jsonLocation92 = uTF8StreamJsonParser84.getCurrentLocation();
        long long94 = uTF8StreamJsonParser84.getValueAsLong((long) (byte) 0);
        int int95 = uTF8StreamJsonParser84.getTextOffset();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 10.0d + "'", double91 == 10.0d);
        org.junit.Assert.assertNotNull(jsonLocation92);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 0L + "'", long94 == 0L);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3365");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.setCurrentLength(63);
        // The following exception was thrown during execution in test generation
        try {
            double double80 = textBuffer76.contentsAsDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: empty String");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1331");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("hi!");
        com.fasterxml.jackson.core.SerializableString serializableString2 = defaultPrettyPrinter1._rootSeparator;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter3 = defaultPrettyPrinter1._objectIndenter;
        com.fasterxml.jackson.core.ObjectCodec objectCodec4 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = new com.fasterxml.jackson.core.JsonFactory(objectCodec4);
        java.io.Reader reader6 = null;
        com.fasterxml.jackson.core.JsonParser jsonParser7 = jsonFactory5.createParser(reader6);
        boolean boolean8 = jsonParser7.requiresCustomCodec();
        java.lang.String str9 = jsonParser7.getText();
        java.lang.Object obj10 = jsonParser7.getObjectId();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter12 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("hi!");
        com.fasterxml.jackson.core.SerializableString serializableString13 = defaultPrettyPrinter12._rootSeparator;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler14 = null;
        com.fasterxml.jackson.core.util.TextBuffer textBuffer15 = new com.fasterxml.jackson.core.util.TextBuffer(bufferRecycler14);
        char[] charArray16 = com.fasterxml.jackson.core.util.TextBuffer.NO_CHARS;
        textBuffer15.resetWithShared(charArray16, 2000, 2000);
        int int21 = serializableString13.appendUnquoted(charArray16, 0);
        boolean boolean22 = jsonParser7.nextFieldName(serializableString13);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter1.withRootSeparator(serializableString13);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter24 = defaultPrettyPrinter1.withSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter25 = defaultPrettyPrinter1._objectIndenter;
        org.junit.Assert.assertNotNull(serializableString2);
        org.junit.Assert.assertNotNull(indenter3);
        org.junit.Assert.assertNotNull(jsonParser7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNotNull(serializableString13);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter24);
        org.junit.Assert.assertNotNull(indenter25);
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3434");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getValueAsInt();
        int int87 = uTF8StreamJsonParser84.getValueAsInt((int) 'a');
        java.lang.String str89 = uTF8StreamJsonParser84.getValueAsString("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.util.ByteArrayBuilder byteArrayBuilder90 = uTF8StreamJsonParser84._getByteArrayBuilder();
        com.fasterxml.jackson.core.JsonToken jsonToken91 = uTF8StreamJsonParser84.getLastClearedToken();
        int int92 = uTF8StreamJsonParser84.getTextOffset();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 97 + "'", int87 == 97);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "[Source: hi!; line: 52, column: 1]" + "'", str89, "[Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNotNull(byteArrayBuilder90);
        org.junit.Assert.assertNull(jsonToken91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2839");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonToken jsonToken88 = uTF8StreamJsonParser84.getCurrentToken();
        int int89 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.Base64Variant base64Variant90 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray91 = uTF8StreamJsonParser84.getBinaryValue(base64Variant90);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(jsonToken88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3014");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        java.lang.String str89 = uTF8StreamJsonParser84.getText();
        java.lang.String str90 = uTF8StreamJsonParser84.getText();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger91 = uTF8StreamJsonParser84.getBigIntegerValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertNull(str90);
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3086");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        java.lang.Object obj88 = uTF8StreamJsonParser84.getEmbeddedObject();
        java.lang.String str90 = uTF8StreamJsonParser84.getValueAsString("");
        com.fasterxml.jackson.core.Base64Variant base64Variant91 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray92 = uTF8StreamJsonParser84.getBinaryValue(base64Variant91);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(obj88);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2816");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        com.fasterxml.jackson.core.Base64Variant base64Variant90 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray91 = uTF8StreamJsonParser84.getBinaryValue(base64Variant90);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2774");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        char[] charArray25 = new char[] { '#', '#', 'a', 'a', ' ', '#' };
        boolean boolean29 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray25, (int) (byte) -1, 0, true);
        int int31 = serializedString1.appendUnquoted(charArray25, (-1));
        byte[] byteArray32 = serializedString1.asUnquotedUTF8();
        java.nio.ByteBuffer byteBuffer33 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int34 = serializedString1.putUnquotedUTF8(byteBuffer33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "##aa #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "##aa #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[#, #, a, a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3510");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        java.lang.String str89 = uTF8StreamJsonParser84.getCurrentName();
        boolean boolean90 = uTF8StreamJsonParser84.getValueAsBoolean();
        int int91 = uTF8StreamJsonParser84.getTokenLineNr();
        java.lang.String str93 = uTF8StreamJsonParser84.getValueAsString("[Source: #; line: 1, column: 1]");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "[Source: hi!; line: 52, column: 1]" + "'", str89, "[Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "[Source: #; line: 1, column: 1]" + "'", str93, "[Source: #; line: 1, column: 1]");
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2807");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getValueAsInt();
        int int87 = uTF8StreamJsonParser84.getValueAsInt((int) 'a');
        boolean boolean89 = uTF8StreamJsonParser84.getValueAsBoolean(true);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger90 = uTF8StreamJsonParser84.getBigIntegerValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 97 + "'", int87 == 97);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1198");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream4 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer5 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext3, outputStream4);
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding6 = com.fasterxml.jackson.core.JsonEncoding.UTF16_BE;
        iOContext3.setEncoding(jsonEncoding6);
        java.io.Reader reader9 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec10 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer11 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int13 = charsToNameCanonicalizer11.calcHash("false");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser14 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, (-1954973613), reader9, objectCodec10, charsToNameCanonicalizer11);
        int int15 = readerBasedJsonParser14.getTextOffset();
        java.lang.String str16 = readerBasedJsonParser14.getText();
        com.fasterxml.jackson.core.JsonLocation jsonLocation17 = readerBasedJsonParser14.getTokenLocation();
        java.lang.String str18 = readerBasedJsonParser14.getCurrentName();
        boolean boolean19 = readerBasedJsonParser14.getValueAsBoolean();
        int int21 = readerBasedJsonParser14.nextIntValue(2031965886);
        boolean boolean22 = readerBasedJsonParser14.isClosed();
        com.fasterxml.jackson.core.JsonToken jsonToken23 = readerBasedJsonParser14.nextToken();
        int int25 = readerBasedJsonParser14.nextIntValue((-2070085886));
        com.fasterxml.jackson.core.JsonLocation jsonLocation26 = readerBasedJsonParser14.getCurrentLocation();
        com.fasterxml.jackson.core.Base64Variant base64Variant27 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray28 = readerBasedJsonParser14.getBinaryValue(base64Variant27);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: -1; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + jsonEncoding6 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF16_BE + "'", jsonEncoding6.equals(com.fasterxml.jackson.core.JsonEncoding.UTF16_BE));
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-139506576) + "'", int13 == (-139506576));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(jsonLocation17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2031965886 + "'", int21 == 2031965886);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(jsonToken23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-2070085886) + "'", int25 == (-2070085886));
        org.junit.Assert.assertNotNull(jsonLocation26);
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1220");
        com.fasterxml.jackson.core.io.IOContext iOContext0 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec1 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory2 = new com.fasterxml.jackson.core.JsonFactory(objectCodec1);
        com.fasterxml.jackson.core.JsonFactory.Feature feature3 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean5 = feature3.enabledIn(3);
        boolean boolean6 = jsonFactory2.isEnabled(feature3);
        com.fasterxml.jackson.core.JsonParser.Feature feature7 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
        com.fasterxml.jackson.core.JsonFactory jsonFactory8 = jsonFactory2.disable(feature7);
        java.io.OutputStream outputStream9 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator10 = jsonFactory2.createGenerator(outputStream9);
        com.fasterxml.jackson.core.io.IOContext iOContext11 = null;
        byte[] byteArray12 = com.fasterxml.jackson.core.io.CharTypes.copyHexBytes();
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper15 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext11, byteArray12, 0, 0);
        com.fasterxml.jackson.core.JsonParser jsonParser18 = jsonFactory2.createJsonParser(byteArray12, 1, (int) (short) 100);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper21 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext0, byteArray12, 1, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonEncoding jsonEncoding22 = byteSourceJsonBootstrapper21.detectEncoding();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature3.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + feature7 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES + "'", feature7.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES));
        org.junit.Assert.assertNotNull(jsonFactory8);
        org.junit.Assert.assertNotNull(jsonGenerator10);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70]");
        org.junit.Assert.assertNotNull(jsonParser18);
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3629");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext89 = uTF8StreamJsonParser84.getParsingContext();
        com.fasterxml.jackson.core.JsonParser jsonParser91 = uTF8StreamJsonParser84.setFeatureMask(97);
        com.fasterxml.jackson.core.JsonParser.Feature feature92 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean93 = uTF8StreamJsonParser84.isEnabled(feature92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNotNull(jsonStreamContext89);
        org.junit.Assert.assertNotNull(jsonParser91);
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2655");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        boolean boolean76 = iOContext12.isResourceManaged();
        java.io.Reader reader78 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec79 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer80 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser81 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext12, (int) (short) 0, reader78, objectCodec79, charsToNameCanonicalizer80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1261");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("\n");
        java.lang.String str2 = serializedString1.toString();
        java.lang.String str3 = serializedString1.getValue();
        com.fasterxml.jackson.core.ObjectCodec objectCodec4 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = new com.fasterxml.jackson.core.JsonFactory(objectCodec4);
        java.io.Reader reader6 = null;
        com.fasterxml.jackson.core.JsonParser jsonParser7 = jsonFactory5.createParser(reader6);
        com.fasterxml.jackson.core.Version version8 = jsonFactory5.version();
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler9 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler9, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream13 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer14 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext12, outputStream13);
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding15 = com.fasterxml.jackson.core.JsonEncoding.UTF16_BE;
        iOContext12.setEncoding(jsonEncoding15);
        java.io.Reader reader18 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec19 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer20 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int22 = charsToNameCanonicalizer20.calcHash("false");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser23 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext12, (-1954973613), reader18, objectCodec19, charsToNameCanonicalizer20);
        com.fasterxml.jackson.core.util.ByteArrayBuilder byteArrayBuilder24 = readerBasedJsonParser23._getByteArrayBuilder();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator25 = jsonFactory5.createGenerator((java.io.OutputStream) byteArrayBuilder24);
        int int26 = serializedString1.writeUnquotedUTF8((java.io.OutputStream) byteArrayBuilder24);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\n" + "'", str3, "\n");
        org.junit.Assert.assertNotNull(jsonParser7);
        org.junit.Assert.assertNotNull(version8);
        org.junit.Assert.assertTrue("'" + jsonEncoding15 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF16_BE + "'", jsonEncoding15.equals(com.fasterxml.jackson.core.JsonEncoding.UTF16_BE));
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer20);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 121145320 + "'", int22 == 121145320);
        org.junit.Assert.assertNotNull(byteArrayBuilder24);
        org.junit.Assert.assertNotNull(jsonGenerator25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2744");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser.NumberType numberType91 = uTF8StreamJsonParser84.getNumberType();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3604");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        char[] charArray19 = serializedString1.asQuotedChars();
        char[] charArray20 = serializedString1.asQuotedChars();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal21 = com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(charArray20);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2779");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        char[] charArray19 = serializedString1.asQuotedChars();
        char[] charArray20 = serializedString1.asQuotedChars();
        java.nio.ByteBuffer byteBuffer21 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int22 = serializedString1.putUnquotedUTF8(byteBuffer21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1417");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream4 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer5 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext3, outputStream4);
        com.fasterxml.jackson.core.sym.Name name6 = com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer.getEmptyName();
        int[] intArray13 = new int[] { (-1959036043), (short) 1, 0, (short) -1, 10, '4' };
        boolean boolean15 = name6.equals(intArray13, (-1));
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding16 = com.fasterxml.jackson.core.JsonEncoding.UTF16_BE;
        boolean boolean17 = name6.equals((java.lang.Object) jsonEncoding16);
        iOContext3.setEncoding(jsonEncoding16);
        byte[] byteArray19 = iOContext3.allocReadIOBuffer();
        boolean boolean20 = iOContext3.isResourceManaged();
        com.fasterxml.jackson.core.util.TextBuffer textBuffer21 = iOContext3.constructTextBuffer();
        char[] charArray22 = iOContext3.allocTokenBuffer();
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler23 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext26 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler23, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream27 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer28 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext26, outputStream27);
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding29 = com.fasterxml.jackson.core.JsonEncoding.UTF16_BE;
        iOContext26.setEncoding(jsonEncoding29);
        byte[] byteArray31 = iOContext26.allocBase64Buffer();
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper34 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, byteArray31, (-124074616), 992096462);
        char[] charArray35 = iOContext3.allocConcatBuffer();
        org.junit.Assert.assertNotNull(name6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1959036043, 1, 0, -1, 10, 52]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + jsonEncoding16 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF16_BE + "'", jsonEncoding16.equals(com.fasterxml.jackson.core.JsonEncoding.UTF16_BE));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(textBuffer21);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertTrue("'" + jsonEncoding29 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF16_BE + "'", jsonEncoding29.equals(com.fasterxml.jackson.core.JsonEncoding.UTF16_BE));
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertNotNull(charArray35);
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2778");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        mergedStream64.mark((int) (short) 10);
        mergedStream64.reset();
        com.fasterxml.jackson.core.io.SerializedString serializedString69 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int76 = serializedString69.appendQuotedUTF8(byteArray74, 0);
        char[] charArray77 = serializedString69.asQuotedChars();
        byte[] byteArray82 = new byte[] { (byte) 10, (byte) 1, (byte) 0, (byte) 100 };
        int int84 = serializedString69.appendUnquotedUTF8(byteArray82, (int) (short) 10);
        com.fasterxml.jackson.core.io.MergedStream mergedStream87 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray82, (int) ' ', 34);
        mergedStream87.mark(13);
        mergedStream87.mark(97);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[10, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3232");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        com.fasterxml.jackson.core.JsonLocation jsonLocation93 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.JsonLocation jsonLocation94 = uTF8StreamJsonParser84.getTokenLocation();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(jsonLocation93);
        org.junit.Assert.assertNotNull(jsonLocation94);
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2917");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext89 = uTF8StreamJsonParser84.getParsingContext();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser.NumberType numberType90 = uTF8StreamJsonParser84.getNumberType();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNotNull(jsonReadContext89);
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3038");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        com.fasterxml.jackson.core.ObjectCodec objectCodec92 = null;
        uTF8StreamJsonParser84.setCodec(objectCodec92);
        // The following exception was thrown during execution in test generation
        try {
            uTF8StreamJsonParser84.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2882");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec88 = uTF8StreamJsonParser84.getCodec();
        java.lang.Object obj89 = uTF8StreamJsonParser84.getTypeId();
        com.fasterxml.jackson.core.Base64Variant base64Variant90 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray91 = uTF8StreamJsonParser84.getBinaryValue(base64Variant90);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(objectCodec88);
        org.junit.Assert.assertNull(obj89);
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1395");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        java.io.Reader reader2 = null;
        com.fasterxml.jackson.core.JsonParser jsonParser3 = jsonFactory1.createParser(reader2);
        com.fasterxml.jackson.core.Version version4 = jsonFactory1.version();
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler5 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext8 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler5, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream9 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer10 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext8, outputStream9);
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding11 = com.fasterxml.jackson.core.JsonEncoding.UTF16_BE;
        iOContext8.setEncoding(jsonEncoding11);
        java.io.Reader reader14 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec15 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer16 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int18 = charsToNameCanonicalizer16.calcHash("false");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser19 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext8, (-1954973613), reader14, objectCodec15, charsToNameCanonicalizer16);
        com.fasterxml.jackson.core.util.ByteArrayBuilder byteArrayBuilder20 = readerBasedJsonParser19._getByteArrayBuilder();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator21 = jsonFactory1.createGenerator((java.io.OutputStream) byteArrayBuilder20);
        boolean boolean22 = jsonFactory1.requiresPropertyOrdering();
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes23 = jsonFactory1.getCharacterEscapes();
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes24 = jsonFactory1.getCharacterEscapes();
        org.junit.Assert.assertNotNull(jsonParser3);
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertTrue("'" + jsonEncoding11 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF16_BE + "'", jsonEncoding11.equals(com.fasterxml.jackson.core.JsonEncoding.UTF16_BE));
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer16);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 539779714 + "'", int18 == 539779714);
        org.junit.Assert.assertNotNull(byteArrayBuilder20);
        org.junit.Assert.assertNotNull(jsonGenerator21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(characterEscapes23);
        org.junit.Assert.assertNull(characterEscapes24);
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3403");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        java.lang.String str89 = uTF8StreamJsonParser84.getCurrentName();
        com.fasterxml.jackson.core.Version version90 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.FormatSchema formatSchema91 = null;
        // The following exception was thrown during execution in test generation
        try {
            uTF8StreamJsonParser84.setSchema(formatSchema91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "[Source: hi!; line: 52, column: 1]" + "'", str89, "[Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNotNull(version90);
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2838");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        com.fasterxml.jackson.core.ObjectCodec objectCodec87 = uTF8StreamJsonParser84.getCodec();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number88 = uTF8StreamJsonParser84.getNumberValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertNull(objectCodec87);
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2660");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 0, (byte) 0 };
        int int17 = serializedString1.appendUnquotedUTF8(byteArray15, (int) (short) -1);
        byte[] byteArray18 = serializedString1.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int27 = serializedString20.appendQuotedUTF8(byteArray25, 0);
        char[] charArray28 = serializedString20.asQuotedChars();
        int int30 = serializedString1.appendQuoted(charArray28, 63);
        com.fasterxml.jackson.core.JsonLocation jsonLocation34 = new com.fasterxml.jackson.core.JsonLocation((java.lang.Object) 63, (long) (short) 1, (int) (byte) -1, 0);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 1, 10, -1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3095");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        int int78 = textBuffer76.getTextOffset();
        int int79 = textBuffer76.getCurrentSegmentSize();
        textBuffer76.resetWithEmpty();
        textBuffer76.setCurrentLength((-1));
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3501");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        com.fasterxml.jackson.core.Version version90 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.JsonLocation jsonLocation91 = uTF8StreamJsonParser84.getTokenLocation();
        boolean boolean92 = uTF8StreamJsonParser84.hasCurrentToken();
        java.lang.String str94 = uTF8StreamJsonParser84.getValueAsString("");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(version90);
        org.junit.Assert.assertNotNull(jsonLocation91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3029");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        com.fasterxml.jackson.core.FormatSchema formatSchema89 = null;
        boolean boolean90 = uTF8StreamJsonParser84.canUseSchema(formatSchema89);
        int int91 = uTF8StreamJsonParser84.getTextOffset();
        // The following exception was thrown during execution in test generation
        try {
            int int93 = uTF8StreamJsonParser84.nextIntValue((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1139");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        java.io.Reader reader2 = null;
        com.fasterxml.jackson.core.JsonParser jsonParser3 = jsonFactory1.createParser(reader2);
        com.fasterxml.jackson.core.Version version4 = jsonParser3.version();
        boolean boolean6 = jsonParser3.getValueAsBoolean(false);
        boolean boolean7 = jsonParser3.canReadTypeId();
        com.fasterxml.jackson.core.ObjectCodec objectCodec8 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory9 = new com.fasterxml.jackson.core.JsonFactory(objectCodec8);
        com.fasterxml.jackson.core.JsonFactory.Feature feature10 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean12 = feature10.enabledIn(3);
        boolean boolean13 = jsonFactory9.isEnabled(feature10);
        com.fasterxml.jackson.core.JsonParser.Feature feature14 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
        com.fasterxml.jackson.core.JsonFactory jsonFactory15 = jsonFactory9.disable(feature14);
        int int16 = feature14.getMask();
        com.fasterxml.jackson.core.JsonParser jsonParser17 = jsonParser3.enable(feature14);
        com.fasterxml.jackson.core.FormatSchema formatSchema18 = jsonParser3.getSchema();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray19 = jsonParser3.getBinaryValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: UNKNOWN; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(jsonParser3);
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature10.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES + "'", feature14.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES));
        org.junit.Assert.assertNotNull(jsonFactory15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(jsonParser17);
        org.junit.Assert.assertNull(formatSchema18);
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2776");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getValueAsInt();
        int int87 = uTF8StreamJsonParser84.getValueAsInt((int) 'a');
        boolean boolean89 = uTF8StreamJsonParser84.getValueAsBoolean(true);
        // The following exception was thrown during execution in test generation
        try {
            byte byte90 = uTF8StreamJsonParser84.getByteValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 97 + "'", int87 == 97);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2972");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        com.fasterxml.jackson.core.JsonLocation jsonLocation93 = uTF8StreamJsonParser84.getTokenLocation();
        int int94 = uTF8StreamJsonParser84.getTokenLineNr();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(jsonLocation93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2581");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext1 = null;
        java.io.InputStream inputStream2 = null;
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext1, inputStream2, byteArray5, 0, (int) '#');
        com.fasterxml.jackson.core.io.IOContext iOContext10 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) inputStream2, true);
        com.fasterxml.jackson.core.io.SerializedString serializedString12 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray17 = new char[] { 'a', ' ', '#', '4' };
        int int19 = serializedString12.appendUnquoted(charArray17, 0);
        java.lang.String str20 = serializedString12.getValue();
        char[] charArray21 = serializedString12.asQuotedChars();
        byte[] byteArray22 = serializedString12.asUnquotedUTF8();
        // The following exception was thrown during execution in test generation
        try {
            iOContext10.releaseReadIOBuffer(byteArray22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Trying to release buffer not owned by the context");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 0]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str20, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3303");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        boolean boolean89 = uTF8StreamJsonParser84.hasTextCharacters();
        java.lang.String str90 = uTF8StreamJsonParser84.getValueAsString();
        boolean boolean91 = uTF8StreamJsonParser84.hasCurrentToken();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        boolean boolean93 = uTF8StreamJsonParser84.isClosed();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1272");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream4 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer5 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext3, outputStream4);
        com.fasterxml.jackson.core.ObjectCodec objectCodec7 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler8 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext11 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler8, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream12 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer13 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext11, outputStream12);
        uTF8Writer13.flush();
        java.io.Writer writer16 = uTF8Writer13.append('a');
        com.fasterxml.jackson.core.json.WriterBasedJsonGenerator writerBasedJsonGenerator17 = new com.fasterxml.jackson.core.json.WriterBasedJsonGenerator(iOContext3, (-1959034571), objectCodec7, (java.io.Writer) uTF8Writer13);
        com.fasterxml.jackson.core.io.SerializedString serializedString19 = new com.fasterxml.jackson.core.io.SerializedString("\n");
        java.lang.String str20 = serializedString19.toString();
        char[] charArray21 = new char[] {};
        int int23 = serializedString19.appendQuoted(charArray21, (int) (byte) 10);
        byte[] byteArray24 = serializedString19.asQuotedUTF8();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator25 = writerBasedJsonGenerator17.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString19);
        writerBasedJsonGenerator17.writeNumber("JSON");
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes28 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator29 = writerBasedJsonGenerator17.setCharacterEscapes(characterEscapes28);
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator29.writeRaw("UTF-8", (-1966119254), 0);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1966119254");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(writer16);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\n" + "'", str20, "\n");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[92, 110]");
        org.junit.Assert.assertNotNull(jsonGenerator25);
        org.junit.Assert.assertNotNull(jsonGenerator29);
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2913");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        char[] charArray93 = uTF8StreamJsonParser84.getTextCharacters();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext94 = uTF8StreamJsonParser84.getParsingContext();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNull(charArray93);
        org.junit.Assert.assertNotNull(jsonStreamContext94);
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3532");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        boolean boolean88 = uTF8StreamJsonParser84.isClosed();
        boolean boolean89 = uTF8StreamJsonParser84.getValueAsBoolean();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray90 = uTF8StreamJsonParser84.getBinaryValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3141");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        char[] charArray89 = uTF8StreamJsonParser84.getTextCharacters();
        java.lang.Object obj90 = uTF8StreamJsonParser84.getInputSource();
        com.fasterxml.jackson.core.JsonLocation jsonLocation91 = uTF8StreamJsonParser84.getTokenLocation();
        // The following exception was thrown during execution in test generation
        try {
            uTF8StreamJsonParser84.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNull(charArray89);
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertNotNull(jsonLocation91);
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3283");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        java.lang.Object obj88 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int89 = uTF8StreamJsonParser84.getTokenColumnNr();
        java.lang.Object obj90 = uTF8StreamJsonParser84.getTypeId();
        java.lang.Object obj91 = uTF8StreamJsonParser84.getInputSource();
        boolean boolean92 = uTF8StreamJsonParser84.hasTextCharacters();
        java.lang.String str93 = uTF8StreamJsonParser84.getCurrentName();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(obj88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "[Source: hi!; line: 52, column: 1]" + "'", str93, "[Source: hi!; line: 52, column: 1]");
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1499");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream4 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer5 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext3, outputStream4);
        com.fasterxml.jackson.core.ObjectCodec objectCodec7 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler8 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext11 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler8, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream12 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer13 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext11, outputStream12);
        uTF8Writer13.flush();
        java.io.Writer writer16 = uTF8Writer13.append('a');
        com.fasterxml.jackson.core.json.WriterBasedJsonGenerator writerBasedJsonGenerator17 = new com.fasterxml.jackson.core.json.WriterBasedJsonGenerator(iOContext3, (-1959034571), objectCodec7, (java.io.Writer) uTF8Writer13);
        com.fasterxml.jackson.core.Version version18 = writerBasedJsonGenerator17.version();
        writerBasedJsonGenerator17.writeRaw("com.fasterxml.jackson.core.JsonParseException: \n\n at [Source: CANONICALIZE_FIELD_NAMES; line: 10, column: 100]");
        com.fasterxml.jackson.core.json.JsonWriteContext jsonWriteContext21 = writerBasedJsonGenerator17.getOutputContext();
        writerBasedJsonGenerator17.writeStartObject();
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("\n");
        java.lang.String str25 = serializedString24.toString();
        int int26 = serializedString24.charLength();
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext30 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream31 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer32 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext30, outputStream31);
        byte[] byteArray33 = iOContext30.allocReadIOBuffer();
        int int35 = serializedString24.appendQuotedUTF8(byteArray33, 3);
        writerBasedJsonGenerator17.writeFieldName((com.fasterxml.jackson.core.SerializableString) serializedString24);
        int int37 = writerBasedJsonGenerator17.getHighestEscapedChar();
        writerBasedJsonGenerator17.writeNull();
        org.junit.Assert.assertNotNull(writer16);
        org.junit.Assert.assertNotNull(version18);
        org.junit.Assert.assertNotNull(jsonWriteContext21);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\n" + "'", str25, "\n");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3373");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        com.fasterxml.jackson.core.ObjectCodec objectCodec87 = uTF8StreamJsonParser84.getCodec();
        java.lang.String str88 = uTF8StreamJsonParser84.getValueAsString();
        java.lang.String str90 = uTF8StreamJsonParser84.getValueAsString("?");
        java.lang.String str91 = uTF8StreamJsonParser84.getText();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertNull(objectCodec87);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "?" + "'", str90, "?");
        org.junit.Assert.assertNull(str91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2944");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        java.lang.Object obj88 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int89 = uTF8StreamJsonParser84.getTokenColumnNr();
        java.lang.Object obj90 = uTF8StreamJsonParser84.getTypeId();
        java.lang.Object obj91 = uTF8StreamJsonParser84.getInputSource();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonToken jsonToken92 = uTF8StreamJsonParser84.nextToken();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(obj88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertNull(obj91);
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2989");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        com.fasterxml.jackson.core.JsonToken jsonToken89 = uTF8StreamJsonParser84.getLastClearedToken();
        java.lang.String str90 = uTF8StreamJsonParser84.getValueAsString();
        com.fasterxml.jackson.core.JsonParser.Feature feature91 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser jsonParser92 = uTF8StreamJsonParser84.enable(feature91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNull(jsonToken89);
        org.junit.Assert.assertNull(str90);
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3508");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        double double88 = uTF8StreamJsonParser84.getValueAsDouble((double) 63);
        char[] charArray89 = uTF8StreamJsonParser84.getTextCharacters();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Boolean boolean90 = uTF8StreamJsonParser84.nextBooleanValue();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 63.0d + "'", double88 == 63.0d);
        org.junit.Assert.assertNull(charArray89);
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3419");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        int int78 = textBuffer76.getTextOffset();
        boolean boolean79 = textBuffer76.hasTextAsCharacters();
        textBuffer76.releaseBuffers();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2670");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        char[] charArray25 = new char[] { '#', '#', 'a', 'a', ' ', '#' };
        boolean boolean29 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray25, (int) (byte) -1, 0, true);
        int int31 = serializedString1.appendUnquoted(charArray25, (-1));
        java.lang.String str32 = serializedString1.toString();
        java.nio.ByteBuffer byteBuffer33 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int34 = serializedString1.putUnquotedUTF8(byteBuffer33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "##aa #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "##aa #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[#, #, a, a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str32, "com.fasterxml.jackson.core.JsonParseException: ");
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2995");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext91 = uTF8StreamJsonParser84.getParsingContext();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str92 = uTF8StreamJsonParser84.nextTextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNotNull(jsonStreamContext91);
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2893");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int27 = serializedString20.appendQuotedUTF8(byteArray25, 0);
        char[] charArray28 = serializedString20.asQuotedChars();
        boolean boolean29 = serializedString1.equals((java.lang.Object) serializedString20);
        int int30 = serializedString1.charLength();
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 47 + "'", int30 == 47);
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1484");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream4 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer5 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext3, outputStream4);
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding6 = com.fasterxml.jackson.core.JsonEncoding.UTF16_BE;
        iOContext3.setEncoding(jsonEncoding6);
        java.io.Reader reader9 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec10 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer11 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int13 = charsToNameCanonicalizer11.calcHash("false");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser14 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, (-1954973613), reader9, objectCodec10, charsToNameCanonicalizer11);
        int int15 = readerBasedJsonParser14.getTextOffset();
        java.lang.String str16 = readerBasedJsonParser14.getText();
        com.fasterxml.jackson.core.JsonLocation jsonLocation17 = readerBasedJsonParser14.getTokenLocation();
        java.lang.String str18 = readerBasedJsonParser14.getCurrentName();
        java.lang.Object obj19 = readerBasedJsonParser14.getTypeId();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext20 = readerBasedJsonParser14.getParsingContext();
        readerBasedJsonParser14.close();
        char[] charArray22 = readerBasedJsonParser14.getTextCharacters();
        long long24 = readerBasedJsonParser14.getValueAsLong((long) 1859143052);
        java.lang.String str25 = readerBasedJsonParser14.getText();
        int int26 = readerBasedJsonParser14.getTokenColumnNr();
        com.fasterxml.jackson.core.Base64Variant base64Variant27 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray28 = readerBasedJsonParser14.getBinaryValue(base64Variant27);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: -1; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + jsonEncoding6 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF16_BE + "'", jsonEncoding6.equals(com.fasterxml.jackson.core.JsonEncoding.UTF16_BE));
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 312091712 + "'", int13 == 312091712);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(jsonLocation17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(jsonStreamContext20);
        org.junit.Assert.assertNull(charArray22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1859143052L + "'", long24 == 1859143052L);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3088");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter21.withSpacesInObjectEntries();
        com.fasterxml.jackson.core.SerializableString serializableString24 = defaultPrettyPrinter21._rootSeparator;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter25 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.SerializableString serializableString26 = defaultPrettyPrinter21._rootSeparator;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator27 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.writeEndObject(jsonGenerator27, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
        org.junit.Assert.assertNotNull(serializableString24);
        org.junit.Assert.assertNotNull(indenter25);
        org.junit.Assert.assertNotNull(serializableString26);
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3044");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        com.fasterxml.jackson.core.io.IOContext iOContext4 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray8 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream11 = new com.fasterxml.jackson.core.io.MergedStream(iOContext4, inputStream5, byteArray8, 0, (int) '#');
        long long13 = mergedStream11.skip((long) (short) 1);
        int int14 = mergedStream11.available();
        mergedStream11.mark((int) (short) 1);
        com.fasterxml.jackson.core.JsonLocation jsonLocation23 = new com.fasterxml.jackson.core.JsonLocation((java.lang.Object) "hi!", 0L, (long) (-1), (int) '4', (int) (byte) 1);
        com.fasterxml.jackson.core.JsonParseException jsonParseException24 = new com.fasterxml.jackson.core.JsonParseException("com.fasterxml.jackson.core.JsonParseException: ", jsonLocation23);
        com.fasterxml.jackson.core.io.SerializedString serializedString26 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int33 = serializedString26.appendQuotedUTF8(byteArray31, 0);
        byte[] byteArray34 = serializedString26.asUnquotedUTF8();
        boolean boolean35 = jsonLocation23.equals((java.lang.Object) byteArray34);
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, (java.io.InputStream) mergedStream11, byteArray34, (int) (byte) 0, (int) ' ');
        com.fasterxml.jackson.core.util.TextBuffer textBuffer39 = iOContext3.constructTextBuffer();
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 34 + "'", int14 == 34);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(textBuffer39);
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2900");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.ObjectCodec objectCodec86 = uTF8StreamJsonParser84.getCodec();
        uTF8StreamJsonParser84.overrideCurrentName("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        // The following exception was thrown during execution in test generation
        try {
            int int89 = uTF8StreamJsonParser84.getIntValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNull(objectCodec86);
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3496");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getValueAsInt();
        int int87 = uTF8StreamJsonParser84.getValueAsInt((int) 'a');
        boolean boolean89 = uTF8StreamJsonParser84.getValueAsBoolean(true);
        com.fasterxml.jackson.core.JsonToken jsonToken90 = uTF8StreamJsonParser84.getCurrentToken();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext91 = uTF8StreamJsonParser84.getParsingContext();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext92 = uTF8StreamJsonParser84.getParsingContext();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 97 + "'", int87 == 97);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNull(jsonToken90);
        org.junit.Assert.assertNotNull(jsonStreamContext91);
        org.junit.Assert.assertNotNull(jsonStreamContext92);
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3025");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        boolean boolean89 = uTF8StreamJsonParser84.hasTextCharacters();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger90 = uTF8StreamJsonParser84.getBigIntegerValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2537");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        byte[] byteArray15 = null;
        iOContext12.releaseWriteEncodingBuffer(byteArray15);
        com.fasterxml.jackson.core.io.SerializedString serializedString18 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray23 = new char[] { 'a', ' ', '#', '4' };
        int int25 = serializedString18.appendUnquoted(charArray23, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString27 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray32 = new char[] { 'a', ' ', '#', '4' };
        int int34 = serializedString27.appendUnquoted(charArray32, 0);
        boolean boolean35 = serializedString18.equals((java.lang.Object) serializedString27);
        char[] charArray36 = serializedString18.asQuotedChars();
        // The following exception was thrown during execution in test generation
        try {
            iOContext12.releaseTokenBuffer(charArray36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Trying to release buffer not owned by the context");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1483");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler1 = jsonFactory0._getBufferRecycler();
        com.fasterxml.jackson.core.JsonParser jsonParser3 = jsonFactory0.createJsonParser("[Source: INTERN_FIELD_NAMES; line: 10, column: -1]");
        com.fasterxml.jackson.core.JsonFactory jsonFactory4 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.JsonParser.Feature feature5 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
        com.fasterxml.jackson.core.JsonFactory jsonFactory6 = jsonFactory4.disable(feature5);
        com.fasterxml.jackson.core.JsonParser.Feature feature7 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
        boolean boolean8 = jsonFactory6.isEnabled(feature7);
        com.fasterxml.jackson.core.JsonFactory jsonFactory9 = jsonFactory0.disable(feature7);
        com.fasterxml.jackson.core.JsonGenerator.Feature feature10 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        com.fasterxml.jackson.core.JsonFactory jsonFactory12 = jsonFactory0.configure(feature10, true);
        com.fasterxml.jackson.core.io.OutputDecorator outputDecorator13 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory14 = jsonFactory12.setOutputDecorator(outputDecorator13);
        java.lang.String str15 = jsonFactory14.getRootValueSeparator();
        org.junit.Assert.assertNotNull(bufferRecycler1);
        org.junit.Assert.assertNotNull(jsonParser3);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS + "'", feature5.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS));
        org.junit.Assert.assertNotNull(jsonFactory6);
        org.junit.Assert.assertTrue("'" + feature7 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES + "'", feature7.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(jsonFactory9);
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature10.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertNotNull(jsonFactory12);
        org.junit.Assert.assertNotNull(jsonFactory14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + " " + "'", str15, " ");
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3098");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextLength();
        boolean boolean86 = uTF8StreamJsonParser84.canReadTypeId();
        int int87 = uTF8StreamJsonParser84.getTextOffset();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean88 = uTF8StreamJsonParser84.getBooleanValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not of boolean type? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2923");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonToken jsonToken88 = uTF8StreamJsonParser84.getCurrentToken();
        uTF8StreamJsonParser84.clearCurrentToken();
        int int90 = uTF8StreamJsonParser84.getTextOffset();
        // The following exception was thrown during execution in test generation
        try {
            long long91 = uTF8StreamJsonParser84.getLongValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(jsonToken88);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3263");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonToken jsonToken88 = uTF8StreamJsonParser84.getCurrentToken();
        uTF8StreamJsonParser84.clearCurrentToken();
        int int90 = uTF8StreamJsonParser84.getTextOffset();
        // The following exception was thrown during execution in test generation
        try {
            int int91 = uTF8StreamJsonParser84.getIntValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(jsonToken88);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3066");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.getTextBuffer();
        boolean boolean78 = textBuffer76.hasTextAsCharacters();
        char[] charArray79 = null;
        // The following exception was thrown during execution in test generation
        try {
            textBuffer76.append(charArray79, (int) (short) 0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNull(charArray77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3324");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        com.fasterxml.jackson.core.Version version90 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.JsonLocation jsonLocation91 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.Version version92 = uTF8StreamJsonParser84.version();
        long long93 = uTF8StreamJsonParser84.getValueAsLong();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(version90);
        org.junit.Assert.assertNotNull(jsonLocation91);
        org.junit.Assert.assertNotNull(version92);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3356");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        boolean boolean93 = uTF8StreamJsonParser84.getValueAsBoolean(true);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1308");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream4 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer5 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext3, outputStream4);
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding6 = com.fasterxml.jackson.core.JsonEncoding.UTF16_BE;
        iOContext3.setEncoding(jsonEncoding6);
        java.io.Reader reader9 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec10 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer11 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int13 = charsToNameCanonicalizer11.calcHash("false");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser14 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, (-1954973613), reader9, objectCodec10, charsToNameCanonicalizer11);
        int int15 = readerBasedJsonParser14.getTextOffset();
        readerBasedJsonParser14.close();
        com.fasterxml.jackson.core.JsonToken jsonToken17 = readerBasedJsonParser14.nextToken();
        boolean boolean18 = readerBasedJsonParser14.canReadTypeId();
        com.fasterxml.jackson.core.JsonLocation jsonLocation19 = readerBasedJsonParser14.getTokenLocation();
        com.fasterxml.jackson.core.ObjectCodec objectCodec20 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory21 = new com.fasterxml.jackson.core.JsonFactory(objectCodec20);
        java.io.InputStream inputStream22 = null;
        com.fasterxml.jackson.core.JsonParser jsonParser23 = jsonFactory21.createJsonParser(inputStream22);
        com.fasterxml.jackson.core.JsonFactory.Feature feature24 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean26 = feature24.enabledIn(4);
        com.fasterxml.jackson.core.JsonFactory jsonFactory27 = jsonFactory21.disable(feature24);
        boolean boolean28 = jsonLocation19.equals((java.lang.Object) jsonFactory27);
        org.junit.Assert.assertTrue("'" + jsonEncoding6 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF16_BE + "'", jsonEncoding6.equals(com.fasterxml.jackson.core.JsonEncoding.UTF16_BE));
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1981935728) + "'", int13 == (-1981935728));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(jsonToken17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jsonLocation19);
        org.junit.Assert.assertNotNull(jsonParser23);
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature24.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(jsonFactory27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3550");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter21.withSpacesInObjectEntries();
        com.fasterxml.jackson.core.SerializableString serializableString24 = defaultPrettyPrinter21._rootSeparator;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter25 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.SerializableString serializableString26 = defaultPrettyPrinter21._rootSeparator;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator27 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.beforeObjectEntries(jsonGenerator27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
        org.junit.Assert.assertNotNull(serializableString24);
        org.junit.Assert.assertNotNull(indenter25);
        org.junit.Assert.assertNotNull(serializableString26);
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3389");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        java.lang.Object obj89 = uTF8StreamJsonParser84.getObjectId();
        java.lang.Object obj90 = uTF8StreamJsonParser84.getObjectId();
        int int92 = uTF8StreamJsonParser84.getValueAsInt((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            uTF8StreamJsonParser84.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNull(obj89);
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2783");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        com.fasterxml.jackson.core.io.SerializedString serializedString3 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray8 = new char[] { 'a', ' ', '#', '4' };
        int int10 = serializedString3.appendUnquoted(charArray8, 0);
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 0, (byte) 0 };
        int int19 = serializedString3.appendUnquotedUTF8(byteArray17, (int) (short) -1);
        char[] charArray26 = new char[] { '#', '#', 'a', 'a', ' ', '#' };
        boolean boolean30 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray26, (int) (byte) -1, 0, true);
        int int32 = serializedString3.appendUnquoted(charArray26, 100);
        int int34 = serializedString1.appendUnquoted(charArray26, (int) '#');
        boolean boolean38 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray26, (int) (byte) 1, 0, true);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal41 = com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(charArray26, 0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: Bad offset or len arguments for char[] input.");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 1, 10, -1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "##aa #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "##aa #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[#, #, a, a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1046");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream4 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer5 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext3, outputStream4);
        com.fasterxml.jackson.core.ObjectCodec objectCodec7 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler8 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext11 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler8, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream12 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer13 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext11, outputStream12);
        uTF8Writer13.flush();
        java.io.Writer writer16 = uTF8Writer13.append('a');
        com.fasterxml.jackson.core.json.WriterBasedJsonGenerator writerBasedJsonGenerator17 = new com.fasterxml.jackson.core.json.WriterBasedJsonGenerator(iOContext3, (-1959034571), objectCodec7, (java.io.Writer) uTF8Writer13);
        com.fasterxml.jackson.core.Version version18 = writerBasedJsonGenerator17.version();
        writerBasedJsonGenerator17.writeRaw("com.fasterxml.jackson.core.JsonParseException: \n\n at [Source: CANONICALIZE_FIELD_NAMES; line: 10, column: 100]");
        com.fasterxml.jackson.core.json.JsonWriteContext jsonWriteContext21 = writerBasedJsonGenerator17.getOutputContext();
        writerBasedJsonGenerator17.writeStartObject();
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("\n");
        java.lang.String str25 = serializedString24.toString();
        int int26 = serializedString24.charLength();
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext30 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream31 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer32 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext30, outputStream31);
        byte[] byteArray33 = iOContext30.allocReadIOBuffer();
        int int35 = serializedString24.appendQuotedUTF8(byteArray33, 3);
        writerBasedJsonGenerator17.writeFieldName((com.fasterxml.jackson.core.SerializableString) serializedString24);
        int int37 = serializedString24.charLength();
        org.junit.Assert.assertNotNull(writer16);
        org.junit.Assert.assertNotNull(version18);
        org.junit.Assert.assertNotNull(jsonWriteContext21);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\n" + "'", str25, "\n");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2862");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getValueAsInt();
        int int87 = uTF8StreamJsonParser84.getValueAsInt((int) 'a');
        boolean boolean89 = uTF8StreamJsonParser84.getValueAsBoolean(true);
        com.fasterxml.jackson.core.JsonToken jsonToken90 = uTF8StreamJsonParser84.getCurrentToken();
        // The following exception was thrown during execution in test generation
        try {
            uTF8StreamJsonParser84.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 97 + "'", int87 == 97);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNull(jsonToken90);
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3031");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        int int89 = uTF8StreamJsonParser84.getValueAsInt();
        java.lang.Object obj90 = uTF8StreamJsonParser84.getEmbeddedObject();
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        // The following exception was thrown during execution in test generation
        try {
            uTF8StreamJsonParser84.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertNull(obj91);
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3585");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        com.fasterxml.jackson.core.io.SerializedString serializedString3 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray8 = new char[] { 'a', ' ', '#', '4' };
        int int10 = serializedString3.appendUnquoted(charArray8, 0);
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 0, (byte) 0 };
        int int19 = serializedString3.appendUnquotedUTF8(byteArray17, (int) (short) -1);
        char[] charArray26 = new char[] { '#', '#', 'a', 'a', ' ', '#' };
        boolean boolean30 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray26, (int) (byte) -1, 0, true);
        int int32 = serializedString3.appendUnquoted(charArray26, 100);
        int int34 = serializedString1.appendUnquoted(charArray26, (int) '#');
        boolean boolean38 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray26, (int) (byte) 1, 0, true);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal39 = com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(charArray26);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 1, 10, -1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "##aa #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "##aa #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[#, #, a, a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2788");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        java.lang.Object obj88 = uTF8StreamJsonParser84.getEmbeddedObject();
        com.fasterxml.jackson.core.FormatSchema formatSchema89 = uTF8StreamJsonParser84.getSchema();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser.NumberType numberType90 = uTF8StreamJsonParser84.getNumberType();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(obj88);
        org.junit.Assert.assertNull(formatSchema89);
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1057");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.ObjectCodec objectCodec1 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory2 = new com.fasterxml.jackson.core.JsonFactory(objectCodec1);
        java.io.Reader reader3 = null;
        com.fasterxml.jackson.core.JsonParser jsonParser4 = jsonFactory2.createParser(reader3);
        com.fasterxml.jackson.core.Version version5 = jsonParser4.version();
        boolean boolean7 = jsonParser4.getValueAsBoolean(false);
        boolean boolean8 = jsonParser4.canReadTypeId();
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory10 = new com.fasterxml.jackson.core.JsonFactory(objectCodec9);
        com.fasterxml.jackson.core.JsonFactory.Feature feature11 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean13 = feature11.enabledIn(3);
        boolean boolean14 = jsonFactory10.isEnabled(feature11);
        com.fasterxml.jackson.core.JsonParser.Feature feature15 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
        com.fasterxml.jackson.core.JsonFactory jsonFactory16 = jsonFactory10.disable(feature15);
        int int17 = feature15.getMask();
        com.fasterxml.jackson.core.JsonParser jsonParser18 = jsonParser4.enable(feature15);
        com.fasterxml.jackson.core.io.IOContext iOContext20 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) feature15, false);
        com.fasterxml.jackson.core.io.IOContext iOContext23 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) 1200638206, true);
        org.junit.Assert.assertNotNull(jsonParser4);
        org.junit.Assert.assertNotNull(version5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature11.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES + "'", feature15.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES));
        org.junit.Assert.assertNotNull(jsonFactory16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertNotNull(jsonParser18);
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3342");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getValueAsInt();
        int int87 = uTF8StreamJsonParser84.getValueAsInt((int) 'a');
        java.lang.String str89 = uTF8StreamJsonParser84.getValueAsString("[Source: hi!; line: 52, column: 1]");
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonToken jsonToken90 = uTF8StreamJsonParser84.nextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 97 + "'", int87 == 97);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "[Source: hi!; line: 52, column: 1]" + "'", str89, "[Source: hi!; line: 52, column: 1]");
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3370");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        boolean boolean92 = uTF8StreamJsonParser84.isClosed();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2721");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonToken jsonToken88 = uTF8StreamJsonParser84.getCurrentToken();
        com.fasterxml.jackson.core.Base64Variant base64Variant89 = null;
        java.io.OutputStream outputStream90 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int91 = uTF8StreamJsonParser84.readBinaryValue(base64Variant89, outputStream90);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(jsonToken88);
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3468");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        long long90 = uTF8StreamJsonParser84.getValueAsLong(0L);
        boolean boolean92 = uTF8StreamJsonParser84.getValueAsBoolean(false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Boolean boolean93 = uTF8StreamJsonParser84.nextBooleanValue();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1188");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream4 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer5 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext3, outputStream4);
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding6 = com.fasterxml.jackson.core.JsonEncoding.UTF16_BE;
        iOContext3.setEncoding(jsonEncoding6);
        java.io.Reader reader9 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec10 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer11 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int13 = charsToNameCanonicalizer11.calcHash("false");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser14 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, (-1954973613), reader9, objectCodec10, charsToNameCanonicalizer11);
        int int15 = readerBasedJsonParser14.getTextOffset();
        java.lang.String str16 = readerBasedJsonParser14.getText();
        com.fasterxml.jackson.core.JsonLocation jsonLocation17 = readerBasedJsonParser14.getTokenLocation();
        java.lang.String str18 = readerBasedJsonParser14.getCurrentName();
        java.lang.Object obj19 = readerBasedJsonParser14.getTypeId();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext20 = readerBasedJsonParser14.getParsingContext();
        readerBasedJsonParser14.close();
        char[] charArray22 = readerBasedJsonParser14.getTextCharacters();
        long long24 = readerBasedJsonParser14.getValueAsLong((long) 1859143052);
        java.lang.String str25 = readerBasedJsonParser14.getText();
        com.fasterxml.jackson.core.Base64Variant base64Variant26 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray27 = readerBasedJsonParser14.getBinaryValue(base64Variant26);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: -1; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + jsonEncoding6 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF16_BE + "'", jsonEncoding6.equals(com.fasterxml.jackson.core.JsonEncoding.UTF16_BE));
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1355290920 + "'", int13 == 1355290920);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(jsonLocation17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(jsonStreamContext20);
        org.junit.Assert.assertNull(charArray22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1859143052L + "'", long24 == 1859143052L);
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3159");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        int int89 = uTF8StreamJsonParser84.getValueAsInt();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger90 = uTF8StreamJsonParser84.getBigIntegerValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3282");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        java.lang.Object obj88 = uTF8StreamJsonParser84.getEmbeddedObject();
        java.lang.String str90 = uTF8StreamJsonParser84.getValueAsString("");
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger91 = uTF8StreamJsonParser84.getBigIntegerValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(obj88);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3371");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.getTextBuffer();
        boolean boolean78 = textBuffer76.hasTextAsCharacters();
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray79 = textBuffer76.expandCurrentSegment();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNull(charArray77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3526");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonToken jsonToken88 = uTF8StreamJsonParser84.getCurrentToken();
        uTF8StreamJsonParser84.clearCurrentToken();
        uTF8StreamJsonParser84.overrideCurrentName("[Source: #; line: 1, column: 1]");
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger92 = uTF8StreamJsonParser84.getBigIntegerValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(jsonToken88);
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3597");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonToken jsonToken88 = uTF8StreamJsonParser84.getCurrentToken();
        uTF8StreamJsonParser84.clearCurrentToken();
        int int90 = uTF8StreamJsonParser84.getTextOffset();
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.FormatSchema formatSchema92 = uTF8StreamJsonParser84.getSchema();
        com.fasterxml.jackson.core.Version version93 = uTF8StreamJsonParser84.version();
        double double94 = uTF8StreamJsonParser84.getValueAsDouble();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(jsonToken88);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNull(formatSchema92);
        org.junit.Assert.assertNotNull(version93);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d);
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2727");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        int int89 = uTF8StreamJsonParser84.getTextOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number90 = uTF8StreamJsonParser84.getNumberValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2758");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 0, (byte) 0 };
        int int17 = serializedString1.appendUnquotedUTF8(byteArray15, (int) (short) -1);
        char[] charArray24 = new char[] { '#', '#', 'a', 'a', ' ', '#' };
        boolean boolean28 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray24, (int) (byte) -1, 0, true);
        int int30 = serializedString1.appendUnquoted(charArray24, 100);
        byte[] byteArray31 = serializedString1.asQuotedUTF8();
        byte[] byteArray32 = serializedString1.asQuotedUTF8();
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 1, 10, -1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "##aa #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "##aa #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[#, #, a, a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1389");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("\n");
        int int2 = serializedString1.charLength();
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler3 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext6 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler3, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream7 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer8 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext6, outputStream7);
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding9 = com.fasterxml.jackson.core.JsonEncoding.UTF16_BE;
        iOContext6.setEncoding(jsonEncoding9);
        java.io.Reader reader12 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec13 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer14 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int16 = charsToNameCanonicalizer14.calcHash("false");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser17 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext6, (-1954973613), reader12, objectCodec13, charsToNameCanonicalizer14);
        java.lang.String str18 = readerBasedJsonParser17.nextTextValue();
        com.fasterxml.jackson.core.util.ByteArrayBuilder byteArrayBuilder19 = readerBasedJsonParser17._getByteArrayBuilder();
        int int20 = serializedString1.writeUnquotedUTF8((java.io.OutputStream) byteArrayBuilder19);
        boolean boolean22 = serializedString1.equals((java.lang.Object) 0.0f);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + jsonEncoding9 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF16_BE + "'", jsonEncoding9.equals(com.fasterxml.jackson.core.JsonEncoding.UTF16_BE));
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer14);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 342397720 + "'", int16 == 342397720);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(byteArrayBuilder19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2997");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        char[] charArray25 = new char[] { '#', '#', 'a', 'a', ' ', '#' };
        boolean boolean29 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray25, (int) (byte) -1, 0, true);
        int int31 = serializedString1.appendUnquoted(charArray25, (-1));
        int int32 = serializedString1.charLength();
        java.io.OutputStream outputStream33 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int34 = serializedString1.writeQuotedUTF8(outputStream33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "##aa #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "##aa #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[#, #, a, a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 47 + "'", int32 == 47);
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3555");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        com.fasterxml.jackson.core.JsonToken jsonToken89 = uTF8StreamJsonParser84.getLastClearedToken();
        // The following exception was thrown during execution in test generation
        try {
            float float90 = uTF8StreamJsonParser84.getFloatValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNull(jsonToken89);
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1209");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonFactory.Feature feature2 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean4 = feature2.enabledIn(3);
        boolean boolean5 = jsonFactory1.isEnabled(feature2);
        com.fasterxml.jackson.core.ObjectCodec objectCodec6 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = new com.fasterxml.jackson.core.JsonFactory(objectCodec6);
        com.fasterxml.jackson.core.JsonFactory.Feature feature8 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean10 = feature8.enabledIn(3);
        boolean boolean11 = jsonFactory7.isEnabled(feature8);
        com.fasterxml.jackson.core.JsonParser.Feature feature12 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
        com.fasterxml.jackson.core.JsonFactory jsonFactory13 = jsonFactory7.disable(feature12);
        com.fasterxml.jackson.core.JsonFactory jsonFactory14 = jsonFactory1.disable(feature12);
        java.lang.String str15 = jsonFactory1.getFormatName();
        java.io.InputStream inputStream16 = null;
        com.fasterxml.jackson.core.JsonParser jsonParser17 = jsonFactory1.createParser(inputStream16);
        long long18 = jsonParser17.getValueAsLong();
        java.lang.Object obj19 = jsonParser17.getTypeId();
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature2.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature8.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES + "'", feature12.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES));
        org.junit.Assert.assertNotNull(jsonFactory13);
        org.junit.Assert.assertNotNull(jsonFactory14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "JSON" + "'", str15, "JSON");
        org.junit.Assert.assertNotNull(jsonParser17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNull(obj19);
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2763");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.JsonToken jsonToken87 = uTF8StreamJsonParser84.getCurrentToken();
        com.fasterxml.jackson.core.Base64Variant base64Variant88 = null;
        java.io.OutputStream outputStream89 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int90 = uTF8StreamJsonParser84.readBinaryValue(base64Variant88, outputStream89);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(jsonToken87);
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3186");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec88 = uTF8StreamJsonParser84.getCodec();
        int int89 = uTF8StreamJsonParser84.getTextOffset();
        boolean boolean90 = uTF8StreamJsonParser84.isExpectedStartArrayToken();
        // The following exception was thrown during execution in test generation
        try {
            long long92 = uTF8StreamJsonParser84.nextLongValue((long) 97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(objectCodec88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2898");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter24 = defaultPrettyPrinter23.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter25 = defaultPrettyPrinter24.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator26 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter25.writeEndObject(jsonGenerator26, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter24);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter25);
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2719");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        int int89 = uTF8StreamJsonParser84.getTextOffset();
        // The following exception was thrown during execution in test generation
        try {
            double double90 = uTF8StreamJsonParser84.getDoubleValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2855");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        com.fasterxml.jackson.core.Version version87 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.JsonParser.Feature feature88 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser jsonParser90 = uTF8StreamJsonParser84.configure(feature88, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertNotNull(version87);
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3183");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter24 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter25 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter21);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator26 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.writeStartArray(jsonGenerator26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter24);
    }
}
